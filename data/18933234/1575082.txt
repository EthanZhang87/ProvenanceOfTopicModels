title: JSON
id: 1575082
JSON JavaScript Object Notation pronounced or is an open standard file format and data interchange format that uses human readable text to store and transmit data objects consisting of attribute value pairs and arrays or other serializable values It is a commonly used data format with diverse uses in electronic data interchange including that of web applications with servers br JSON is a language independent data format It was derived from JavaScript but many modern programming languages include code to generate and parse JSON format data JSON filenames use the extension json br Douglas Crockford originally specified the JSON format in the early s He and Chip Morningstar sent the first JSON message in April br br br Naming and pronunciation br The international standard ECMA and ISO IEC specifies that JSON is pronounced as in Jason and The Argonauts The first edition of ECMA did not address the pronunciation The UNIX and Linux System Administration Handbook states Douglas Crockford who named and promoted the JSON format says it s pronounced like the name Jason But somehow JAY sawn seems to have become more common in the technical community Crockford said in There s a lot of argument about how you pronounce that but I strictly don t care br br br Standards br After RFC had been available as its informational specification since JSON was first standardized in as ECMA RFC published in is the current version of the Internet Standard STD and it remains consistent with ECMA That same year JSON was also standardized as ISO IEC The ECMA and ISO IEC standards describe only the allowed syntax whereas the RFC covers some security and interoperability considerations br br br History br br JSON grew out of a need for a real time server to browser session communication protocol without using browser plugins such as Flash or Java applets the dominant methods used in the early s br Crockford first specified and popularized the JSON format The acronym originated at State Software a company cofounded by Crockford and others in March The cofounders agreed to build a system that used standard browser capabilities and provided an abstraction layer for Web developers to create stateful Web applications that had a persistent duplex connection to a Web server by holding two Hypertext Transfer Protocol HTTP connections open and recycling them before standard browser time outs if no further data were exchanged The cofounders had a round table discussion and voted on whether to call the data format JSML JavaScript Markup Language or JSON JavaScript Object Notation as well as under what license type to make it available The JSON org website was launched in In December Yahoo began offering some of its Web services in JSON br A precursor to the JSON libraries was used in a children s digital asset trading game project named Cartoon Orbit at Communities com the State cofounders had all worked at this company previously for Cartoon Network which used a browser side plug in with a proprietary messaging format to manipulate DHTML elements this system is also owned by DO Upon discovery of early Ajax capabilities digiGroups Noosh and others used frames to pass information into the user browsers visual field without refreshing a Web application s visual context realizing real time rich Web applications using only the standard HTTP HTML and JavaScript capabilities of Netscape and Internet Explorer Crockford then found that JavaScript could be used as an object based messaging format for such a system The system was sold to Sun Microsystems Amazon com and EDS br JSON was based on a subset of the JavaScript scripting language specifically Standard ECMA rd Edition December and is commonly used with JavaScript but it is a language independent data format Code for parsing and generating JSON data is readily available in many programming languages JSON s website lists JSON libraries by language br In October Ecma International published the first edition of its JSON standard ECMA That same year RFC used ECMA as a reference In RFC became the main reference for JSON s Internet uses superseding RFC and RFC but preserving ECMA and ECMA as main references In November ISO IEC JTC SC published ISO IEC as an international standard On December the Internet Engineering Task Force obsoleted RFC when it published RFC which is the current version of the Internet Standard STD br Crockford added a clause to the JSON license stating The Software shall be used for Good not Evil in order to open source the JSON libraries while mocking corporate lawyers and those who are overly pedantic On the other hand this clause led to license compatibility problems of the JSON license with other open source licenses since open source software and free software usually imply no restrictions on the purpose of use br br br Syntax br The following example shows a possible JSON representation describing a person br br br Character encoding br Although Crockford originally asserted that JSON is a strict subset of JavaScript and ECMAScript his specification actually allows valid JSON documents that are not valid JavaScript JSON allows the Unicode line terminators U LINE SEPARATOR and U PARAGRAPH SEPARATOR to appear unescaped in quoted strings while ECMAScript and older do not This is a consequence of JSON disallowing only control characters For maximum portability these characters should be backslash escaped br JSON exchange in an open ecosystem must be encoded in UTF The encoding supports the full Unicode character set including those characters outside the Basic Multilingual Plane U to U FFFF However if escaped those characters must be written using UTF surrogate pairs For example to include the Emoji character U F NEUTRAL FACE in JSON br br JSON became a strict subset of ECMAScript as of the language s revision br br br Data types br JSON s basic data types are br br Number a signed decimal number that may contain a fractional part and may use exponential E notation but cannot include non numbers such as NaN The format makes no distinction between integer and floating point JavaScript uses IEEE double precision floating point format for all its numeric values later also supporting BigInt but other languages implementing JSON may encode numbers differently br String a sequence of zero or more Unicode characters Strings are delimited with double quotation marks and support a backslash escaping syntax br Boolean either of the values true or false br Array an ordered list of zero or more elements each of which may be of any type Arrays use square bracket notation with comma separated elements br Object a collection of name value pairs where the names also called keys are strings The current ECMA standard states The JSON syntax does not impose any restrictions on the strings used as names does not require that name strings be unique and does not assign any significance to the ordering of name value pairs Objects are delimited with curly brackets and use commas to separate each pair while within each pair the colon character separates the key or name from its value br null an empty value using the word null br Whitespace is allowed and ignored around or between syntactic elements values and punctuation but not within a string value Four specific characters are considered whitespace for this purpose space horizontal tab line feed and carriage return In particular the byte order mark must not be generated by a conforming implementation though it may be accepted when parsing JSON JSON does not provide syntax for comments br Early versions of JSON such as specified by RFC required that a valid JSON text must consist of only an object or an array type which could contain other types within them This restriction was dropped in RFC where a JSON text was redefined as any serialized value br Numbers in JSON are agnostic with regard to their representation within programming languages While this allows for numbers of arbitrary precision to be serialized it may lead to portability issues For example since no differentiation is made between integer and floating point values some implementations may treat and E as the same number while others may not The JSON standard makes no requirements regarding implementation details such as overflow underflow loss of precision rounding or signed zeros but it does recommend expecting no more than IEEE binary precision for good interoperability There is no inherent precision loss in serializing a machine level binary representation of a floating point number like binary into a human readable decimal representation like numbers in JSON and back since there exist published algorithms to do this exactly and optimally br Comments were intentionally excluded from JSON In Douglas Crockford described his design decision thus I removed comments from JSON because I saw people were using them to hold parsing directives a practice which would have destroyed interoperability br JSON disallows trailing commas a comma after the last value inside a data structure Trailing commas are a common feature of JSON derivatives to improve ease of use br br br Interoperability br RFC describes certain aspects of JSON syntax that while legal per the specifications can cause interoperability problems br br Certain JSON implementations only accept JSON texts representing an object or an array For interoperability applications interchanging JSON should transmit messages that are objects or arrays br The specifications allow JSON objects that contain multiple members with the same name The behavior of implementations processing objects with duplicate names is unpredictable For interoperability applications should avoid duplicate names when transmitting JSON objects br The specifications specifically say that the order of members in JSON objects is not significant For interoperability applications should avoid assigning meaning to member ordering even if the parsing software makes that ordering visible br While the specifications place no limits on the magnitude or precisions of JSON number literals the widely used JavaScript implementation stores them as IEEE binary quantities For interoperability applications should avoid transmitting numbers that cannot be represented in this way for example E or br While the specifications do not constrain the character encoding of the Unicode characters in a JSON text the vast majority of implementations assume UTF encoding for interoperability applications should always and only encode JSON messages in UTF br The specifications do not forbid transmitting byte sequences that incorrectly represent Unicode characters For interoperability applications should transmit messages containing no such byte sequences br The specification does not constrain how applications go about comparing Unicode strings For interoperability applications should always perform such comparisons code unit by code unit br In the IETF published RFC describing the I JSON Message Format a restricted profile of JSON that constrains the syntax and processing of JSON to avoid as much as possible these interoperability issues br br br Semantics br While JSON provides a syntactic framework for data interchange unambiguous data interchange also requires agreement between producer and consumer on the semantics of specific use of the JSON syntax One example of where such an agreement is necessary is the serialization of data types that are not part of the JSON standard for example dates and regular expressions br br br Metadata and schema br The official MIME type for JSON text is application json and most modern implementations have adopted this Legacy MIME types include text json text x json and text javascript br JSON Schema specifies a JSON based format to define the structure of JSON data for validation documentation and interaction control It provides a contract for the JSON data required by a given application and how that data can be modified JSON Schema is based on the concepts from XML Schema XSD but is JSON based As in XSD the same serialization deserialization tools can be used both for the schema and data and it is self describing It is specified in an Internet Draft at the IETF with the latest version as of being Draft There are several validators available for different programming languages each with varying levels of conformance The standard filename extension is json br The JSON standard does not support object references but an IETF draft standard for JSON based object references exists br br br Uses br JSON RPC is a remote procedure call RPC protocol built on JSON as a replacement for XML RPC or SOAP It is a simple protocol that defines only a handful of data types and commands JSON RPC lets a system send notifications information to the server that does not require a response and multiple calls to the server that can be answered out of order br Asynchronous JavaScript and JSON or AJAJ refers to the same dynamic web page methodology as Ajax but instead of XML JSON is the data format AJAJ is a web development technique that provides for the ability of a web page to request new data after it has loaded into the web browser Typically it renders new data from the server in response to user actions on that web page For example what the user types into a search box client side code then sends to the server which immediately responds with a drop down list of matching database items br JSON has seen ad hoc usage as a configuration language However it does not support comments br In Douglas Crockford JSON creator had this to say about comments in JSON when used as a configuration language I know that the lack of comments makes some people sad but it shouldn t Suppose you are using JSON to keep configuration files which you would like to annotate Go ahead and insert all the comments you like Then pipe it through JSMin before handing it to your JSON parser br MongoDB uses JSON like data for its document oriented database br Some relational databases such as PostgreSQL and MySQL have added support for native JSON data types This allows developers to store JSON data directly in a relational database without having to convert it to another data format br br br Safety br JSON being a subset of JavaScript can lead to the misconception that it is safe to pass JSON texts to the JavaScript eval function This is not safe due to certain valid JSON texts specifically those containing U LINE SEPARATOR or U PARAGRAPH SEPARATOR not being valid JavaScript code until JavaScript specifications were updated in and so older engines may not support it To avoid the many pitfalls caused by executing arbitrary code from the Internet a new function JSON parse was first added to the fifth edition of ECMAScript which as of is supported by all major browsers For non supported browsers an API compatible JavaScript library is provided by Douglas Crockford In addition the TC proposal Subsume JSON made ECMAScript a strict JSON superset as of the language s revision br Various JSON parser implementations have suffered from denial of service attack and mass assignment vulnerability br br br Alternatives br br JSON is promoted as a low overhead alternative to XML as both of these formats have widespread support for creation reading and decoding in the real world situations where they are commonly used Apart from XML examples could include CSV and supersets of JSON Google Protocol Buffers can fill this role although it is not a data interchange language CBOR has a superset of the JSON data types but it is not text based br br br XML br br XML has been used to describe structured data and to serialize objects Various XML based protocols exist to represent the same kind of data structures as JSON for the same kind of data interchange purposes Data can be encoded in XML in several ways The most expansive form using tag pairs results in a much larger in character count representation than JSON but if data is stored in attributes and short tag form where the closing tag is replaced with the representation is often about the same size as JSON or just a little larger However an XML attribute can only have a single value and each attribute can appear at most once on each element br XML separates data from metadata via the use of elements and attributes while JSON does not have such a concept br Another key difference is the addressing of values JSON has objects with a simple key to value mapping whereas in XML addressing happens on nodes which all receive a unique ID via the XML processor Additionally the XML standard defines a common attribute xml id that can be used by the user to set an ID explicitly br XML tag names cannot contain any of the characters nor a space character and cannot begin with or a numeric digit whereas JSON keys can even if quotation mark and backslash must be escaped br XML values are strings of characters with no built in type safety XML has the concept of schema that permits strong typing user defined types predefined tags and formal structure allowing for formal validation of an XML stream JSON has several types built in and has a similar schema concept in JSON Schema br XML supports comments while JSON does not br br br Supersets br Support for comments and other features have been deemed useful which has led to several nonstandard JSON supersets being created Among them are HJSON HOCON and JSON which despite its name is not the fifth version of JSON br br br YAML br br YAML version is a superset of JSON prior versions were not strictly compatible For example escaping a slash with a backslash is valid in JSON but was not valid in YAML YAML supports comments while JSON does not br br br CSON br CSON CoffeeScript Object Notation uses significant indentation unquoted keys and assumes an outer object declaration It was used for configuring GitHub s Atom text editor br There is also an unrelated project called CSON Cursive Script Object Notation that is more syntactically similar to JSON br br br HOCON br HOCON Human Optimized Config Object Notation is a format for human readable data and a superset of JSON br The uses of HOCON are br br It is primarily used in conjunction with the Play framework and is developed by Lightbend br It is also supported as a configuration format for NET projects via Akka NET and Puppet br TIBCO Streaming HOCON is the primary configuration file format for the TIBCO Streaming family of products StreamBase LiveView and Artifact Management Server as of TIBCO Streaming Release br It is also the primary configuration file format for several subsystems of Exabeam Advanced Analytics br Jitsi uses it as the new config system and properties Files as fallback br br br JSON br JSON JSON Data Interchange Format is an extension of JSON syntax that just like JSON is also valid JavaScript syntax The specification was started in and finished in with version The main differences to JSON syntax are br br Optional trailing commas br Unquoted object keys br Single quoted and multiline strings br Additional number formats br Comments br JSON syntax is supported in some software as an extension of JSON syntax for instance in SQLite br br br JSONC br JSONC JSON with Comments is a subset of JSON used in Microsoft s Visual Studio Code br br supports single line comments and block comments br accepts trailing commas but they are discouraged and the editor will display a warning br br br Derivatives br Several serialization formats have been built on or from the JSON specification Examples include br br GeoJSON a format designed for representing simple geographical features br JSON LD a method of encoding linked data using JSON br JSON RPC a remote procedure call protocol encoded in JSON br JsonML a lightweight markup language used to map between XML and JSON br Smile data interchange format br UBJSON a binary computer data interchange format imitating JSON but requiring fewer bytes of data br br br See also br BSON br Comparison of data serialization formats br Amazon Ion a superset of JSON br Jackson API br jaql a functional data processing and query language most commonly used for JSON query processing br jq a JSON query language and high level programming language br JSONiq a JSON oriented query and processing language based on XQuery br JSON streaming br S expression br br br Notes br br br br br br External links br br Official website