title: Machine code
id: 20683
In computer programming machine code is computer code consisting of machine language instructions which are used to control a computer s central processing unit CPU Although decimal computers were once common the contemporary marketplace is dominated by binary computers for those computers machine code is the binary representation of a computer program which is actually read and interpreted by the computer A program in machine code consists of a sequence of machine instructions possibly interspersed with data br Each instruction causes the CPU to perform a very specific task such as a load a store a jump or an arithmetic logic unit ALU operation on one or more units of data in the CPU s registers or memory br Early CPUs had specific machine code that might break backward compatibility with each new CPU released The notion of an instruction set architecture ISA defines and specifies the behavior and encoding in memory of the instruction set of the system without specifying its exact implementation This acts as an abstraction layer enabling compatibility within the same family of CPUs so that machine code written or generated according to the ISA for the family will run on all CPUs in the family including future CPUs br In general each architecture family e g x ARM has its own ISA and hence its own specific machine code language There are exceptions such as the VAX architecture which included optional support of the PDP instruction set and IA which included optional support of the IA instruction set Another example is the PowerPC a processor designed to natively process both PowerPC and x instructions br Machine code is a strictly numerical language and is the lowest level interface to the CPU intended for a programmer Assembly language provides a direct mapping between the numerical machine code and a human readable version where numerical opcodes and operands are replaced by readable strings e g x as the NOP instruction on x with xB being the MOV instruction xE meaning CALL or x F standing for the SYSCALL instruction While it is possible to write programs directly in machine code managing individual bits and calculating numerical addresses and constants manually is tedious and error prone For this reason programs are very rarely written directly in machine code in modern contexts but may be done for low level debugging program patching especially when assembler source is not available and assembly language disassembly br The majority of practical programs today are written in higher level languages Those programs are either translated into machine code by a compiler or are interpreted by an interpreter usually after being translated into an intermediate code such as a bytecode that is then interpreted br Machine code is by definition the lowest level of programming detail visible to the programmer but internally many processors use microcode or optimize and transform machine code instructions into sequences of micro ops Microcode and micro ops are not generally considered to be machine code except on some machines the user cannot write microcode or micro ops and the operation of microcode and the transformation of machine code instructions into micro ops happens transparently to the programmer except for performance related side effects br br br Instruction set br br Every processor or processor family has its own instruction set Instructions are patterns of bits digits or characters that correspond to machine commands Thus the instruction set is specific to a class of processors using mostly the same architecture Successor or derivative processor designs often include instructions of a predecessor and may add new additional instructions Occasionally a successor design will discontinue or alter the meaning of some instruction code typically because it is needed for new purposes affecting code compatibility to some extent even compatible processors may show slightly different behavior for some instructions but this is rarely a problem Systems may also differ in other details such as memory arrangement operating systems or peripheral devices Because a program normally relies on such factors different systems will typically not run the same machine code even when the same type of processor is used br A processor s instruction set may have fixed length or variable length instructions How the patterns are organized varies with the particular architecture and type of instruction Most instructions have one or more opcode fields that specify the basic instruction type such as arithmetic logical jump etc the operation such as add or compare and other fields that may give the type of the operand s the addressing mode s the addressing offset s or index or the operand value itself such constant operands contained in an instruction are called immediate br Not all machines or individual instructions have explicit operands On a machine with a single accumulator the accumulator is implicitly both the left operand and result of most arithmetic instructions Some other architectures such as the x architecture have accumulator versions of common instructions with the accumulator regarded as one of the general registers by longer instructions A stack machine has most or all of its operands on an implicit stack Special purpose instructions also often lack explicit operands for example CPUID in the x architecture writes values into four implicit destination registers This distinction between explicit and implicit operands is important in code generators especially in the register allocation and live range tracking parts A good code optimizer can track implicit as well as explicit operands which may allow more frequent constant propagation constant folding of registers a register assigned the result of a constant expression freed up by replacing it by that constant and other code enhancements br br br Programs br A computer program is a list of instructions that can be executed by a central processing unit CPU A program s execution is done in order for the CPU that is executing it to solve a problem and thus accomplish a result While simple processors are able to execute instructions one after another superscalar processors are able under certain circumstances when the pipeline is full of executing two or more instructions simultaneously As an example the original Intel Pentium from can execute at most two instructions per clock cycle when its pipeline is full br Program flow may be influenced by special jump instructions that transfer execution to an address and hence instruction other than the next numerically sequential address Whether these conditional jumps occur is dependent upon a condition such as a value being greater than less than or equal to another value br br br Assembly languages br br A much more human friendly rendition of machine language called assembly language uses mnemonic codes to refer to machine code instructions rather than using the instructions numeric values directly and uses symbolic names to refer to storage locations and sometimes registers For example on the Zilog Z processor the machine code which causes the CPU to decrement the B general purpose register would be represented in assembly language as DEC B br br br Example br The MIPS architecture provides a specific example for a machine code whose instructions are always bits long The general type of instruction is given by the op operation field the highest bits J type jump and I type immediate instructions are fully specified by op R type register instructions include an additional field funct to determine the exact operation The fields used in these types are br br bits br op rs rt rd shamt funct R type br op rs rt address immediate I type br op target address J type br br rs rt and rd indicate register operands shamt gives a shift amount and the address or immediate fields contain an operand directly br For example adding the registers and and placing the result in register is encoded br br op rs rt rd shamt funct br decimal br binary br br Load a value into register taken from the memory cell cells after the location listed in register br br op rs rt address immediate br decimal br binary br br Jumping to the address br br op target address br decimal br binary br br br Overlapping instructions br On processor architectures with variable length instruction sets such as Intel s x processor family it is within the limits of the control flow resynchronizing phenomenon known as the Kruskal count sometimes possible through opcode level programming to deliberately arrange the resulting code so that two code paths share a common fragment of opcode sequences These are called overlapping instructions overlapping opcodes overlapping code overlapped code instruction scission or jump into the middle of an instruction and represent a form of superposition br In the s and s overlapping instructions were sometimes used to preserve memory space One example were in the implementation of error tables in Microsoft s Altair BASIC where interleaved instructions mutually shared their instruction bytes The technique is rarely used today but might still be necessary to resort to in areas where extreme optimization for size is necessary on byte level such as in the implementation of boot loaders which have to fit into boot sectors br It is also sometimes used as a code obfuscation technique as a measure against disassembly and tampering br The principle is also utilized in shared code sequences of fat binaries which must run on multiple instruction set incompatible processor platforms br This property is also used to find unintended instructions called gadgets in existing code repositories and is utilized in return oriented programming as alternative to code injection for exploits such as return to libc attacks br br br Relationship to microcode br In some computers the machine code of the architecture is implemented by an even more fundamental underlying layer called microcode providing a common machine language interface across a line or family of different models of computer with widely different underlying dataflows This is done to facilitate porting of machine language programs between different models An example of this use is the IBM System family of computers and their successors With dataflow path widths of bits to bits and beyond they nevertheless present a common architecture at the machine language level across the entire line br Using microcode to implement an emulator enables the computer to present the architecture of an entirely different computer The System line used this to allow porting programs from earlier IBM machines to the new family of computers e g an IBM emulator on the IBM S model br br br Relationship to bytecode br Machine code is generally different from bytecode also known as p code which is either executed by an interpreter or itself compiled into machine code for faster direct execution An exception is when a processor is designed to use a particular bytecode directly as its machine code such as is the case with Java processors br Machine code and assembly code are sometimes called native code when referring to platform dependent parts of language features or libraries br br br Storing in memory br From the point of view of the CPU machine code is stored in RAM but is typically also kept in a set of caches for performance reasons There may be different caches for instructions and data depending on the architecture br The CPU knows what machine code to execute based on its internal program counter The program counter points to a memory address and is changed based on special instructions which may cause programmatic branches The program counter is typically set to a hard coded value when the CPU is first powered on and will hence execute whatever machine code happens to be at this address br Similarly the program counter can be set to execute whatever machine code is at some arbitrary address even if this is not valid machine code This will typically trigger an architecture specific protection fault br The CPU is oftentimes told by page permissions in a paging based system if the current page actually holds machine code by an execute bit pages have multiple such permission bits readable writable etc for various housekeeping functionality E g on Unix like systems memory pages can be toggled to be executable with the mprotect system call and on Windows VirtualProtect can be used to achieve a similar result If an attempt is made to execute machine code on a non executable page an architecture specific fault will typically occur Treating data as machine code or finding new ways to use existing machine code by various techniques is the basis of some security vulnerabilities br Similarly in a segment based system segment descriptors can indicate whether a segment can contain executable code and in what rings that code can run br From the point of view of a process the code space is the part of its address space where the code in execution is stored In multitasking systems this comprises the program s code segment and usually shared libraries In multi threading environment different threads of one process share code space along with data space which reduces the overhead of context switching considerably as compared to process switching br br br Readability by humans br Various tools and methods exist to decode machine code back to its corresponding source code br Machine code can easily be decoded back to its corresponding assembly language source code because assembly language forms a one to one mapping to machine code The assembly language decoding method is called disassembly br Machine code may be decoded back to its corresponding high level language under two conditions br The first condition is to accept an obfuscated reading of the source code An obfuscated version of source code is displayed if the machine code is sent to a decompiler of the source language br The second condition requires the machine code to have information about the source code encoded within The information includes a symbol table that contains debug symbols The symbol table may be stored within the executable or it may exist in separate files A debugger can then read the symbol table to help the programmer interactively debug the machine code in execution br br The SHARE Operating System for the IBM IBM and IBM computers allowed for an loadable code format called SQUOZE SQUOZE was a compressed binary form of assembly language code and included a symbol table br Modern IBM mainframe operating systems such as z OS have available a symbol table called Associated data ADATA The table is stored in a file that can be produced by the IBM High Level Assembler HLASM IBM s COBOL compiler and IBM s PL I compiler br Microsoft Windows has available a symbol table that is stored in a program database pdb file br Most Unix like operating systems have available symbol table formats called STABS and DWARF In macOS and other Darwin based operating systems the debug symbols are stored in DWARF format in a separate dSYM file br br br See also br br Assembly language br Endianness br List of machine languages br Machine code monitor br Overhead code br P code machine br Reduced instruction set computing RISC br Very long instruction word br Teaching Machine Code Micro Professor MPF I br br br Notes br br br br br br Further reading br Hennessy John L Patterson David A Computer Organization and Design The Hardware Software Interface Morgan Kaufmann Publishers ISBN X br Tanenbaum Andrew S Structured Computer Organization Prentice Hall ISBN br Brookshear J Glenn Computer Science An Overview Addison Wesley ISBN 