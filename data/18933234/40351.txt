title: The Cathedral and the Bazaar
id: 40351
The Cathedral and the Bazaar Musings on Linux and Open Source by an Accidental Revolutionary abbreviated CatB is an essay and later a book by Eric S Raymond on software engineering methods based on his observations of the Linux kernel development process and his experiences managing an open source project fetchmail It examines the struggle between top down and bottom up design The essay was first presented by Raymond at the Linux Kongress on May in W rzburg Germany and was published as the second chapter of the same titled book in br The illustration on the cover of the book is a painting by Lyubov Popova titled Composition with Figures and belongs to the collection of the State Tretyakov Gallery The book was released under the Open Publication License v in br br br Central thesis br The essay contrasts two different free software development models br br The Cathedral model in which source code is available with each software release but code developed between releases is restricted to an exclusive group of software developers GNU Emacs and GCC were presented as examples br The Bazaar model in which the code is developed over the Internet in view of the public Raymond credits Linus Torvalds leader of the Linux kernel project as the inventor of this process Raymond also provides anecdotal accounts of his own implementation of this model for the Fetchmail project br The essay s central thesis is Raymond s proposition that given enough eyeballs all bugs are shallow which he terms Linus s law the more widely available the source code is for public testing scrutiny and experimentation the more rapidly all forms of bugs will be discovered In contrast Raymond claims that an inordinate amount of time and energy must be spent hunting for bugs in the Cathedral model since the working version of the code is available only to a few developers br br br Lessons for creating good open source software br Raymond points to lessons learned from various software development efforts each describing attributes associated with good practice in open source software development br br Every good work of software starts by scratching a developer s personal itch br Good programmers know what to write Great ones know what to rewrite and reuse br Plan to throw one version away you will anyhow copied from Frederick Brooks s The Mythical Man Month br If you have the right attitude interesting problems will find you br When you lose interest in a program your last duty to it is to hand it off to a competent successor br Treating your users as co developers is your least hassle route to rapid code improvement and effective debugging br Release early Release often And listen to your customers br Given a large enough beta tester and co developer base almost every problem will be characterized quickly and the fix obvious to someone br Smart data structures and dumb code works a lot better than the other way around br If you treat your beta testers as if they re your most valuable resource they will respond by becoming your most valuable resource br The next best thing to having good ideas is recognizing good ideas from your users Sometimes the latter is better br Often the most striking and innovative solutions come from realizing that your concept of the problem was wrong br Perfection in design is achieved not when there is nothing more to add but rather when there is nothing more to take away Attributed to Antoine de Saint Exup ry br Any tool should be useful in the expected way but a truly great tool lends itself to uses you never expected br When writing gateway software of any kind take pains to disturb the data stream as little as possible and never throw away information unless the recipient forces you to br When your language is nowhere near Turing complete syntactic sugar can be your friend br A security system is only as secure as its secret Beware of pseudo secrets br To solve an interesting problem start by finding a problem that is interesting to you br Provided the development coordinator has a communications medium at least as good as the Internet and knows how to lead without coercion many heads are inevitably better than one br br br Legacy and reception br In the essay helped the final push for Netscape Communications Corporation to release the source code for Netscape Communicator and start the Mozilla project it was cited by Frank Hecker and other employees as an outside independent validation of his arguments Netscape s public recognition of this influence brought Raymond renown in hacker culture br When O Reilly Media published the book in it became one of if not the first complete commercially distributed books published under the Open Publication License br Marshall Poe in his essay The Hive likens Wikipedia to the Bazaar model that Raymond defines Jimmy Wales himself was inspired by the work as well as arguments put forward in pre Internet works such as Friedrich Hayek s article The Use of Knowledge in Society arguing that It opened my eyes to the possibility of mass collaboration br In Nikolai Bezroukov published two critical essays on Eric Raymond s views of open source software the second one called A second look at The Cathedral and the Bazaar They produced a sharp response from Eric Raymond br br br See also br GNU Bazaar a distributed version control system named to highlight its relation with the bazaar model br Homesteading the Noosphere br br br Notes br br br br br br External links br br Official website br Roberts Russ January Eric Raymond on Hacking Open Source and The Cathedral and the Bazaar EconTalk Library of Economics and Liberty 