title: GNU Debugger
id: 13052
The GNU Debugger GDB is a portable debugger that runs on many Unix like systems and works for many programming languages including Ada Assembly C C D Fortran Haskell Go Objective C OpenCL C Modula Pascal Rust and partially others br br br History br GDB was first written by Richard Stallman in as part of his GNU system after his GNU Emacs was reasonably stable GDB is free software released under the GNU General Public License GPL It was modeled after the DBX debugger which came with Berkeley Unix distributions br From to it was maintained by John Gilmore Now it is maintained by the GDB Steering Committee which is appointed by the Free Software Foundation br br br Technical details br br br Features br GDB offers extensive facilities for tracing and altering the execution of computer programs The user can monitor and modify the values of programs internal variables and even call functions independently of the program s normal behavior br GDB target processors as of include Alpha ARM AVR H Altera Nios Nios II System System X and its bit extension X IA Itanium Motorola MIPS PA RISC PowerPC SuperH SPARC and VAX Lesser known target processors supported in the standard release have included A K ARC ETRAX CRIS D V D V FR FR V Intel i HC Motorola MCORE MN MN NS K Stormy and Z Newer releases will likely not support some of these GDB has compiled in simulators for even lesser known target processors such like M R or V br GDB is still actively being developed As of version new features include support for Python scripting and as of version GNU Guile scripting as well Since version support for reversible debugging allowing a debugging session to step backward much like rewinding a crashed program to see what happened is available br br br Remote debugging br GDB offers a remote mode often used when debugging embedded systems Remote operation is when GDB runs on one machine and the program being debugged runs on another GDB can communicate to the remote stub that understands GDB protocol through a serial device or TCP IP A stub program can be created by linking to the appropriate stub files provided with GDB which implement the target side of the communication protocol Alternatively gdbserver can be used to remotely debug the program without needing to change it in any way br The same mode is also used by KGDB for debugging a running Linux kernel on the source level with gdb With KGDB kernel developers can debug a kernel in much the same way as they debug application programs It makes it possible to place breakpoints in kernel code step through the code and observe variables On architectures where hardware debugging registers are available watchpoints can be set which trigger breakpoints when specified memory addresses are executed or accessed KGDB requires an additional machine which is connected to the machine to be debugged using a serial cable or Ethernet On FreeBSD it is also possible to debug using FireWire direct memory access DMA br br br Graphical user interface br The debugger does not contain its own graphical user interface and defaults to a command line interface although it does contain a text user interface Several front ends have been built for it such as UltraGDB Xxgdb Data Display Debugger DDD Nemiver KDbg the Xcode debugger GDBtk Insight Seer and HP Wildebeest Debugger GUI WDB GUI IDEs such as Codelite Code Blocks Dev C Geany GNAT Programming Studio GPS KDevelop Qt Creator Lazarus MonoDevelop Eclipse NetBeans and Visual Studio can interface with GDB GNU Emacs has a GUD mode and tools for Vim exist e g clewn These offer facilities similar to debuggers found in IDEs br Some other debugging tools have been designed to work with GDB such as memory leak detectors br br br Internals br GDB uses a system call named ptrace the name is an abbreviation of process trace to observe and control the execution of another process and examine and change the process memory and registers br br A breakpoint is implemented by replacing an instruction at a given memory address with another special instruction Executing breakpoint instruction causes SIGTRAP br br br Examples of commands br br br An example session br Consider the following source code written in C br br Using the GCC compiler on Linux the code above must be compiled using the g flag in order to include appropriate debug information on the binary generated thus making it possible to inspect it using GDB Assuming that the file containing the code above is named example c the command for the compilation could be br br And the binary can now be run br br Since the example code when executed generates a segmentation fault GDB can be used to inspect the problem br br The problem is present in line and occurs when calling the function strlen because its argument s is NULL br Depending on the implementation of strlen inline or not the output can be different e g br br To fix the problem the variable a in the function main must contain a valid string Here is a fixed version of the code br br Recompiling and running the executable again inside GDB now gives a correct result br br GDB prints the output of printf in the screen and then informs the user that the program exited normally br br br See also br br Binary File Descriptor library libbfd br dbx br DDD a GUI for GDB and other debuggers br gdbserver br LLDB br br br br br br External links br Official website br UltraGDB Visual C C Debugging with GDB on Windows and Linux Archived at the Wayback Machine br KGDB Linux Kernel Source Level Debugger br The website for MyGDB GDB Frontend in the Korean language br A Visual Studio plugin for debugging with GDB br Comparison of GDB front ends br Using Eclipse as a Front End to the GDB Debugger br br br Documentation br Richard M Stallman Roland Pesch Stan Shebs et al Debugging with GDB Free Software Foundation ISBN br GDB Internals br br br Tutorials br RMS s gdb Tutorial Ryan Michael Schmidt not Richard Matthew Stallman br GDB Tutorial