title: GNU Compiler Collection
id: 12323
The GNU Compiler Collection GCC is a collection of compilers from the GNU Project that support various programming languages hardware architectures and operating systems The Free Software Foundation FSF distributes GCC as free software under the GNU General Public License GNU GPL GCC is a key component of the GNU toolchain which is used for most projects related to GNU and the Linux kernel With roughly million lines of code in GCC is one of the largest free programs in existence It has played an important role in the growth of free software as both a tool and an example br When it was first released in by Richard Stallman GCC was named the GNU C Compiler since it only handled the C programming language It was extended to compile C in December of that year Front ends were later developed for Objective C Objective C Fortran Ada D Go and Rust among others The OpenMP and OpenACC specifications are also supported in the C and C compilers br GCC has been ported to more platforms and instruction set architectures than any other compiler and is widely deployed as a tool in the development of both free and proprietary software GCC is also available for many embedded systems including ARM based and Power ISA based chips br As well as being the official compiler of the GNU operating system GCC has been adopted as the standard compiler by many other modern Unix like computer operating systems including most Linux distributions Most BSD family operating systems also switched to GCC shortly after its release although since then FreeBSD and Apple macOS have moved to the Clang compiler largely due to licensing reasons GCC can also compile code for Windows Android iOS Solaris HP UX AIX and DOS br br br History br In late in an effort to bootstrap the GNU operating system Richard Stallman asked Andrew S Tanenbaum the author of the Amsterdam Compiler Kit also known as the Free University Compiler Kit for permission to use that software for GNU When Tanenbaum advised him that the compiler was not free and that only the university was free Stallman decided to work on a different compiler His initial plan was to rewrite an existing compiler from Lawrence Livermore National Laboratory from Pastel to C with some help from Len Tower and others Stallman wrote a new C front end for the Livermore compiler but then realized that it required megabytes of stack space an impossibility on a Unix system with only KB and concluded he would have to write a new compiler from scratch None of the Pastel compiler code ended up in GCC though Stallman did use the C front end he had written br GCC was first released March available by FTP from MIT Stallman was listed as the author but cited others for their contributions including Tower for parts of the parser RTL generator RTL definitions and of the Vax machine description Jack Davidson and Christopher W Fraser for the idea of using RTL as an intermediate language and Paul Rubin for writing most of the preprocessor Described as the first free software hit by Peter H Salus the GNU compiler arrived just at the time when Sun Microsystems was unbundling its development tools from its operating system selling them separately at a higher combined price than the previous bundle which led many of Sun s users to buy or download GCC instead of the vendor s tools While Stallman considered GNU Emacs as his main project by GCC supported thirteen computer architectures was outperforming several vendor compilers and was used commercially by several companies br br br EGCS fork br As GCC was licensed under the GPL programmers wanting to work in other directions particularly those writing interfaces for languages other than C were free to develop their own fork of the compiler provided they meet the GPL s terms including its requirements to distribute source code Multiple forks proved inefficient and unwieldy however and the difficulty in getting work accepted by the official GCC project was greatly frustrating for many as the project favored stability over new features The FSF kept such close control on what was added to the official version of GCC x developed since that GCC was used as one example of the cathedral development model in Eric S Raymond s essay The Cathedral and the Bazaar br In a group of developers formed the Experimental Enhanced GNU Compiler System EGCS to merge several experimental forks into a single project The basis of the merger was a development snapshot of GCC taken around the and later followed up to release Mergers included g Fortran PGCC P Pentium optimized GCC many C improvements and many new architectures and operating system variants br While both projects followed each other s changes closely EGCS development proved considerably more vigorous so much so that the FSF officially halted development on their GCC x compiler blessed EGCS as the official version of GCC and appointed the EGCS project as the GCC maintainers in April With the release of GCC in July the two projects were once again united GCC has since been maintained by a varied group of programmers from around the world under the direction of a steering committee br GCC removed a front end for CHILL due to a lack of maintenance br Before version the Fortran front end was g which only supported FORTRAN but later was dropped in favor of the new GNU Fortran front end that supports Fortran and large parts of Fortran and Fortran as well br As of version GCC is implemented in C br Support for Cilk Plus existed from GCC to GCC br GCC has been ported to a wide variety of instruction set architectures and is widely deployed as a tool in the development of both free and proprietary software GCC is also available for many embedded systems including Symbian called gcce ARM based and Power ISA based chips The compiler can target a wide variety of platforms including video game consoles such as the PlayStation Cell SPE of PlayStation and Dreamcast It has been ported to more kinds of processors and operating systems than any other compiler br br br Supported languages br As of the release GCC includes front ends for C gcc C g Objective C and Objective C Fortran gfortran Ada GNAT Go gccgo D gdc since and Modula gm since programming languages with the OpenMP and OpenACC parallel language extensions being supported since GCC Versions prior to GCC also supported Java gcj allowing compilation of Java to native machine code br Regarding language version support for C and C since GCC the default target is gnu a superset of C and gnu a superset of C with strict standard support also available GCC also provides experimental support for C and C br Third party front ends exist for many languages such as Pascal gpc Modula and VHDL GHDL A few experimental branches exist to support additional languages such as the GCC UPC compiler for Unified Parallel C or Rust br br br Design br br GCC s external interface follows Unix conventions Users invoke a language specific driver program gcc for C g for C etc which interprets command arguments calls the actual compiler runs the assembler on the output and then optionally runs the linker to produce a complete executable binary br Each of the language compilers is a separate program that reads source code and outputs machine code All have a common internal structure A per language front end parses the source code in that language and produces an abstract syntax tree tree for short br These are if necessary converted to the middle end s input representation called GENERIC form the middle end then gradually transforms the program towards its final form Compiler optimizations and static code analysis techniques such as FORTIFY SOURCE a compiler directive that attempts to discover some buffer overflows are applied to the code These work on multiple representations mostly the architecture independent GIMPLE representation and the architecture dependent RTL representation Finally machine code is produced using architecture specific pattern matching originally based on an algorithm of Jack Davidson and Chris Fraser br GCC was written primarily in C except for parts of the Ada front end The distribution includes the standard libraries for Ada and C whose code is mostly written in those languages On some platforms the distribution also includes a low level runtime library libgcc written in a combination of machine independent C and processor specific machine code designed primarily to handle arithmetic operations that the target processor cannot perform directly br GCC uses many additional tools in its build many of which are installed by default by many Unix and Linux distributions but which normally aren t present in Windows installations including Perl Flex Bison and other common tools In addition it currently requires three additional libraries to be present in order to build GMP MPC and MPFR br In May the GCC steering committee decided to allow use of a C compiler to compile GCC The compiler was intended to be written mostly in C plus a subset of features from C In particular this was decided so that GCC s developers could use the destructors and generics features of C br In August the GCC steering committee announced that GCC now uses C as its implementation language This means that to build GCC from sources a C compiler is required that understands ISO IEC C standard br On May GCC moved away from ISO IEC C standard to ISO IEC C standard i e needed to compile bootstrap the compiler itself by default it however compiles later versions of C br br br Front ends br br Each front end uses a parser to produce the abstract syntax tree of a given source file Due to the syntax tree abstraction source files of any of the different supported languages can be processed by the same back end GCC started out using LALR parsers generated with Bison but gradually switched to hand written recursive descent parsers for C in and for C and Objective C in As of all front ends use hand written recursive descent parsers br Until GCC the tree representation of the program was not fully independent of the processor being targeted The meaning of a tree was somewhat different for different language front ends and front ends could provide their own tree codes This was simplified with the introduction of GENERIC and GIMPLE two new forms of language independent trees that were introduced with the advent of GCC GENERIC is more complex based on the GCC x Java front end s intermediate representation GIMPLE is a simplified GENERIC in which various constructs are lowered to multiple GIMPLE instructions The C C and Java front ends produce GENERIC directly in the front end Other front ends instead have different intermediate representations after parsing and convert these to GENERIC br In either case the so called gimplifier then converts this more complex form into the simpler SSA based GIMPLE form that is the common language for a large number of powerful language and architecture independent global function scope optimizations br br br GENERIC and GIMPLE br GENERIC is an intermediate representation language used as a middle end while compiling source code into executable binaries A subset called GIMPLE is targeted by all the front ends of GCC br The middle stage of GCC does all of the code analysis and optimization working independently of both the compiled language and the target architecture starting from the GENERIC representation and expanding it to register transfer language RTL The GENERIC representation contains only the subset of the imperative programming constructs optimized by the middle end br In transforming the source code to GIMPLE complex expressions are split into a three address code using temporary variables This representation was inspired by the SIMPLE representation proposed in the McCAT compiler by Laurie J Hendren for simplifying the analysis and optimization of imperative programs br br br Optimization br Optimization can occur during any phase of compilation however the bulk of optimizations are performed after the syntax and semantic analysis of the front end and before the code generation of the back end thus a common though somewhat self contradictory name for this part of the compiler is the middle end br The exact set of GCC optimizations varies from release to release as it develops but includes the standard algorithms such as loop optimization jump threading common subexpression elimination instruction scheduling and so forth The RTL optimizations are of less importance with the addition of global SSA based optimizations on GIMPLE trees as RTL optimizations have a much more limited scope and have less high level information br Some of these optimizations performed at this level include dead code elimination partial redundancy elimination global value numbering sparse conditional constant propagation and scalar replacement of aggregates Array dependence based optimizations such as automatic vectorization and automatic parallelization are also performed Profile guided optimization is also possible br br br C Standard Library libstdc br The GCC project includes an implementation of the C Standard Library called libstdc licensed under the GPLv License with an exception to link non GPL applications when sources are built with GCC br br br Other features br Some features of GCC include br br Link time optimization br Link time optimization optimizes across object file boundaries to directly improve the linked binary Link time optimization relies on an intermediate file containing the serialization of some Gimple representation included in the object file The file is generated alongside the object file during source compilation Each source compilation generates a separate object file and link time helper file When the object files are linked the compiler is executed again and uses the helper files to optimize code across the separately compiled object files br Plugins br Plugins extend the GCC compiler directly Plugins allow a stock compiler to be tailored to specific needs by external code loaded as plugins For example plugins can add replace or even remove middle end passes operating on Gimple representations Several GCC plugins have already been published notably br The Python plugin which links against libpython and allows one to invoke arbitrary Python scripts from inside the compiler The aim is to allow GCC plugins to be written in Python br The MELT plugin provides a high level Lisp like language to extend GCC br The support of plugins was once a contentious issue in br C transactional memory br The C language has an active proposal for transactional memory It can be enabled in GCC and newer when compiling with fgnu tm br Unicode identifiers br Although the C language requires support for non ASCII Unicode characters in identifiers the feature has only been supported since GCC As with the existing handling of string literals the source file is assumed to be encoded in UTF The feature is optional in C but has been made available too since this change br C extensions br GNU C extends the C programming language with several non standard features including nested functions and typeof expressions br br br Architectures br br The primary supported and best tested processor families are and bit ARM and bit x and x and bit PowerPC and SPARC br GCC target processor families as of version include br br Lesser known target processors supported in the standard release have included br br Additional processors have been supported by GCC versions maintained separately from the FSF version br br The GCJ Java compiler can target either a native machine language architecture or the Java virtual machine s Java bytecode When retargeting GCC to a new platform bootstrapping is often used Motorola Zilog Z and other processors are also targeted in the GCC versions developed for various Texas Instruments Hewlett Packard Sharp and Casio programmable graphing calculators br br br License br GCC is licensed under the GNU General Public License version The GCC runtime exception permits compilation of proprietary programs in addition to free software with GCC This does not impact the license terms of GCC source code br br br See also br br List of compilers br MinGW br LLVM Clang br br br br br br Further reading br Using the GNU Compiler Collection GCC Free Software Foundation br GNU Compiler Collection GCC Internals Free Software Foundation br An Introduction to GCC Network Theory Ltd Revised August ISBN br Arthur Griffith GCC The Complete Reference McGraw Hill Osborne ISBN br br br External links br br br Official br Official website br GCC Release Timeline br GCC Development Plan br br br Other br Collection of GCC architecture and internals documents at I I T Bombay br Kerner Sean Michael March New GCC Heavy on Optimization internetnews com br Kerner Sean Michael April Open Source GCC Older Faster internetnews com Archived from the original on September Retrieved October br From Source to Binary The Inner Workings of GCC by Diego Novillo Red Hat Magazine December br A paper on GENERIC and GIMPLE br Marketing Cygnus Support an essay covering GCC development for the s with monthly reports for in the Inside Cygnus Engineering section near the end br EGCS announcement br EGCS features list br Fear of Forking an essay by Rick Moen recording seven well known forks including the GCC EGCS one