title: GNU Readline
id: 1835851
GNU Readline is a software library that provides in line editing and history capabilities for interactive programs with a command line interface such as Bash It is currently maintained by Chet Ramey as part of the GNU Project br It allows users to move the text cursor search the command history control a kill ring a more flexible version of a copy paste clipboard and use tab completion on a text terminal As a cross platform library readline allows applications on various systems to exhibit identical line editing behavior br br br Editing modes br Readline supports both Emacs and vi editing modes which determine how keyboard input is interpreted as editor commands See Editor war Comparison br br br Emacs keyboard shortcuts br Emacs editing mode key bindings are taken from the text editor Emacs br On some systems Esc must be used instead of Alt because the Alt shortcut conflicts with another shortcut For example pressing Alt f in Xfce s terminal emulator window does not move the cursor forward one word but activates File in the menu of the terminal window unless that is disabled in the emulator s settings br br Tab Autocompletes from the cursor position br Ctrl a Moves the cursor to the line start equivalent to the key Home br Ctrl b Moves the cursor back one character equivalent to the key br Ctrl c Sends the signal SIGINT via pseudoterminal to the current task which aborts and closes it br Ctrl d br Sends an EOF marker which unless disabled by an option closes the current shell equivalent to the command exit Only if there is no text on the current line br If there is text on the current line deletes the current character then equivalent to the key Delete br Ctrl e end moves the cursor to the line end equivalent to the key End br Ctrl f Moves the cursor forward one character equivalent to the key br Ctrl g Abort the reverse search and restore the original line br Ctrl h Deletes the previous character same as backspace br Ctrl i Equivalent to the tab key br Ctrl j Equivalent to the enter key br Ctrl k Clears the line content after the cursor and copies it into the clipboard br Ctrl l Clears the screen content equivalent to the command clear br Ctrl n next recalls the next command equivalent to the key br Ctrl o Executes the found command from history and fetch the next line relative to the current line from the history for editing br Ctrl p previous recalls the prior command equivalent to the key br Ctrl r reverse search recalls the last command including the specified characters A second Ctrl r recalls the next anterior command that corresponds to the search br Ctrl s Go back to the next more recent command of the reverse search beware to not execute it from a terminal because this command also launches its XOFF If you changed that XOFF setting use Ctrl q to return br Ctrl t Transpose the previous two characters br Ctrl u Clears the line content before the cursor and copies it into the clipboard br Ctrl v If the next input is also a control sequence type it literally e g Ctrl v Ctrl h types H a literal backspace br Ctrl w Clears the word before the cursor and copies it into the clipboard br Ctrl x Ctrl e Edits the current line in the EDITOR program or vi if undefined br Ctrl x Ctrl r Read in the contents of the inputrc file and incorporate any bindings or variable assignments found there br Ctrl x Ctrl u Incremental undo separately remembered for each line br Ctrl x Ctrl v Display version information about the current instance of Bash br Ctrl x Ctrl x Alternates the cursor with its old position C x because x has a crossing shape br Ctrl y yank adds the clipboard content from the cursor position br Ctrl z Sends the signal SIGTSTP to the current task which suspends it To execute it in background one can enter bg To bring it back from background or suspension fg process name or job id foreground can be issued br Ctrl Incremental undo separately remembered for each line br Alt b backward moves the cursor backward one word br Alt c Capitalizes the character under the cursor and moves to the end of the word br Alt d Cuts the word after the cursor br Alt f forward moves the cursor forward one word br Alt l Lowers the case of every character from the cursor s position to the end of the current word br Alt r Cancels the changes and puts back the line as it was in the history br Alt u Capitalizes every character from the cursor s position to the end of the current word br Alt Insert the last argument to the previous command the last word of the previous history entry br br br Choice of the GPL as GNU Readline s license br GNU Readline is notable for being a free software library which is licensed under the GNU General Public License GPL Free software libraries are far more often licensed under the GNU Lesser General Public License LGPL for example the GNU C Library GNU gettext and FLTK A developer of an application who chooses to link to an LGPL licensed library can use any license for the application But linking to a GPL licensed library such as Readline requires the entire combined resulting application to be licensed under the GPL when distributed to comply with section of the GPL br This licensing was chosen by the FSF on the hopes that it would encourage software to switch to the GPL An important example of an application changing its licensing to comply with the copyleft conditions of GNU Readline is CLISP an implementation of Common Lisp Originally released in it changed to the GPL license in after an email exchange between one of CLISP s original authors Bruno Haible and Richard Stallman in which Stallman argued that the linking of readline in CLISP meant that Haible was required to re license CLISP under the GPL if he wished to distribute the implementation of CLISP which used readline br Another response has been to not use this in some projects making text input use the primitive Unix terminal driver for editing br br br Alternative libraries br Alternative libraries have been created with other licenses so they can be used by software projects which want to implement command line editing functionality but be released with a non GPL license br br Many BSD systems have a BSD licensed libedit MariaDB and PHP allow for the user to select at build time whether to link with GNU Readline or with libedit br linenoise is a tiny C library that provides line editing functions br Haskeline is a BSD Clause licensed readline like library for Haskell It is mainly written for the Glasgow Haskell Compiler but is available to other Haskell projects which need line editing services as well br PSReadLine is a BSD Clause licensed readline implementation written in C for PowerShell inspired by bash and GNU Readline br br br Sample code br The following code is in C and must be linked against the readline library by passing a lreadline flag to the compiler br br br Bindings br Non C programming languages that provide language bindings for readline include br br Python s built in readline module br Ruby s built in readline module br Perl s third party CPAN Term ReadLine module specifically Term ReadLine Gnu for GNU ReadLine br Support for readline alternatives differ among these bindings br br br Notes br br br br br br External links br br Things You Didn t Know About GNU Readline