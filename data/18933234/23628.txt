title: PDP-10
id: 23628
Digital Equipment Corporation DEC s PDP later marketed as the DECsystem is a mainframe computer family manufactured beginning in and discontinued in s models and beyond were marketed under the DECsystem name especially as the TOPS operating system became widely used br The PDP s architecture is almost identical to that of DEC s earlier PDP sharing the same bit word length and slightly extending the instruction set The main difference was a greatly improved hardware implementation Some aspects of the instruction set are unusual most notably the byte instructions which operate on bit fields of any size from to bits inclusive according to the general definition of a byte as a contiguous sequence of a fixed number of bits br The PDP was found in many university computing facilities and research labs during the s the most notable being Harvard University s Aiken Computation Laboratory MIT s AI Lab and Project MAC Stanford s SAIL Computer Center Corporation CCC ETH ZIR and Carnegie Mellon University Its main operating systems TOPS and TENEX were used to build out the early ARPANET For these reasons the PDP looms large in early hacker folklore br Projects to extend the PDP line were eclipsed by the success of the unrelated VAX superminicomputer and the cancellation of the PDP line was announced in According to reports DEC sold about DECsystem s by the end of br br br Models and technical evolution br br The original PDP processor is the KA introduced in It uses discrete transistors packaged in DEC s Flip Chip technology with backplanes wire wrapped via a semi automated manufacturing process Its cycle time is s and its add time s In the KA was replaced by the KI which uses transistor transistor logic TTL SSI This was joined in by the higher performance KL later faster variants which is built from emitter coupled logic ECL microprogrammed and has cache memory The KL s performance was about megaflops using bit floating point numbers on matrix row reduction It was slightly faster than the newer VAX although more limited in memory br A smaller less expensive model the KS was introduced in using TTL and Am bit slice components and including the PDP Unibus to connect peripherals The KS was marketed as the DECSYSTEM part of the DECSYSTEM range it was DEC s entry in the distributed processing arena and it was introduced as the world s lowest cost mainframe computer system br br br KA br The KA has a maximum main memory capacity both virtual and physical of kilowords equivalent to kilobytes the minimum main memory required is kilowords As supplied by DEC it did not include paging hardware memory management consists of two sets of protection and relocation registers called base and bounds registers This allows each half of a user s address space to be limited to a set section of main memory designated by the base physical address and size This allows the model of separate read only shareable code segment normally the high segment and read write data stack segment normally the low segment used by TOPS and later adopted by Unix Some KA machines first at MIT and later at Bolt Beranek and Newman BBN were modified to add virtual memory and support for demand paging and more physical memory br The KA weighs about pounds kg br The was the top of the line Uni processor KA machine at the time when the PA software package was introduced Two other KA models were the uniprocessor and the dual processor br br br KI br The KI introduced support for paged memory management and also support a larger physical address space of megawords KI models include and the latter incorporating two CPUs br br br KL br br The original KL PDP also marketed as DECsystem models etc use the original PDP memory bus with external memory modules Module in this context meant a cabinet dimensions roughly WxHxD x x in with a capacity of to kWords of magnetic core memory The processors used in the DECSYSTEM commonly but incorrectly called KL use internal memory mounted in the same cabinet as the CPU The xx models also have different packaging they come in the original tall PDP cabinets rather than the short ones used later on for the DECSYSTEM The differences between the xx and xx models were primarily which operating system they ran either TOPS or TOPS Apart from that differences are more cosmetic than real some xx systems have style internal memory and I O and some xx systems have style external memory and an I O bus In particular all ARPAnet TOPS systems had an I O bus because the AN IMP interface was an I O bus device Both could run either TOPS or TOPS microcode and thus the corresponding operating system br br br Model B br The later Model B version of the processors removes the kiloword limit on the virtual address space by supporting up to sections of up to kilowords each along with substantial changes to the instruction set The two versions are effectively different CPUs The first operating system that takes advantage of the Model B s capabilities is TOPS release and user mode extended addressing is offered in TOPS release TOPS versions after release only run on a Model B br TOPS versions and also use extended addressing when run on a or Model B processor running TOPS microcode br br br MCA br The final upgrade to the KL was the MCA upgrade of a to or a to which gave some performance increases for programs which run in multiple sections br br br Massbus br The I O architecture of the xx series KL machines is based on a DEC bus design called the Massbus While many attributed the success of the PDP to DEC s decision to make the PDP Unibus an open architecture DEC reverted to prior philosophy with the KL making Massbus both unique and proprietary Consequently there were no aftermarket peripheral manufacturers who made devices for the Massbus and DEC chose to price their own Massbus devices notably the RP disk drive at a substantial premium above comparable IBM compatible devices CompuServe for one designed its own alternative disk controller that could operate on the Massbus but connect to IBM style disk subsystems br br br Front end processors br br The KL class machines have a PDP front end processor for system start up and monitoring The PDP is booted from a dual ported RP disk drive or alternatively from an floppy disk drive or DECtape and then commands can be given to the PDP to start the main processor which is typically booted from the same RP disk drive as the PDP The PDP performs watchdog functions once the main processor is running br Communication with IBM mainframes including Remote Job Entry RJE was accomplished via a DN or DN front end processor using a PDP or PDP a br br br KS br br The KS is a lower cost PDP built using AMD bit slice chips with an Intel A microprocessor as a control processor The KS design was crippled to be a Model A even though most of the necessary data paths needed to support the Model B architecture are present This was no doubt intended to segment the market but it greatly shortened the KS s product life br The KS system uses a similar boot procedure to the KL The control processor loads the microcode from an RM RM or RP disk or magnetic tape and then starts the main processor The switches modes after the operating system boots and controls the console and remote diagnostic serial ports br br br Magnetic tape drives br Two models of tape drives were supported by the TM Magnetic Tape Control subsystem br br TU Magnetic Tape Transport ips inches second br TU Magnetic Tape Transport ips inches second br TU Magnetic Tape Transport ips inches second br A mix of up to eight of these could be supported using seven track or nine track devices The TU and TU each came in A track and B track versions and all of the aforementioned tape drives could read write from to BPI BPI and BPI IBM compatible tapes br The TM Magtape controller was available in two submodels br br TM A did cycle stealing to from PDP memory using the KA Arithmetic Processor br TM B accessed PDP memory using a DF Data Channel without cycle stealing from the KA Arithmetic Processor br br br Instruction set architecture br From the first PDP s to the KL and KS the user mode instruction set architecture is largely the same This section covers that architecture The only major change to the architecture is the addition of multi section extended addressing in the KL extended addressing which changes the process of generating the effective address of an instruction is briefly discussed at the end Generally the system has bit words and instructions and bit addresses br br br Registers br br There are general purpose bit registers The right half of these registers other than register may be used for indexing A few instructions operate on pairs of registers The PC Word register is split in half the right bits contains the program counter and the left bits contains the processor status flags with five zeros between the two sections The condition register bits which record the results of arithmetic operations e g overflow can be accessed by only a few instructions br In the original KA systems these registers are simply the first words of main memory The fast registers hardware option implements them as registers in the CPU still addressable as the first words of memory Some software takes advantage of this by using the registers as an instruction cache by loading code into the registers and then jumping to the appropriate address this is used for example in Maclisp to implement one version of the garbage collector Later models all have registers in the CPU br br br Supervisor mode br There are two operational modes supervisor and user mode Besides the difference in memory referencing described above supervisor mode programs can execute input output operations br Communication from user mode to supervisor mode is done through Unimplemented User Operations UUOs instructions which are not defined by the hardware and are trapped by the supervisor This mechanism is also used to emulate operations which may not have hardware implementations in cheaper models br br br Data types br The major datatypes which are directly supported by the architecture are two s complement bit integer arithmetic including bitwise operations bit floating point and halfwords Extended bit floating point is supported through special instructions designed to be used in multi instruction sequences Byte pointers are supported by special instructions A word structured as a count half and a pointer half facilitates the use of bounded regions of memory notably stacks br br br Instructions br br Instructions are stored in bit words There are two formats general instructions and input output instructions br In general instructions the leftmost bits to contain an instruction opcode Many of the possible codes are not defined in the base model machines and are reserved for expansion like the addition of a hardware floating point unit Following the opcode in bits to is the number of a register which will be used for the instruction The input output instructions all start with bits through being set to decimal value bits through containing a device number and through the instruction opcode br In both formats bits through are used to form the effective address E Bits through contain a numerical constant address Y This address may be modified by adding the bit value in a register X the register number indicated in bits to If these are set to zero no indexing is used meaning register cannot be used for indexing Bit I indicates indirection meaning the ultimate effective address used by the instruction is not E but the address stored in memory location E When using indirection the data in word E is interpreted in the same way as the layout of the instruction bits to are ignored and through form I X and Y as above br Instruction execution begins by calculating E It adds the contents of the given register X if not to the offset Y then if the indirect bit is the value at E is fetched and the effective address calculation is repeated If I is in the stored value at E in memory the system will then indirect through that address as well possibly following many such steps This process continues until an indirect word with a zero indirect bit is reached Indirection of this sort was a common feature of processor designs of this era br In supervisor mode addresses correspond directly to physical memory In user mode addresses are translated to physical memory Earlier models give a user process a high and a low memory addresses with a top bit use one base register and those with a use another Each segment is contiguous Later architectures have paged memory access allowing non contiguous address spaces The CPU s general purpose registers can also be addressed as memory locations br br br General instructions br There are three main classes of general instructions arithmetic logical and move conditional jump conditional skip which may have side effects There are also several smaller classes br The arithmetic logical and move operations include variants which operate immediate to register memory to register register to memory register and memory to both or memory to memory Since registers may be addressed as part of memory register to register operations are also defined Not all variants are useful though they are well defined For example the ADD operation has as variants ADDI add an bit Immediate constant to a register ADDM add register contents to a Memory location ADDB add to Both that is add register contents to memory and also put the result in the register A more elaborate example is HLROM Half Left to Right Ones to Memory which takes the Left half of the register contents places them in the Right half of the memory location and replaces the left half of the memory location with Ones Halfword instructions are also used for linked lists HLRZ is the Lisp CAR operator HRRZ is CDR br The conditional jump operations examine register contents and jump to a given location depending on the result of the comparison The mnemonics for these instructions all start with JUMP JUMPA meaning jump always and JUMP meaning jump never as a consequence of the symmetric design of the instruction set it contains several no ops such as JUMP For example JUMPN A LOC jumps to the address LOC if the contents of register A is non zero There are also conditional jumps based on the processor s condition register using the JRST instruction On the KA and KI JRST is faster than JUMPA so the standard unconditional jump is JRST br The conditional skip operations compare register and memory contents and skip the next instruction which is often an unconditional jump depending on the result of the comparison A simple example is CAMN A LOC which compares the contents of register A with the contents of location LOC and skips the next instruction if they are not equal A more elaborate example is TLCE A LOC read Test Left Complement skip if Equal which using the contents of LOC as a mask selects the corresponding bits in the left half of register A If all those bits are Equal to zero skip the next instruction and in any case replace those bits by their Boolean complement br Some smaller instruction classes include the shift rotate instructions and the procedure call instructions Particularly notable are the stack instructions PUSH and POP and the corresponding stack call instructions PUSHJ and POPJ The byte instructions use a special format of indirect word to extract and store arbitrary sized bit fields possibly advancing a pointer to the next unit br br br Input output instructions br The PDP does not use memory mapped devices in contrast to the PDP and later DEC machines A separate set of instructions is used to move data to and from devices defined by a device number in the instruction Bits to contain the device number with the bits allowing a total of devices Instructions allow for the movement of data to and from devices in word at a time DATAO and DATAI or block at a time BLKO BLKI br In block mode the value pointed to by E is a word in memory that is split in two the right bits indicate a starting address in memory where the data is located or written into and the left bits are a counter The block instructions increment both values every time they are called thereby increasing the counter as well as moving to the next location in memory It then performs a DATAO or DATAI Finally it checks the counter side of the value at E if it is non zero it skips the next instruction If it is zero it performs the next instruction normally a JUMP back to the top of the loop The BLK instructions are effectively small programs that loop over a DATA and increment instructions but by having this implemented in the processor itself it avoids the need to repeatedly read the series of instructions from main memory and thus performs the loop much more rapidly br The final set of I O instructions are used to write and read condition codes on the device CONO and CONI Additionally CONSZ will perform a CONI bitmask the retrieved data against the value in E and then skip the next instruction if it is zero used in a fashion similar to the BLK commands Only the right bits are tested in CONSZ br br br Interrupt handling br A second use of the CONO instruction is to set the device s priority level for interrupt handling There are three bits in the CONO instruction through allowing the device to be set to level through Level is the highest meaning that if two devices raise an interrupt at the same time the lowest numbered device will begin processing Level means no interrupts so a device set to level will not stop the processor even if it does raise an interrupt br Each device channel has two memory locations associated with it one at N and the other at N where N is the channel number Thus channel uses locations and When the interrupt is received and accepted meaning no higher priority interrupt is already running the system stops at the next memory read part of the instruction cycle and instead begins processing at the address stored in the first of those two locations It is up to the interrupt handler to turn off the interrupt level when it is complete which it can do by running a CONO DATA or BLK instruction br Two of the device numbers are set aside for special purposes Device is the computer s front panel console reading that device retrieves the settings of the panel switches while writing lights up the status lamps Device is the priority interrupt which can be read using CONI to gain additional information about an interrupt that has occurred br br br Extended addressing br In processors supporting extended addressing the address space is divided into sections An bit address is a local address containing an offset within a section and a global address is bits divided into a bit section number at the bottom of the left bits and an bit offset within that section in the right bits A register can contain either a local index with an bit unsigned displacement or local address in the right bits or a global index with a bit unsigned displacement or global address in the right bits An indirect word can either be a local indirect word with its uppermost bit set the next bits reserved and the remaining bits being an indirect bit a bit register code and an bit displacement or a global indirect word with its uppermost bit clear the next bit being an indirect bit the next bits being a register code and the remaining bits being a displacement br The process of calculating the effective address generates a bit section number and an bit offset within that segment br br br Software br br br Operating systems br The original PDP operating system was simply called Monitor but was later renamed TOPS Eventually the PDP system itself was renamed the DECsystem Early versions of Monitor and TOPS formed the basis of Stanford s WAITS operating system and the CompuServe time sharing system br Over time some PDP operators began running operating systems assembled from major components developed outside DEC For example the main Scheduler might come from one university the Disk Service from another and so on The commercial timesharing services such as CompuServe On Line Systems Inc OLS and Rapidata maintained sophisticated inhouse systems programming groups so that they could modify the operating system as needed for their own businesses without being dependent on DEC or others There are also strong user communities such as DECUS through which users can share software that they have developed br BBN developed their own alternative operating system TENEX which fairly quickly became popular in the research community DEC later ported TENEX to the KL enhanced it considerably and named it TOPS forming the DECSYSTEM line br MIT which had developed CTSS Compatible Time Sharing System to run on their IBM and later a modified IBM system also developed ITS Incompatible Timesharing System to run on their PDP and later a modified PDP br Tymshare developed TYMCOM X derived from TOPS but using a page based file system like TOPS br br br Programming languages br DEC maintained DECsystem FORTRAN IV F for the PDP from to br MACRO assembly language macro compiler COBOL BASIC and AID were supported under the multi processing and swapping monitors br In practice a number of other programming environments were available including LISP and SNOBOL at the Hatfield Polytechnic site around br br br Clones br In to researchers at Xerox PARC were frustrated by top company management s refusal to let them buy a PDP Xerox had just bought Scientific Data Systems SDS in and wanted PARC to use an SDS machine Instead a group led by Charles P Thacker designed and constructed two PDP clone systems named MAXC pronounced as Max in honour of Max Palevsky who had sold SDS to Xerox for their own use MAXC was also a backronym for Multiple Access Xerox Computer MAXC ran a modified version of TENEX br Third party attempts to sell PDP clones were relatively unsuccessful see Foonly Systems Concepts and XKL br br br Use by CompuServe br One of the largest collections of DECsystem architecture systems ever assembled was at CompuServe which at its peak operated over loosely coupled systems in three data centers in Columbus Ohio CompuServe used these systems as hosts providing access to commercial applications and the CompuServe Information Service While the first such systems were bought from DEC when DEC abandoned the PDP architecture in favor of the VAX CompuServe and other PDP customers began buying plug compatible computers from Systems Concepts As of January CompuServe was operating a small number of PDP architecture machines to perform some billing and routing functions br The main power supplies used in the KL series machines were so inefficient that CompuServe engineers designed a replacement supply that used about half the energy CompuServe offered to license the design for its KL supply to DEC for free if DEC would promise that any new KL bought by CompuServe would have the more efficient supply installed DEC declined the offer br br Another modification made to the PDP by CompuServe engineers was replacing the hundreds of incandescent indicator lamps on the KI processor cabinet with LED lamp modules The cost of conversion was easily offset by cost savings in electricity use reduced heat and labor needed to replace burned out lamps Digital followed this step all over the world The picture on the right hand side shows the light panel of the MF memory which is contemporary with the KI CPU This item is part of a computer museum and was populated with LEDs in for demonstration purposes only There were no similar banks of indicator lamps on KL and KS processors themselves only on legacy memory and peripheral devices br br br Cancellation and influence br The PDP was eventually eclipsed by the VAX superminicomputer machines descendants of the PDP when DEC recognized that the PDP and VAX product lines were competing with each other and decided to concentrate its software development effort on the more profitable VAX The PDP product line cancellation was announced in including cancelling the ongoing Jupiter project to produce a new high end PDP processor despite that project being in good shape at the time of the cancellation and the Minnow project to produce a desktop PDP which may then have been at the prototyping stage br This event spelled the doom of ITS and the technical cultures that had spawned the original jargon file but by the s it had become something of a badge of honor among old time hackers to have cut one s teeth on a PDP br The PDP assembly language instructions LDB and DPB load deposit byte live on as functions in the programming language Common Lisp See the References section on the LISP article The bit word size of the PDP and PDP was influenced by the programming convenience of having LISP pointers each bits in one word br Will Crowther created Adventure the prototypical computer adventure game for a PDP Don Daglow created the first computer baseball game and Dungeon the first role playing video game on a PDP Walter Bright originally created Empire for the PDP Roy Trubshaw and Richard Bartle created the first MUD on a PDP Zork was written on the PDP Infocom used PDP s for game development and testing br Bill Gates and Paul Allen originally wrote Altair BASIC using an Intel simulator running on a PDP at Harvard University Allen repurposed the PDP assembler as a cross assembler for the chip They founded Microsoft shortly after br br br Emulation or simulation br The software for simulation of historical computers SIMH contains modules to emulate all the PDP CPU models on a Windows or Unix based machine Copies of DEC s original distribution tapes are available as downloads from the Internet so that a running TOPS or TOPS system may be established ITS and WAITS are also available for SIMH br Ken Harrenstien s KLH software for Unix like systems emulates a KL B processor with extended addressing and MW of memory or a KS processor with KW of memory The KL emulation supports v of the KL microcode which enables it to run the final versions of both TOPS and TOPS The KS emulation supports both ITS v microcode for the final version of KS ITS and DEC v microcode for the final versions of KS TOPS and TOPS br This article is based in part on the Jargon File which is in the public domain br br br See also br ITS br TENEX operating system br TOPS br TOPS br WAITS br br br Notes br br br br br br Sources br br br Further reading br C Gordon Bell Alan Kotok Thomas N Hastings Richard Hill The Evolution of the DECsystem Communications of the ACM January doi reprint in C Gordon Bell J Craig Mudge John E McNamara Computer Engineering A DEC View of Hardware Systems Design Digital Press ISBN br br br External links br br Bits Forever br PDP Models Shows CPUs and models br PDP stuff br PDP Miscellany Page br Life in the Fast AC s br Columbia University DEC PDP page br Panda Programming TOPS page br Online systems at Living Computers Museum Labs a portal into the Paul Allen collection of timesharing and interactive computers including br a DECsystem KA KA running TOPS v a br a DECsystem KI KI running TOPS v A br a DECSYSTEM KL KL running TOPS v br a DECsystem KL KL running WAITS br a DECSYSTEM KS running ITS br an XKL TOAD running TOPS br Empire for the PDP zip file of FORTRAN source code download from Classic Empire br PDP software archive at Trailing Edge br The Personal Mainframe ad Archived November at the Wayback Machine br Computer World ad for Personal Mainframe br PDP documentation at Bitsavers br br br Newsgroups br alt sys pdp 