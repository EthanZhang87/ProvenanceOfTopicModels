title: GNU GRUB
id: 287817
GNU GRUB short for GNU GRand Unified Bootloader commonly referred to as GRUB is a boot loader package from the GNU Project GRUB is the reference implementation of the Free Software Foundation s Multiboot Specification which provides a user the choice to boot one of multiple operating systems installed on a computer or select a specific kernel configuration available on a particular operating system s partitions br GNU GRUB was developed from a package called the Grand Unified Bootloader a play on Grand Unified Theory It is predominantly used for Unix like systems br br br Operation br br br Booting br br When a computer is turned on its BIOS finds the primary bootable device usually the computer s hard disk and runs the initial bootstrap program from the master boot record MBR The MBR is the first sector of the hard disk This bootstrap program must be small because it has to fit in a single sector For a long time the size of a sector has been bytes Since there are hard disks available with a sector size of bytes called Advanced Format disks but as of October such hard disks are still accessed in byte sectors using the e emulation br The legacy MBR partition table supports a maximum of four partitions and occupies bytes combined Together with the optional disk signature four bytes and disk timestamp six bytes this leaves between and bytes available for the machine code of a boot loader Although such a small space can be sufficient for very simple boot loaders it is not big enough to contain a boot loader supporting complex and multiple file systems menu driven selection of boot choices etc Boot loaders with bigger footprints are therefore split into pieces where the smallest piece fits in the MBR while one or more larger pieces are stored in other locations such as empty sectors between the MBR and the first partition The code in the MBR then does little more than starting the second part br The purpose of the remaining part s of the boot loader is to actually boot an operating system by configuring it and starting the kernel Kernels are in most cases stored as files residing on appropriate file systems but the concept of a file system is unknown to the BIOS Thus in BIOS based systems the duty of a boot loader is to access the content of those files so it can be loaded into the RAM and executed br One possible approach for boot loaders is to load kernel images by directly accessing hard disk sectors without understanding the underlying file system Usually an additional level of indirection is required in form of maps or map files auxiliary files that contain a list of physical sectors occupied by kernel images Such maps need to be updated each time a kernel image changes its physical location on disk due to installing new kernel images file system defragmentation etc Also in case of the maps changing their physical location their locations need to be updated within the boot loader s MBR code so the sectors indirection mechanism continues to work This is not only cumbersome but it also leaves the system in need of manual repairs in case something goes wrong during system updates br Another approach is to make a boot loader aware of the underlying file systems so kernel images are configured and accessed using their actual file paths That requires a boot loader to contain a driver for each of the supported file systems so they can be understood and accessed by the boot loader itself This approach eliminates the need for hardcoded locations of hard disk sectors and existence of map files and does not require MBR updates after kernel images are added or moved around The configuration of a boot loader is stored in a regular file which is also accessed in a file system aware way to obtain boot configurations before the actual booting of any kernel images Thus fewer things can go wrong during system updates As a downside such boot loaders are larger and more complex br GNU GRUB uses the second approach by understanding the underlying file systems The boot loader itself is split into multiple stages so that it fits in the MBR boot scheme br Two major versions of GRUB are in common use GRUB version called GRUB legacy is only prevalent in older releases of Linux distributions GRUB was written from scratch and intended to replace its predecessor and is now used by a majority of Linux distributions br br br Version GRUB Legacy br br GRUB x follows a two stage approach The master boot record MBR usually contains GRUB stage or can contain a standard MBR implementation which chainloads GRUB stage from the active partition s boot sector Given the small size of a boot sector bytes stage can do little more than load the next stage of GRUB by loading a few disk sectors from a fixed location near the start of the disk within its first cylinders br Stage can load stage directly but it is normally set up to load the stage located in the first KiB of hard disk immediately following the MBR and before the first partition In case this space is not available unusual partition table special disk drivers GPT or LVM disk the install of stage will fail The stage image contains file system drivers enabling it to directly load stage from any known location in the filesystem for example from boot grub Stage will then load the default configuration file and any other modules needed br br br Version GRUB br br br Startup on systems using BIOS firmware br See illustration in last image on the right br boot img stage is written to the first bytes of the Master Boot Record MBR boot code in sector or optionally in a partition boot sector PBR It addresses diskboot img by a bit LBA address The actual sector number is written by grub install diskboot img is the first sector of core img with the sole purpose to load the rest of core img identified by LBA sector numbers also written by grub install br On MBR partitioned disks core img stage is stored in the empty sectors if available between the MBR and the first partition Recent operating systems suggest a MiB gap here for alignment byte or KiB sectors This gap used to be sectors KiB as a reminder of the sector number limit of Cylinder Head Sector C H S addressing used by BIOS before therefore core img is designed to be smaller than KiB br On GPT partitioned disks core img is written to its own partition It must be flagged BIOS grub must not be formatted and can be as tiny as MiB br stage core img loads boot grub i pc normal mod from the partition configured by grub install If the partition index has changed GRUB will be unable to find the normal mod and presents the user with the GRUB Rescue prompt br Depending on how GRUB was installed the boot grub is either in the root partition of the Linux distribution or in the separate boot partition br after normal mod loaded normal mod parses boot grub grub cfg optionally loads modules eg for graphical UI and file system support and shows the menu br br br Startup on systems using UEFI firmware br efi distro grubx efi for x UEFI systems is installed as a file in the EFI System Partition and booted by the firmware directly without a boot img in MBR sector This file is like stage and stage br boot grub can be installed on the EFI System Partition or the separate boot partition br For x UEFI systems stage are the boot grub x efi normal mod file and other boot grub files br br br After startup br GRUB presents a menu where the user can choose from operating systems OS found by grub install GRUB can be configured to automatically load a specified OS after a user defined timeout If the timeout is set to zero seconds pressing and holding Shift while the computer is booting makes it possible to access the boot menu br In the operating system selection menu GRUB accepts a couple of commands br br By pressing e it is possible to edit kernel parameters of the selected menu item before the operating system is started The reason for doing this in GRUB i e not editing the parameters in an already booted system can be an emergency case the system has failed to boot Using the kernel parameters line it is possible among other things to specify a module to be disabled blacklisted for the kernel This could be required if the specific kernel module is broken and thus prevents boot up For example to blacklist the kernel module nvidia current one could append modprobe blacklist nvidia current at the end of the kernel parameters br By pressing c the user enters the GRUB command line The GRUB command line is not a regular Linux shell like e g bash and accepts only certain GRUB specific commands documented by various Linux distributions br Once boot options have been selected GRUB loads the selected kernel into memory and passes control to the kernel Alternatively GRUB can pass control of the boot process to another boot loader using chain loading This is the method used to load operating systems that do not support the Multiboot Specification or are not supported directly by GRUB br br br Identifying partitions UUID workaround br A computer can have multiple hard disks connected to it These could be identified via their SATA port Each time the computer POSTs the hard disk connected to port of the motherboard could be assigned the same identifier e g hd But what if such consistency cannot be guaranteed What if the constellation of connected hard disks changed from one start up to another What if a hard disk shall be connected to another computer br By entering ls into either the in GRUB rescue console available after loading core img or the GRUB console available after loading normal mod a list of all available hard disks and partitions can be obtained Either by guessing or by further investigation e g ls hd can these numbers be assigned to actual hard disks and partitions br As it cannot be guaranteed that the numbering of hard disks via dumb numbers hd hd is consistent GNU GRUB can use the UUID to identify partitions actually file system instances that have this feature instead br The file systems ext ext ext and xfs use an Universally Unique Identifier UUID to uniquely identify an instance The UUID is created when a partition is formatted The UUID is part of the file system and written to the superblock All operations but a formatting should leave the UUID unaltered but it is possible to change it or duplicate it by using dd to clone an entire partition br The file grub cfg is used to configure GRUB It is the file where the commands which shall be executed during each start up are stored Without an existing and valid grub cfg GRUB will present a prompt br An absolute minimal grub cfg might contain only the following two commands cf initial ramdisk br br linux hd kernel vmlinuz ro use the file name vmlinuz located in the directory kernel on the first partition of the first hard disk as linux kernel image br initrd hd boot initrd img use the file named initrd img located in the directory boot on the first partition of the first hard disk as initial ramdisk br br More fancy grub cfg will describe a menu to be presented will use multiple colors and maybe a background picture br br br History br GRUB was initially developed by Erich Boleyn as part of work on booting the operating system GNU Hurd developed by the Free Software Foundation In Gordon Matzigkeit and Yoshinori K Okuji made GRUB an official software package of the GNU Project and opened the development process to the public As of the majority of Linux distributions have adopted GNU GRUB as well as other systems such as Sony s PlayStation br br br Development br GRUB version also known as GRUB Legacy is no longer under development and is being phased out The GNU GRUB developers have switched their focus to GRUB a complete rewrite with goals including making GNU GRUB cleaner more robust more portable and more powerful GRUB started under the name PUPA PUPA was supported by the Information technology Promotion Agency IPA in Japan PUPA was integrated into GRUB development around when GRUB version x was renamed GRUB Legacy br Some of the goals of the GRUB project include support for non x platforms internationalization and localization non ASCII characters dynamic modules memory management a scripting mini language migrating platform specific x code to platform specific modules and an object oriented framework GNU GRUB version was officially released on June br Three of the most widely used Linux distributions use GRUB as their mainstream boot loader Ubuntu adopted it as the default boot loader in its version of October Fedora followed suit with Fedora released in November OpenSUSE adopted GRUB as the default boot loader with its release of September Solaris also adopted GRUB on the x platform in the Solaris release Buildroot also uses GNU GRUB for x and x targets br In late the exploit of pressing backspace times to bypass the login password was found and quickly fixed br br br Variants br GNU GRUB is free and open source software so several variants have been created Some notable ones which have not been merged into GRUB mainline br br OpenSolaris includes a modified GRUB Legacy that supports Solaris VTOC slices automatic bit kernel selection and booting from ZFS with compression and multiple boot environments br Google Summer of Code had a project to support GRUB legacy to boot from ext formatted partitions br The Syllable project made a modified version of GRUB to load the system from its AtheOS File System br TrustedGRUB extends GRUB by implementing verification of the system integrity and boot process security using the Trusted Platform Module TPM br The Intel BIOS Implementation Test Suite BITS provides a GRUB environment for testing BIOSes and in particular their initialization of Intel processors hardware and technologies BITS supports scripting via Python and includes Python APIs to access various low level functionality of the hardware platform including ACPI CPU and chipset registers PCI and PCI Express br GRUB DOS is a GRUB legacy fork that improves the installation experience on DOS and Microsoft Windows by putting everything besides the GRLDR config in one image file It can be loaded directly from DOS or by NTLDR or Windows Boot Manager GRUB DOS is under active development and as of supports UEFI br br br Utilities br br br GRUB configuration tools br br The setup tools in use by various distributions often include modules to set up GRUB For example YaST on SUSE Linux and openSUSE distributions and Anaconda on Fedora RHEL distributions StartUp Manager and GRUB Customizer are graphical configuration editors for Debian based distributions The development of StartUp Manager stopped on May after the lead developer cited personal reasons for not actively developing the program GRUB Customizer is also available for Arch based distributions br For GRUB there are KDE Control Modules br GRLDR ICE is a tiny tool for modifying the default configuration of grldr file for GRUB DOS br br br Boot repair utilities br Boot Repair is a simple graphical tool for recovering from frequent boot related problems with GRUB and Microsoft Windows bootloader This application is available under GNU GPL license Boot Repair can repair GRUB on multiple Linux distributions including but not limited to Debian Ubuntu Mint Fedora openSUSE and Arch Linux br br br Installer for Windows br Grub Win is a Windows open source software package It allows GNU GRUB to boot from a Windows directory The setup program installs GNU GRUB version to an NTFS partition A Windows GUI application is then used to customize the GRUB boot menu themes UEFI boot order scripts etc All GNU GRUB scripts and commands are supported for both UEFI and legacy systems Grub Win can configure GRUB for multiboot of Windows Ubuntu openSuse Fedora and many other Linux distributions It is freely available under GNU GPL License at SourceForge br br br Alternative boot managers br br The strength of GRUB is the wide range of supported platforms file systems and operating systems making it the default choice for distributions and embedded systems br However there are boot managers targeted at the end user that give more friendly user experience graphical OS selector and simpler configuration br br rEFInd Macintosh style graphical boot manager only for UEFI based computers BIOS not supported br CloverEFI Macintosh style graphical boot manager for BIOS and UEFI based computers It emulates UEFI with a heavily modified DUET from the TianoCore project and requires a FAT formatted partition even on BIOS systems As a benefit it has a basic filesystem driver in the partition boot sector avoiding the brittleness of a second or third stage and the infamous GRUB Rescue prompt The user interface looks similar to rEFInd both inherit from the abandoned boot manager rEFIt br Non graphical alternatives br br systemd boot Light UEFI only boot manager with text based OS selector menu br br br External links br br br How Tos and troubleshooting br Distribution wikis have many solutions for common issues and custom setups that might help you br br Arch Linux GRUB br Ubuntu Grub also see Links at the bottom br Fedora GRUB br Gentoo GRUB br Grub theme tutorial br br br Documentation br GRUB manual most detailed documentation including all commands br Official website br GRUB wiki archived in br br br Introductory articles br Boot with GRUB an April article in Linux Journal br br br Technicalities br Booting Linux on x using Grub in depth article br Unified Extensible Firmware Interface UEFI firmware common since br GUID Partition Table GPT handles hard drives bigger than TiB and more than partitions br Master boot record used with BIOS firmware motherboards roughly before br BIOS Boot Specification Version January hard to find br br br See also br br SysLinux IsoLinux commonly used bootloader on CDs DVDs br BOOTMGR current Windows bootloader br NTLDR previous Windows bootloader used before Windows Vista br rEFInd alternative boot loader for UEFI based computers br Comparison of bootloaders br br br Notes br br br 