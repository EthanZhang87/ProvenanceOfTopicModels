title: Glibc
id: 324364
The GNU C Library commonly known as glibc is the GNU Project implementation of the C standard library It is a wrapper around the system calls of the Linux kernel for application use Despite its name it now also directly supports C and indirectly other programming languages It was started in the s by the Free Software Foundation FSF for the GNU operating system br glibc is free software released under the GNU Lesser General Public License The GNU C Library project provides the core libraries for the GNU system as well as many systems that use Linux as the kernel These libraries provide critical APIs including ISO C POSIX BSD OS specific APIs and more These APIs include such foundational facilities as open read write malloc printf getaddrinfo dlopen pthread create crypt login exit and more br br br History br br The glibc project was initially written mostly by Roland McGrath working for the Free Software Foundation FSF in the summer of as a teenager In February FSF described glibc as having nearly completed the functionality required by ANSI C By it had the ANSI C and POSIX functions implemented and work was under way on POSIX In September Ulrich Drepper made his first contribution to the glibc and by most commits were made by him Drepper held the maintainership position for many years and until accumulated of all commits to the project br In May glibc was migrated to a Git repository br In a licensing issue was resolved which was caused by the Sun RPC implementation in glibc that was not GPL compatible It was fixed by re licensing the Sun RPC components under the BSD license br In glibc suffered from an ABI breakage bug on s br In July years after he started glibc Roland McGrath announced his departure declaring myself maintainer emeritus and withdrawing from direct involvement in the project These past several months if not the last few years have proven that you don t need me anymore br In maintainer Raymond Nicholson removed a joke about abortion from the glibc source code It was restored later by Alexandre Oliva after Richard Stallman demanded to have it returned br In the copyright assignment requirement to the Free Software Foundation was removed from the project br br br Fork and variant br In the developers of the Linux kernel forked glibc Their fork Linux libc was maintained separately until around Because the copyright attribution was insufficient changes could not be merged back to the GNU Libc When the FSF released glibc in January the kernel developers discontinued Linux libc due to glibc s superior compliance with POSIX standards glibc also had better internationalisation and more in depth translation IPv capability bit data access facilities for multithreaded applications future version compatibility and the code was more portable The last used version of Linux libc used the internal name soname libc so Following on from this glibc x on Linux uses the soname libc so br In Debian and a number of derivatives switched from glibc to the variant eglibc Eglibc was supported by a consortium consisting of Freescale MIPS MontaVista and Wind River It contained changes that made it more suitable for embedded usage and had added support for architectures that were not supported by glibc such as the PowerPC e The code of eglibc was merged back into glibc at version Since eglibc is discontinued The Yocto Project and Debian also moved back to glibc since the release of Debian Jessie br br br Steering committee br Starting in the library s development had been overseen by a committee with Ulrich Drepper kept as the lead contributor and maintainer The steering committee installation was surrounded by a public controversy as it was openly described by Ulrich Drepper as a failed hostile takeover maneuver by Richard Stallman br In March the steering committee voted to disband itself and remove Drepper in favor of a community driven development process with Ryan Arnold Maxim Kuvyrkov Joseph Myers Carlos O Donell and Alexandre Oliva holding the responsibility of GNU maintainership but no extra decision making power br br br Functionality br glibc provides the functionality required by the Single UNIX Specification POSIX c d and j and some of the functionality required by ISO C ISO C Berkeley Unix BSD interfaces the System V Interface Definition SVID and the X Open Portability Guide XPG Issue with all extensions common to XSI X Open System Interface compliant systems along with all X Open UNIX extensions br In addition glibc also provides extensions that have been deemed useful or necessary while developing GNU br br br Supported hardware and kernels br glibc is used in systems that run many different kernels and different hardware architectures Its most common use is in systems using the Linux kernel on x hardware however officially supported hardware includes ARM ARC C SKY DEC Alpha IA Motorola m k MicroBlaze MIPS Nios II PA RISC PowerPC RISC V s SPARC and x old versions support TILE It officially supports the Hurd and Linux kernels Additionally there are heavily patched versions that run on the kernels of FreeBSD and NetBSD from which Debian GNU kFreeBSD and Debian GNU NetBSD systems are built respectively as well as a forked version of OpenSolaris It is also used in an edited form and named libroot so in BeOS and Haiku br br br Use in small devices br glibc has been criticized as being bloated and slower than other libraries in the past e g by Linus Torvalds and embedded Linux programmers For this reason several alternative C standard libraries have been created which emphasize a smaller footprint However many small device projects use GNU libc over the smaller alternatives because of its application support standards compliance and completeness Examples include Openmoko and Familiar Linux for iPaq handhelds when using the GPE display software br br br Secure string functions br glibc does not implement bounds checking interfaces defined in C and did not implement strlcpy and strlcat until on the grounds that in practice these functions can cause trouble as their intended use encourages silent data truncation adds complexity and inefficiency and does not prevent all buffer overruns in the destinations The FAQ pointed out that the bounds checking interfaces were optional in the ISO standard and that snprintf was available as an alternative br br br Compatibility layers br There are compatibility layers shims to allow programs written for other ecosystems to run on glibc interface offering systems These include libhybris a compatibility layer for Android s Bionic and Wine which can be seen as a compatibility layer from Windows APIs to glibc and other native APIs available on Unix like systems br br br See also br br Gnulib br Linux kernel API br br br Notes br br br br br br External links br br Official website