title: Vi (text editor)
id: 32494
vi pronounced as distinct letters is a screen oriented text editor originally created for the Unix operating system The portable subset of the behavior of vi and programs based on it and the ex editor language supported within these programs is described by and thus standardized by the Single Unix Specification and POSIX br The original code for vi was written by Bill Joy in as the visual mode for a line editor called ex that Joy had written with Chuck Haley Bill Joy s ex was released as part of the first Berkeley Software Distribution BSD Unix release in March It was not until version of ex released as part of Second BSD in May that the editor was installed under the name vi which took users straight into ex s visual mode and the name by which it is known today Some current implementations of vi can trace their source code ancestry to Bill Joy others are completely new largely compatible reimplementations br The name vi is derived from the shortest unambiguous abbreviation for the ex command visual which switches the ex line editor to its full screen mode The name is pronounced the English letters v and i br In addition to various non free software variants of vi distributed with proprietary implementations of Unix vi was opensourced with OpenSolaris and several free and open source software vi clones exist A survey of Linux Journal readers found that vi was the most widely used text editor among respondents beating gedit the second most widely used editor by nearly a factor of two to br br br History br br br Creation br br vi was derived from a sequence of UNIX command line editors starting with ed which was a line editor designed to work well on teleprinters rather than display terminals Within AT T Corporation where ed originated people seemed to be happy with an editor as basic and unfriendly as ed George Coulouris recalls br br for many years they had no suitable terminals They carried on with TTYs and other printing terminals for a long time and when they did buy screens for everyone they got Tektronix s These were large storage tube displays You can t run a screen editor on a storage tube display as the picture can t be updated Thus it had to fall to someone else to pioneer screen editing for Unix and that was us initially and we continued to do so for many years br br Coulouris considered the cryptic commands of ed to be only suitable for immortals and thus in February he enhanced ed using Ken Thompson s ed source as a starting point to make em the editor for mortals while acting as a lecturer at Queen Mary College The em editor was designed for display terminals and was a single line at a time visual editor It was one of the first programs on Unix to make heavy use of raw terminal input mode in which the running program rather than the terminal device driver handled all keystrokes When Coulouris visited UC Berkeley in the summer of he brought a DECtape containing em and showed the editor to various people Some people considered this new kind of editor to be a potential resource hog but others including Bill Joy were impressed br Inspired by em and by their own tweaks to ed Bill Joy and Chuck Haley both graduate students at UC Berkeley took code from em to make en and then extended en to create ex version After Haley s departure Bruce Englar encouraged Joy to redesign the editor which he did June through October adding a full screen visual mode to ex which came to be vi br vi and ex share their code vi is the ex binary launching with the capability to render the text being edited onto a computer terminal it is ex s visual mode The name vi comes from the abbreviated ex command vi to enter the visual mode from within it The longform command to do the same was visual and the name vi is explained as a contraction of visual in later literature vi is also the shell command to launch ex vi in the visual mode directly from within a shell br According to Joy many of the ideas in this visual mode were taken from Bravo the bimodal text editor developed at Xerox PARC for the Alto In an interview about vi s origins Joy said br br A lot of the ideas for the screen editing mode were stolen from a Bravo manual I surreptitiously looked at and copied Dot is really the double escape from Bravo the redo command Most of the stuff was stolen There were some things stolen from ed we got a manual page for the Toronto version of ed which I think Rob Pike had something to do with We took some of the regular expression extensions out of that br br Joy used a Lear Siegler ADM A terminal On this terminal the Escape key was at the location now occupied by the Tab key on the widely used IBM PC keyboard on the left side of the alphabetic part of the keyboard one row above the middle row This made it a convenient choice for switching vi modes Also the keys h j k l served double duty as cursor movement keys and were inscribed with arrows which is why vi uses them in that way The ADM A had no other cursor keys Joy explained that the terse single character commands and the ability to type ahead of the display were a result of the slow baud modem he used when developing the software and that he wanted to be productive when the screen was painting slower than he could think br br br Distribution br Joy was responsible for creating the first BSD Unix release in March and included ex dated February in the distribution thereby exposing his editor to an audience beyond UC Berkeley From that release of BSD Unix onward the only editors that came with the Unix system were ed and ex In a interview Joy attributed much of the success of vi to the fact that it was bundled for free whereas other editors such as Emacs could cost hundreds of dollars br Eventually it was observed that most ex users were spending all their time in visual mode and thus in ex released as part of Second Berkeley Software Distribution in May Joy created vi as a hard link to ex such that when invoked as vi ex would automatically start up in its visual mode Thus vi is not the evolution of ex vi is ex br Joy described ex vi as a very large program barely able to fit in the memory of a PDP thus although vi may be regarded as a small lightweight program today it was not seen that way early in its history By version shipped with BSD in December the full version of vi was no longer able to fit in the memory of a PDP the editor would be also too big to run on PC IX for the IBM PC in br Joy continued to be lead developer for vi until version in June and made occasional contributions to vi s development until at least version in August In discussing the origins of vi and why he discontinued development Joy said br br I wish we hadn t used all the keys on the keyboard I think one of the interesting things is that vi is really a mode based editor I think as mode based editors go it s pretty good One of the good things about EMACS though is its programmability and the modelessness Those are two ideas which never occurred to me I also wasn t very good at optimizing code when I wrote vi I think the redisplay module of the editor is almost intractable It does a really good job for what it does but when you re writing programs as you re learning That s why I stopped working on it br What actually happened was that I was in the process of adding multiwindows to vi when we installed our VAX which would have been in December of We didn t have any backups and the tape drive broke I continued to work even without being able to do backups And then the source code got scrunched and I didn t have a complete listing I had almost rewritten all of the display code for windows and that was when I gave up After that I went back to the previous version and just documented the code finished the manual and closed it off If that scrunch had not happened vi would have multiple windows and I might have put in some programmability but I don t know br The fundamental problem with vi is that it doesn t have a mouse and therefore you ve got all these commands In some sense it s backwards from the kind of thing you d get from a mouse oriented thing I think multiple levels of undo would be wonderful too But fundamentally vi is still ed inside You can t really fool it br It s like one of those pinatas things that have candy inside but has layer after layer of paper mache on top It doesn t really have a unified concept I think if I were going to go back I wouldn t go back but start over again br br In Mary Ann Horton took on responsibility for vi Horton added support for arrow and function keys macros and improved performance by replacing termcap with terminfo br br br Ports and clones br br Up to version of vi created in October UC Berkeley was the development home for vi but with Bill Joy s departure in early to join Sun Microsystems and AT T s UNIX System V January adopting vi changes to the vi codebase happened more slowly and in a more dispersed and mutually incompatible way At UC Berkeley changes were made but the version number was never updated beyond Commercial Unix vendors such as Sun HP DEC and IBM each received copies of the vi source and their operating systems Solaris HP UX Tru UNIX and AIX continued to maintain versions of vi directly descended from the release but with added features such as adjustable key mappings encryption and wide character support br In vi was one of several UNIX tools available for Charles River Data Systems UNOS operating system under Bell Laboratories license br While commercial vendors could work with Bill Joy s codebase many people could not Because Joy had begun with Ken Thompson s ed editor ex and vi were derivative works and could not be distributed except to people who had an AT T source license Those wanting a free Unix style editor would have to look elsewhere By a version of Emacs MicroEMACS was available for a variety of platforms but it was not until June that STEVIE ST Editor for VI Enthusiasts a limited vi clone appeared for the Atari ST In early January Steve Kirkendall posted a new clone of vi Elvis to the Usenet newsgroup comp os minix aiming for a more complete and more faithful clone of vi than STEVIE It quickly attracted considerable interest in a number of enthusiast communities Andrew Tanenbaum quickly asked the community to decide on one of these two editors to be the vi clone in Minix Elvis was chosen and remains the vi clone for Minix today br In Lynne Jolitz and William Jolitz began porting BSD Unix to run on class processors but to create a free distribution they needed to avoid any AT T contaminated code including Joy s vi To fill the void left by removing vi their BSD distribution adopted Elvis BSD s descendants FreeBSD and NetBSD followed suit But at UC Berkeley Keith Bostic wanted a bug for bug compatible replacement for Joy s vi for BSD Lite Using Kirkendall s Elvis version as a starting point Bostic created nvi releasing it in the northern spring of When FreeBSD and NetBSD resynchronized the Lite codebase they too switched over to Bostic s nvi which they continue to use today br Despite the existence of vi clones with enhanced feature sets sometime before June Gunnar Ritter ported Joy s vi codebase taken from BSD February to modern Unix based operating systems such as Linux and FreeBSD Initially his work was technically illegal to distribute without an AT T source license but in January those licensing rules were relaxed allowing legal distribution as an open source project Ritter continued to make small enhancements to the vi codebase similar to those done by commercial Unix vendors still using Joy s codebase including changes required by the POSIX standard for vi His work is available as Traditional Vi br But although Joy s vi was now once again available for BSD Unix it arrived after the various BSD flavors had committed themselves to nvi which provided a number of enhancements over traditional vi and dropped some of its legacy features such as open mode for editing one line at a time Thus BSD Unix where Joy s vi codebase began no longer uses it and the AT T derived Unixes which in the early days lacked Joy s editor are the ones that now use and maintain modified versions of his code br br br Impact br Over the years since its creation vi became the de facto standard Unix editor and a hacker favorite outside of MIT until the rise of Emacs after about The Single UNIX Specification specifies vi so every conforming system must have it br vi is still widely used by users of the Unix family of operating systems About half the respondents in a USENET poll preferred vi In Tim O Reilly founder of the eponymous computer book publishing company stated that his company sold more copies of its vi book than its Emacs book br br br Interface br br vi is a modal editor it operates in either insert mode where typed text becomes part of the document or command mode where keystrokes are interpreted as commands that control the edit session For example typing i while in command mode switches the editor to insert mode but typing i again at this point places an i character in the document From insert mode pressing ESC switches the editor back to command mode A perceived advantage of vi s separation of text entry and command modes is that both text editing and command operations can be performed without requiring the removal of the user s hands from the home row As non modal editors usually have to reserve all keys with letters and symbols for the printing of characters any special commands for actions other than adding text to the buffer must be assigned to keys that do not produce characters such as function keys or combinations of modifier keys such as Ctrl and Alt with regular keys Vi has the property that most ordinary keys are connected to some kind of command for positioning altering text searching and so forth either singly or in key combinations Many commands can be touch typed without the use of Ctrl or Alt Other types of editors generally require the user to move their hands from the home row when touch typing br br To use a mouse to select text commands or menu items in a GUI editor br To the arrow keys or editing functions Home End or Function Keys br To invoke commands using modifier keys in conjunction with the standard typewriter keys br For instance in vi replacing a word is cwreplacement textEscape which is a combination of two independent commands change and word motion together with a transition into and out of insert mode Text between the cursor position and the end of the word is overwritten by the replacement text The operation can be repeated at some other location by typing the effect being that the word starting at that location will be replaced with the same replacement text br A human computer interaction textbook notes on its first page that One of the classic UI foibles told and re told by HCI educators around the world is the vi editor s lack of feedback when switching between modes Many a user made the mistake of providing input while in command mode or entering a command while in input mode br br br Contemporary derivatives and clones br br Vim Vi IMproved has many additional features compared to vi including scriptable syntax highlighting mouse support graphical versions visual mode many new editing commands and a large amount of extension in the area of ex commands Vim is included with almost every Linux distribution and is also shipped with every copy of macOS Vim also has a vi compatibility mode in which Vim is more compatible with vi than it would be otherwise although some vi features such as open mode are missing in Vim even in compatibility mode This mode is controlled by the set compatible option It is automatically turned on by Vim when it is started in a situation that looks as if the software might be expected to be vi compatible Vim features that do not conflict with vi compatibility are always available regardless of the setting Vim was derived from a port of STEVIE to the Amiga br Elvis is a free vi clone for Unix and other operating systems written by Steve Kirkendall Elvis introduced a number of features now present in other vi clones including allowing the cursor keys to work in input mode It was the first to provide color syntax highlighting and to generalize syntax highlighting to multiple filetypes Elvis x was used as the starting point for nvi but Elvis added numerous features including multiple buffers windows display modes and file access schemes Elvis is the standard version of vi shipped on Slackware Linux Kate OS and MINIX The most recent version of Elvis is released in October br nvi is an implementation of the ex vi text editor originally distributed as part of the final official Berkeley Software Distribution BSD Lite This is the version of vi that is shipped with all BSD based open source distributions It adds command history and editing filename completions multiple edit buffers and multi windowing including multiple windows on the same edit buffer Beyond from October which is the recommended stable version there have been development releases of nvi the most recent of which is from November br vile was initially derived from an early version of Microemacs in an attempt to bring the Emacs multi window multi buffer editing paradigm to vi users and was first published on Usenet s alt sources in It provides infinite undo UTF compatibility multi window multi buffer operation a macro expansion language syntax highlighting file read and write hooks and more br BusyBox a set of standard Linux utilities in a single executable includes a tiny vi clone br Neovim a refactor of Vim which it strives to supersede br br br See also br br List of text editors br Comparison of text editors br visudo br List of Unix commands br br br br br br Further reading br Lamb Linda Arnold Robbins Learning the vi Editor th ed O Reilly Associates Inc br Robbins Arnold Linda Lamb Elbert Hannah Learning the vi and Vim Editors Seventh Edition O Reilly Associates Inc br br br External links br br The Traditional Vi Source Code for Modern Unix Systems br An Introduction to Display Editing with Vi by Mark Horton and Bill Joy br vi lovers home page br Explanation of modal editing with vi Why oh WHY do those nutheads use vi br The original source code of ex aka vi versions and ported to current UNIX