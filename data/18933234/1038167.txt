title: Vile (text editor)
id: 1038167
vile is a text editor that combines aspects of the Emacs and vi editors These editors are traditionally located on opposing sides of the editor wars as users of either tend to have strong sentiments against the editor they do not use vile attempts to reconcile these positions br vile is an acronym which stands for VI Like Emacs br vile is featured in Chapter of the O Reilly book Learning the vi and Vim Editors br An older version vile was presented in Chapter of the O Reilly book Learning the vi Editor br The program is also known as xvile for the X Window System and as winvile for Microsoft Windows br vile was created and originally maintained by Paul Fox In maintenance was taken over by Thomas Dickey who had provided many major contributions to the codebase over the preceding years br br br Learning to use vile br br Historically vile s documentation has focused on differences from vi This is in contrast to the other common vi clones elvis nvi and vim which have combined their respective extensions with the original vi documentation br vile s documentation is three parts br br The online help file type h br Specialized topics such as the macro language text files br Built in documentation br Tables of commands and other data br Dynamic windows showing register contents mode settings etc br vile is built from a combination of hand crafted code and tables processed by a special purpose program The predefined information from the tables can be rendered in various ways including showing the available commands providing name completion etc In other flavors of vi the analogous tables are not distinct from the hand crafted code br In other vi flavors the information shown is static requiring interaction from the user to make it update In vile however this information is dynamic it updates these special windows as changes are made to the features they render e g the list of all buffers in memory the mode settings corresponding to the buffer which has focus etc br While many of vile s features are now found in other vi compatible editors some of the most powerful were implemented before widespread adoption in the others br For example multiple windows were early features in vile and xvi from the start The same applies to reading from pipes complex fences Some of this is brought out in the O Reilly book though no careful study has been made of the way in which features are adopted and adapted across the vi and emacs variants br br br Features br br br Command completion br vile supports command completion for several elements of a command the command name filename directory name and mode values br br br Major modes br Both vi and emacs have modes which are settings which affect the behavior of the program vile extends the vi modes such as list number etc by providing three levels of mode global buffer and window The buffer modes are associated with the buffer contents e g line terminators read only attributes All of those modes are predefined vile can be customized by defining majormodes which combine specific settings of the buffer modes with an association to the file type These majormodes have as well special modes such as the association with a specific syntax filter br br br Syntax highlighting br vile performs syntax highlighting by running a syntax filter program which parses the buffer contents Initially this was a separate program However to improve performance and avoid display problems these syntax filters usually are compiled into the editor Most of the syntax filters are implemented with lex preferably flex with the remainder in C to address irregular grammars such as Perl and Ruby All of the syntax filters follow the same design br br Read from an external file the color and video attribute information into a chained hash table br Parse the file according to the lexical rules br Find the corresponding color and video attribute information for each lexical element and br Write a marked up copy of the file which is read by vile via a pipe if the syntax filters are external programs or via a function call if they are internal br vile paints the markup information on top of the buffer contents using in regions delimited by line and column numbers The markup is not attached to the underlying buffer contents To update the markup as the buffer is changed requires reanalysis This is done automatically when the user pauses br br br History br vile has been under continuous development since br br br See also br br List of text editors br Comparison of text editors br br br br br br Further reading br Review vile editor is anything but br Review vile and Xvile br vi Clones Feature Summary from Learning the vi Editor th Edition at the Wayback Machine archived br br br External links br br Official website br vile Freecode br Brian Moore s vile page at the Wayback Machine archived January br William Totten s vile page br vi Lovers Homepage br vi Software Links br alt sources posting June 