title: Bash (Unix shell)
id: 4547
Bash short for Bourne Again SHell is a shell program and command language supported by the Free Software Foundation and first developed for the GNU Project by Brian Fox Designed as a free software alternative for the Bourne shell it was initially released in Its moniker is a play on words referencing both its predecessor the Bourne shell and the concept of rebirth br Since its inception Bash has gained widespread adoption and is commonly used as the default login shell for numerous Linux distributions It holds historical significance as one of the earliest programs ported to Linux by Linus Torvalds alongside the GNU Compiler GCC It is available on nearly all modern operating systems making it a versatile tool in various computing environments br As a command processor Bash operates within a text window where users input commands to execute various tasks It also supports the execution of commands from files known as shell scripts facilitating automation In keeping with Unix shell conventions Bash incorporates a rich set of features The keywords syntax dynamically scoped variables and other basic features of the language are all copied from the sh Other features e g history are copied from the csh and the ksh Bash is a POSIX compliant shell but with a number of extensions br br br History br While bash is considered Unix like it s also available on MacOS Windows BeOS and Haiku br Brian Fox began coding Bash on January after Richard Stallman became dissatisfied with the lack of progress being made by a prior developer Stallman and the FSF considered a free shell that could run existing shell scripts so strategic to a completely free system built from BSD and GNU code that this was one of the few projects they funded themselves with Fox undertaking the work as an employee of FSF Fox released Bash as a beta version on June and remained the primary maintainer until sometime between mid and mid when he was laid off from FSF and his responsibility was transitioned to another early contributor Chet Ramey br Since then Bash has become by far the most popular shell among users of Linux becoming the default interactive shell on that operating system s various distributions and on Apple s macOS releases before Catalina in October Bash has also been ported to Microsoft Windows and distributed with Cygwin and MinGW to DOS by the DJGPP project to Novell NetWare to OpenVMS by the GNU project to ArcaOS and to Android via various terminal emulation applications br In September St phane Chazelas a Unix Linux specialist discovered a security bug in the program The bug first disclosed on September was named Shellshock and assigned the numbers CVE CVE and CVE The bug was regarded as severe since CGI scripts using Bash could be vulnerable enabling arbitrary code execution The bug was related to how Bash passes function definitions to subshells through environment variables br br br Features br As a command processor Bash operates within a text window where users input commands to execute various tasks It also supports the execution of commands from files known as shell scripts facilitating automation In keeping with Unix shell conventions Bash incorporates a rich set of features including br br A command line interface br Control structures for condition testing and iteration br UNIX style pipelines br Subshells br Exit status codes br Signaling as a means of inter process communication br Asynchronous execution br A shell portability mode where commands can be interpreted in conformance with the POSIX standard br Invocation as a br Login shell br Interactive shell or br Non interactive shell br Command parsing br Commands are parsed one line at a time br Split into words according to quoting rules br Including ANSI C quoting and br Comments are ignored br A series of expansions are performed on the resulting string br Brace expansion br Tilde expansion br Parameter and variable expansion including br Dynamically scoped variables br Indexed arrays of unlimited size and br Associative arrays br Command substitution br Process substitution br Arithmetic expansion including br Integer arithmetic in any base from two to sixty four br Word splitting again br Pathname expansion br I e globbing and pattern matching and br Quote removal br Redirections of inputs outputs and error data streams are performed including here documents and here strings br Command name lookup is performed in the following order br Commands internal to the shell br Aliases br Shell reserved words br Functions and br built in commands br Commands external to the shell br Separate UNIX style programs such as ls or ln and br Shell scripts which are files containing executable commands Shell scripts do not require compilation before execution and when certain requirements are met can be invoked as commands by using their filename br The resulting string is executed as a command br Bash also offers br br Configurable execution environment s br Shell and session startup files such as bashrc and profile i e dotfiles br Settings set built in and shell options shopt built in which alter shell behavior br With interactive invocation only br Unlimited size command history br Jobs and job control br A directory stack see pushd and popd built ins br Tab completion br Configurable prompts and br Command line editing with GNU readline br Lightweight logging for debugging purposes xtrace and other lightweight debugging options errexit noexec nounset pipefail etc br Shell compatibility modes bash can operate as if it were bash etc br Documentation br A built in help command br A man page and br An info page which is the same as the GNU manual br Informal avenues of support via br IRC at libera chat bash br Mailing lists at https www gnu org software bash br br The keywords syntax dynamically scoped variables and other basic features of the language are all copied from sh Other features e g history are copied from csh and ksh br The Bash command syntax is a superset of the Bourne shell command syntax Bash supports brace expansion command line completion Programmable Completion basic debugging and signal handling using trap since bash a among other features Bash can execute the vast majority of Bourne shell scripts without modification with the exception of Bourne shell scripts stumbling into fringe syntax behavior interpreted differently in Bash or attempting to run a system command matching a newer Bash builtin etc Bash command syntax includes ideas drawn from the Korn Shell ksh and the C shell csh such as command line editing command history history command the directory stack the RANDOM and PPID variables and POSIX command substitution syntax br When a user presses the tab key within an interactive command shell Bash automatically uses command line completion since beta version to match partly typed program names filenames and variable names The Bash command line completion system is very flexible and customizable and is often packaged with functions that complete arguments and filenames for specific programs and tasks br Bash s syntax has many extensions lacking in the Bourne shell Bash can perform integer calculations arithmetic evaluation without spawning external processes It uses the command and the variable syntax for this purpose Its syntax simplifies I O redirection For example it can redirect standard output stdout and standard error stderr at the same time using the operator This is simpler to type than the Bourne shell equivalent command file Bash supports process substitution using the command and command syntax which substitutes the output of or input to a command where a filename is normally used This is implemented through proc fd unnamed pipes on systems that support that or via temporary named pipes where necessary br When using the function keyword Bash function declarations are not compatible with Bourne Korn POSIX scripts the KornShell has the same problem when using function but Bash accepts the same function declaration syntax as the Bourne and Korn shells and is POSIX conformant Because of these and other differences Bash shell scripts are rarely runnable under the Bourne or Korn shell interpreters unless deliberately written with that compatibility in mind which is becoming less common as Linux becomes more widespread But in POSIX mode Bash conforms with POSIX more closely br Bash supports here documents Since version b Bash can redirect standard input stdin from a here string using the operator br Bash supports in process regular expression matching using a syntax reminiscent of Perl br In February Bash introduced support for associative arrays Associative array indices are strings in a manner similar to AWK or Tcl They can be used to emulate multidimensional arrays Bash also switches its license to GPL or later some users suspect this licensing change is why MacOS continues to use older versions Apple finally stopped using Bash in its operating systems as default shell with the release of MacOS Catalina in br br br Brace expansion br Brace expansion also called alternation is a feature copied from the C shell It generates a set of alternative combinations Generated results need not exist as files The results of each expanded string are not sorted and left to right order is preserved br br Users should not use brace expansions in portable shell scripts because the Bourne shell does not produce the same output br br When brace expansion is combined with wildcards the braces are expanded first and then the resulting wildcards are substituted normally Hence a listing of JPEG and PNG images in the current directory could be obtained using br br In addition to alternation brace expansion can be used for sequential ranges between two integers or characters separated by double dots Newer versions of Bash allow a third integer to specify the increment br br When brace expansion is combined with variable expansion A K A parameter expansion and parameter substitution the variable expansion is performed after the brace expansion which in some cases may necessitate the use of the eval built in thus br br br Startup scripts br br When Bash starts it executes the commands in a variety of dot files Unlike Bash shell scripts dot files do typically have neither the execute permission enabled nor an interpreter directive like bin bash br br br Legacy compatible Bash startup example br The example bash profile below is compatible with the Bourne shell and gives semantics similar to csh for the bashrc and bash login The r filename cmd is a short circuit evaluation that tests if filename exists and is readable skipping the part after the if it is not br br br Operating system issues in Bash startup br Some versions of Unix and Linux contain Bash system startup scripts generally under the etc directory Bash executes these files as part of its standard initialization but other startup files can read them in a different order than the documented Bash startup sequence The default content of the root user s files may also have issues as well as the skeleton files the system provides to new user accounts upon setup The startup scripts that launch the X window system may also do surprising things with the user s Bash startup scripts in an attempt to set up user environment variables before launching the window manager These issues can often be addressed using a xsession or xprofile file to read the profile which provides the environment variables that Bash shell windows spawned from the window manager need such as xterm or Gnome Terminal br br br Portability br Invoking Bash with the posix option or stating set o posix in a script causes Bash to conform very closely to the POSIX standard Bash shell scripts intended for portability should take into account at least the POSIX shell standard Some bash features not found in POSIX are br br If a piece of code uses such a feature it is called a bashism a problem for portable use Debian s checkbashisms and Vidar Holen s shellcheck can be used to make sure that a script does not contain these parts The list varies depending on the actual target shell Debian s policy allows some extensions in their scripts as they are in the dash shell while a script intending to support pre POSIX Bourne shells like autoconf s configure are even more limited in the features they can use br br br Keyboard shortcuts br br Bash uses GNU Readline to provide keyboard shortcuts for command line editing using the default Emacs key bindings Vi bindings can be enabled by running set o vi br br br Process management Job control br The Bash shell has two modes of execution for commands batch asynchronous and concurrent synchronous br To execute commands in batch mode i e in sequence they must be separated by the character or on separate lines br br In this example when command is finished command is executed and when command has completed command will execute br A background execution of command can occur using symbol at the end of an execution command and process will be executed in background while returning immediately control to the shell and allowing continued execution of commands br br Or to have a concurrent execution of two command and command they must be executed in the Bash shell in the following way br br In this case command is executed in the background symbol returning immediately control to the shell that executes command in the foreground br A process can be stopped and control returned to bash by typing Ctrl z while the process is running in the foreground br A list of all processes both in the background and stopped can be achieved by running jobs br br In the output the number in brackets refers to the job id The plus sign signifies the default process for bg and fg The text Running and Stopped refer to the process state The last string is the command that started the process br The state of a process can be changed using various commands The fg command brings a process to the foreground while bg sets a stopped process running in the background bg and fg can take a job id as their first argument to specify the process to act on Without one they use the default process identified by a plus sign in the output of jobs The kill command can be used to end a process prematurely by sending it a signal The job id must be specified after a percent sign br br br Conditional execution br Bash supplies conditional execution command separators that make execution of a command contingent on the exit code set by a precedent command For example br br Where do something is only executed if the cd change directory command was successful returned an exit status of zero and the echo command would only be executed if either the cd or the do something command return an error non zero exit status br For all commands the exit status is stored in the special variable Bash also supports if then else fi and case VARIABLE in pattern other pattern esac forms of conditional command evaluation br br br Bug reporting br br An external command called bashbug reports Bash shell bugs When the command is invoked it brings up the user s default editor with a form to fill in The form is mailed to the Bash maintainers or optionally to other email addresses br br br Programmable completion br Bash supports programmable completion via built in complete compopt and compgen commands The feature has been available since the beta version of released in These commands enable complex and intelligent completion specification for commands i e installed programs functions variables and filenames br The complete and compopt two commands specify how arguments of some available commands or options are going to be listed in the readline input As of version completion of the command or the option is usually activated by the Tab keystroke after typing its name br br br Program name br br The program s name is a figure of speech or witticism which begins with an homage to Stephen Bourne the creator of one of the shell programs which have sometimes been considered superseded by the bash shell His name is used as a pun on the image of childbirth With that pun it would seem is added an allusion possibly to the Hindu or Buddhist idea of reincarnation possibly to the Christian idiom known as being born again or quite possibly just to the more abstract idea of renewal While numerous English translations of the Christian New Testament Book of John chapter do contain the words born again Merriam Webster s dictionary has born again defined as a person who has made a renewed or confirmed commitment Whatever the original touchstone may have been in the end the program received the name the Bourne Again SHell br The acronym of that name then is bash a word meaning to strike violently In the context of computer programming to violently hit something such as a computer keyboard could be considered a hyperbolic image of some frustration Such imagery of negative emotionality could be seen as standing in direct juxtaposition to the idea of becoming born again br The naming could be considered an instance of verbal irony or accidental innuendo Bash grammar was initially based on the grammars of the most popular Unix shell programs then currently in use some of which were considered particularly difficult to use or frustrating at that time As the years progressed bash development has made its grammar more user friendly so much so that it seems likely that the bash project has been committed to improving its usablilty Since then bash has become the de facto default shell program in most Linux and Unix operating systems br br br Documentation br As the standard upon which bash is based the POSIX or IEEE Std et seq is informative br The Linux man page is intended to be the authoritative explanatory document for the understanding of how bash operates while the GNU manual is sometimes considered more user friendly for reading You may also find information about Bash by running info bash or by looking at usr share doc bash usr local share doc bash or similar directories on your system A brief summary is available by running bash help br On modern Linuxes information on shell built in commands can be found by executing help help built in name or man builtins at a terminal prompt where bash is installed Some commands such as echo false kill printf test or true depending on your system and on your locally installed version of bash can refer to either a shell built in or a system binary executable file When one of these command name collisions occurs bash will by default execute a given command line using the shell built in Specifying a binary executable s absolute path i e bin printf is one way of ensuring that the shell uses a system binary This name collision issue also effects any help summaries viewed with kill help and bin kill help Shell built ins and system binary executable files of the same name often have differing options br The project maintainer also has a Bash page which includes Frequently Asked Questions this FAQ is current as of bash version and is no longer updated br br br Vulnerabilities br A security hole in Bash dating from version August dubbed Shellshock was discovered in early September and quickly led to a range of attacks across the Internet Patches to fix the bugs were made available soon after the bugs were identified br br br Licensing br Since GPL or later br br to GPL or later br br to GPL or later br br br Versions br A version is also available for Windows and Windows via the Windows Subsystem for Linux It is also the default user shell in Solaris Bash was also the default shell in BeOS and in versions of Apple macOS from originally the default shell was tcsh to macOS Catalina which changed the default shell to zsh although Bash remains available as an alternative shell br br br Release history br br br See also br br Comparison of command shells br br br br br br Further reading br Stephenson Neal In the Beginning Was the Command Line HarperCollins ISBN br Evolution of shells in Linux ibm com Retrieved May br Scripting Reference Scripting with the Bourne Again Shell Bash berkeley edu Retrieved May br IRIS Instructional Research Information Systems FAQ Unix About UNIX Shells berkeley edu Retrieved May 