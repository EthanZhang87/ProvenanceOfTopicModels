title: GNU Guix
id: 37721889
GNU Guix is a functional cross platform package manager and a tool to instantiate and manage Unix like operating systems based on the Nix package manager Configuration and package recipes are written in Guile Scheme GNU Guix is the default package manager of the GNU Guix System distribution br Differing from traditional package managers Guix like Nix utilizes a purely functional deployment model where software is installed into unique directories generated through cryptographic hashes All dependencies for each software are included within each hash This solves the problem of dependency hell allows multiple versions of the same software to coexist and makes packages portable and reproducible Performing scientific computations in a Guix setup has been proposed as a promising response to the replication crisis br The development of GNU Guix is intertwined with the GNU Guix System an installable operating system distribution using the Linux libre kernel and GNU Shepherd init system br br br General features br Guix packages are defined through functional Guile Scheme APIs specifically designed for package management br Dependencies are tracked directly in this language through special values called derivations which are evaluated by the Guix daemon lazily br Guix keeps track of these references automatically so that installed packages can be garbage collected when no other package depends on them at the cost of greater storage requirements all upgrades in Guix are guaranteed to be both atomic and can be rolled back br The roll back feature of Guix is inherited from the design of Nix and is rarely found in other operating systems since it requires an unorthodox approach to how the system should function see MicroOS br The Guix package manager like Nix can however be used on many distributions like Debian and Parabola br This also enables multiple users to safely install software on the same system without administrator privileges br Compared to traditional package managers Guix package stores can grow considerably bigger and therefore require more bandwidth although compared to container solutions like Docker that are also commonly employed to solve dependency hell Guix is leaner and conforms to practices like Don t repeat yourself and Single source of truth br If the user chooses to build everything from source even larger storage space and bandwidth is required br br br The store br Inherited from the design of Nix most of the content of the package manager is kept in a directory gnu store where only the Guix daemon has write access This is achieved via specialised bind mounts where the Store as a file system is mounted read only prohibiting interference even from the root user while the Guix daemon remounts the Store as read writable in its own private namespace Guix talks with this daemon to build things or fetch substitutes which are all kept in the store Users are discouraged from ever manually touching the store by re mounting it as writable since this defeats the whole purpose of the store br br br Garbage collection br Guix like Nix has built in garbage collection facilities to help prune dead store items and keep the live ones br br br Package definitions br This is an example of a package definition for the hello package br br It is written using Guile The package recipes can easily be inspected running e g guix edit hello and changed in Guix making the system transparent and very easy to modify br br br Transactional upgrades br Inherited from the design of Nix all manipulation of store items is independent of each other and the directories of the store begin with a base encoded hash of the source code of the derivation along with its inputs br br br Profiles br Guix package uses profiles generations which are a collection of symlinks to specific store items together comprising what the user has installed into the profile Every time a package is installed or removed a new generation will be built br E g the profile of a user who only installed GNU Hello contains links to the store item which holds the version of hello installed with the currently used guix br E g on version c a e d b f e deb a e f of guix this corresponds to the following item gnu store md plii g sk wg cgwc l xwhrm hello built from the recipe above br In addition to symlinks each profile guix builds also contains a union of all the info manuals man pages icons fonts etc so that the user can browse documentation and have access to all the icons and fonts installed br The default symlinks to profile generations are stored under var guix in the filesystem br br br Multiple user profiles br The user can create any number of profiles by invoking guix package p PROFILE NAME COMMAND A new directory with the profile name as well as profile generation symlinks will then be created in the current directory br br br Roll back br Guix package enables instantaneous roll back to a previous profile generation via changing the symlink to an earlier profile generation Profiles are also stored in the store e g this item is a profile containing hello above gnu store b wipjlsapvnijmbawl sh vpl n profile built and activated when running guix install hello br br br Shell environment br Guix shell enables the user to easily enter an environment where all the necessary packages for development of software are present without clogging up the users default profile with dependencies for multiple projects br E g running guix shell development hello enters a throw away environment where everything needed to compile hello on guix is present gcc guile etc br Without the development flag only the package hello would be installed and not its build dependencies This supplants the guix environment command which installs the dependencies of a package by default as it was considered more intuitive for the command to install the specified packages by default and only install development dependencies with a flag br br br Persistent development environment br If you want a persistent gc rooted environment that is not garbage collected on the next run of guix gc you can create a root br E g running guix shell root hello root development hello enters an environment where everything needed to compile guix is present gcc guile etc and registered as a root in the current directory by symlinking to the items in the store br br br Pack br Guix pack enables the user to bundle together store items and output them as either a docker binary image a relocatable tarball or a squashfs binary br br br Graph br Guix graph enables the user to view different graphs of the packages and their dependencies br br br Guix System operating system br GNU Guix System uses Guix as its package manager and configuration system similar to how NixOS uses Nix br br br History br The project was started in June by Ludovic Court s one of the GNU Guile hackers br The GNU Project announced in November the first release of GNU Guix a functional package manager based on Nix that provides among other things Guile Scheme APIs br On August it was announced that Guix had been ported to GNU Hurd br br br Releases br The project has no fixed release schedule and has until now released approximately every months br br br See also br br GNU Guix System an operating system based on the Guix package manager br Debian GNU Hurd br NixOS A similar operating system which inspired GNU Guix br Comparison of Linux distributions br br br br br br External links br br Official website br Guix System at DistroWatch br List of Guix packages