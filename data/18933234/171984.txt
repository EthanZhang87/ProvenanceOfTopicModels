title: GNU Autotools
id: 171984
The GNU Autotools also known as the GNU Build System is a suite of programming tools designed to assist in making source code packages portable to many Unix like systems br It can be difficult to make a software program portable the C compiler differs from system to system certain library functions are missing on some systems header files may have different names shared libraries may be compiled and installed in different ways One way to handle platform differences is to write conditional code with code blocks selected by means of preprocessor directives ifdef but because of the wide variety of build environments this approach quickly becomes unmanageable Autotools is designed to address this problem more manageably br Autotools is part of the GNU toolchain and is widely used in many free software and open source packages Its component tools are free software licensed under the GNU General Public License with special license exceptions permitting its use with proprietary software br The GNU Build System makes it possible to build many programs using a two step process configure followed by make br br br Components br br Autotools consists of the GNU utilities Autoconf Automake and Libtool Other related tools frequently used alongside it include GNU make GNU gettext pkg config and the GNU Compiler Collection GCC br br br Autoconf br Autoconf generates a configure script based on the contents of a configure ac file which characterizes a particular body of source code The configure script when run scans the build environment and generates a subordinate config status script which in turn converts other input files and most commonly Makefile in into output files Makefile which are appropriate for that build environment Finally the make program uses Makefile to generate executable programs from source code br The complexity of Autotools reflects the variety of circumstances under which a body of source code may be built br br If a source code file is changed then it suffices to re run make which only re compiles that part of the body of the source code affected by the change br If a in file has changed then it suffices to re run config status and make br If the body of source code is copied to another computer then it is sufficient to re run configure which runs config status and make For this reason source code using Autotools is normally distributed without the files that configure generates br If the body of source code is changed more fundamentally then configure ac and the in files need to be changed and all subsequent steps also followed br To process files autoconf uses the GNU implementation of the m macro system br Autoconf comes with several auxiliary programs such as autoheader which is used to help manage C header files autoscan which can create an initial input file for Autoconf and ifnames which can list C pre processor identifiers used in the program br br br Automake br Automake helps to create portable Makefiles which are in turn processed with the make utility It takes its input as Makefile am and turns it into Makefile in which is used by the configure script to generate the file Makefile output It also performs automatic dependency tracking every time a source file is compiled the list of dependencies e g C header files is recorded Later any time make is run and a dependency appears to have changed the dependent files will be rebuilt br br br Libtool br Libtool helps manage the creation of static and dynamic libraries on various Unix like operating systems Libtool accomplishes this by abstracting the library creation process hiding differences between various systems e g Linux systems vs Solaris br br br Usage br Autotools assists software developers to write cross platform software and make it available to a much wider user community including in its source code form to those users who wish to build the software themselves In most cases users simply run the supplied configure script which has no dependencies other than the presence of a Bourne compatible shell and then a make program They do not need to have the Autotools themselves installed on the computer br It can be used both for building native programs on the build machine and also for cross compiling to other architectures br Cross compiling software to run on a Windows host from a Linux or other Unix like build system is also possible using MinGW however native compilation is often desirable on operating systems such as the Microsoft Windows family of systems that cannot run Bourne shell scripts on their own This makes building such software on the Windows operating system a bit harder than on a Unix like system which provides the Bourne shell as a standard component One can install the Cygwin or MSYS system on top of Windows to provide a Unix like compatibility layer though allowing configure scripts to run Cygwin also provides the GNU Compiler Collection GNU make and other software that provides a nearly complete Unix like system within Windows MSYS also provides GNU make and other tools designed to work with the MinGW version of GCC br Although the developer is expected to provide a configure script for the end user occasionally the user may wish to re generate the configure script itself Such working might be necessary if the user wishes to amend the source code itself Such users would need to have Autotools installed and to use components such as its autoreconf br The autoconf generated configure can be slow because it executes programs such as a C compiler many times in order to test whether various libraries header files and language features are present This particularly affects Cygwin which due to its lack of a native fork system call may execute configure scripts considerably slower than Linux br br br Criticism br In his column for ACM Queue FreeBSD developer Poul Henning Kamp criticized the GNU Build System br br The idea is that the configure script performs approximately automated tests so that the user is not burdened with configuring libtool manually This is a horribly bad idea already much criticized back in the s when it appeared as it allows source code to pretend to be portable behind the veneer of the configure script rather than actually having the quality of portability to begin with It is a travesty that the configure idea survived br Kamp sketches the history of the build system in the portability problems inherent in the multitude of s Unix variants and bemoans the need for such build systems to exist br br the lines of configure for libtool still check if sys stat h and stdlib h exist even though the Unixen which lacked them had neither sufficient memory to execute libtool nor disks big enough for its MB source code br Although critics of the Autotools frequently advocate for alternatives that provide greater simplicity to their users some have argued that this is not necessarily a good thing John Calcote author of the Autotools nd Edition A Practitioner s Guide to GNU Autoconf Automake and Libtool opined br br The Autotools are actually more transparent than any other build tools out there All these other tools cmake maven etc that purport to be so much simpler because they insulate the user from the underlying details of the build process these tool s primary failure is that this very insulation keeps users from being able to make the changes they need to accomplish their unique project specific build goals br br Anyone who has nothing but good things to say about this aspect of cmake maven gradle or whatever has simply not worked on a project that requires them to move far enough away from the defaults I ve used them all and I ve spent hours in frustration trying to determine how to work around the shortcomings of some do all except what I want tool function This is simply not an issue with the Autotools As someone mentioned earlier in this thread you can drop shell script into a configure ac file and make script into a Makefile am file That is the very definition of transparency No other tool in existence allows this level of flexibility br br br See also br br List of build automation software br br br br br br External links br Official website