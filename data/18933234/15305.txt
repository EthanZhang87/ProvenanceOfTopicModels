title: Integrated development environment
id: 15305
An integrated development environment IDE is a software application that provides comprehensive facilities for software development An IDE normally consists of at least a source code editor build automation tools and a debugger Some IDEs such as IntelliJ IDEA Eclipse and Lazarus contain the necessary compiler interpreter or both others such as SharpDevelop and NetBeans do not br The boundary between an IDE and other parts of the broader software development environment is not well defined sometimes a version control system or various tools to simplify the construction of a graphical user interface GUI are integrated Many modern IDEs also have a class browser an object browser and a class hierarchy diagram for use in object oriented software development br br br Overview br br Integrated development environments are designed to maximize programmer productivity by providing tight knit components with similar user interfaces IDEs present a single program in which all development is done This program typically provides many features for authoring modifying compiling deploying and debugging software This contrasts with software development using unrelated tools such as vi GDB GNU Compiler Collection or make br One aim of the IDE is to reduce the configuration necessary to piece together multiple development utilities Instead it provides the same set of capabilities as one cohesive unit Reducing setup time can increase developer productivity especially in cases where learning to use the IDE is faster than manually integrating and learning all of the individual tools Tighter integration of all development tasks has the potential to improve overall productivity beyond just helping with setup tasks For example code can be continuously parsed while it is being edited providing instant feedback when syntax errors are introduced thus allowing developers to debug code much faster and more easily with an IDE br Some IDEs are dedicated to a specific programming language allowing a feature set that most closely matches the programming paradigms of the language However there are many multiple language IDEs br While most modern IDEs are graphical text based IDEs such as Turbo Pascal were in popular use before the availability of windowing systems like Microsoft Windows and the X Window System X They commonly use function keys or hotkeys to execute frequently used commands or macros br br br History br br IDEs initially became possible when developing via a console or terminal Early systems could not support one since programs were submitted to a compiler or assembler via punched cards paper tape etc Dartmouth BASIC was the first language to be created with an IDE and was also the first to be designed for use while sitting in front of a console or terminal Its IDE part of the Dartmouth Time Sharing System was command based and therefore did not look much like the menu driven graphical IDEs popular after the advent of the Graphical User Interface However it integrated editing file management compilation debugging and execution in a manner consistent with a modern IDE br Maestro I is a product from Softlab Munich and was the world s first integrated development environment for software Maestro I was installed for programmers worldwide Until installations existed in the Federal Republic of Germany Maestro was arguably the world leader in this field during the s and s Today one of the last Maestro I can be found in the Museum of Information Technology at Arlington in Texas br One of the first IDEs with a plug in concept was Softbench In Computerwoche commented that the use of an IDE was not well received by developers since it would fence in their creativity br As of August the most commonly searched for IDEs on Google Search were Visual Studio Visual Studio Code and Eclipse br br br Topics br br br Syntax highlighting br br The IDE editor usually provides syntax highlighting it can show both the structures the language keywords and the syntax errors with visually distinct colors and font effects br br br Code completion br Code completion is an important IDE feature intended to speed up programming Modern IDEs even have intelligent code completion br br br Intelligent code completion br br br Refactoring br Advanced IDEs provide support for automated refactoring br br br Version control br An IDE is expected to provide integrated version control in order to interact with source repositories br br br Debugging br IDEs are also used for debugging using an integrated debugger with support for setting breakpoints in the editor visual rendering of steps etc br br br Code search br IDEs may provide support for code search Code search has two different meanings First it means searching for class and function declarations usages variable and field read write etc IDEs can use different kinds of user interface for code search for example form based widgets and natural language based interfaces br Second it means searching for a concrete implementation of some specified functionality br br br Visual programming br Visual programming is a usage scenario in which an IDE is generally required Visual Basic allows users to create new applications by moving programming building blocks or code nodes to create flowcharts or structure diagrams that are then compiled or interpreted These flowcharts often are based on the Unified Modeling Language br This interface has been popularized with the Lego Mindstorms system and is being actively perused by a number of companies wishing to capitalize on the power of custom browsers like those found at Mozilla KTechlab supports flowcode and is a popular open source IDE and Simulator for developing software for microcontrollers Visual programming is also responsible for the power of distributed programming cf LabVIEW and EICASLAB software An early visual programming system Max was modeled after an analog synthesizer design and has been used to develop real time music performance software since the s Another early example was Prograph a dataflow based system originally developed for the Macintosh The graphical programming environment Grape is used to program qfix robot kits br This approach is also used in specialist software such as Openlab where the end users want the flexibility of a full programming language without the traditional learning curve associated with one br br br Language support br Some IDEs support multiple languages such as GNU Emacs IntelliJ IDEA Eclipse MyEclipse NetBeans MonoDevelop JDoodle or PlayCode br Support for alternative languages is often provided by plugins allowing them to be installed on the same IDE at the same time For example Flycheck is a modern on the fly syntax checking extension for GNU Emacs with support for languages Another example is JDoodle an online cloud based IDE that supports languages Eclipse and Netbeans have plugins for C C Ada GNAT for example AdaGIDE Perl Python Ruby and PHP which are selected between automatically based on file extension environment or project settings br br br Implementation br IDEs can be implemented in various languages for example br br GNU Emacs using Emacs Lisp and C br IntelliJ IDEA Eclipse and NetBeans using Java br MonoDevelop using C br br br Attitudes across different computing platforms br Unix programmers can combine command line POSIX tools into a complete development environment capable of developing large programs such as the Linux kernel and its environment In this sense the entire Unix system functions as an IDE The free software GNU toolchain including GNU Compiler Collection GCC GNU Debugger GDB and GNU make is available on many platforms including Windows The pervasive Unix philosophy of everything is a text stream enables developers who favor command line oriented tools to use editors with support for many of the standard Unix and GNU build tools building an IDE with programs like br Emacs br or Vim Data Display Debugger is intended to be an advanced graphical front end for many text based debugger standard tools Some programmers prefer managing makefiles and their derivatives to the similar code building tools included in a full IDE For example most contributors to the PostgreSQL database use make and GDB directly to develop new features Even when building PostgreSQL for Microsoft Windows using Visual C Perl scripts are used as a replacement for make rather than relying on any IDE features Some Linux IDEs such as Geany attempt to provide a graphical front end to traditional build operations br On the various Microsoft Windows platforms command line tools for development are seldom used Accordingly there are many commercial and non commercial products However each has a different design commonly creating incompatibilities Most major compiler vendors for Windows still provide free copies of their command line tools including Microsoft Visual C Platform SDK NET Framework SDK nmake utility br IDEs have always been popular on the Apple Macintosh s classic Mac OS and macOS dating back to Macintosh Programmer s Workshop Turbo Pascal THINK Pascal and THINK C environments of the mid s Currently macOS programmers can choose between native IDEs like Xcode and open source tools such as Eclipse and Netbeans ActiveState Komodo is a proprietary multilanguage IDE supported on macOS br br br Online br br An online integrated development environment also known as a web IDE or cloud IDE is a browser based IDE that allows for software development or web development An online IDE can be accessed from a web browser allowing for a portable work environment An online IDE does not usually contain all of the same features as a traditional or desktop IDE although all of the basic IDE features such as syntax highlighting are typically present br A Mobile Based Integrated Development Environment IDE is a software application that provides a comprehensive suite of tools for software development on mobile platforms Unlike traditional desktop IDEs mobile based IDEs are designed to run on smartphones and tablets allowing developers to write debug and deploy code directly from their mobile devices br br br See also br br br 