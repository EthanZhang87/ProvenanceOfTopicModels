title: Git
id: 1771747
Git is a distributed version control system that tracks versions of files It is often used to control source code by programmers collaboratively developing software br Design goals of Git include speed data integrity and support for distributed non linear workflows thousands of parallel branches running on different computers br Git was created for use in the development of the Linux kernel by Linus Torvalds and others developing the kernel br As with most other distributed version control systems and unlike most client server systems Git maintains a local copy of the entire repository a k a repo with history and version tracking abilities independent of network access or a central server A repo is stored on each computer in a standard directory with additional hidden files to provide version control capabilities Git provides features to synchronize changes between repos that share history copied cloned from each other For collaboration Git supports synchronizing with repos on remote machines Although all repos with the same history are peers developers often use a central server to host a repo to hold an integrated copy br Git is a free and open source software shared under the GPL only license br The trademark Git is registered by the Software Freedom Conservancy marking its official recognition and continued evolution in the open source community br Today Git is the de facto standard version control system It is the most popular distributed version control system with nearly of developers reporting it as their primary version control system as of It is the most widely used source code management tool among professional developers There are offerings of Git repository services including GitHub SourceForge Bitbucket and GitLab br br br History br Torvalds started developing Git in April after the free license for the proprietary source control management SCM system used for Linux kernel development since BitKeeper was revoked for Linux development The copyright holder of BitKeeper Larry McVoy claimed that Andrew Tridgell had created SourcePuller by reverse engineering the BitKeeper protocols The same incident also spurred the creation of another version control system Mercurial br Torvalds wanted a distributed system that he could use like BitKeeper but none of the available free systems met his needs He cited an example of a source control management system needing seconds to apply a patch and update all associated metadata and noted that this would not scale to the needs of Linux kernel development where synchronizing with fellow maintainers could require such actions at once For his design criterion he specified that patching should take no more than three seconds and added three more goals br br Take the Concurrent Versions System CVS as an example of what not to do if in doubt make the exact opposite decision br Support a distributed BitKeeper like workflow br Include very strong safeguards against corruption either accidental or malicious br These criteria eliminated every version control system in use at the time so immediately after the rc Linux kernel development release Torvalds set out to write his own br The development of Git began on April Torvalds announced the project on April and became self hosting the next day The first merge of multiple branches took place on April Torvalds achieved his performance goals on April the nascent Git was benchmarked recording patches to the Linux kernel tree at a rate of patches per second On June Git managed the kernel release br Torvalds turned over maintenance on July to Junio Hamano a major contributor to the project Hamano was responsible for the release on December br br br Naming br Torvalds sarcastically quipped about the name git which means unpleasant person in British English slang I m an egotistical bastard and I name all my projects after myself First Linux now git The man page describes Git as the stupid content tracker br The read me file of the source code elaborates further br br git can mean anything depending on your mood br Random three letter combination that is pronounceable and not actually used by any common UNIX command The fact that it is a mispronunciation of get may or may not be relevant br Stupid Contemptible and despicable Simple Take your pick from the dictionary of slang br Global information tracker you re in a good mood and it actually works for you Angels sing and a light suddenly fills the room br Goddamn idiotic truckload of sh t when it breaks br br The source code for Git refers to the program as the information manager from hell br br br Characteristics br br br Design br Git s design is a synthesis of Torvalds s experience with Linux in maintaining a large distributed development project along with his intimate knowledge of file system performance gained from the same project and the urgent need to produce a working system in short order These influences led to the following implementation choices br br Strong support for non linear development br Git supports rapid branching and merging and includes specific tools for visualizing and navigating a non linear development history In Git a core assumption is that a change will be merged more often than it is written as it is passed around to various reviewers In Git branches are very lightweight a branch is only a reference to one commit br Distributed development br Like Darcs BitKeeper Mercurial Bazaar and Monotone Git gives each developer a local copy of the full development history and changes are copied from one such repository to another These changes are imported as added development branches and can be merged in the same way as a locally developed branch br Compatibility with existing systems and protocols br Repositories can be published via Hypertext Transfer Protocol Secure HTTPS Hypertext Transfer Protocol HTTP File Transfer Protocol FTP or a Git protocol over either a plain socket or Secure Shell ssh Git also has a CVS server emulation which enables the use of existing CVS clients and IDE plugins to access Git repositories Subversion repositories can be used directly with git svn br Efficient handling of large projects br Torvalds has described Git as being very fast and scalable and performance tests done by Mozilla showed that it was an order of magnitude faster diffing large repositories than Mercurial and GNU Bazaar fetching version history from a locally stored repository can be one hundred times faster than fetching it from the remote server br Cryptographic authentication of history br The Git history is stored in such a way that the ID of a particular version a commit in Git terms depends upon the complete development history leading up to that commit Once it is published it is not possible to change the old versions without it being noticed The structure is similar to a Merkle tree but with added data at the nodes and leaves Mercurial and Monotone also have this property br Toolkit based design br Git was designed as a set of programs written in C and several shell scripts that provide wrappers around those programs Although most of those scripts have since been rewritten in C for speed and portability the design remains and it is easy to chain the components together br Pluggable merge strategies br As part of its toolkit design Git has a well defined model of an incomplete merge and it has multiple algorithms for completing it culminating in telling the user that it is unable to complete the merge automatically and that manual editing is needed br Garbage accumulates until collected br Aborting operations or backing out changes will leave useless dangling objects in the database These are generally a small fraction of the continuously growing history of wanted objects Git will automatically perform garbage collection when enough loose objects have been created in the repository Garbage collection can be called explicitly using git gc br Periodic explicit object packing br Git stores each newly created object as a separate file Although individually compressed this takes up a great deal of space and is inefficient This is solved by the use of packs that store a large number of objects delta compressed among themselves in one file or network byte stream called a packfile Packs are compressed using the heuristic that files with the same name are probably similar without depending on this for correctness A corresponding index file is created for each packfile telling the offset of each object in the packfile Newly created objects with newly added history are still stored as single objects and periodic repacking is needed to maintain space efficiency The process of packing the repository can be very computationally costly By allowing objects to exist in the repository in a loose but quickly generated format Git allows the costly pack operation to be deferred until later when time matters less e g the end of a workday Git does periodic repacking automatically but manual repacking is also possible with the git gc command For data integrity both the packfile and its index have an SHA checksum inside and the file name of the packfile also contains an SHA checksum To check the integrity of a repository run the git fsck command br Another property of Git is that it snapshots directory trees of files The earliest systems for tracking versions of source code Source Code Control System SCCS and Revision Control System RCS worked on individual files and emphasized the space savings to be gained from interleaved deltas SCCS or delta encoding RCS the mostly similar versions Later revision control systems maintained this notion of a file having an identity across multiple revisions of a project However Torvalds rejected this concept Consequently Git does not explicitly record file revision relationships at any level below the source code tree br br br Downsides br These implicit revision relationships have some significant consequences br br It is slightly more costly to examine the change history of one file than the whole project To obtain a history of changes affecting a given file Git must walk the global history and then determine whether each change modified that file This method of examining history does however let Git produce with equal efficiency a single history showing the changes to an arbitrary set of files For example a subdirectory of the source tree plus an associated global header file is a very common case br Renames are handled implicitly rather than explicitly A common complaint with CVS is that it uses the name of a file to identify its revision history so moving or renaming a file is not possible without either interrupting its history or renaming the history and thereby making the history inaccurate Most post CVS revision control systems solve this by giving a file a unique long lived name analogous to an inode number that survives renaming Git does not record such an identifier and this is claimed as an advantage Source code files are sometimes split or merged or simply renamed and recording this as a simple rename would freeze an inaccurate description of what happened in the immutable history Git addresses the issue by detecting renames while browsing the history of snapshots rather than recording it when making the snapshot Briefly given a file in revision N a file of the same name in revision N is its default ancestor However when there is no like named file in revision N Git searches for a file that existed only in revision N and is very similar to the new file However it does require more CPU intensive work every time the history is reviewed and several options to adjust the heuristics are available This mechanism does not always work sometimes a file that is renamed with changes in the same commit is read as a deletion of the old file and the creation of a new file Developers can work around this limitation by committing the rename and the changes separately br br br Merging strategies br Git implements several merging strategies a non default strategy can be selected at merge time br br resolve the traditional three way merge algorithm br recursive This is the default when pulling or merging one branch and is a variant of the three way merge algorithm When there are more than one common ancestors that can be used for a three way merge it creates a merged tree of the common ancestors and uses that as the reference tree for the three way merge This has been reported to result in fewer merge conflicts without causing mis merges by tests done on prior merge commits taken from Linux kernel development history Also this can detect and handle merges involving renames br octopus This is the default when merging more than two heads br br br Data structures br Git s primitives are not inherently a source code management system Torvalds explains br br In many ways you can just see git as a filesystem it s content addressable and it has a notion of versioning but I really designed it coming at the problem from the viewpoint of a filesystem person hey kernels is what I do and I actually have absolutely zero interest in creating a traditional SCM system br From this initial design approach Git has developed the full set of features expected of a traditional SCM with features mostly being created as needed then refined and extended over time br br Git has two data structures a mutable index also called stage or cache that caches information about the working directory and the next revision to be committed and an object database that stores immutable objects br The index serves as a connection point between the object database and the working tree br The object store contains five types of objects br br A blob is the content of a file Blobs have no proper file name time stamps or other metadata a blob s name internally is a hash of its content In Git each blob is a version of a file in which is the file s data br A tree object is the equivalent of a directory It contains a list of file names each with some type bits and a reference to a blob or tree object that is that file symbolic link or directory s contents These objects are a snapshot of the source tree In whole this comprises a Merkle tree meaning that only a single hash for the root tree is sufficient and actually used in commits to precisely pinpoint to the exact state of whole tree structures of any number of sub directories and files br A commit object links tree objects together into history It contains the name of a tree object of the top level source directory a timestamp a log message and the names of zero or more parent commit objects br A tag object is a container that contains a reference to another object and can hold added meta data related to another object Most commonly it is used to store a digital signature of a commit object corresponding to a particular release of the data being tracked by Git br A packfile object collects various other objects into a zlib compressed bundle for compactness and ease of transport over network protocols br Each object is identified by a SHA hash of its contents Git computes the hash and uses this value for the object s name The object is put into a directory matching the first two characters of its hash The rest of the hash is used as the file name for that object br Git stores each revision of a file as a unique blob The relationships between the blobs can be found through examining the tree and commit objects Newly added objects are stored in their entirety using zlib compression This can consume a large amount of disk space quickly so objects can be combined into packs which use delta compression to save space storing blobs as their changes relative to other blobs br Additionally Git stores labels called refs short for references to indicate the locations of various commits They are stored in the reference database and are respectively br br Heads branches Named references that are advanced automatically to the new commit when a commit is made on top of them br HEAD A reserved head that will be compared against the working tree to create a commit br Tags Like branch references but fixed to a particular commit Used to label important points in history br br br Commands br Frequently used commands for Git s command line interface include br br git init which is used to create a git repository br git clone URL which clones or duplicates a git repository from an external URL br git add file which adds a file to git s working directory files about to be committed br git commit m commit message which commits the files from the current working directory so they are now part of the repository s history br A gitignore file may be created in a Git repository as a plain text file The files listed in the gitignore file will not be tracked by Git This feature can be used to ignore files with keys or passwords various extraneous files and large files which GitHub will refuse to upload br br br Git references br Every object in the Git database that is not referred to may be cleaned up by using a garbage collection command or automatically An object may be referenced by another object or an explicit reference Git has different types of references The commands to create move and delete references vary git show ref lists all references Some types are br br heads refers to an object locally br remotes refers to an object which exists in a remote repository br stash refers to an object not yet committed br meta e g a configuration in a bare repository user rights the refs meta config namespace was introduced retrospectively gets used by Gerrit br tags see above br br br Implementations br br Git the main implementation in C is primarily developed on Linux although it also supports most major operating systems including the BSDs DragonFly BSD FreeBSD NetBSD and OpenBSD Solaris macOS and Windows br The first Windows port of Git was primarily a Linux emulation framework that hosts the Linux version Installing Git under Windows creates a similarly named Program Files directory containing the Mingw w port of the GNU Compiler Collection Perl MSYS itself a fork of Cygwin a Unix like emulation environment for Windows and various other Windows ports or emulations of Linux utilities and libraries Currently native Windows builds of Git are distributed as and bit installers The git official website currently maintains a build of Git for Windows still using the MSYS environment br The JGit implementation of Git is a pure Java software library designed to be embedded in any Java application JGit is used in the Gerrit code review tool and in EGit a Git client for the Eclipse IDE br Go git is an open source implementation of Git written in pure Go It is currently used for backing projects as a SQL interface for Git code repositories and providing encryption for Git br Dulwich is an implementation of Git written in pure Python with support for CPython and later and Pypy br The libgit implementation of Git is an ANSI C software library with no other dependencies which can be built on multiple platforms including Windows Linux macOS and BSD It has bindings for many programming languages including Ruby Python and Haskell br JS Git is a JavaScript implementation of a subset of Git br GameOfTrees is an open source implementation of Git for the OpenBSD project br br br Git server br br As Git is a distributed version control system it could be used as a server out of the box It is shipped with a built in command git daemon which starts a simple TCP server running on the Git protocol Dedicated Git HTTP servers help amongst other features by adding access control displaying the contents of a Git repository via the web interfaces and managing multiple repositories Already existing Git repositories can be cloned and shared to be used by others as a centralized repo It can also be accessed via remote shell just by having the Git software installed and allowing a user to log in Git servers typically listen on TCP port br br br Open source br Hosting the Git server using the Git Binary br Gerrit a Git server configurable to support code reviews and provide access via ssh an integrated Apache MINA or OpenSSH or an integrated Jetty web server Gerrit provides integration for LDAP Active Directory OpenID OAuth Kerberos GSSAPI X https client certificates With Gerrit all configurations will be stored as Git repositories and no database is required to run Gerrit has a pull request feature implemented in its core but lacks a GUI for it br Phabricator a spin off from Facebook As Facebook primarily uses Mercurial Git support is not as prominent br RhodeCode Community Edition CE supporting Git Mercurial and Subversion with an AGPLv license br Kallithea supporting both Git and Mercurial developed in Python with GPL license br External projects like gitolite which provide scripts on top of Git software to provide fine grained access control br There are several other FLOSS solutions for self hosting including Gogs Gitea a fork of Gogs as well as Forgejo which is in turn a fork of Gitea Gogs as well as the two aforementioned derivatives of it is developed using the Go language All three solutions are made available under the MIT license br br br Git server as a service br br There are many offerings of Git repositories as a service The most popular are GitHub SourceForge Bitbucket and GitLab br br br Graphical interfaces br br Git a powerful version control system can be daunting with its command line interface Git GUI clients offer a graphical user interface GUI to simplify interaction with Git repositories br These GUIs provide visual representations of your project s history including branches commits and file changes They also streamline actions like staging changes creating commits and managing branches Visual diff tools help resolve merge conflicts arising from concurrent development br Git comes with a Tcl Tk GUI which allows users to perform actions such as creating and amending commits creating and merging branches and interacting with remote repositories br In addition to the official GUI many rd party interfaces exist that provide similar features to the official GUI distributed with Git such as GitHub Desktop SourceTree and TortoiseGit br GUI clients make Git easier to learn and use improving workflow efficiency and reducing errors Popular options include cross platform GitKraken Desktop freemium and Sourcetree free paid or platform specific choices like GitHub Desktop free for Windows macOS and TortoiseGit free for Windows br br br List of GUI Clients br While Git provides built in GUI tools git gui gitk a wider range of third party options cater to platform specific user preferences br br br Windows GUIs GNU GPL MIT and Free br GitHub Desktop br SourceTree br TortoiseGit br Git Extensions br gitg br MeGit based on EGit br GitUI br br br Mac GUIs GNU GPL MIT and Free br GitHub Desktop br SourceTree br br br Linux GUIs GNU GPL MIT and Free br gitg br MeGit based on EGit br GitUI br giggle br br br Proprietary GIT GUI br SmartGit Windows Linux Mac br GitKraken Desktop Windows Linux Mac br Glint Windows Linux Mac br br br Adoption br The Eclipse Foundation reported in its annual community survey that as of May Git is now the most widely used source code management tool with of professional software developers reporting that they use Git as their primary source control system compared with in in or for Git responses excluding use of GitHub in in in and in Open source directory Black Duck Open Hub reports a similar uptake among open source projects br Stack Overflow has included version control in their annual developer survey in responses responses responses and responses Git was the overwhelming favorite of responding developers in these surveys reporting as high as in br Version control systems used by responding developers br br The UK IT jobs website itjobswatch co uk reports that as of late September of UK permanent software development job openings have cited Git ahead of for Microsoft Team Foundation Server for Subversion for Mercurial and for Visual SourceSafe br br br Extensions br There are many Git extensions like Git LFS which started as an extension to Git in the GitHub community and is now widely used by other repositories Extensions are usually independently developed and maintained by different people but at some point in the future a widely used extension can be merged with Git br Other open source Git extensions include br br git annex a distributed file synchronization system based on Git br git flow a set of Git extensions to provide high level repository operations for Vincent Driessen s branching model br git machete a repository organizer tool for automating rebase merge pull push operations br Microsoft developed the Virtual File System for Git VFS for Git formerly Git Virtual File System or GVFS extension to handle the size of the Windows source code tree as part of their migration from Perforce VFS for Git allows cloned repositories to use placeholders whose contents are downloaded only once a file is accessed br br br Conventions br Git can be used in a variety of different ways but some conventions are commonly adopted br br The command to create a local repo git init creates a branch named master Often it is used as the integration branch for merging changes into Since the default upstream remote is named origin the default remote branch is origin master Some tools such as GitHub and GitLab create a default branch named main instead Also users can add and delete branches and choose any branch for integrating br Pushed commits generally are not overwritten but are reverted by committing another change which reverses an earlier commit This prevents shared commits from being invalid because the commit on which they are based does not exist in the remote If the commits contain sensitive information they should be removed which involves a more complex procedure to rewrite history br The git flow workflow and naming conventions are often adopted to distinguish feature specific unstable histories feature unstable shared histories develop production ready histories main and emergency patches to released products hotfix br A pull request a k a merge request is a request by a user to merge a branch into another branch Git does not itself provide for pull requests but it is a common feature of git cloud services The underlying function of a pull request is no different than that of an administrator of a repository pulling changes from another remote the repository that is the source of the pull request However the pull request itself is a ticket managed by the hosting server which perform these actions it is not a feature of git SCM br br br Security br Git does not provide access control mechanisms but was designed for operation with other tools that specialize in access control br On December an exploit was found affecting the Windows and macOS versions of the Git client An attacker could perform arbitrary code execution on a target computer with Git installed by creating a malicious Git tree directory named git a directory in Git repositories that stores all the data of the repository in a different case such as GIT or Git needed because Git does not allow the all lowercase version of git to be created manually with malicious files in the git hooks subdirectory a folder with executable files that Git runs on a repository that the attacker made or on a repository that the attacker can modify If a Windows or Mac user pulls downloads a version of the repository with the malicious directory then switches to that directory the git directory will be overwritten due to the case insensitive trait of the Windows and Mac filesystems and the malicious executable files in git hooks may be run which results in the attacker s commands being executed An attacker could also modify the git config configuration file which allows the attacker to create malicious Git aliases aliases for Git commands or external commands or modify extant aliases to execute malicious commands when run The vulnerability was patched in version of Git released on December and announced the next day br Git version released on September contained a patch for a security vulnerability CVE that allowed arbitrary code execution The vulnerability was exploitable if an attacker could convince a victim to clone a specific URL as the arbitrary commands were embedded in the URL itself An attacker could use the exploit via a man in the middle attack if the connection was unencrypted as they could redirect the user to a URL of their choice Recursive clones were also vulnerable since they allowed the controller of a repository to specify arbitrary URLs via the gitmodules file br Git uses SHA hashes internally Linus Torvalds has responded that the hash was mostly to guard against accidental corruption and the security a cryptographically secure hash gives was just an accidental side effect with the main security being signing elsewhere Since a demonstration of the SHAttered attack against git in git was modified to use a SHA variant resistant to this attack A plan for hash function transition is being written since February br br br Trademark br Git is a registered word trademark of Software Freedom Conservancy under US since br br br See also br br Comparison of source code hosting facilities br Comparison of version control software br List of version control software br br br Notes br br br Citations br br br External links br br Official website br Git at Open Hub