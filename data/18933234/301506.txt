title: Fork (software development)
id: 301506
In software engineering a project fork happens when developers take a copy of source code from one software package and start independent development on it creating a distinct and separate piece of software The term often implies not merely a development branch but also a split in the developer community as such it is a form of schism Grounds for forking are varying user preferences and stagnated or discontinued development of the original software br Free and open source software is that which by definition may be forked from the original development team without prior permission and without violating copyright law However licensed forks of proprietary software e g Unix also happen br br br Etymology br The word fork has been used to mean to divide in branches go separate ways as early as the th century In the software environment the word evokes the fork system call which causes a running process to split itself into two almost identical copies that typically diverge to perform different tasks br In the context of software development fork was used in the sense of creating a revision control branch by Eric Allman as early as in the context of Source Code Control System br br Creating a branch forks off a version of the program br The term was in use on Usenet by for the process of creating a subgroup to move topics of discussion to br Fork is not known to have been used in the sense of a community schism during the origins of Lucid Emacs now XEmacs or the Berkeley Software Distributions BSDs Russ Nelson used the term shattering for this sort of fork in attributing it to John Gilmore However fork was in use in the present sense by to describe the XEmacs split and was an understood usage in the GNU Project by br br br Forking of free and open source software br Free and open source software may be legally forked without prior approval of those currently developing managing or distributing the software per both The Free Software Definition and The Open Source Definition br br The freedom to distribute copies of your modified versions to others freedom By doing this you can give the whole community a chance to benefit from your changes Access to the source code is a precondition for this br Derived Works The license must allow modifications and derived works and must allow them to be distributed under the same terms as the license of the original software br In free software forks often result from a schism over different goals or personality clashes In a fork both parties assume nearly identical code bases but typically only the larger group or whoever controls the web site will retain the full original name and the associated user community Thus there is a reputation penalty associated with forking The relationship between the different teams can be cordial or very bitter On the other hand a friendly fork or a soft fork is a fork that does not intend to compete but wants to eventually merge with the original br Eric S Raymond in his essay Homesteading the Noosphere stated that The most important characteristic of a fork is that it spawns competing projects that cannot later exchange code splitting the potential developer community He notes in the Jargon File br br Forking is considered a Bad Thing not merely because it implies a lot of wasted effort in the future but because forks tend to be accompanied by a great deal of strife and acrimony between the successor groups over issues of legitimacy succession and design direction There is serious social pressure against forking As a result major forks such as the Gnu Emacs XEmacs split the fissioning of the BSD group into three daughter projects and the short lived GCC EGCS split are rare enough that they are remembered individually in hacker folklore br David A Wheeler notes four possible outcomes of a fork with examples br br The death of the fork This is by far the most common case It is easy to declare a fork but considerable effort to continue independent development and support br A re merging of the fork e g egcs becoming blessed as the new version of GNU Compiler Collection br The death of the original e g the X Org Server succeeding and XFree dying br Successful branching typically with differentiation e g OpenBSD and NetBSD br Distributed revision control DVCS tools have popularised a less emotive use of the term fork blurring the distinction with branch With a DVCS such as Mercurial or Git the normal way to contribute to a project is to first create a personal branch of the repository independent of the main repository and later seek to have your changes integrated with it Sites such as GitHub Bitbucket and Launchpad provide free DVCS hosting expressly supporting independent branches such that the technical social and financial barriers to forking a source code repository are massively reduced and GitHub uses fork as its term for this method of contribution to a project br Forks often restart version numbering from or even if the original software was at version or An exception is when the forked software is designed to be a drop in replacement for the original project e g MariaDB for MySQL or LibreOffice for OpenOffice org br The BSD licenses permit forks to become proprietary software and copyleft proponents say that commercial incentives thus make proprietisation almost inevitable Copyleft licenses can however be circumvented via dual licensing with a proprietary grant in the form of a Contributor License Agreement Examples include macOS based on the proprietary NeXTSTEP and the open source FreeBSD Cedega and CrossOver proprietary forks of Wine though CrossOver tracks Wine and contributes considerably EnterpriseDB a fork of PostgreSQL adding Oracle compatibility features Supported PostgreSQL with their proprietary ESM storage system and Netezza s proprietary highly scalable derivative of PostgreSQL Some of these vendors contribute back changes to the community project while some keep their changes as their own competitive advantages br br br Forking proprietary software br In proprietary software the copyright is usually held by the employing entity not by the individual software developers Proprietary code is thus more commonly forked when the owner needs to develop two or more versions such as a windowed version and a command line version or versions for differing operating systems such as a word processor for IBM PC compatible machines and Macintosh computers Generally such internal forks will concentrate on having the same look feel data format and behavior between platforms so that a user familiar with one can also be productive or share documents generated on the other This is almost always an economic decision to generate a greater market share and thus pay back the associated extra development costs created by the fork br A notable proprietary fork not of this kind is the many varieties of proprietary Unix almost all derived from AT T Unix under license and all called Unix but increasingly mutually incompatible See Unix wars br br br See also br List of software forks br Source port br Downstream software development br Group decision making br Modular programming br Modding br Custom software br Personalization br Team effectiveness br Duplicate code br ROM Hacking br br br br br br External links br Right to Fork at Meatball Wiki br A PhD examining forking Nyman Archived July at the Wayback Machine Understanding Code Forking in Open Source Software An examination of code forking its effect on open source software and how it is viewed and practiced by developers 