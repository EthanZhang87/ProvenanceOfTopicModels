title: Bounded quantification
id: 24103948
In type theory bounded quantification also bounded polymorphism or constrained genericity refers to universal or existential quantifiers which are restricted bounded to range only over the subtypes of a particular type Bounded quantification is an interaction of parametric polymorphism with subtyping Bounded quantification has traditionally been studied in the functional setting of System F but is available in modern object oriented languages supporting parametric polymorphism generics such as Java C and Scala br br br Overview br The purpose of bounded quantification is to allow for polymorphic functions to depend on some specific behaviour of objects instead of type inheritance It assumes a record based model for object classes where every class member is a record element and all class members are named functions Object attributes are represented as functions that take no argument and return an object The specific behaviour is then some function name along with the types of the arguments and the return type Bounded quantification considers all objects with such a function An example would be a polymorphic min function that considers all objects that are comparable to each other br br br F bounded quantification br F bounded quantification or recursively bounded quantification introduced in allows for more precise typing of functions that are applied on recursive types A recursive type is one that includes a function that uses it as a type for some argument or its return value br br br Example br This kind of type constraint can be expressed in Java with a generic interface The following example demonstrates how to describe types that can be compared to each other and use this as typing information in polymorphic functions The Test min function uses simple bounded quantification and does not ensure the objects are mutually comparable in contrast with the Test fMin function which uses F bounded quantification br In mathematical notation the types of the two functions are br br min T S compareTo T int S S S br fMin T Comparable T T T T br where br br Comparable T compareTo T int br br br See also br Covariance and contravariance computer science br Curiously recurring template pattern br Wildcard Java br br br Notes br br br br Cardelli Luca Wegner Peter December On Understanding Types Data Abstraction and Polymorphism PDF ACM Computing Surveys CiteSeerX doi ISSN S CID br Peter S Canning William R Cook Walter L Hill John C Mitchell and William Olthoff F bounded polymorphism for object oriented programming In Conference on Functional Programming Languages and Computer Architecture br Benjamin C Pierce Intersection types and bounded polymorphism Lecture Notes in Computer Science br Gilad Bracha Martin Odersky David Stoutamire and Philip Wadler Making the future safe for the past Adding genericity to the Java programming language In Object Oriented Programming Systems Languages Applications OOPSLA ACM October br Andrew Kennedy and Don Syme Design and Implementation of Generics for the NET Common Language Runtime In Programming Language Design and Implementation br Pierce Benjamin C Types and Programming Languages MIT Press ISBN Chapter Bounded quantification br br br External links br Bounded Polymorphism at the Portland Pattern Repository br F bounded Polymorphism in The Cecil Language Specification and Rationale