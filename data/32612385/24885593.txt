title: Term (logic)
id: 24885593
In mathematical logic a term denotes a mathematical object while a formula denotes a mathematical fact In particular terms appear as components of a formula This is analogous to natural language where a noun phrase refers to an object and a whole sentence refers to a fact br A first order term is recursively constructed from constant symbols variables and function symbols br An expression formed by applying a predicate symbol to an appropriate number of terms is called an atomic formula which evaluates to true or false in bivalent logics given an interpretation br For example br br br br br x br br br br br br x br br br br br br displaystyle x x br br is a term built from the constant the variable x and the binary function symbols br br br br br br br displaystyle br br and br br br br br br br displaystyle br br it is part of the atomic formula br br br br br x br br br br br br x br br br br br br br br displaystyle x x geq br br which evaluates to true for each real numbered value of x br Besides in logic terms play important roles in universal algebra and rewriting systems br br br Formal definition br br Given a set V of variable symbols a set C of constant symbols and sets Fn of n ary function symbols also called operator symbols for each natural number n the set of unsorted first order terms T is recursively defined to be the smallest set with the following properties br br every variable symbol is a term V T br every constant symbol is a term C T br from every n terms t tn and every n ary function symbol f Fn a larger term f t tn can be built br Using an intuitive pseudo grammatical notation this is sometimes written as br br t x c f t tn br The signature of the term language describes which function symbol sets Fn are inhabited Well known examples are the unary function symbols sin cos F and the binary function symbols F Ternary operations and higher arity functions are possible but uncommon in practice Many authors consider constant symbols as ary function symbols F thus needing no special syntactic class for them br A term denotes a mathematical object from the domain of discourse A constant c denotes a named object from that domain a variable x ranges over the objects in that domain and an n ary function f maps n tuples of objects to objects For example if n V is a variable symbol C is a constant symbol and add F is a binary function symbol then n T T and hence add n T by the first second and third term building rule respectively The latter term is usually written as n using infix notation and the more common operator symbol for convenience br br br Term structure vs representation br Originally logicians defined a term to be a character string adhering to certain building rules However since the concept of tree became popular in computer science it turned out to be more convenient to think of a term as a tree For example several distinct character strings like n n n n and br br br br br br br n br br n br br br br br br br br br br displaystyle frac n n br br denote the same term and correspond to the same tree viz the left tree in the above picture br Separating the tree structure of a term from its graphical representation on paper it is also easy to account for parentheses being only representation not structure and invisible multiplication operators existing only in structure not in representation br br br Structural equality br Two terms are said to be structurally literally or syntactically equal if they correspond to the same tree For example the left and the right tree in the above picture are structurally unequal terms although they might be considered semantically equal as they always evaluate to the same value in rational arithmetic While structural equality can be checked without any knowledge about the meaning of the symbols semantic equality cannot If the function is e g interpreted not as rational but as truncating integer division then at n the left and right term evaluates to and respectively br Structural equal terms need to agree in their variable names br In contrast a term t is called a renaming or a variant of a term u if the latter resulted from consistently renaming all variables of the former i e if u t for some renaming substitution In that case u is a renaming of t too since a renaming substitution has an inverse and t u Both terms are then also said to be equal modulo renaming In many contexts the particular variable names in a term don t matter e g the commutativity axiom for addition can be stated as x y y x or as a b b a in such cases the whole formula may be renamed while an arbitrary subterm usually may not e g x y b a is not a valid version of the commutativity axiom br br br Ground and linear terms br The set of variables of a term t is denoted by vars t br A term that doesn t contain any variables is called a ground term a term that doesn t contain multiple occurrences of a variable is called a linear term br For example is a ground term and hence also a linear term x n is a linear term n n is a non linear term These properties are important in for example term rewriting br Given a signature for the function symbols the set of all terms forms the free term algebra The set of all ground terms forms the initial term algebra br Abbreviating the number of constants as f and the number of i ary function symbols as fi the number h of distinct ground terms of a height up to h can be computed by the following recursion formula br br f since a ground term of height can only be a constant br br br br br br br br h br br br br br br br br br i br br br br br br br br br f br br i br br br br br br br h br br br i br br br br br displaystyle theta h sum i infty f i cdot theta h i br br since a ground term of height up to h can be obtained by composing any i ground terms of height up to h using an i ary root function symbol The sum has a finite value if there is only a finite number of constants and function symbols which is usually the case br br br Building formulas from terms br Given a set Rn of n ary relation symbols for each natural number n an unsorted first order atomic formula is obtained by applying an n ary relation symbol to n terms As for function symbols a relation symbol set Rn is usually non empty only for small n In mathematical logic more complex formulas are built from atomic formulas using logical connectives and quantifiers For example letting br br br br br R br br br br displaystyle mathbb R br br denote the set of real numbers x x br br br br br R br br br br displaystyle mathbb R br br x x is a mathematical formula evaluating to true in the algebra of complex numbers br An atomic formula is called ground if it is built entirely from ground terms all ground atomic formulas composable from a given set of function and predicate symbols make up the Herbrand base for these symbol sets br br br Operations with terms br br Since a term has the structure of a tree hierarchy to each of its nodes a position or path can be assigned that is a string of natural numbers indicating the node s place in the hierarchy The empty string commonly denoted by is assigned to the root node Position strings within the black term are indicated in red in the picture br At each position p of a term t a unique subterm starts which is commonly denoted by t p For example at position of the black term in the picture the subterm a has its root The relation is a subterm of is a partial order on the set of terms it is reflexive since each term is trivially a subterm of itself br The term obtained by replacing in a term t the subterm at a position p by a new term u is commonly denoted by t u p The term t u p can also be viewed as resulting from a generalized concatenation of the term u with a term like object t the latter is called a context or a term with a hole indicated by its position being p in which u is said to be embedded For example if t is the black term in the picture then t b results in the term br br br br br br br a br br br b br br br br br br br br br br br br br br br br br br displaystyle frac a b br br The latter term also results from embedding the term b into the context br br br br br br br a br br br br br br br br br br br br br br br br br br br br br displaystyle frac a br br In an informal sense the operations of instantiating and embedding are converse to each other while the former appends function symbols at the bottom of the term the latter appends them at the top The encompassment ordering relates a term and any result of appends on both sides br To each node of a term its depth called height by some authors can be assigned i e its distance number of edges from the root In this setting the depth of a node always equals the length of its position string In the picture depth levels in the black term are indicated in green br The size of a term commonly refers to the number of its nodes or equivalently to the length of the term s written representation counting symbols without parentheses The black and the blue term in the picture has the size and respectively br A term u matches a term t if a substitution instance of u structurally equals a subterm of t or formally if u t p for some position p in t and some substitution In this case u t and are called the pattern term the subject term and the matching substitution respectively In the picture the blue pattern term br br br br x br br br y br br z br br br br displaystyle x y z br br matches the black subject term at position with the matching substitution x a y a z a indicated by blue variables immediately left to their black substitutes Intuitively the pattern except for its variables must be contained in the subject if a variable occurs multiple times in the pattern equal subterms are required at the respective positions of the subject br unifying terms br term rewriting br br br Related concepts br br br Sorted terms br br When the domain of discourse contains elements of basically different kinds it is useful to split the set of all terms accordingly To this end a sort sometimes also called type is assigned to each variable and each constant symbol and a declaration of domain sorts and range sort to each function symbol A sorted term f t tn may be composed from sorted subterms t tn only if the ith subterm s sort matches the declared ith domain sort of f Such a term is also called well sorted any other term i e obeying the unsorted rules only is called ill sorted br For example a vector space comes with an associated field of scalar numbers Let W and N denote the sort of vectors and numbers respectively let VW and VN be the set of vector and number variables respectively and CW and CN the set of vector and number constants respectively Then e g br br br br br br br br br br br br br br C br br W br br br br br displaystyle vec in C W br br and CN and the vector addition the scalar multiplication and the inner product is declared as br br br br br br W br br W br br W br br br br W br br N br br W br br br displaystyle W times W to W W times N to W br br and br br br br br br br br br br W br br W br br N br br br displaystyle langle rangle W times W to N br br respectively Assuming variable symbols br br br br br br br v br br br br br br br br br w br br br br br br br V br br W br br br br br displaystyle vec v vec w in V W br br and a b VN the term br br br br br br br br br v br br br br br br br br br br br br br br br br a br br br br br w br br br br br br b br br br br displaystyle langle vec v vec a vec w b rangle br br is well sorted while br br br br br br br v br br br br br br a br br br displaystyle vec v a br br is not since doesn t accept a term of sort N as nd argument In order to make br br br br a br br br br br v br br br br br br br displaystyle a vec v br br a well sorted term an additional declaration br br br br br br N br br W br br W br br br displaystyle N times W to W br br is required Function symbols having several declarations are called overloaded br See many sorted logic for more information including extensions of the many sorted framework described here br br br Lambda terms br br br Motivation br Mathematical notations as shown in the table do not fit into the scheme of a first order term as defined above as they all introduce an own local or bound variable that may not appear outside the notation s scope e g br br br br t br br br br br a br br br b br br br sin br br br k br br t br br br d br t br br br displaystyle t cdot int a b sin k cdot t dt br br doesn t make sense br In contrast the other variables referred to as free behave like ordinary first order term variables e g br br br br k br br br br br a br br br b br br br sin br br br k br br t br br br d br t br br br displaystyle k cdot int a b sin k cdot t dt br br does make sense br All these operators can be viewed as taking a function rather than a value term as one of their arguments For example the lim operator is applied to a sequence i e to a mapping from positive integer to e g real numbers As another example a C function to implement the second example from the table would have a function pointer argument see box below br Lambda terms can be used to denote anonymous functions to be supplied as arguments to lim etc br For example the function square from the C program below can be written anonymously as a lambda term i i The general sum operator can then be considered as a ternary function symbol taking a lower bound value an upper bound value and a function to be summed up Due to its latter argument the operator is called a second order function symbol br As another example the lambda term n x n denotes a function that maps to x x x respectively that is it denotes the sequence x x x The lim operator takes such a sequence and returns its limit if defined br The rightmost column of the table indicates how each mathematical notation example can be represented by a lambda term also converting common infix operators into prefix form br br br Definition br br Given a set V of variable symbols the set of lambda terms is defined recursively as follows br br every variable symbol x V is a lambda term br if x V is a variable symbol and t is a lambda term then x t is also a lambda term abstraction br if t and t are lambda terms then t t is also a lambda term application br The above motivating examples also used some constants like div power etc which are however not admitted in pure lambda calculus br Intuitively the abstraction x t denotes a unary function that returns t when given x while the application t t denotes the result of calling the function t with the input t For example the abstraction x x denotes the identity function while x y denotes the constant function always returning y The lambda term x x x takes a function x and returns the result of applying x to itself br br br See also br Equation br Expression mathematics br br br Notes br br br br Franz Baader Tobias Nipkow Term Rewriting and All That Cambridge University Press pp and ISBN 