title: Pascal (programming language)
id: 23773
Pascal is an imperative and procedural programming language designed by Niklaus Wirth as a small efficient language intended to encourage good programming practices using structured programming and data structuring It is named after French mathematician philosopher and physicist Blaise Pascal br Pascal was developed on the pattern of the ALGOL language Wirth was involved in the process to improve the language as part of the ALGOL X efforts and proposed a version named ALGOL W This was not accepted and the ALGOL X process bogged down In Wirth decided to abandon the ALGOL X process and further improve ALGOL W releasing this as Pascal in br On top of ALGOL s scalars and arrays Pascal enables defining complex datatypes and building dynamic and recursive data structures such as lists trees and graphs Pascal has strong typing on all objects which means that one type of data cannot be converted to or interpreted as another without explicit conversions Unlike C and most languages in the C family Pascal allows nested procedure definitions to any level of depth and also allows most kinds of definitions and declarations inside subroutines procedures and functions A program is thus syntactically similar to a single procedure or function This is similar to the block structure of ALGOL but restricted from arbitrary block statements to just procedures and functions br Pascal became very successful in the s notably on the burgeoning minicomputer market Compilers were also available for many microcomputers as the field emerged in the late s It was widely used as a teaching language in university level programming courses in the s and also used in production settings for writing commercial software during the same period It was displaced by the C programming language during the late s and early s as UNIX based systems became popular and especially with the release of C br A derivative named Object Pascal designed for object oriented programming was developed in This was used by Apple Computer for the Lisa and Macintosh machines and Borland in the late s and later developed into Delphi on the Microsoft Windows platform Extensions to the Pascal concepts led to the languages Modula and Oberon both developed by Wirth br br br History br br br Earlier efforts br Much of the history of computer language design during the s can be traced to the ALGOL language ALGOL was developed during the s with the explicit goal of being able to clearly describe algorithms It included a number of features for structured programming that remain common in languages to this day br Shortly after its introduction in Wirth began working on his dissertation with Helmut Weber on the Euler programming language Euler was based on ALGOL s syntax and many concepts but was not a derivative Its primary goal was to add dynamic lists and types allowing it to be used in roles similar to Lisp The language was published in br By this time a number of problems in ALGOL had been identified notably the lack of a standardized string system The group tasked with maintaining the language had begun the ALGOL X process to identify improvements calling for submissions Wirth and Tony Hoare submitted a conservative set of modifications to add strings and clean up some of the syntax These were considered too minor to be worth using as the new standard ALGOL so Wirth wrote a compiler for the language which became named ALGOL W br The ALGOL X efforts would go on to choose a much more complex language ALGOL The complexity of this language led to considerable difficulty producing high performance compilers and it was not widely used in the industry This left an opening for newer languages br br br Pascal br Pascal was influenced by the ALGOL W efforts with the explicit goals of teaching programming in a structured fashion and for the development of system software br A generation of students used Pascal as an introductory language in undergraduate courses br One of the early successes for the language was the introduction of UCSD Pascal a version that ran on a custom operating system that could be ported to different platforms A key platform was the Apple II where it saw widespread use as Apple Pascal This led to Pascal becoming the primary high level language used for development in the Apple Lisa and later the Macintosh Parts of the original Macintosh operating system were hand translated into Motorola assembly language from the Pascal source code br The typesetting system TeX by Donald Knuth was written in WEB the original literate programming system based on DEC PDP Pascal Successful commercial applications like Adobe Photoshop were written in Macintosh Programmer s Workshop Pascal while applications like Total Commander Skype and Macromedia Captivate were written in Delphi Object Pascal Apollo Computer used Pascal as the systems programming language for its operating systems beginning in br Variants of Pascal have also been used for everything from research projects to PC games and embedded systems Newer Pascal compilers exist which are widely used br br br Dialects br Wirth s example compiler meant to propagate the language the Pascal P system used a subset of the language designed to be the minimal subset of the language that could compile itself The idea was that this could allow bootstrapping the compiler which would then be extended to full Pascal language status This was done with several compilers but one notable exception was UCSD Pascal which was based on Pascal P It kept the subset status of the language based on the idea that this would run better on the new then microprocessors with limited memory UCSD also converted the Pascal P interpreter into a byte machine again because it would be a better fit for byte oriented microprocessors br UCSD Pascal formed the basis of many systems including Apple Pascal Borland Pascal was not based on the UCSD codebase but arrived during the popular period of UCSD and matched many of its features This started the line that ended with Delphi Pascal and the compatible Open Source compiler FPC Lazarus br The ISO standard for Pascal ISO was published in and was widely implemented and used on mainframes minicomputers and IBM PCs and compatibles from bits to bits The two dialects of Pascal most in use towards the end of the th century and up until today are the ISO standard version and the Delphi Turbo Pascal versions of which the two Borland versions are mostly compatible with each other br The source for much of the early history on Pascal can be found in the Pascal User s Group newsletters at br Pascal Users Group Newsletters br br br Object Pascal br During work on the Lisa Larry Tesler began corresponding with Wirth on the idea of adding object oriented extensions to the language to make Pascal a Multi paradigm programming language This led initially to Clascal introduced in As the Lisa program faded and was replaced by the Macintosh a further version was created and named Object Pascal This was introduced on the Mac in as part of the MacApp application framework and became Apple s main development language into the early s br The Object Pascal extensions were added to Turbo Pascal with the release of version in Over the years Object Pascal became the basis of the Delphi system for Microsoft Windows which is still used for developing Windows applications and can cross compile code to other systems Free Pascal is an open source cross platform alternative with its own graphical IDE called Lazarus br br br Implementations br br br Early compilers br The first Pascal compiler was designed in Z rich for the CDC series mainframe computer family Niklaus Wirth reports that a first attempt to implement it in FORTRAN in was unsuccessful due to FORTRAN s inadequacy to express complex data structures The second attempt was implemented in a C like language Scallop by Max Engeli and then translated by hand by R Schild to Pascal itself for boot strapping It was operational by mid Many Pascal compilers since have been similarly self hosting that is the compiler is itself written in Pascal and the compiler is usually capable of recompiling itself when new features are added to the language or when the compiler is to be ported to a new environment The GNU Pascal compiler is one notable exception being written in C br The first successful port of the CDC Pascal compiler to another mainframe was completed by Welsh and Quinn at the Queen s University of Belfast QUB in The target was the International Computers Limited ICL series This compiler in turn was the parent of the Pascal compiler for the Information Computer Systems ICS Multum minicomputer The Multum port was developed with a view to using Pascal as a systems programming language by Findlay Cupples Cavouras and Davis working at the Department of Computing Science in Glasgow University It is thought that Multum Pascal which was completed in the summer of may have been the first bit implementation br A completely new compiler was completed by Welsh et al at QUB in It offered a source language diagnostic feature incorporating profiling tracing and type aware formatted postmortem dumps that was implemented by Findlay and Watt at Glasgow University This implementation was ported in to the ICL series by a team based at Southampton University and Glasgow University The Standard Pascal Model Implementation was also based on this compiler having been adapted by Welsh and Hay at Manchester University in to check rigorously for conformity to the BSI ISO Standard and to generate code for a portable abstract machine br The first Pascal compiler written in North America was constructed at the University of Illinois under Donald B Gillies for the PDP and generated native machine code br br br The Pascal P system br To propagate the language rapidly a compiler porting kit was created in Z rich that included a compiler that generated so called p code for a virtual stack machine i e code that lends itself to reasonably efficient interpretation along with an interpreter for that code the Pascal P system The P system compilers were named Pascal P Pascal P Pascal P and Pascal P Pascal P was the first version and Pascal P was the last to come from Z rich The version termed Pascal P was coined after the fact for the many different sources for Pascal P that existed The compiler was redesigned to enhance portability and issued as Pascal P This code was later enhanced to become Pascal P with an intermediate code backward compatible with Pascal P and Pascal P which was not backward compatible br The Pascal P compiler interpreter can still be run and compiled on systems compatible with original Pascal as can Pascal P However it only accepts a subset of the Pascal language br Pascal P created outside the Z rich group accepts the full Pascal language and includes ISO compatibility br Pascal P is a follow on to Pascal P that along with other features aims to be a compiler for specific CPUs including AMD br UCSD Pascal branched off Pascal P where Kenneth Bowles used it to create the interpretive UCSD p System It was one of three operating systems available at the launch of the original IBM Personal Computer UCSD Pascal used an intermediate code based on byte values and thus was one of the earliest bytecode compilers Apple Pascal was released in for the Apple II and Apple III computer systems It was an implementation of or largely based on UCSD Pascal Pascal P through Pascal P were not but rather based on the CDC bit word length br A compiler based on the Pascal P compiler which created native binary object files was released for the IBM System mainframe computer by the Australian Atomic Energy Commission it was named the AAEC Pascal Compiler after the abbreviation of the name of the commission br br br Object Pascal and Turbo Pascal br Apple Computer created its own Lisa Pascal for the Lisa Workshop in and ported the compiler to the Apple Macintosh and MPW in In Larry Tesler in consultation with Niklaus Wirth defined Object Pascal and these extensions were incorporated in both the Lisa Pascal and Mac Pascal compilers br In the s Anders Hejlsberg wrote the Blue Label Pascal compiler for the Nascom A reimplementation of this compiler for the IBM PC was marketed under the names Compas Pascal and PolyPascal before it was acquired by Borland and renamed Turbo Pascal br Turbo Pascal became hugely popular thanks to an aggressive pricing strategy having one of the first full screen IDEs and very fast turnaround time just seconds to compile link and run It was written and highly optimized entirely in assembly language making it smaller and faster than much of the competition br In Anders ported Turbo Pascal to the Macintosh and incorporated Apple s Object Pascal extensions into Turbo Pascal These extensions were then added back into the PC version of Turbo Pascal for version At the same time Microsoft also implemented the Object Pascal compiler Turbo Pascal had a large influence on the Pascal community which began concentrating mainly on the IBM PC in the late s Many PC hobbyists in search of a structured replacement for BASIC used this product It also began to be adopted by professional developers Around the same time a number of concepts were imported from C to let Pascal programmers use the C based application programming interface API of Microsoft Windows directly These extensions included null terminated strings pointer arithmetic function pointers an address of operator and unsafe typecasts br Turbo Pascal and other derivatives with unit or module structures are modular programming languages However it does not provide a nested module concept or qualified import and export of specific symbols br br br Other variants br Super Pascal adds non numeric labels a return statement and expressions as names of types br TMT Pascal was the first Borland compatible compiler for bit MS DOS compatible protected mode OS and Win It extends the language with function and operator overloading br The universities of Wisconsin Madison Z rich Karlsruhe and Wuppertal developed the Pascal SC and Pascal XSC Extensions for Scientific Computation compilers aimed at programming numerical computations Development for Pascal SC started in supporting ISO Pascal level but level support was added at a later stage Pascal SC originally targeted the Z processor but was later rewritten for DOS x and Pascal XSC has at various times been ported to Unix Linux SunOS HP UX AIX and Microsoft IBM DOS with EMX OS Windows operating systems It operates by generating intermediate C source code which is then compiled to a native executable Some of the Pascal SC language extensions have been adopted by GNU Pascal br Pascal Sol was designed around by a French team to implement a Unix like system named Sol It was standard Pascal level with parameterized array bounds but the definition allowed alternative keywords and predefined identifiers in French and the language included a few extensions to ease system programming e g an equivalent to lseek The Sol team later on moved to the ChorusOS project to design a distributed operating system br IP Pascal is an implementation of the Pascal programming language using Micropolis DOS but was moved rapidly to CP M running on the Z It was moved to the machine types in and exists today as Windows XP and Linux implementations In the system was brought up to a new level and the resulting language termed Pascaline after Pascal s calculator It includes objects namespace controls dynamic arrays and many other extensions and generally features the same functionality and type protection as C It is the only such implementation that is also compatible with the original Pascal implementation which is standardized as ISO br br br Language constructs br Pascal in its original form is a purely procedural language and includes the traditional array of ALGOL like control structures with reserved words such as if then else while for and case ranging on a single statement or a begin end statements block Pascal also has data structuring constructs not included in the original ALGOL types like records variants pointers enumerations and sets and procedure pointers Such constructs were in part inherited or inspired from Simula ALGOL Niklaus Wirth s own ALGOL W and suggestions by C A R Hoare br Pascal programs start with the program keyword with a list of external file descriptors as parameters not required in Turbo Pascal etc then follows the main block bracketed by the begin and end keywords Semicolons separate statements and the full stop i e a period ends the whole program or unit Letter case is ignored in Pascal source br Here is an example of the source code in use for a very simple Hello World program br br br Data types br A Type Declaration in Pascal is used to define a range of values which a variable of that type is capable of storing It also defines a set of operations that are permissible to be performed on variables of that type The predefined types are br br The range of values allowed for the basic types except Boolean is implementation defined Functions are provided for some data conversions For conversion of real to integer the following functions are available round which rounds to integer using banker s rounding and trunc rounds towards zero br The programmer has the freedom to define other commonly used data types e g byte string etc in terms of the predefined types using Pascal s type declaration facility for example br br Often used types like byte and string are already defined in many implementations br Normally the system will use a word to store the data For instance the byte type may be stored in a machine integer bits perhaps rather than an bit value Pascal does not contain language elements that allow the basic storage types to be defined more granularly This capability was included in a number of Pascal extensions and follow on languages while others like Modula expanded the built in set to cover most machine data types like bit integers br The packed keyword tells the compiler to use the most efficient method of storage for the structured data types sets arrays and records rather than using one word for each element Packing may slow access on machines that do not offer easy access to parts of a word br br br Subrange types br Subranges of any ordinal data type any simple type except real can also be made br br br Set types br In contrast with other programming languages from its time Pascal supports a set type br br A set is a fundamental concept for modern mathematics and they may be used in many algorithms Such a feature is useful and may be faster than an equivalent construct in a language that does not support sets For example for many Pascal compilers br br executes faster than br br Sets of non contiguous values can be particularly useful in terms of both performance and readability br br For these examples which involve sets over small domains the improved performance is usually achieved by the compiler representing set variables as bit vectors The set operators can then be implemented efficiently as bitwise machine code operations br br br Record types br An example of a Pascal record type br br An example of a variant record type br br Variant records allow several fields of the record to overlap each other to save space br br br Type declarations br Types can be defined from other types using type declarations br br Further complex types can be constructed from simple types br br br File type br br As shown in the example above Pascal files are sequences of components Every file has a buffer variable which is denoted by f The procedures get for reading and put for writing move the buffer variable to the next element Read is introduced such that read f x is the same as x f get f Write is introduced such that write f x is the same as f x put f The type text is predefined as file of char While the buffer variable could be used for inspecting the next character to be used check for a digit before reading an integer this leads to serious problems with interactive programs in early implementations but was solved later with the lazy I O concept which waits until the file buffer variable is actually accessed before performing file operations br br br Pointer types br Pascal supports the use of pointers br br Here the variable NodePtr is a pointer to the data type Node a record Pointers can be used before they are declared This is a forward declaration an exception to the rule that things must be declared before they are used br To create a new record and assign the value and character A to the fields a and b in the record and to initialise the pointer c to the null pointer NIL in Pascal the statements would be br br This could also be done using the with statement as follows br br Inside of the scope of the with statement a and b refer to the subfields of the record pointer NodePtr and not to the record Node or the pointer type pNode br Linked lists stacks and queues can be created by including a pointer type field c in the record br Unlike many languages that feature pointers Pascal only allows pointers to reference dynamically created variables that are anonymous and does not allow them to reference standard static or local variables Pointers also must have an associated type and a pointer to one type is not compatible with a pointer to another type e g a pointer to a char is not compatible with a pointer to an integer This helps eliminate the type security issues inherent with other pointer implementations particularly those used for PL I or C It also removes some risks caused by dangling pointers but the ability to dynamically deallocate referenced space by using the dispose function which has the same effect as the free library function found in C means that the risk of dangling pointers has not been eliminated as it has in languages such as Java and C which provide automatic garbage collection but which do not eliminate the related problem of memory leaks br Some of these restrictions can be lifted in newer dialects br br br Control structures br Pascal is a structured programming language meaning that the flow of control is structured into standard statements usually without goto commands br br br Procedures and functions br Pascal structures programs into procedures and functions Generally a procedure is used for its side effects whereas a function is used for its return value br br Procedures and functions can be nested to any depth and the program construct is the logical outermost block br By default parameters are passed by value If var precedes a parameter s name it is passed by reference br Each procedure or function can have its own declarations of goto labels constants types variables and other procedures and functions which must all be in that order br This ordering requirement was originally intended to allow efficient single pass compilation However in some dialects such as Delphi the strict ordering requirement of declaration sections has been relaxed br br br Semicolons as statement separators br Pascal adopted many language syntax features from the ALGOL language including the use of a semicolon as a statement separator This is in contrast to other languages such as PL I and C which use the semicolon as a statement terminator No semicolon is needed before the end keyword of a record type declaration a block or a case statement before the until keyword of a repeat statement and before the else keyword of an if statement br The presence of an extra semicolon was not permitted in early versions of Pascal However the addition of ALGOL like empty statements in the Revised Report and later changes to the language in ISO now allow for optional semicolons in most of these cases A semicolon is still not permitted immediately before the else keyword in an if statement because the else follows a single statement not a statement sequence In the case of nested ifs a semicolon cannot be used to avoid the dangling else problem where the inner if does not have an else but the outer if does by putatively terminating the nested if with a semicolon this instead terminates both if clauses Instead an explicit begin end block must be used br br br Resources br br br Compilers and interpreters br Several Pascal compilers and interpreters are available for general use br br Delphi is Embarcadero s formerly Borland CodeGear flagship rapid application development RAD product It uses the Object Pascal language termed Delphi by Borland descended from Pascal to create applications for Windows macOS iOS and Android The NET support that existed from D through D D and D has been terminated and replaced by a new language Prism which is rebranded Oxygene see below that is not fully backward compatible In recent years Unicode support and generics were added D D Delphi XE br Free Pascal is a cross platform compiler written in Object Pascal and is self hosting It is aimed at providing a convenient and powerful compiler both able to compile legacy applications and to be the means to develop new ones It is distributed under the GNU General Public License GNU GPL while packages and runtime library come under a modified GNU Lesser General Public License GNU LGPL In addition to compatibility modes for Turbo Pascal Delphi and Mac Pascal it has its own procedural and object oriented syntax modes with support for extended features such as operator overloading It supports many platforms and operating systems Current versions also feature an ISO mode br Turbo is a free Pascal compiler for the Intel family of microcontrollers with Turbo Pascal syntax br Oxygene formerly named Chrome is an Object Pascal compiler for the NET and Mono platforms It was created and is sold by RemObjects Software and sold for a while by Embarcadero as the backend compiler of Prism br Kylix was a descendant of Delphi with support for the Linux operating system and an improved object library It is no longer supported Compiler and IDE are available now for non commercial use br GNU Pascal Compiler GPC is the Pascal compiler of the GNU Compiler Collection GCC The compiler is written in C the runtime library mostly in Pascal Distributed under the GNU General Public License it runs on many platforms and operating systems It supports the ANSI ISO standard languages and has partial Turbo Pascal dialect support One of the more notable omissions is the absence of a fully Turbo Pascal compatible short string type Support for Borland Delphi and other language variants is quite limited There is some support for Mac pascal however br Virtual Pascal was created by Vitaly Miryanov in as a native OS compiler compatible with Borland Pascal syntax Then it had been commercially developed by fPrint adding Win support and in it became freeware Today it can compile for Win OS and Linux and is mostly compatible with Borland Pascal and Delphi Development was canceled on April br Pascal P compiler the basis for many subsequent Pascal implemented in Pascal compilers It implements a subset of full Pascal br Pascal P compiler is an ISO full Pascal adaption of Pascal P br Pascal P compiler is an extended version of Pascal adaption of Pascal P according to the Pascaline language specification br Smart Mobile Studio is a Pascal to HTML JavaScript compiler br Turbo Pascal was the dominant Pascal compiler for PCs during the s and early s popular both because of its powerful extensions and extremely short compilation times Turbo Pascal was compactly written and could compile run and debug all from memory without accessing disk Slow floppy disk drives were common for programmers at the time further magnifying Turbo Pascal s speed advantage Currently older versions of Turbo Pascal up to are available for free download from Borland s site br IP Pascal implements the language Pascaline named after Pascal s calculator which is a highly extended Pascal compatible with original Pascal according to ISO It features modules with namespace control including parallel tasking modules with semaphores objects dynamic arrays of any dimensions that are allocated at runtime overloads overrides and many other extensions IP Pascal has a built in portability library that is custom tailored to the Pascal language For example a standard text output application from s original Pascal can be recompiled to work in a window and even have graphical constructs added br Pascal XT was created by Siemens for their mainframe operating systems BS and SINIX br PocketStudio is a Pascal subset compiler and RAD tool for Palm OS and MC xxx processors with some of its own extensions to assist interfacing with the Palm OS API It resembles Delphi and Lazarus with a visual form designer an object inspector and a source code editor br MIDletPascal A Pascal compiler and IDE that generates small and fast Java bytecode specifically designed to create software for mobiles br Vector Pascal is a language for SIMD instruction sets such as the MMX and the AMD d Now supporting all Intel and AMD processors and Sony s PlayStation Emotion Engine br Morfik Pascal allows the development of Web applications entirely written in Object Pascal both server and browser side br WDSibyl Visual Development Environment and Pascal compiler for Win and OS br PP Compiler a compiler for Palm OS that runs directly on the handheld computer br CDC Pascal compiler is the source code for the first CDC Pascal compiler br Pascal S br AmigaPascal is a free Pascal compiler for Amiga systems br VSI Pascal for OpenVMS formerly HP Pascal for OpenVMS Compaq Pascal DEC Pascal VAX Pascal and originally VAX Pascal is a Pascal compiler that runs on OpenVMS systems It was also supported under Tru VSI Pascal for OpenVMS is compatible with ISO IEC Pascal as well some of ISO IEC Extended Pascal and also includes its own extensions The compiler frontend is implemented in BLISS br Stony Brook Pascal was a bit later bit optimizing compiler for DOS and OS marketed as a direct replacement for Turbo Pascal but producing code that executed at least twice as fast br br br IDEs br Dev Pascal is a Pascal IDE that was designed in Borland Delphi and which supports Free Pascal and GNU Pascal as backends br Lazarus is a free Delphi like visual cross platform IDE for rapid application development RAD Based on Free Pascal Lazarus is available for numerous platforms including Linux FreeBSD macOS and Microsoft Windows br Fire macOS and Water Windows for the Oxygene and the Elements Compiler br br br Libraries br WOL Library for creating GUI applications with the Free Pascal Compiler br br br Standards br br br ISO IEC Pascal br In the language was standardized in the international standard IEC ISO and several local country specific standards including the American ANSI IEEE X and ISO These two standards differed only in that the ISO standard included a level extension for conformant arrays an array where the boundaries of the array are not known until run time where ANSI did not allow for this extension to the original Wirth version language In ISO was revised ISO to correct various errors and ambiguities found in the original document br The ISO was stated to be a clarification of Wirth s language as detailed by the User Manual and Report Jensen and Wirth but was also notable for adding Conformant Array Parameters as a level to the standard level being Pascal without conformant arrays This addition was made at the request of C A R Hoare and with the approval of Niklaus Wirth The precipitating cause was that Hoare wanted to create a Pascal version of the NAG Numerical Algorithms Library which had originally been written in FORTRAN and found that it was not possible to do so without an extension that would allow array parameters of varying size Similar considerations motivated the inclusion in ISO of the facility to specify the parameter types of procedural and functional parameters br Niklaus Wirth himself referred to the language as the Standard for example to differentiate it from the machine specific features of the CDC compiler This language was documented in The Pascal Report the second part of the Pascal users manual and report br On the large machines mainframes and minicomputers Pascal originated on the standards were generally followed On the IBM PC they were not On IBM PCs the Borland standards Turbo Pascal and Delphi have the greatest number of users Thus it is typically important to understand whether a particular implementation corresponds to the original Pascal language or a Borland dialect of it br The IBM PC versions of the language began to differ with the advent of UCSD Pascal an interpreted implementation that featured several extensions to the language along with several omissions and changes Many UCSD language features survive today including in Borland s dialect br br br ISO IEC Extended Pascal br br In an extended Pascal standard was created as ISO IEC which is identical in technical content to IEEE ANSI X br As of Support of Extended Pascal in FreePascal Compiler is planned br br br Variations br Niklaus Wirth s Z rich version of Pascal was issued outside ETH in two basic forms the CDC compiler source and a porting kit called Pascal P system The Pascal P compiler left out several features of the full language that were not required to bootstrap the compiler For example procedures and functions used as parameters undiscriminated variant records packing dispose interprocedural gotos and other features of the full compiler were omitted br UCSD Pascal under Professor Kenneth Bowles was based on the Pascal P kit and consequently shared several of the Pascal P language restrictions UCSD Pascal was later adopted as Apple Pascal and continued through several versions there Although UCSD Pascal actually expanded the subset Pascal in the Pascal P kit by adding back standard Pascal constructs it was still not a complete standard installation of Pascal br In the early s Alan Burns and Geoff Davies developed Pascal FC an extension to Pl from the Niklaus book Algorithms Data Structures Programs Several constructs were added to use Pascal FC as a teaching tool for Concurrent Programming such as semaphores monitors channels remote invocation and resources To be able to demonstrate concurrency the compiler output a kind of P code could then be executed on a virtual machine This virtual machine not only simulated a normal fair environment but could also simulate extreme conditions unfair mode br br br Borland like Pascal compilers br Borland s Turbo Pascal written by Anders Hejlsberg was written in assembly language independent of UCSD and the Z rich compilers However it adopted much of the same subset and extensions as the UCSD compiler This is probably because the UCSD system was the most common Pascal system suitable for developing applications on the resource limited microprocessor systems available at that time br The shrink wrapped Turbo Pascal version and later incarnations including Borland s Object Pascal and Delphi and non Borland near compatibles became popular with programmers including shareware authors and so the SWAG library of Pascal code features a large amount of code written with such versions as Delphi in mind br Software products compilers and IDE Rapid Application Development RAD in this category br br Turbo Pascal TURBO EXE up to version and Turbo Pascal for Windows TPW and Turbo Pascal for Macintosh br Pure Pascal and HiSPeed Pascal Pascal language Environment for the Atari ST range of computers br Borland Pascal A professional version of Turbo Pascal line which targeted both DOS and Windows br Object Pascal an extension of the Pascal language that was developed at Apple Computer by a team led by Larry Tesler in consultation with Niklaus Wirth the inventor of Pascal its features were added to Borland s Turbo Pascal for Macintosh and in for Turbo Pascal for DOS br Delphi Object Pascal is essentially its underlying language br Free Pascal compiler FPC Free Pascal adopted the standard dialect of Borland Pascal programmers Borland Turbo Pascal and later Delphi br PascalABC NET a new generation Pascal programming language including compiler and IDE br Borland Kylix is a compiler and IDE formerly sold by Borland but later discontinued It is a Linux version of the Borland Delphi software development environment and C Builder br Lazarus similar to Kylix in function is a free cross platform visual IDE for RAD using the Free Pascal compiler which supports dialects of Object Pascal to varying degrees br Virtual Pascal VP is a fully Borland Pascal and Borland Delphi compatible bit Pascal compiler for OS and Windows with a Linux version on the way br Sybil is an open source Delphi like IDE and compiler implementations include br WDSibyl for Microsoft Windows and OS a commercial Borland Pascal compatible environment released by a company named Speedsoft that was later developed into a Delphi like rapid application development RAD environment named Sybil and then open sourced under the GPL when that company closed down br Open Sybil which is an ongoing project an open source tool for OS and eCS that was originally based on Speedsoft s WDsybl Sibyl Portable Component Classes SPCC and Sibyl Visual Development Tool SVDE sources but now its core is IBM System Object Model SOM WPS and OpenDoc br br br List of related standards br ISO Information processing systems Computer graphics Graphical Kernel System GKS language bindings Part Pascal br br br Reception br Pascal generated a wide variety of responses in the computing community both critical and complimentary br br br Early criticism br While very popular in the s and early s implementations of Pascal that closely followed Wirth s initial definition of the language were widely criticized as being unsuitable for use outside teaching Brian Kernighan who popularized the C language outlined his most notable criticisms of Pascal as early as in his article Why Pascal is Not My Favorite Programming Language The most serious problem Kernighan described was that array sizes and string lengths were part of the type so it was not possible to write a function that would accept variable length arrays or even strings as parameters This made it unfeasible to write for example a sorting library Kernighan also criticized the unpredictable order of evaluation of Boolean expressions poor library support and lack of static variables and raised a number of smaller issues Also he stated that the language did not provide any simple constructs to escape knowingly and forcibly ignore restrictions and limitations More general complaints from other sources noted that the scope of declarations was not clearly defined in the original language definition which sometimes had serious consequences when using forward declarations to define pointer types or when record declarations led to mutual recursion or when an identifier may or may not have been used in an enumeration list Another difficulty was that like ALGOL the language did not allow procedures or functions passed as parameters to predefine the expected type of their parameters br Despite initial criticisms Pascal continued to evolve and most of Kernighan s points do not apply to versions of the language which were enhanced to be suitable for commercial product development such as Borland s Turbo Pascal As Kernighan predicted in his article most of the extensions to fix these issues were incompatible from compiler to compiler Since the early s however most of the varieties seem condensed into two categories ISO and Borland like Extended Pascal addresses many of these early criticisms It supports variable length strings variable initialization separate compilation short circuit Boolean operators and default otherwise clauses for case statements br br br See also br br Ada programming language br Concurrent Pascal br Comparison of Pascal and Delphi br Comparison of Pascal and C br Modula br Oberon programming language br Object Pascal br PascalCase br Standard ML br br br br br br Further reading br br Niklaus Wirth The Programming Language Pascal Acta Informatica Volume br C A R Hoare Notes on data structuring In O J Dahl E W Dijkstra and C A R Hoare editors Structured Programming pages Academic Press br C A R Hoare Niklaus Wirth An Axiomatic Definition of the Programming Language Pascal Acta Informatica Volume br Kathleen Jensen and Niklaus Wirth Pascal User Manual and Report Springer Verlag ISBN and ISBN br Niklaus Wirth Algorithms Data Structures Programs Prentice Hall ISBN br Niklaus Wirth An assessment of the programming language Pascal ACM SIGPLAN Notices Volume Issue June br N Wirth and A I Wasserman ed Programming Language Design IEEE Computer Society Press br D W Barron Ed Pascal The Language and its Implementation John Wiley ISBN br Peter Grogono Programming in Pascal Revised Edition Addison Wesley br Richard S Forsyth Pascal in Work and Play Chapman and Hall br N Wirth M Broy ed and E Denert ed Pascal and its Successors in Software Pioneers Contributions to Software Engineering Springer Verlag ISBN br N Wirth Recollections about the Development of Pascal ACM SIGPLAN Notices Volume No March 