title: Row polymorphism
id: 58874832
In programming language type theory row polymorphism is a kind of br polymorphism that allows one to write programs that are polymorphic on row types such as br record types and polymorphic variants A row polymorphic type system and proof of type inference was introduced by Mitchell Wand br br br Row polymorphic record type definition br The row polymorphic record type defines a list of fields with their corresponding types a list of missing fields and a variable indicating the absence or presence of arbitrary additional fields Both lists are optional and the variable may be constrained Specifically the variable may be empty indicating that no additional fields may be present for the record br It may be written as br br br br br br br br br br br br br T br br br br br br br br br br br n br br br br br T br br n br br br br br absent br br br br f br br br br br br br br br br absent br br br br f br br m br br br br br br br br br displaystyle ell T dots ell n T n text absent f dots text absent f m rho br br This indicates a record type that has fields br br br br br br br i br br br br br displaystyle ell i br br with respective types of br br br br br T br br i br br br br br displaystyle T i br br for br br br br i br br br br n br br br displaystyle i dots n br br and does not have any of the fields br br br br br f br br j br br br br br displaystyle f j br br for br br br br j br br br br m br br br displaystyle j dots m br br while br br br br br br br displaystyle rho br br expresses the fact the record may contain other fields than br br br br br br br i br br br br br displaystyle ell i br br br Row polymorphic record types allow us to write programs that operate only on a section of a record For example one may define a function that performs some two dimensional transformation that accepts a record with two or more coordinates and returns an identical type br br br br br br br transform d br br br br x br br br Number br br br y br br br Number br br br br br br br x br br br Number br br br y br br br Number br br br br br br br displaystyle text transform d x text Number y text Number rho to x text Number y text Number rho br br br Thanks to row polymorphism the function may perform two dimensional transformation on a three dimensional in fact n dimensional point leaving the z coordinate or any other coordinates intact In a more general sense the function can perform on any record that contains the fields br br br br x br br br displaystyle x br br and br br br br y br br br displaystyle y br br with type br br br br br Number br br br br displaystyle text Number br br There is no loss of information the type ensures that all the fields represented by the variable br br br br br br br displaystyle rho br br are present in the return type In contrast the type definition br br br br br x br br br Number br br br y br br br Number br br br br e br m br p br t br y br br br br br displaystyle x text Number y text Number mathbf empty br br expresses the fact that a record of that type has exactly the br br br br x br br br displaystyle x br br and br br br br y br br br displaystyle y br br fields and nothing else In this case a classic record type is obtained br br br Typing operations on records br The record operations of selecting a field br br br br r br br br br br displaystyle r ell br br adding a field br br br br r br br br br e br br br br displaystyle r ell e br br and removing a field br br br br r br br br br br displaystyle r backslash ell br br can be given row polymorphic types br br br br br br s br e br l br e br c br br t br br br br br br br br r br br br r br br br br br br br br br br T br br br br br T br br br displaystyle mathrm select ell lambda r r ell ell T rho rightarrow T br br br br br br br a br d br br d br br br br br br br br r br br br e br br r br br br br e br br br br br br br a br b br s br e br n br t br br br br br br br br br T br br br br br T br br br br br br displaystyle mathrm add ell lambda r lambda e r ell e mathrm absent ell rho rightarrow T rightarrow ell T rho br br br br br br br r br e br m br o br v br br e br br br br br br br br r br br r br br br br br br br br br T br br br br br br br a br b br s br e br n br t br br br br br br br br br br displaystyle mathrm remove ell lambda r r backslash ell ell T rho rightarrow mathrm absent ell rho br br br br Notes 