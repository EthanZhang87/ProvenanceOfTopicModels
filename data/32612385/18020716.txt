title: Formal grammar
id: 18020716
A formal grammar describes which strings from an alphabet of a formal language are valid according to the language s syntax A grammar does not describe the meaning of the strings or what can be done with them in whatever context only their form A formal grammar is defined as a set of production rules for such strings in a formal language br Formal language theory the discipline that studies formal grammars and languages is a branch of applied mathematics Its applications are found in theoretical computer science theoretical linguistics formal semantics mathematical logic and other areas br A formal grammar is a set of rules for rewriting strings along with a start symbol from which rewriting starts Therefore a grammar is usually thought of as a language generator However it can also sometimes be used as the basis for a recognizer a function in computing that determines whether a given string belongs to the language or is grammatically incorrect To describe such recognizers formal language theory uses separate formalisms known as automata theory One of the interesting results of automata theory is that it is not possible to design a recognizer for certain formal languages Parsing is the process of recognizing an utterance a string in natural languages by breaking it down to a set of symbols and analyzing each one against the grammar of the language Most languages have the meanings of their utterances structured according to their syntax a practice known as compositional semantics As a result the first step to describing the meaning of an utterance in language is to break it down part by part and look at its analyzed form known as its parse tree in computer science and as its deep structure in generative grammar br br br Introductory example br A grammar mainly consists of a set of production rules rewriting rules for transforming strings Each rule specifies a replacement of a particular string its left hand side with another its right hand side A rule can be applied to each string that contains its left hand side and produces a string in which an occurrence of that left hand side has been replaced with its right hand side br Unlike a semi Thue system which is wholly defined by these rules a grammar further distinguishes between two kinds of symbols nonterminal and terminal symbols each left hand side must contain at least one nonterminal symbol It also distinguishes a special nonterminal symbol called the start symbol br The language generated by the grammar is defined to be the set of all strings without any nonterminal symbols that can be generated from the string consisting of a single start symbol by possibly repeated application of its rules in whatever way possible br If there are essentially different ways of generating the same single string the grammar is said to be ambiguous br In the following examples the terminal symbols are a and b and the start symbol is S br br br Example br Suppose we have the following production rules br br br br br br S br br a br S br b br br br displaystyle S rightarrow aSb br br br br br br br S br br b br a br br br displaystyle S rightarrow ba br br br then we start with S and can choose a rule to apply to it If we choose rule we obtain the string aSb If we then choose rule again we replace S with aSb and obtain the string aaSbb If we now choose rule we replace S with ba and obtain the string aababb and are done We can write this series of choices more briefly using symbols br br br br S br br a br S br b br br a br a br S br b br b br br a br a br b br a br b br b br br br displaystyle S Rightarrow aSb Rightarrow aaSbb Rightarrow aababb br br br The language of the grammar is the infinite set br br br br br br a br br n br br br b br a br br b br br n br br br br n br br br br br br b br a br br a br b br a br b br br a br a br b br a br b br b br br a br a br a br b br a br b br b br b br br br br br br displaystyle a n bab n mid n geq ba abab aababb aaababbb dotsc br br where br br br br br a br br k br br br br br displaystyle a k br br is br br br br a br br br displaystyle a br br repeated br br br br k br br br displaystyle k br br times and br br br br n br br br displaystyle n br br in particular represents the number of times production rule has been applied This grammar is context free only single nonterminals appear as left hand sides and unambiguous br br br Examples and br Suppose the rules are these instead br br br br br br S br br a br br br displaystyle S rightarrow a br br br br br br br S br br S br S br br br displaystyle S rightarrow SS br br br br br br br a br S br a br br b br br br displaystyle aSa rightarrow b br br br This grammar is not context free due to rule and it is ambiguous due to the multiple ways in which rule can be used to generate sequences of br br br br S br br br displaystyle S br br s br However the language it generates is simply the set of all nonempty strings consisting of br br br br a br br br displaystyle a br br s and or br br br br b br br br displaystyle b br br s br This is easy to see to generate a br br br br b br br br displaystyle b br br from an br br br br S br br br displaystyle S br br use rule twice to generate br br br br S br S br S br br br displaystyle SSS br br then rule twice and rule once to produce br br br br b br br br displaystyle b br br This means we can generate arbitrary nonempty sequences of br br br br S br br br displaystyle S br br s and then replace each of them with br br br br a br br br displaystyle a br br or br br br br b br br br displaystyle b br br as we please br That same language can alternatively be generated by a context free nonambiguous grammar for instance the regular grammar with rules br br br br br br S br br a br S br br br displaystyle S rightarrow aS br br br br br br br S br br b br S br br br displaystyle S rightarrow bS br br br br br br br S br br a br br br displaystyle S rightarrow a br br br br br br br S br br b br br br displaystyle S rightarrow b br br br br Formal definition br br br The syntax of grammars br In the classic formalization of generative grammars first proposed by Noam Chomsky in the s a grammar G consists of the following components br br A finite set N of nonterminal symbols that is disjoint with the strings formed from G br A finite set br br br br br br br displaystyle Sigma br br of terminal symbols that is disjoint from N br A finite set P of production rules each rule of the form br br br br br br br br N br br br br br br br N br br br br N br br br br br br br br br br br N br br br br br br br br br displaystyle Sigma cup N N Sigma cup N rightarrow Sigma cup N br br br where br br br br br br br br br displaystyle br br is the Kleene star operator and br br br br br br br displaystyle cup br br denotes set union That is each production rule maps from one string of symbols to another where the first string the head contains an arbitrary number of symbols provided at least one of them is a nonterminal In the case that the second string the body consists solely of the empty string i e that it contains no symbols at all it may be denoted with a special notation often br br br br br br br displaystyle Lambda br br e or br br br br br br br displaystyle epsilon br br in order to avoid confusion br A distinguished symbol br br br br S br br N br br br displaystyle S in N br br that is the start symbol also called the sentence symbol br A grammar is formally defined as the tuple br br br br br N br br br br P br br S br br br br displaystyle N Sigma P S br br Such a formal grammar is often called a rewriting system or a phrase structure grammar in the literature br br br Some mathematical constructs regarding formal grammars br The operation of a grammar can be defined in terms of relations on strings br br Given a grammar br br br br G br br br N br br br br P br br S br br br br displaystyle G N Sigma P S br br the binary relation br br br br br br br G br br br br br displaystyle underset G Rightarrow br br pronounced as G derives in one step on strings in br br br br br br br N br br br br br br br br br displaystyle Sigma cup N br br is defined by br br br br br x br br br br G br br br y br br br br br u br br v br br p br br q br br br br br N br br br br br br br br br x br br u br p br v br br br br p br br q br br P br br br br y br br u br q br v br br br br displaystyle x underset G Rightarrow y iff exists u v p q in Sigma cup N x upv wedge p rightarrow q in P wedge y uqv br br br the relation br br br br br br br br G br br br br br br br displaystyle overset underset G Rightarrow br br pronounced as G derives in zero or more steps is defined as the reflexive transitive closure of br br br br br br br G br br br br br displaystyle underset G Rightarrow br br br a sentential form is a member of br br br br br br br N br br br br br br br br br displaystyle Sigma cup N br br that can be derived in a finite number of steps from the start symbol br br br br S br br br displaystyle S br br that is a sentential form is a member of br br br br br br br w br br br br br N br br br br br br br br S br br br br br G br br br br br w br br br br br br displaystyle left w in Sigma cup N mid S overset underset G Rightarrow w right br br A sentential form that contains no nonterminal symbols i e is a member of br br br br br br br br br br br br displaystyle Sigma br br is called a sentence br the language of br br br br G br br br displaystyle G br br denoted as br br br br br L br br br G br br br br displaystyle boldsymbol L G br br is defined as the set of sentences built by br br br br G br br br displaystyle G br br br The grammar br br br br G br br br N br br br br P br br S br br br br displaystyle G N Sigma P S br br is effectively the semi Thue system br br br br br N br br br br P br br br br displaystyle N cup Sigma P br br rewriting strings in exactly the same way the only difference is in that we distinguish specific nonterminal symbols which must be rewritten in rewrite rules and are only interested in rewritings from the designated start symbol br br br br S br br br displaystyle S br br to strings without nonterminal symbols br br br Example br For these examples formal languages are specified using set builder notation br Consider the grammar br br br br G br br br displaystyle G br br where br br br br N br br br br br S br br B br br br br br br displaystyle N left S B right br br br br br br br br br br br a br br b br br c br br br br br br displaystyle Sigma left a b c right br br br br br br S br br br displaystyle S br br is the start symbol and br br br br P br br br displaystyle P br br consists of the following production rules br br br br br br S br br a br B br S br c br br br displaystyle S rightarrow aBSc br br br br br br br S br br a br b br c br br br displaystyle S rightarrow abc br br br br br br br B br a br br a br B br br br displaystyle Ba rightarrow aB br br br br br br br B br b br br b br b br br br displaystyle Bb rightarrow bb br br br This grammar defines the language br br br br L br br G br br br br br br br a br br n br br br br b br br n br br br br c br br n br br br br n br br br br br br br br displaystyle L G left a n b n c n mid n geq right br br where br br br br br a br br n br br br br br displaystyle a n br br denotes a string of n consecutive br br br br a br br br displaystyle a br br s Thus the language is the set of strings that consist of or more br br br br a br br br displaystyle a br br s followed by the same number of br br br br b br br br displaystyle b br br s followed by the same number of br br br br c br br br displaystyle c br br s br Some examples of the derivation of strings in br br br br L br br G br br br br displaystyle L G br br are br br On notation br br br br P br br br br i br br br Q br br br displaystyle P underset i Rightarrow Q br br reads String P generates string Q by means of production i and the generated part is each time indicated in bold type br br br The Chomsky hierarchy br br When Noam Chomsky first formalized generative grammars in he classified them into types now known as the Chomsky hierarchy The difference between these types is that they have increasingly strict production rules and can therefore express fewer formal languages Two important types are context free grammars Type and regular grammars Type The languages that can be described with such a grammar are called context free languages and regular languages respectively Although much less powerful than unrestricted grammars Type which can in fact express any language that can be accepted by a Turing machine these two restricted types of grammars are most often used because parsers for them can be efficiently implemented For example all regular languages can be recognized by a finite state machine and for useful subsets of context free grammars there are well known algorithms to generate efficient LL parsers and LR parsers to recognize the corresponding languages those grammars generate br br br Context free grammars br A context free grammar is a grammar in which the left hand side of each production rule consists of only a single nonterminal symbol This restriction is non trivial not all languages can be generated by context free grammars Those that can are called context free languages br The language br br br br L br br G br br br br br br br a br br n br br br br b br br n br br br br c br br n br br br br n br br br br br br br br displaystyle L G left a n b n c n mid n geq right br br defined above is not a context free language and this can be strictly proven using the pumping lemma for context free languages but for example the language br br br br br br br br a br br n br br br br b br br n br br br br n br br br br br br br br displaystyle left a n b n mid n geq right br br at least br br br br a br br br displaystyle a br br followed by the same number of br br br br b br br br displaystyle b br br s is context free as it can be defined by the grammar br br br br br G br br br br br br br displaystyle G br br with br br br br N br br br br S br br br br br displaystyle N left S right br br br br br br br br br br br a br br b br br br br br br displaystyle Sigma left a b right br br br br br br S br br br displaystyle S br br the start symbol and the following production rules br br br br br br S br br a br S br b br br br displaystyle S rightarrow aSb br br br br br br br S br br a br b br br br displaystyle S rightarrow ab br br br A context free language can be recognized in br br br br O br br br n br br br br br br br br displaystyle O n br br time see Big O notation by an algorithm such as Earley s recogniser That is for every context free language a machine can be built that takes a string as input and determines in br br br br O br br br n br br br br br br br br displaystyle O n br br time whether the string is a member of the language where br br br br n br br br displaystyle n br br is the length of the string Deterministic context free languages is a subset of context free languages that can be recognized in linear time There exist various algorithms that target either this set of languages or some subset of it br br br Regular grammars br In regular grammars the left hand side is again only a single nonterminal symbol but now the right hand side is also restricted The right side may be the empty string or a single terminal symbol or a single terminal symbol followed by a nonterminal symbol but nothing else Sometimes a broader definition is used one can allow longer strings of terminals or single nonterminals without anything else making languages easier to denote while still defining the same class of languages br The language br br br br br br br br a br br n br br br br b br br n br br br br n br br br br br br br br displaystyle left a n b n mid n geq right br br defined above is not regular but the language br br br br br br br br a br br n br br br br b br br m br br br br m br br n br br br br br br br br displaystyle left a n b m mid m n geq right br br at least br br br br a br br br displaystyle a br br followed by at least br br br br b br br br displaystyle b br br where the numbers may be different is as it can be defined by the grammar br br br br br G br br br br br br br displaystyle G br br with br br br br N br br br br br S br br A br br B br br br br br br displaystyle N left S A B right br br br br br br br br br br br a br br b br br br br br br displaystyle Sigma left a b right br br br br br br S br br br displaystyle S br br the start symbol and the following production rules br br br br br S br br a br A br br br displaystyle S rightarrow aA br br br br br br A br br a br A br br br displaystyle A rightarrow aA br br br br br br A br br b br B br br br displaystyle A rightarrow bB br br br br br br B br br b br B br br br displaystyle B rightarrow bB br br br br br br B br br br br br displaystyle B rightarrow epsilon br br br All languages generated by a regular grammar can be recognized in br br br br O br br n br br br br displaystyle O n br br time by a finite state machine Although in practice regular grammars are commonly expressed using regular expressions some forms of regular expression used in practice do not strictly generate the regular languages and do not show linear recognitional performance due to those deviations br br br Other forms of generative grammars br Many extensions and variations on Chomsky s original hierarchy of formal grammars have been developed both by linguists and by computer scientists usually either in order to increase their expressive power or in order to make them easier to analyze or parse Some forms of grammars developed include br br Tree adjoining grammars increase the expressiveness of conventional generative grammars by allowing rewrite rules to operate on parse trees instead of just strings br Affix grammars and attribute grammars allow rewrite rules to be augmented with semantic attributes and operations useful both for increasing grammar expressiveness and for constructing practical language translation tools br br br Recursive grammars br br A recursive grammar is a grammar that contains production rules that are recursive For example a grammar for a context free language is left recursive if there exists a non terminal symbol A that can be put through the production rules to produce a string with A as the leftmost symbol An example of recursive grammar is a clause within a sentence separated by two commas All types of grammars in the Chomsky hierarchy can be recursive br br br Analytic grammars br Though there is a tremendous body of literature on parsing algorithms most of these algorithms assume that the language to be parsed is initially described by means of a generative formal grammar and that the goal is to transform this generative grammar into a working parser Strictly speaking a generative grammar does not in any way correspond to the algorithm used to parse a language and various algorithms have different restrictions on the form of production rules that are considered well formed br An alternative approach is to formalize the language in terms of an analytic grammar in the first place which more directly corresponds to the structure and semantics of a parser for the language Examples of analytic grammar formalisms include the following br br Top down parsing language TDPL a highly minimalist analytic grammar formalism developed in the early s to study the behavior of top down parsers br Link grammars a form of analytic grammar designed for linguistics which derives syntactic structure by examining the positional relationships between pairs of words br Parsing expression grammars PEGs a more recent generalization of TDPL designed around the practical expressiveness needs of programming language and compiler writers br br br See also br br br br br br External links 