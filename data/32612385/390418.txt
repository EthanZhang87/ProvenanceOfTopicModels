title: Ad hoc polymorphism
id: 390418
In programming languages ad hoc polymorphism is a kind of polymorphism in which polymorphic functions can be applied to arguments of different types because a polymorphic function can denote a number of distinct and potentially heterogeneous implementations depending on the type of argument s to which it is applied When applied to object oriented or procedural concepts it is also known as function overloading or operator overloading The term ad hoc in this context is not intended to be pejorative it refers simply to the fact that this type of polymorphism is not a fundamental feature of the type system This is in contrast to parametric polymorphism in which polymorphic functions are written without mention of any specific type and can thus apply a single abstract implementation to any number of types in a transparent way This classification was introduced by Christopher Strachey in br br br Early binding br Ad hoc polymorphism is a dispatch mechanism control moving through one named function is dispatched to various other functions without having to specify the exact function being called Overloading allows multiple functions taking different types to be defined with the same name the compiler or interpreter automatically ensures that the right function is called This way functions appending lists of integers lists of strings lists of real numbers and so on could be written and all be called append and the right append function would be called based on the type of lists being appended This differs from parametric polymorphism in which the function would need to be written generically to work with any kind of list Using overloading it is possible to have a function perform two completely different things based on the type of input passed to it this is not possible with parametric polymorphism but would have to be achieved with switching on the type inside the generic function Another way to look at overloading is that a routine is uniquely identified not by its name but by the combination of its name and the number order and types of its parameters br This type of polymorphism is common in object oriented programming languages many of which allow operators to be overloaded in a manner similar to functions see operator overloading Some languages that are not dynamically typed and lack ad hoc polymorphism including type classes have longer function names such as print int print string etc This can be seen as advantage more descriptive or a disadvantage overly verbose depending on one s point of view br An advantage that is sometimes gained from overloading is the appearance of specialization e g a function with the same name can be implemented in multiple different ways each optimized for the particular data types that it operates on This can provide a convenient interface for code that needs to be specialized to multiple situations for performance reasons The downside is that the type system cannot guarantee the consistency of the different implementations br Since overloading is done at compile time it is not a substitute for late binding as found in subtyping polymorphism br br br Late binding br The previous section notwithstanding there are other ways in which ad hoc polymorphism can work out Consider for example the Smalltalk language In Smalltalk the overloading is done at run time as the methods function implementation for each overloaded message overloaded function are resolved when they are about to be executed This happens at run time after the program is compiled Therefore polymorphism is given by subtyping polymorphism as in other languages and it is also extended in functionality by ad hoc polymorphism at run time br A closer look will also reveal that Smalltalk provides a slightly different variety of ad hoc polymorphism Since Smalltalk has a late bound execution model and since it provides objects the ability to handle messages that are not understood it is possible to implement functionality using polymorphism without explicitly overloading a particular message This may not be generally recommended practice for everyday programming but it can be quite useful when implementing proxies br Also while in general terms common class method and constructor overloading is not considered polymorphism there are more uniform languages in which classes are regular objects In Smalltalk for instance classes are regular objects In turn this means messages sent to classes can be overloaded and it is also possible to create objects that behave like classes without their classes inheriting from the hierarchy of classes These are effective techniques that can be used to take advantage of Smalltalk s powerful reflection capabilities Similar arrangements are also possible in languages such as Self and Newspeak br br br Example br Imagine an operator that may be used in the following ways br br br br br br true false false true true false false true br bab oon baboon br To handle these six function calls four different pieces of code are needed or three if strings are considered to be lists of characters br br In the first case integer addition must be invoked br In the second and third cases floating point addition must be invoked with type promotion or type coercion in the third case br In the fourth and fifth cases list concatenation must be invoked br In the last case string concatenation must be invoked br Thus the name actually refers to three or four completely different functions This is an example of overloading or more specifically operator overloading br Note the ambiguity in the string types used in the last case Consider in which the programmer might naturally assume addition rather than concatenation They may expect instead of Overloading can therefore provide different meaning or semantics for an operation as well as differing implementations br br br See also br Operator overloading br Type class br Polymorphism computer science other kinds of polymorphism br Parametric polymorphism br br br 