title: Turing completeness
id: 30621
In computability theory a system of data manipulation rules such as a model of computation a computer s instruction set a programming language or a cellular automaton is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine devised by English mathematician and computer scientist Alan Turing This means that this system is able to recognize or decode other data manipulation rule sets Turing completeness is used as a way to express the power of such a data manipulation rule set Virtually all programming languages today are Turing complete br A related concept is that of Turing equivalence two computers P and Q are called equivalent if P can simulate Q and Q can simulate P The Church Turing thesis conjectures that any function whose values can be computed by an algorithm can be computed by a Turing machine and therefore that if any real world computer can simulate a Turing machine it is Turing equivalent to a Turing machine A universal Turing machine can be used to simulate any Turing machine and by extension the purely computational aspects of any possible real world computer br To show that something is Turing complete it is enough to demonstrate that it can be used to simulate some Turing complete system No physical system can have infinite memory but if the limitation of finite memory is ignored most programming languages are otherwise Turing complete br br br Non mathematical usage br In colloquial usage the terms Turing complete and Turing equivalent are used to mean that any real world general purpose computer or computer language can approximately simulate the computational aspects of any other real world general purpose computer or computer language In real life this leads to the practical concepts of computing virtualization and emulation br Real computers constructed so far can be functionally analyzed like a single tape Turing machine which uses a tape for memory thus the associated mathematics can apply by abstracting their operation far enough However real computers have limited physical resources so they are only linear bounded automaton complete In contrast the abstraction of a universal computer is defined as a device with a Turing complete instruction set infinite memory and infinite available time br br br Formal definitions br In computability theory several closely related terms are used to describe the computational power of a computational system such as an abstract machine or programming language br br Turing completeness br A computational system that can compute every Turing computable function is called Turing complete or Turing powerful Alternatively such a system is one that can simulate a universal Turing machine br Turing equivalence br A Turing complete system is called Turing equivalent if every function it can compute is also Turing computable i e it computes precisely the same class of functions as do Turing machines Alternatively a Turing equivalent system is one that can simulate and be simulated by a universal Turing machine All known physically implementable Turing complete systems are Turing equivalent which adds support to the Church Turing thesis br Computational universality br A system is called universal with respect to a class of systems if it can compute every function computable by systems in that class or can simulate each of those systems Typically the term universality is tacitly used with respect to a Turing complete class of systems The term weakly universal is sometimes used to distinguish a system e g a cellular automaton whose universality is achieved only by modifying the standard definition of Turing machine so as to include input streams with infinitely many s br br br History br Turing completeness is significant in that every real world design for a computing device can be simulated by a universal Turing machine The Church Turing thesis states that this is a law of mathematics that a universal Turing machine can in principle perform any calculation that any other programmable computer can This says nothing about the effort needed to write the program or the time it may take for the machine to perform the calculation or any abilities the machine may possess that have nothing to do with computation br Charles Babbage s analytical engine s would have been the first Turing complete machine if it had been built at the time it was designed Babbage appreciated that the machine was capable of great feats of calculation including primitive logical reasoning but he did not appreciate that no other machine could do better From the s until the s mechanical calculating machines such as adders and multipliers were built and improved but they could not perform a conditional branch and therefore were not Turing complete br In the late th century Leopold Kronecker formulated notions of computability defining primitive recursive functions These functions can be calculated by rote computation but they are not enough to make a universal computer because the instructions that compute them do not allow for an infinite loop In the early th century David Hilbert led a program to axiomatize all of mathematics with precise axioms and precise logical rules of deduction that could be performed by a machine Soon it became clear that a small set of deduction rules are enough to produce the consequences of any set of axioms These rules were proved by Kurt G del in to be enough to produce every theorem br The actual notion of computation was isolated soon after starting with G del s incompleteness theorem This theorem showed that axiom systems were limited when reasoning about the computation that deduces their theorems Church and Turing independently demonstrated that Hilbert s Entscheidungsproblem decision problem was unsolvable thus identifying the computational core of the incompleteness theorem This work along with G del s work on general recursive functions established that there are sets of simple instructions which when put together are able to produce any computation The work of G del showed that the notion of computation is essentially unique br In Konrad Zuse completed the Z computer Zuse was not familiar with Turing s work on computability at the time In particular the Z lacked dedicated facilities for a conditional jump thereby precluding it from being Turing complete However in it was shown by Rojas that the Z is capable of simulating conditional jumps and therefore Turing complete in theory To do this its tape program would have to be long enough to execute every possible path through both sides of every branch br The first computer capable of conditional branching in practice and therefore Turing complete in practice was the ENIAC in Zuse s Z computer was operational in but it did not support conditional branching until br br br Computability theory br Computability theory uses models of computation to analyze problems and determine whether they are computable and under what circumstances The first result of computability theory is that there exist problems for which it is impossible to predict what a Turing complete system will do over an arbitrarily long time br The classic example is the halting problem create an algorithm that takes as input a program in some Turing complete language and some data to be fed to that program and determines whether the program operating on the input will eventually stop or will continue forever It is trivial to create an algorithm that can do this for some inputs but impossible to do this in general For any characteristic of the program s eventual output it is impossible to determine whether this characteristic will hold br This impossibility poses problems when analyzing real world computer programs For example one cannot write a tool that entirely protects programmers from writing infinite loops or protects users from supplying input that would cause infinite loops br One can instead limit a program to executing only for a fixed period of time timeout or limit the power of flow control instructions for example providing only loops that iterate over the items of an existing array However another theorem shows that there are problems solvable by Turing complete languages that cannot be solved by any language with only finite looping abilities i e languages that guarantee that every program will eventually finish to a halt So any such language is not Turing complete For example a language in which programs are guaranteed to complete and halt cannot compute the computable function produced by Cantor s diagonal argument on all computable functions in that language br br br Turing oracles br br A computer with access to an infinite tape of data may be more powerful than a Turing machine for instance the tape might contain the solution to the halting problem or some other Turing undecidable problem Such an infinite tape of data is called a Turing oracle Even a Turing oracle with random data is not computable with probability since there are only countably many computations but uncountably many oracles So a computer with a random Turing oracle can compute things that a Turing machine cannot br br br Digital physics br br All known laws of physics have consequences that are computable by a series of approximations on a digital computer A hypothesis called digital physics states that this is no accident because the universe itself is computable on a universal Turing machine This would imply that no computer more powerful than a universal Turing machine can be built physically br br br Examples br The computational systems algebras calculi that are discussed as Turing complete systems are those intended for studying theoretical computer science They are intended to be as simple as possible so that it would be easier to understand the limits of computation Here are a few br br Automata theory br Formal grammar language generators br Formal language language recognizers br Lambda calculus br Post Turing machines br Process calculus br Most programming languages their abstract models maybe with some particular constructs that assume finite memory omitted conventional and unconventional are Turing complete This includes br br All general purpose languages in wide use br Procedural programming languages such as C Pascal br Object oriented languages such as Java Smalltalk or C br Multi paradigm languages such as Ada C Common Lisp Fortran JavaScript Object Pascal Perl Python R br Most languages using less common paradigms br Functional languages such as Lisp and Haskell br Logic programming languages such as Prolog br General purpose macro processor such as m br Declarative languages such as SQL and XSLT br VHDL and other hardware description languages br TeX a typesetting system br Esoteric programming languages a form of mathematical recreation in which programmers work out how to achieve basic programming constructs in an extremely difficult but mathematically Turing equivalent language br Some rewrite systems are Turing complete br Turing completeness is an abstract statement of ability rather than a prescription of specific language features used to implement that ability The features used to achieve Turing completeness can be quite different Fortran systems would use loop constructs or possibly even goto statements to achieve repetition Haskell and Prolog lacking looping almost entirely would use recursion Most programming languages are describing computations on von Neumann architectures which have memory RAM and register and a control unit These two elements make this architecture Turing complete Even pure functional languages are Turing complete br Turing completeness in declarative SQL is implemented through recursive common table expressions Unsurprisingly procedural extensions to SQL PLSQL etc are also Turing complete This illustrates one reason why relatively powerful non Turing complete languages are rare the more powerful the language is initially the more complex are the tasks to which it is applied and the sooner its lack of completeness becomes perceived as a drawback encouraging its extension until it is Turing complete br The untyped lambda calculus is Turing complete but many typed lambda calculi including System F are not The value of typed systems is based in their ability to represent most typical computer programs while detecting more errors br Rule and Conway s Game of Life both cellular automata are Turing complete br br br Unintentional Turing completeness br Some software and video games are Turing complete by accident i e not by design br Software br br Microsoft Excel br Games br br Dwarf Fortress br Cities Skylines br Opus Magnum br Minecraft br Magic The Gathering br Infinite grid Minesweeper br Social media br br Habbo Hotel br Computational languages br br C templates br printf format string br TypeScript s type system br x assembly s MOV instruction br Biology br br Chemical reaction networks and enzyme based DNA computers have been shown to be Turing equivalent br br br Non Turing complete languages br Many computational languages exist that are not Turing complete One such example is the set of regular languages which are generated by regular expressions and which are recognized by finite automata A more powerful but still not Turing complete extension of finite automata is the category of pushdown automata and context free grammars which are commonly used to generate parse trees in an initial stage of program compiling Further examples include some of the early versions of the pixel shader languages embedded in Direct D and OpenGL extensions br In total functional programming languages such as Charity and Epigram all functions are total and must terminate Charity uses a type system and control constructs based on category theory whereas Epigram uses dependent types The LOOP language is designed so that it computes only the functions that are primitive recursive All of these compute proper subsets of the total computable functions since the full set of total computable functions is not computably enumerable Also since all functions in these languages are total algorithms for recursively enumerable sets cannot be written in these languages in contrast with Turing machines br Although untyped lambda calculus is Turing complete simply typed lambda calculus is not br br br See also br br br br br br Further reading br br br External links br Turing Complete wiki c com 