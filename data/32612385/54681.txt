title: NP-hardness
id: 54681
In computational complexity theory a computational problem H is called NP hard if for every problem L which can be solved in non deterministic polynomial time there is a polynomial time reduction from L to H That is assuming a solution for H takes unit time H s solution can be used to solve L in polynomial time As a consequence finding a polynomial time algorithm to solve a single NP hard problem would give polynomial time algorithms for all the problems in the complexity class NP As it is suspected but unproven that P NP it is unlikely that any polynomial time algorithms for NP hard problems exist br A simple example of an NP hard problem is the subset sum problem br Informally if H is NP hard then it is at least as difficult to solve as the problems in NP However the opposite direction is not true some problems are undecidable and therefore even more difficult to solve than all problems in NP but they are provably not NP hard unless P NP br br br Definition br A decision problem H is NP hard when for every problem L in NP there is a polynomial time many one reduction from L to H br Another definition is to require that there be a polynomial time reduction from an NP complete problem G to H As any problem L in NP reduces in polynomial time to G L reduces in turn to H in polynomial time so this new definition implies the previous one It does not restrict the class NP hard to decision problems and it also includes search problems or optimization problems br br br Consequences br If P NP then NP hard problems could not be solved in polynomial time br Some NP hard optimization problems can be polynomial time approximated up to some constant approximation ratio in particular those in APX or even up to any approximation ratio those in PTAS or FPTAS There are many classes of approximability each one enabling approximation up to a different level br br br Examples br All NP complete problems are also NP hard see List of NP complete problems For example the optimization problem of finding the least cost cyclic route through all nodes of a weighted graph commonly known as the travelling salesman problem is NP hard The subset sum problem is another example given a set of integers does any non empty subset of them add up to zero That is a decision problem and happens to be NP complete br There are decision problems that are NP hard but not NP complete such as the halting problem That is the problem which asks given a program and its input will it run forever That is a yes no question and so is a decision problem It is easy to prove that the halting problem is NP hard but not NP complete For example the Boolean satisfiability problem can be reduced to the halting problem by transforming it to the description of a Turing machine that tries all truth value assignments and when it finds one that satisfies the formula it halts and otherwise it goes into an infinite loop It is also easy to see that the halting problem is not in NP since all problems in NP are decidable in a finite number of operations but the halting problem in general is undecidable There are also NP hard problems that are neither NP complete nor Undecidable For instance the language of true quantified Boolean formulas is decidable in polynomial space but not in non deterministic polynomial time unless NP PSPACE br br br NP naming convention br NP hard problems do not have to be elements of the complexity class NP br As NP plays a central role in computational complexity it is used as the basis of several classes br br NP br Class of computational decision problems for which any given yes solution can be verified as a solution in polynomial time by a deterministic Turing machine or solvable by a non deterministic Turing machine in polynomial time br NP hard br Class of problems which are at least as hard as the hardest problems in NP Problems that are NP hard do not have to be elements of NP indeed they may not even be decidable br NP complete br Class of decision problems which contains the hardest problems in NP Each NP complete problem has to be in NP br NP easy br At most as hard as NP but not necessarily in NP br NP equivalent br Decision problems that are both NP hard and NP easy but not necessarily in NP br NP intermediate br If P and NP are different then there exist decision problems in the region of NP that fall between P and the NP complete problems If P and NP are the same class then NP intermediate problems do not exist because in this case every NP complete problem would fall in P and by definition every problem in NP can be reduced to an NP complete problem br br br Application areas br NP hard problems are often tackled with rules based languages in areas including br br Approximate computing br Configuration br Cryptography br Data mining br Decision support br Phylogenetics br Planning br Process monitoring and control br Rosters or schedules br Routing vehicle routing br Scheduling br br br See also br Lists of problems br List of unsolved problems br Reduction complexity br Unknowability br br br br br Garey Michael R Johnson David S Computers and Intractability A Guide to the Theory of NP Completeness Series of Books in the Mathematical Sciences st ed New York W H Freeman and Company ISBN MR OCLC 