title: Typing rule
id: 374851
In type theory a typing rule is an inference rule that describes how a type system assigns a type to a syntactic construction These rules may be applied by the type system to determine if a program is well typed and what type expressions have A prototypical example of the use of typing rules is in defining type inference in the simply typed lambda calculus which is the internal language of Cartesian closed categories br br br Notation br Typing rules specify the structure of a typing relation that relates syntactic terms to their types Syntactically the typing relation is usually denoted by a colon so for example br br br br e br br br br br displaystyle e tau br br denotes that an expression br br br br e br br br displaystyle e br br has type br br br br br br br displaystyle tau br br The rules themselves are usually specified using the notation of natural deduction For example the following typing rules specify the typing relation for a simple language of booleans br br br br br br br br br br br t br r br u br e br br br br br br B br o br o br l br br br br br br br br br br br br br f br a br l br s br e br br br br br br B br o br o br l br br br br br br br br br br br e br br br br br br br br B br o br o br l br br br br br br e br br br br br br br br br br e br br br br br br br br br br i br f br br br br e br br br br br br br t br h br e br n br br br br e br br br br br br br e br l br s br e br br br br e br br br br br br br br br br br br displaystyle frac mathsf true mathsf Bool qquad frac mathsf false mathsf Bool qquad frac e mathsf Bool quad e tau quad e tau mathbf if e mathbf then e mathbf else e tau br br br Each rule states that the conclusion below the line may be derived from the premises above the line The first two rules have no premises above the line so they are axioms The third rule has premises above the line specifically three premises so it is an inference rule br In programming languages the type of a variable depends on where it is bound which necessitates context sensitive typing rules These rules are given by a typing judgment usually written br br br br br br e br br br br br displaystyle Gamma vdash e tau br br which states that an expression br br br br e br br br displaystyle e br br has type br br br br br br br displaystyle tau br br under a typing context br br br br br br br displaystyle Gamma br br that relates variables to their types Typing contexts are occasionally supplemented by the types of individual variables for example br br br br br br x br br br br br br br br br br br e br br br br br br br br br br displaystyle Gamma x tau vdash e tau br br can be read as the context br br br br br br br displaystyle Gamma br br supplemented by the information that the expression br br br br x br br br displaystyle x br br has type br br br br br br br br br br br br displaystyle tau br br yields the judgement that expression br br br br e br br br displaystyle e br br has type br br br br br br br br br br br br displaystyle tau br br This notation can be used to give typing rules for variable references and lambda abstraction in the simply typed lambda calculus br br br br br br br br x br br br br br br br br br br br x br br br br br br br br br br br br x br br br br br br br br br br br e br br br br br br br br br br br br br br x br br br br br br br br br br br br e br br br br br br br br br br br br br br br br br br br br br displaystyle frac x tau in Gamma Gamma vdash x tau qquad frac Gamma x tau vdash e tau Gamma vdash lambda x tau e tau rightarrow tau br br br Similarly the following typing rule describes the br br br br br l br e br t br br br br displaystyle mathbf let br br construct of Standard ML br br br br br br br br br br br e br br br br br br br br br br br br br br br x br br br br br br br br br br br br e br br br br br br br br br br br br br br br br br l br e br t br br br x br br br e br br br br br br br i br n br br br br e br br br br br br br e br n br d br br br br br br br br br br br br br br displaystyle frac Gamma vdash e tau qquad Gamma x tau vdash e tau Gamma vdash mathbf let x e mathbf in e mathbf end tau br br br Not all systems of typing rules directly specify a type checking algorithm For example the typing rule for applying a parametrically polymorphic function in the Hindley Milner type system requires guessing the appropriate type at which the function should be instantiated Adapting a declarative rule system to a decidable algorithm requires the production of a separate algorithmic system that can be proven to specify the same typing relation br br br See also br Judgment mathematical logic br Type system br Type theory br Curry Howard correspondence br Sequent calculus br br br br br br Further reading br Cardelli Luca March Type Systems PDF ACM Computing Surveys doi S CID 