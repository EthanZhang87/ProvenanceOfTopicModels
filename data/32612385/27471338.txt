title: Object-oriented programming
id: 27471338
Object oriented programming OOP is a programming paradigm based on the concept of objects which can contain data and code data in the form of fields often known as attributes or properties and code in the form of procedures often known as methods In OOP computer programs are designed by making them out of objects that interact with one another br Many of the most widely used programming languages such as C Java Python etc are multi paradigm and they support object oriented programming to a greater or lesser degree typically in combination with imperative programming procedural programming and functional programming br Significant object oriented languages include Ada ActionScript C Common Lisp C Dart Eiffel Fortran Haxe Java Kotlin Logo MATLAB Objective C Object Pascal Perl PHP Python R Raku Ruby Scala SIMSCRIPT Simula Smalltalk Swift Vala and Visual Basic NET br br br History br Terminology invoking objects in the modern sense of object oriented programming made its first appearance at the artificial intelligence group at MIT in the late s and early s Object referred to LISP atoms with identified properties attributes br Another early MIT example was Sketchpad created by Ivan Sutherland in in the glossary of the technical report based on his dissertation about Sketchpad Sutherland defined notions of object and instance with the class concept covered by master or definition albeit specialized to graphical interaction br Also in an MIT ALGOL version AED established a direct link between data structures plexes in that dialect and procedures prefiguring what were later termed messages methods and member functions br Topics such as data abstraction and modular programming were common points of discussion at this time br Independently of later MIT work such as AED Simula was developed during the years br Simula introduced important concepts that are today an essential part of object oriented programming such as class and object inheritance and dynamic binding br The object oriented Simula programming language was used mainly by researchers involved with physical modelling such as models to study and improve the movement of ships and their content through cargo ports br br Influenced by the work at MIT and the Simula language in November Alan Kay began working on ideas that would eventually be incorporated into the Smalltalk programming language Kay used the term object oriented programming in conversation as early as Although sometimes called the father of object oriented programming Alan Kay has differentiated his notion of OO from the more conventional abstract data type notion of object and has implied that the computer science establishment did not adopt his notion br A MIT memo co authored by Barbara Liskov lists Simula CLU and Alphard as object oriented languages but does not mention Smalltalk br In the s the first version of the Smalltalk programming language was developed at Xerox PARC by Alan Kay Dan Ingalls and Adele Goldberg Smalltalk included a programming environment and was dynamically typed and at first was interpreted not compiled br Smalltalk became noted for its application of object orientation at the language level and its graphical development environment Smalltalk went through various versions and interest in the language grew br While Smalltalk was influenced by the ideas introduced in Simula it was designed to be a fully dynamic system in which classes could be created and modified dynamically br During the late s and s object oriented programming rose to prominence The Flavors object oriented Lisp was developed starting introducing multiple inheritance and mixins In Goldberg edited the August issue of Byte Magazine introducing Smalltalk and object oriented programming to a wide audience LOOPS the object system for Interlisp D was influenced by Smalltalk and Flavors and a paper about it was published in In the Association for Computing Machinery organized the first Conference on Object Oriented Programming Systems Languages and Applications OOPSLA which was attended by people Among other developments was the Common Lisp Object System which integrates functional programming and object oriented programming and allows extension via a Meta object protocol In the s there were a few attempts to design processor architectures that included hardware support for objects in memory but these were not successful Examples include the Intel iAPX and the Linn Smart Rekursiv br In the mid s Objective C was developed by Brad Cox who had used Smalltalk at ITT Inc Bjarne Stroustrup who had used Simula for his PhD thesis created the object oriented C In Bertrand Meyer also produced the first design of the Eiffel language Focused on software quality Eiffel is a purely object oriented programming language and a notation supporting the entire software lifecycle Meyer described the Eiffel software development method based on a small number of key ideas from software engineering and computer science in Object Oriented Software Construction Essential to the quality focus of Eiffel is Meyer s reliability mechanism Design by Contract which is an integral part of both the method and language br In the early and mid s object oriented programming developed as the dominant programming paradigm when programming languages supporting the techniques became widely available These included Visual FoxPro C and Delphi Its dominance was further enhanced by the rising popularity of graphical user interfaces which rely heavily upon object oriented programming techniques An example of a closely related dynamic GUI library and OOP language can be found in the Cocoa frameworks on Mac OS X written in Objective C an object oriented dynamic messaging extension to C based on Smalltalk OOP toolkits also enhanced the popularity of event driven programming although this concept is not limited to OOP br At ETH Z rich Niklaus Wirth and his colleagues investigated the concept of type checking across module boundaries Modula included this concept and their succeeding design Oberon included a distinctive approach to object orientation classes and such Inheritance is not obvious in Wirth s design since his nomenclature looks in the opposite direction It is called type extension and the viewpoint is from the parent down to the inheritor br Object oriented features have been added to many previously existing languages including Ada BASIC Fortran Pascal and COBOL Adding these features to languages that were not initially designed for them often led to problems with compatibility and maintainability of code br More recently some languages have emerged that are primarily object oriented but that are also compatible with procedural methodology Two such languages are Python and Ruby Probably the most commercially important recent object oriented languages are Java developed by Sun Microsystems as well as C and Visual Basic NET VB NET both designed for Microsoft s NET platform Each of these two frameworks shows in its way the benefit of using OOP by creating an abstraction from implementation VB NET and C support cross language inheritance allowing classes defined in one language to subclass classes defined in the other language br br br Features br br Object oriented programming uses objects but not all of the associated techniques and structures are supported directly in languages that claim to support OOP The features listed below are common among languages considered to be strongly class and object oriented or multi paradigm with OOP support with notable exceptions mentioned Christopher J Date stated that critical comparison of OOP to other technologies relational in particular is difficult because of lack of an agreed upon and rigorous definition of OOP br br br Shared with non OOP languages br Variables that can store information formatted in a small number of built in data types like integers and alphanumeric characters This may include data structures like strings lists and hash tables that are either built in or result from combining variables using memory pointers br Procedures also known as functions methods routines or subroutines that take input generate output and manipulate data Modern languages include structured programming constructs like loops and conditionals br Modular programming support provides the ability to group procedures into files and modules for organizational purposes Modules are namespaced so identifiers in one module will not conflict with a procedure or variable sharing the same name in another file or module br br br Objects br br An object is a data structure or abstract data type containing fields state variables containing data and methods subroutines or procedures defining the object s behavior in code Fields may also be known as members attributes or properties Objects are typically stored as contiguous regions of memory Objects are accessed somewhat like variables with complex internal structures and in many languages are effectively pointers serving as actual references to a single instance of said object in memory within a heap or stack br Objects sometimes correspond to things found in the real world For example a graphics program may have objects such as circle square and menu An online shopping system might have objects such as shopping cart customer and product Sometimes objects represent more abstract entities like an object that represents an open file or an object that provides the service of translating measurements from U S customary to metric br Objects can contain other objects in their instance variables this is known as object composition For example an object in the Employee class might contain either directly or through a pointer an object in the Address class in addition to its own instance variables like first name and position Object composition is used to represent has a relationships every employee has an address so every Employee object has access to a place to store an Address object either directly embedded within itself or at a separate location addressed via a pointer Date and Darwen have proposed a theoretical foundation that uses OOP as a kind of customizable type system to support RDBMS but it forbids object pointers br The OOP paradigm has been criticized for overemphasizing the use of objects for software design and modeling at the expense of other important aspects computation algorithms For example Rob Pike has said that OOP languages frequently shift the focus from data structures and algorithms to types Steve Yegge noted that as opposed to functional programming br br Object Oriented Programming puts the nouns first and foremost Why would you go to such lengths to put one part of speech on a pedestal Why should one kind of concept take precedence over another It s not as if OOP has suddenly made verbs less important in the way we actually think It s a strangely skewed perspective br Rich Hickey creator of Clojure described object systems as overly simplistic models of the real world He emphasized the inability of OOP to model time properly which is getting increasingly problematic as software systems become more concurrent br Alexander Stepanov compares object orientation unfavourably to generic programming br br I find OOP technically unsound It attempts to decompose the world in terms of interfaces that vary on a single type To deal with the real problems you need multisorted algebras families of interfaces that span multiple types I find OOP philosophically unsound It claims that everything is an object Even if it is true it is not very interesting saying that everything is an object is saying nothing at all br br br Inheritance br OOP languages are diverse but typically OOP languages allow inheritance for code reuse and extensibility in the form of either classes or prototypes These forms of inheritance are significantly different but analogous terminology is used to define the concepts of object and instance br br br Class based br In class based programming the most popular style each object is required to be an instance of a particular class The class defines the data format or type including member variables and their types and available procedures class methods or member functions for a given type or class of object Objects are created by calling a special type of method in the class known as a constructor Classes may inherit from other classes so they are arranged in a hierarchy that represents is a type of relationships For example class Employee might inherit from class Person All the data and methods available to the parent class also appear in the child class with the same names For example class Person might define variables first name and last name with method make full name These will also be available in class Employee which might add the variables position and salary It is guaranteed that all instances of class Employee will have the same variables such as the name position and salary Procedures and variables can be specific to either the class or the instance this leads to the following terms br br Class variables belong to the class as a whole there is only one copy of each variable shared across all instances of the class br Instance variables or attributes data that belongs to individual objects every object has its own copy of each one All variables mentioned above first name position etc are instance variables br Member variables refers to both the class and instance variables that are defined by a particular class br Class methods belong to the class as a whole and have access to only class variables and inputs from the procedure call br Instance methods belong to individual objects and have access to instance variables for the specific object they are called on inputs and class variables br Depending on the definition of the language subclasses may or may not be able to override the methods defined by superclasses Multiple inheritance is allowed in some languages though this can make resolving overrides complicated Some languages have special support for other concepts like traits and mixins though in any language with multiple inheritance a mixin is simply a class that does not represent an is a type of relationship Mixins are typically used to add the same methods to multiple classes For example class UnicodeConversionMixin might provide a method unicode to ascii when included in class FileReader and class WebPageScraper which do not share a common parent br Abstract classes cannot be instantiated into objects they exist only for inheritance into other concrete classes that can be instantiated In Java the final keyword can be used to prevent a class from being subclassed br br br Prototype based br In contrast in prototype based programming objects are the primary entities Generally the concept of a class does not even exist Rather the prototype or parent of an object is just another object to which the object is linked In Self an object may have multiple or no parents but in the most popular prototype based language Javascript every object has one prototype link and only one New objects can be created based on already existing objects chosen as their prototype You may call two different objects apple and orange a fruit if the object fruit exists and both apple and orange have fruit as their prototype The idea of the fruit class does not exist explicitly but can be modeled as the equivalence class of the objects sharing the same prototype or as the set of objects satisfying a certain interface duck typing Unlike class based programming it is typically possible in prototype based languages to define attributes and methods not shared with other objects for example the attribute sugar content may be defined in apple but not orange br br br Absence br Some languages like Go do not support inheritance at all Go states that it is object oriented and Bjarne Stroustrup author of C has stated that it is possible to do OOP without inheritance The doctrine of composition over inheritance advocates implementing has a relationships using composition instead of inheritance For example instead of inheriting from class Person class Employee could give each Employee object an internal Person object which it then has the opportunity to hide from external code even if class Person has many public attributes or methods Delegation is another language feature that can be used as an alternative to inheritance br Rob Pike has criticized the OO mindset for preferring a multilevel type hierarchy with layered abstractions to a three line lookup table He has called object oriented programming the Roman numerals of computing br Bob Martin states that because they are software related classes do not necessarily share the relationships of the things they represent br br br Dynamic dispatch message passing br It is the responsibility of the object not any external code to select the procedural code to execute in response to a method call typically by looking up the method at run time in a table associated with the object This feature is known as dynamic dispatch If the call variability relies on more than the single type of the object on which it is called i e at least one other parameter object is involved in the method choice one speaks of multiple dispatch A method call is also known as message passing It is conceptualized as a message the name of the method and its input parameters being passed to the object for dispatch br Dispatch interacts with inheritance if a method is not present in a given object or class the dispatch is delegated to its parent object or class and so on going up the chain of inheritance br br br Data abstraction and encapsulation br Data abstraction is a design pattern in which data are visible only to semantically related functions to prevent misuse The success of data abstraction leads to frequent incorporation of data hiding as a design principle in object oriented and pure functional programming Similarly encapsulation prevents external code from being concerned with the internal workings of an object This facilitates code refactoring for example allowing the author of the class to change how objects of that class represent their data internally without changing any external code as long as public method calls work the same way It also encourages programmers to put all the code that is concerned with a certain set of data in the same class which organizes it for easy comprehension by other programmers Encapsulation is a technique that encourages decoupling br In object oriented programming objects provide a layer which can be used to separate internal from external code and implement abstraction and encapsulation External code can only use an object by calling a specific instance method with a certain set of input parameters reading an instance variable or writing to an instance variable A program may create many instances of objects as it runs which operate independently This technique it is claimed allows easy re use of the same procedures and data definitions for different sets of data in addition to potentially mirroring real world relationships intuitively Rather than utilizing database tables and programming subroutines the developer utilizes objects the user may be more familiar with objects from their application domain These claims that the OOP paradigm enhances reusability and modularity have been criticized br If a class does not allow calling code to access internal object data and permits access through methods only this is also a form of information hiding Some languages Java for example let classes enforce access restrictions explicitly for example denoting internal data with the private keyword and designating methods intended for use by code outside the class with the public keyword Methods may also be designed public private or intermediate levels such as protected which allows access from the same class and its subclasses but not objects of a different class In other languages like Python this is enforced only by convention for example private methods may have names that start with an underscore In C Swift Kotlin languages internal keyword permits access only to files present in the same assembly package or module as that of the class br In programming languages particularly object oriented ones the emphasis on abstraction is vital Object oriented languages extend the notion of type to incorporate data abstraction highlighting the significance of restricting access to internal data through methods Eric S Raymond has written that object oriented programming languages tend to encourage thickly layered programs that destroy transparency Raymond compares this unfavourably to the approach taken with Unix and the C programming language br The open closed principle advocates that classes and functions should be open for extension but closed for modification Luca Cardelli has claimed that OOP languages have extremely poor modularity properties with respect to class extension and modification and tend to be extremely complex The latter point is reiterated by Joe Armstrong the principal inventor of Erlang who is quoted as saying br br The problem with object oriented languages is they ve got all this implicit environment that they carry around with them You wanted a banana but what you got was a gorilla holding the banana and the entire jungle br Leo Brodie has suggested a connection between the standalone nature of objects and a tendency to duplicate code in violation of the don t repeat yourself principle of software development br br br Polymorphism br Subtyping a form of polymorphism is when calling code can be independent of which class in the supported hierarchy it is operating on the parent class or one of its descendants Meanwhile the same operation name among objects in an inheritance hierarchy may behave differently br For example objects of the type Circle and Square are derived from a common class called Shape The Draw function for each type of Shape implements what is necessary to draw itself while calling code can remain indifferent to the particular type of Shape being drawn br This is another type of abstraction that simplifies code external to the class hierarchy and enables strong separation of concerns br br br Open recursion br A common feature of objects is that methods are attached to them and can access and modify the object s data fields In this brand of OOP there is usually a special name such as this or self used to refer to the current object In languages that support open recursion object methods can call other methods on the same object including themselves using this name This variable is late bound it allows a method defined in one class to invoke another method that is defined later in some subclass thereof br br br OOP languages br br Simula is generally accepted as being the first language with the primary features of an object oriented language It was created for making simulation programs in which what came to be called objects were the most important information representation Smalltalk to is another early example and the one with which much of the theory of OOP was developed Concerning the degree of object orientation the following distinctions can be made br br Languages called pure OO languages because everything in them is treated consistently as an object from primitives such as characters and punctuation all the way up to whole classes prototypes blocks modules etc They were designed specifically to facilitate even enforce OO methods Examples Ruby Scala Smalltalk Eiffel Emerald JADE Self Raku br Languages designed mainly for OO programming but with some procedural elements Examples Java Python C C Delphi Object Pascal VB NET br Languages that are historically procedural languages but have been extended with some OO features Examples PHP JavaScript Perl Visual Basic derived from BASIC MATLAB COBOL Fortran ABAP Ada Pascal br Languages with most of the features of objects classes methods inheritance but in a distinctly original form Examples Oberon Oberon or Oberon br Languages with abstract data type support which may be used to resemble OO programming but without all features of object orientation This includes object based and prototype based languages Examples JavaScript Lua Modula CLU br Chameleon languages that support multiple paradigms including OO Tcl stands out among these for TclOO a hybrid object system that supports both prototype based programming and class based OO br br br Popularity and reception br br Many widely used languages such as C Java and Python provide object oriented features Although in the past object oriented programming was widely accepted more recently essays criticizing object oriented programming and recommending the avoidance of these features generally in favor of functional programming have been very popular in the developer community Paul Graham has suggested that OOP s popularity within large companies is due to large and frequently changing groups of mediocre programmers According to Graham the discipline imposed by OOP prevents any one programmer from doing too much damage Eric S Raymond a Unix programmer and open source software advocate has been critical of claims that present object oriented programming as the One True Solution br Richard Feldman argues that these languages may have improved their modularity by adding OO features but they became popular for reasons other than being object oriented In an article Lawrence Krubner claimed that compared to other languages LISP dialects functional languages etc OOP languages have no unique strengths and inflict a heavy burden of unneeded complexity A study by Potok et al has shown no significant difference in productivity between OOP and procedural approaches Luca Cardelli has claimed that OOP code is intrinsically less efficient than procedural code and that OOP can take longer to compile br br br OOP in dynamic languages br In recent years object oriented programming has become especially popular in dynamic programming languages Python PowerShell Ruby and Groovy are dynamic languages built on OOP principles while Perl and PHP have been adding object oriented features since Perl and PHP and ColdFusion since version br The Document Object Model of HTML XHTML and XML documents on the Internet has bindings to the popular JavaScript ECMAScript language JavaScript is perhaps the best known prototype based programming language which employs cloning from prototypes rather than inheriting from a class contrast to class based programming Another scripting language that takes this approach is Lua br br br OOP in a network protocol br The messages that flow between computers to request services in a client server environment can be designed as the linearizations of objects defined by class objects known to both the client and the server For example a simple linearized object would consist of a length field a code point identifying the class and a data value A more complex example would be a command consisting of the length and code point of the command and values consisting of linearized objects representing the command s parameters Each such command must be directed by the server to an object whose class or superclass recognizes the command and can provide the requested service Clients and servers are best modeled as complex object oriented structures Distributed Data Management Architecture DDM took this approach and used class objects to define objects at four levels of a formal hierarchy br br Fields defining the data values that form messages such as their length code point and data values br Objects and collections of objects similar to what would be found in a Smalltalk program for messages and parameters br Managers similar to IBM i Objects such as a directory to files and files consisting of metadata and records Managers conceptually provide memory and processing resources for their contained objects br A client or server consisting of all the managers necessary to implement a full processing environment supporting such aspects as directory services security and concurrency control br The initial version of DDM defined distributed file services It was later extended to be the foundation of Distributed Relational Database Architecture DRDA br br br Design patterns br One way to address challenges of object oriented design is via design patterns which are solution patterns to commonly occurring problems in software design Some of these commonly occurring problems have implications and solutions particular to object oriented development br br br Object patterns br The following are notable software design patterns for OOP objects br br Function object with a single method in C the function operator operator it acts much like a function br Immutable object does not change state after creation br First class object can be used without restriction br Container object contains other objects br Factory object creates other objects br Metaobject from which other objects can be created compare with a class which is not necessarily an object br Prototype object a specialized metaobject from which other objects can be created by copying br Singleton object only instance of its class for the lifetime of the program br Filter object receives a stream of data as its input and transforms it into the object s output br As an example of an object anti pattern the God object knows or does too much br br br Inheritance and behavioral subtyping br br It is intuitive to assume that inheritance creates a semantic is a relationship and thus to infer that objects instantiated from subclasses can always be safely used instead of those instantiated from the superclass This intuition is unfortunately false in most OOP languages in particular in all those that allow mutable objects Subtype polymorphism as enforced by the type checker in OOP languages with mutable objects cannot guarantee behavioral subtyping in any context Behavioral subtyping is undecidable in general so it cannot be implemented by a program compiler Class or object hierarchies must be carefully designed considering possible incorrect uses that cannot be detected syntactically This issue is known as the Liskov substitution principle br br br Gang of Four design patterns br br Design Patterns Elements of Reusable Object Oriented Software is an influential book published in by Erich Gamma Richard Helm Ralph Johnson and John Vlissides often referred to humorously as the Gang of Four Along with exploring the capabilities and pitfalls of object oriented programming it describes common programming problems and patterns for solving them br The book describes the following patterns br br Creational patterns Factory method pattern Abstract factory pattern Singleton pattern Builder pattern Prototype pattern br Structural patterns Adapter pattern Bridge pattern Composite pattern Decorator pattern Facade pattern Flyweight pattern Proxy pattern br Behavioral patterns Chain of responsibility pattern Command pattern Interpreter pattern Iterator pattern Mediator pattern Memento pattern Observer pattern State pattern Strategy pattern Template method pattern Visitor pattern br br br Object orientation and databases br br Both object oriented programming and relational database management systems RDBMSs are extremely common in software today Since relational databases do not store objects directly though some RDBMSs have object oriented features to approximate this there is a general need to bridge the two worlds The problem of bridging object oriented programming accesses and data patterns with relational databases is known as object relational impedance mismatch There are some approaches to cope with this problem but no general solution without downsides One of the most common approaches is object relational mapping as found in IDE languages such as Visual FoxPro and libraries such as Java Data Objects and Ruby on Rails ActiveRecord br There are also object databases that can be used to replace RDBMSs but these have not been as technically and commercially successful as RDBMSs br br br Real world modeling and relationships br OOP can be used to associate real world objects and processes with digital counterparts However not everyone agrees that OOP facilitates direct real world mapping or that real world mapping is even a worthy goal Bertrand Meyer argues in Object Oriented Software Construction that a program is not a model of the world but a model of some part of the world Reality is a cousin twice removed At the same time some principal limitations of OOP have been noted br For example the circle ellipse problem is difficult to handle using OOP s concept of inheritance br However Niklaus Wirth who popularized the adage now known as Wirth s law Software is getting slower more rapidly than hardware becomes faster said of OOP in his paper Good Ideas through the Looking Glass This paradigm closely reflects the structure of systems in the real world and is therefore well suited to model complex systems with complex behavior br contrast KISS principle br Steve Yegge and others noted that natural languages lack the OOP approach of strictly prioritizing things objects nouns before actions methods verbs This problem may cause OOP to suffer more convoluted solutions than procedural programming br br br OOP and control flow br OOP was developed to increase the reusability and maintainability of source code Transparent representation of the control flow had no priority and was meant to be handled by a compiler With the increasing relevance of parallel hardware and multithreaded coding developing transparent control flow becomes more important something hard to achieve with OOP br br br Responsibility vs data driven design br Responsibility driven design defines classes in terms of a contract that is a class should be defined around a responsibility and the information that it shares This is contrasted by Wirfs Brock and Wilkerson with data driven design where classes are defined around the data structures that must be held The authors hold that responsibility driven design is preferable br br br SOLID and GRASP guidelines br SOLID is a mnemonic invented by Michael Feathers which spells out five software engineering design principles br br Single responsibility principle br Open closed principle br Liskov substitution principle br Interface segregation principle br Dependency inversion principle br GRASP General Responsibility Assignment Software Patterns is another set of guidelines advocated by Craig Larman br br br Formal semantics br br Objects are the run time entities in an object oriented system They may represent a person a place a bank account a table of data or any item that the program has to handle br There have been several attempts at formalizing the concepts used in object oriented programming The following concepts and constructs have been used as interpretations of OOP concepts br br co algebraic data types br recursive types br encapsulated state br inheritance br records are the basis for understanding objects if function literals can be stored in fields like in functional programming languages but the actual calculi need be considerably more complex to incorporate essential features of OOP Several extensions of System F that deal with mutable objects have been studied these allow both subtype polymorphism and parametric polymorphism generics br Attempts to find a consensus definition or theory behind objects have not proven very successful however see Abadi Cardelli A Theory of Objects for formal definitions of many OOP concepts and constructs and often diverge widely For example some definitions focus on mental activities and some on program structuring One of the simpler definitions is that OOP is the act of using map data structures or arrays that can contain functions and pointers to other maps all with some syntactic and scoping sugar on top Inheritance can be performed by cloning the maps sometimes called prototyping br br br See also br br Comparison of programming languages object oriented programming br Component based software engineering br Design by contract br Object association br Object database br Object modeling language br Object oriented analysis and design br Object oriented ontology br Object relational impedance mismatch and The Third Manifesto br Object relational mapping br br br Systems br CADES br Common Object Request Broker Architecture CORBA br Distributed Component Object Model br Distributed Data Management Architecture br Jeroo br br br Modeling languages br IDEF br Interface description language br UML br br br br br br Further reading br Abadi Martin Luca Cardelli A Theory of Objects Springer Verlag ISBN br Abelson Harold Gerald Jay Sussman Structure and Interpretation of Computer Programs MIT Press ISBN Archived from the original on December Retrieved January br Armstrong Deborah J February The Quarks of Object Oriented Development Communications of the ACM doi ISSN S CID br Bloch Joshua Effective Java Programming Language Guide third ed Addison Wesley ISBN br Booch Grady Object Oriented Analysis and Design with Applications Addison Wesley ISBN br Eeles Peter Oliver Sims Building Business Objects John Wiley Sons ISBN br Gamma Erich Richard Helm Ralph Johnson John Vlissides Design Patterns Elements of Reusable Object Oriented Software Addison Wesley Bibcode dper book G ISBN br Harmon Paul William Morrissey The Object Technology Casebook Lessons from Award Winning Business Applications John Wiley Sons ISBN br Jacobson Ivar Object Oriented Software Engineering A Use Case Driven Approach Addison Wesley Bibcode oose book J ISBN br Kay Alan The Early History of Smalltalk Archived from the original on April Retrieved April br Meyer Bertrand Object Oriented Software Construction Prentice Hall ISBN br Pecinovsky Rudolf OOP Learn Object Oriented Thinking Programming Bruckner Publishing ISBN br Rumbaugh James Michael Blaha William Premerlani Frederick Eddy William Lorensen Object Oriented Modeling and Design Prentice Hall ISBN br Schach Stephen Object Oriented and Classical Software Engineering Seventh Edition McGraw Hill ISBN br Schreiner Axel Tobias Object oriented programming with ANSI C Hanser hdl ISBN br Taylor David A Object Oriented Information Systems Planning and Implementation John Wiley Sons ISBN br Weisfeld Matt The Object Oriented Thought Process Third Edition Addison Wesley ISBN br West David Object Thinking Developer Reference Microsoft Press ISBN br br br External links br br Introduction to Object Oriented Programming Concepts OOP and More by L W C Nirosh br Discussion on Cons of OOP br OOP Concepts Java Tutorials 