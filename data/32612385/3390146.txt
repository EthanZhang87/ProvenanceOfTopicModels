title: Parametric polymorphism
id: 3390146
In programming languages and type theory parametric polymorphism allows a single piece of code to be given a generic type using variables in place of actual types and then instantiated with particular types as needed Parametrically polymorphic functions and data types are sometimes called generic functions and generic datatypes respectively and they form the basis of generic programming br Parametric polymorphism may be contrasted with ad hoc polymorphism Parametrically polymorphic definitions are uniform they behave identically regardless of the type they are instantiated at In contrast ad hoc polymorphic definitions are given a distinct definition for each type Thus ad hoc polymorphism can generally only support a limited number of such distinct types since a separate implementation has to be provided for each type br br br Basic definition br It is possible to write functions that do not depend on the types of their arguments For example the identity function br br br br br br i br d br br br br x br br br x br br br displaystyle mathsf id x x br br simply returns its argument unmodified This naturally gives rise to a family of potential types such as br br br br br br I br n br t br br br br br br I br n br t br br br br br displaystyle mathsf Int to mathsf Int br br br br br br br br B br o br o br l br br br br br br B br o br o br l br br br br br displaystyle mathsf Bool to mathsf Bool br br br br br br br br S br t br r br i br n br g br br br br br br S br t br r br i br n br g br br br br br displaystyle mathsf String to mathsf String br br and so on Parametric polymorphism allows br br br br br br i br d br br br br br displaystyle mathsf id br br to be given a single most general type by introducing a universally quantified type variable br br br br br br br i br d br br br br br br br br br br br br displaystyle mathsf id forall alpha alpha to alpha br br br The polymorphic definition can then be instantiated by substituting any concrete type for br br br br br br br displaystyle alpha br br yielding the full family of potential types br The identity function is a particularly extreme example but many other functions also benefit from parametric polymorphism For example an br br br br br br a br p br p br e br n br d br br br br br displaystyle mathsf append br br function that concatenates two lists does not inspect the elements of the list only the list structure itself Therefore br br br br br br a br p br p br e br n br d br br br br br displaystyle mathsf append br br can be given a similar family of types such as br br br br br br br I br n br t br br br br br br br br I br n br t br br br br br br br br I br n br t br br br br br br displaystyle mathsf Int times mathsf Int to mathsf Int br br br br br br br br br B br o br o br l br br br br br br br br B br o br o br l br br br br br br br br B br o br o br l br br br br br br displaystyle mathsf Bool times mathsf Bool to mathsf Bool br br and so on where br br br br br T br br br br displaystyle T br br denotes a list of elements of type br br br br T br br br displaystyle T br br The most general type is therefore br br br br br br br a br p br p br e br n br d br br br br br br br br br br br br br br br br br br br br displaystyle mathsf append forall alpha alpha times alpha to alpha br br br which can be instantiated to any type in the family br Parametrically polymorphic functions like br br br br br br i br d br br br br br displaystyle mathsf id br br and br br br br br br a br p br p br e br n br d br br br br br displaystyle mathsf append br br are said to be parameterized over an arbitrary type br br br br br br br displaystyle alpha br br Both br br br br br br i br d br br br br br displaystyle mathsf id br br and br br br br br br a br p br p br e br n br d br br br br br displaystyle mathsf append br br are parameterized over a single type but functions may be parameterized over arbitrarily many types For example the br br br br br br f br s br t br br br br br displaystyle mathsf fst br br and br br br br br br s br n br d br br br br br displaystyle mathsf snd br br functions that return the first and second elements of a pair respectively can be given the following types br br br br br br br br br br br f br s br t br br br br br br br br br br br br br br br br br br br br br br br br s br n br d br br br br br br br br br br br br br br br br br br br br br br br br displaystyle begin aligned mathsf fst forall alpha forall beta alpha times beta to alpha mathsf snd forall alpha forall beta alpha times beta to beta end aligned br br br In the expression br br br br br br f br s br t br br br br br br br br br t br r br u br e br br br br br br br displaystyle mathsf fst mathsf true br br br br br br br br br displaystyle alpha br br is instantiated to br br br br br br I br n br t br br br br br displaystyle mathsf Int br br and br br br br br br br displaystyle beta br br is instantiated to br br br br br br B br o br o br l br br br br br displaystyle mathsf Bool br br in the call to br br br br br br f br s br t br br br br br displaystyle mathsf fst br br so the type of the overall expression is br br br br br br I br n br t br br br br br displaystyle mathsf Int br br br The syntax used to introduce parametric polymorphism varies significantly between programming languages For example in some programming languages such as Haskell the br br br br br br br br displaystyle forall alpha br br quantifier is implicit and may be omitted Other languages require types to be instantiated explicitly at some or all of a parametrically polymorphic function s call sites br br br History br Parametric polymorphism was first introduced to programming languages in ML in Today it exists in Standard ML OCaml F Ada Haskell Mercury Visual Prolog Scala Julia Python TypeScript C and others Java C Visual Basic NET and Delphi have each introduced generics for parametric polymorphism Some implementations of type polymorphism are superficially similar to parametric polymorphism while also introducing ad hoc aspects One example is C template specialization br br br Predicativity impredicativity and higher rank polymorphism br br br Rank predicative polymorphism br br In a predicative type system also known as a prenex polymorphic system type variables may not be instantiated with polymorphic types Predicative type theories include Martin L f type theory and Nuprl This is very similar to what is called ML style or Let polymorphism technically ML s Let polymorphism has a few other syntactic restrictions br This restriction makes the distinction between polymorphic and non polymorphic types very important thus in predicative systems polymorphic types are sometimes referred to as type schemas to distinguish them from ordinary monomorphic types which are sometimes called monotypes br A consequence of predicativity is that all types can be written in a form that places all quantifiers at the outermost prenex position For example consider the br br br br br br a br p br p br e br n br d br br br br br displaystyle mathsf append br br function described above which has the following type br br br br br br br a br p br p br e br n br d br br br br br br br br br br br br br br br br br br br br displaystyle mathsf append forall alpha alpha times alpha to alpha br br br In order to apply this function to a pair of lists a concrete type br br br br T br br br displaystyle T br br must be substituted for the variable br br br br br br br displaystyle alpha br br such that the resulting function type is consistent with the types of the arguments In an impredicative system br br br br T br br br displaystyle T br br may be any type whatsoever including a type that is itself polymorphic thus br br br br br br a br p br p br e br n br d br br br br br displaystyle mathsf append br br can be applied to pairs of lists with elements of any type even to lists of polymorphic functions such as br br br br br br a br p br p br e br n br d br br br br br displaystyle mathsf append br br itself br Polymorphism in the language ML is predicative This is because predicativity together with other restrictions makes the type system simple enough that full type inference is always possible br As a practical example OCaml a descendant or dialect of ML performs type inference and supports impredicative polymorphism but in some cases when impredicative polymorphism is used the system s type inference is incomplete unless some explicit type annotations are provided by the programmer br br br Higher rank polymorphism br Some type systems support an impredicative function type constructor even though other type constructors remain predicative For example the type br br br br br br br br br br br br br T br br br displaystyle forall alpha alpha rightarrow alpha rightarrow T br br is permitted in a system that supports higher rank polymorphism even though br br br br br br br br br br br br br br displaystyle forall alpha alpha rightarrow alpha br br may not be br A type is said to be of rank k for some fixed integer k if no path from its root to a br br br br br br br displaystyle forall br br quantifier passes to the left of k or more arrows when the type is drawn as a tree A type system is said to support rank k polymorphism if it admits types with rank less than or equal to k For example a type system that supports rank polymorphism would allow br br br br br br br br br br br br br T br br br displaystyle forall alpha alpha rightarrow alpha rightarrow T br br but not br br br br br br br br br br br br br br T br br br T br br br displaystyle forall alpha alpha rightarrow alpha rightarrow T rightarrow T br br A type system that admits types of arbitrary rank is said to be rank n polymorphic br Type inference for rank polymorphism is decidable but for rank and above it is not br br br Impredicative polymorphism br Impredicative polymorphism also called first class polymorphism is the most powerful form of parametric polymorphism In formal logic a definition is said to be impredicative if it is self referential in type theory it refers to the ability for a type to be in the domain of a quantifier it contains This allows the instantiation of any type variable with any type including polymorphic types An example of a system supporting full impredicativity is System F which allows instantiating br br br br br br br br br br br br displaystyle forall alpha alpha to alpha br br at any type including itself br In type theory the most frequently studied impredicative typed calculi are based on those of the lambda cube especially System F br br br Bounded parametric polymorphism br br In Luca Cardelli and Peter Wegner recognized the advantages of allowing bounds on the type parameters Many operations require some knowledge of the data types but can otherwise work parametrically For example to check whether an item is included in a list we need to compare the items for equality In Standard ML type parameters of the form a are restricted so that the equality operation is available thus the function would have the type a a list bool and a can only be a type with defined equality In Haskell bounding is achieved by requiring types to belong to a type class thus the same function has the type br br br br br E br q br br br br br br br br br br br br br br br br B br o br o br l br br br br textstyle mathrm Eq alpha Rightarrow alpha rightarrow left alpha right rightarrow mathrm Bool br br in Haskell In most object oriented programming languages that support parametric polymorphism parameters can be constrained to be subtypes of a given type see the articles Subtype polymorphism and Generic programming br br br See also br Parametricity br Polymorphic recursion br Type class Higher kinded polymorphism br Trait computer programming br br br Notes br br br br br Hindley J Roger The principal type scheme of an object in combinatory logic Transactions of the American Mathematical Society doi JSTOR MR br Girard Jean Yves Une Extension de l Interpretation de G del l Analyse et son Application l limination des Coupures dans l Analyse et la Th orie des Types Proceedings of the Second Scandinavian Logic Symposium Studies in Logic and the Foundations of Mathematics in French Vol Amsterdam pp doi S X ISBN br Girard Jean Yves Interpr tation fonctionnelle et limination des coupures de l arithm tique d ordre sup rieur Ph D thesis in French Universit Paris br Reynolds John C Towards a Theory of Type Structure Colloque Sur la Programmation Lecture Notes in Computer Science Paris doi ISBN br Milner Robin A Theory of Type Polymorphism in Programming PDF Journal of Computer and System Sciences doi S CID br Cardelli Luca Wegner Peter December On Understanding Types Data Abstraction and Polymorphism PDF ACM Computing Surveys CiteSeerX doi ISSN S CID br Pierce Benjamin C Types and Programming Languages MIT Press ISBN 