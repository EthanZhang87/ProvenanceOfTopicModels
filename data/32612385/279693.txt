title: Type signature
id: 279693
In computer science a type signature or type annotation defines the inputs and outputs of a function subroutine or method A type signature includes the number types and order of the function s arguments One important use of a type signature is for function overload resolution where one particular definition of a function to be called is selected among many overloaded forms br br br Examples br br br C C br In C and C the type signature is declared by what is commonly known as a function prototype In C C a function declaration reflects its use for example a function pointer with the signature int char double would be called as br br br Erlang br In Erlang type signatures may be optionally declared as br br For example br br br Haskell br A type signature in Haskell generally takes the following form br br Notice that the type of the result can be regarded as everything past the first supplied argument This is a consequence of currying which is made possible by Haskell s support for first class functions this function requires two inputs where one argument is supplied and the function is curried to produce a function for the argument not supplied Thus calling f x where f a b c yields a new function f b c that can be called f b to produce c br The actual type specifications can consist of an actual type such as Integer or a general type variable that is used in parametric polymorphic functions such as a or b or anyType So we can write something like br functionName a a a br Since Haskell supports higher order functions functions can be passed as arguments This is written as br functionName a a a br This function takes in a function with type signature a a and returns data of type a out br br br Java br In the Java virtual machine internal type signatures are used to identify methods and classes at the level of the virtual machine code br Example The method String String substring int int is represented in bytecode as Ljava lang String substring II Ljava lang String br The signature of the main method looks like this br br And in the disassembled bytecode it takes the form of Lsome package Main main Ljava lang String V br The method signature for the main method contains three modifiers br br public indicates that the main method can be called by any object br static indicates that the main method is a class method br void indicates that the main method has no return value br br br Signature br br A function signature consists of the function prototype It specifies the general information about a function like the name scope and parameters Many programming languages use name mangling in order to pass along more semantic information from the compilers to the linkers In addition to mangling there is an excess of information in a function signature stored internally to most compilers which is not readily available but may be accessed br Understanding the notion of a function signature is an important concept for all computer science studies br br Modern object orientation techniques make use of interfaces which are essentially templates made from function signatures br C uses function overloading with various signatures br The practice of multiple inheritance requires consideration of the function signatures to avoid unpredictable results Computer science theory and the concept of polymorphism in particular make much use of the concept of function signature br In the C programming language a signature is roughly equivalent to its prototype definition br In the ML family of programming languages signature is used as a keyword referring to a construct of the module system that plays the role of an interface br br br Method signature br br In computer programming especially object oriented programming a method is commonly identified by its unique method signature which usually includes the method name and the number types and order of its parameters A method signature is the smallest type of a method br br br Examples br br br C C br In C C the method signature is the method name and the number and type of its parameters but it is possible to have a last parameter that consists of an array of values br br Manipulation of these parameters can be done by using the routines in the standard library header stdarg h br In C the return type can also follow the parameter list which is referred to as a trailing return type The difference is only syntactic in either case the resulting signature is identical br br br C br Similar to the syntax of C method signatures in C are composed of a name and the number and type of its parameters where the last parameter may be an array of values br br br Java br In Java a method signature is composed of a name and the number type and order of its parameters Return types and thrown exceptions are not considered to be a part of the method signature nor are the names of parameters they are ignored by the compiler for checking method uniqueness br The method signatures help distinguish overloaded methods methods with the same name in a class Return types are not included in overloading Only method signatures should be used to distinguish overloaded methods br For example the following two methods have different signatures br br The following two methods both have the same signature br br br Julia br In Julia function signatures take the following form br br The types in the arguments are used for the multiple dispatch The return type is validated when the function returns a value and a runtime exception is raised if the type of the value does not agree with the specified type br Abstract types are allowed and are encouraged for implementing general behavior that is common to all subtypes The above function can therefore be rewritten as follows In this case the function can accept any Integer and Real subtypes accordingly br br Types are completely optional in function arguments When unspecified it is equivalent to using the type Any which is the super type of all types It is idiomatic to specify argument types but not return type br br br Objective C br In the Objective C programming language method signatures for an object are declared in the interface header file For example br br defines a method initWithInt that returns a general object an id and takes one integer argument Objective C only requires a type in a signature to be explicit when the type is not id this signature is equivalent br br br Rust br In Rust function signatures take the following form br br br See also br Argument of a function Input to a mathematical function br br br 