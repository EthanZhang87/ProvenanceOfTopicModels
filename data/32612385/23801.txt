title: Procedural programming
id: 23801
Procedural programming is a programming paradigm classified as imperative programming that involves implementing the behavior of a computer program as procedures a k a functions subroutines that call each other The resulting program is a series of steps that forms a hierarchy of calls to its constituent procedures br The first major procedural programming languages appeared c including Fortran ALGOL COBOL PL I and BASIC Pascal and C were published c br Computer processors provide hardware support for procedural programming through a stack register and instructions for calling procedures and returning from them Hardware support for other types of programming is possible like Lisp machines or Java processors but no attempt was commercially successful br br br Development practices br Certain software development practices are often employed with procedural programming in order to enhance quality and lower development and maintenance costs br br br Modularity and scoping br Modularity is about organizing the procedures of a program into separate modules each of which has a specific and understandable purpose br Minimizing the scope of variables and procedures can enhance software quality by reducing the cognitive load of procedures and modules br A program lacking modularity or wide scoping tends to have procedures that consume many variables that other procedures also consume The resulting code is relatively hard to understand and to maintain br br br Sharing br Since a procedure can specify a well defined interface and be self contained it supports code reuse in particular via the software library br br br Comparison with other programming paradigms br br br Imperative programming br Procedural programming is classified as a imperative programming because it involves direct command of execution br Procedural is a sub class of imperative since procedural includes block and scope concepts whereas imperative describes a more general concept that does not require such features Procedural languages generally use reserved words that define blocks such as if while and for to implement control flow whereas non structured imperative languages i e assembly language use goto and branch tables for this purpose br br br Object oriented programming br Also classified as imperative object oriented programming OOP involves dividing a program implementation into objects that expose behavior methods and data members via a well defined interface In contrast procedural programming is about dividing the program implementation into variables data structures and subroutines An important distinction is that while procedural involves procedures to operate on data structures OOP bundles the two together An object is a data structure and the behavior associated with that data structure br Some OOP languages support the class concept which allows for creating an object based on a definition br Nomenclature varies between the two although they have similar semantics br br br Functional programming br The principles of modularity and code reuse in functional languages are fundamentally the same as in procedural languages since they both stem from structured programming For example br br Procedures correspond to functions Both allow the reuse of the same code in various parts of the programs and at various points of its execution br By the same token procedure calls correspond to function application br Functions and their modularly separated from each other in the same manner by the use of function arguments return values and variable scopes br The main difference between the styles is that functional programming languages remove or at least deemphasize the imperative elements of procedural programming The feature set of functional languages is therefore designed to support writing programs as much as possible in terms of pure functions br br Whereas procedural languages model execution of the program as a sequence of imperative commands that may implicitly alter shared state functional programming languages model execution as the evaluation of complex expressions that only depend on each other in terms of arguments and return values For this reason functional programs can have a free order of code execution and the languages may offer little control over the order in which various parts of the program are executed for example the arguments to a procedure invocation in Scheme are evaluated in an arbitrary order br Functional programming languages support and heavily use first class functions anonymous functions and closures although these concepts have also been included in procedural languages at least since Algol br Functional programming languages tend to rely on tail call optimization and higher order functions instead of imperative looping constructs br Many functional languages however are in fact impurely functional and offer imperative procedural constructs that allow the programmer to write programs in procedural style or in a combination of both styles It is common for input output code in functional languages to be written in a procedural style br There do exist a few esoteric functional languages like Unlambda that eschew structured programming precepts for the sake of being difficult to program in and therefore challenging These languages are the exception to the common ground between procedural and functional languages br br br Logic programming br In logic programming a program is a set of premises and computation is performed by attempting to prove candidate theorems From this point of view logic programs are declarative focusing on what the problem is rather than on how to solve it br However the backward reasoning technique implemented by SLD resolution used to solve problems in logic programming languages such as Prolog treats programs as goal reduction procedures Thus clauses of the form br br H B Bn br have a dual interpretation both as procedures br br to show solve H show solve B and and Bn br and as logical implications br br B and and Bn implies H br A skilled logic programmer uses the procedural interpretation to write programs that are effective and efficient and uses the declarative interpretation to help ensure that programs are correct br br br See also br Declarative programming br Functional programming contrast br Imperative programming br Logic programming br Object oriented programming br Programming paradigms br Programming language br Structured programming br SQL procedural extensions br br br br br br External links br Procedural Languages at Curlie