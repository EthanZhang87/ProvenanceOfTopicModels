title: Perl virtual machine
id: 28034547
The Perl virtual machine is a stack based process virtual machine implemented as an opcodes interpreter which runs previously compiled programs written in the Perl language The opcodes interpreter is a part of the Perl interpreter which also contains a compiler lexer parser and optimizer in one executable file commonly usr bin perl on various Unix like systems or perl exe on Microsoft Windows systems br br br Implementation br br br Opcodes br The Perl compiler outputs a compiled program into memory as an internal structure which can be represented as a tree graph in which each node represents an opcode Opcodes are represented internally by typedefs Each opcode has next other and first sibling pointers so the opcode tree can be drawn as a basic OP tree starting from root node or as flat OP list in the order they would normally execute from start node Opcodes tree can be mapped to the source code so it is possible to decompile to high level source code br Perl s opcodes interpreter is implemented as a tree walker which travels the opcode tree in execution order from the start node following the next or other pointers Each opcode has a function pointer to a pp opname function i e the say opcode calls the pp say function of internal Perl API br The phase of compiling a Perl program is hidden from the end user but it can be exposed with the B Perl module or other specialized modules as the B Concise Perl module br An example of a simple compiled Hello world program dumped in execute order with the B Concise Perl module br br Some opcodes entereval dofile require call Perl compiler functions which in turn generate other opcodes in the same Perl virtual machine br br br Variables br Perl variables can be global dynamic local keyword or lexical my and our keywords br Global variables are accessible via the stash and the corresponding typeglob br Local variables are the same as global variables but a special opcode is generated to save its value on the savestack and restore it later br Lexical variables are stored in the padlist br br br Data structures br Perl VM data structures are represented internally by typedefs br The internal data structures can be examined with the B Perl module or other specialized tools like the Devel Peek Perl module br br br data types br Perl has three typedefs that handle Perl s three main data types Scalar Value SV Array Value AV Hash Value HV Perl uses a special typedef for the simple signed integer type IV unsigned integers UV floating point numbers NV and strings PV br Perl uses a reference count driven garbage collection mechanism SVs AVs or HVs start their life with a reference count of If the reference count of a data value drops to then it will be destroyed and its memory is made available for reuse br Other typedefs are Glob Value GV which contain named references to various objects Code Value CV which contain a reference to a Perl subroutine I O Handler IO a reference to regular expression REGEXP RV in Perl before reference to compiled format for output record FM and simple reference which is a special type of scalar that point to other data types RV br br br stash br Special Hash Value is stash a hash that contains all variables that are defined within a package Each value in this hash table is a Glob Value GV br br br padlist br Special Array Value is padlist which is an array of array Its th element to an AV containing all lexical variable names with prefix symbols used within that subroutine The padlist s first element points to a scratchpad AV whose elements contain the values corresponding to the lexical variables named in the th row Another elements of padlist are created when the subroutine recurses or new thread is created br br br Stacks br Perl has a number of stacks to store things it is working on br br br Argument stack br Arguments are passed to opcode and returned from opcode using the argument stack The typical way to handle arguments is to pop them off the stack and then push the result back onto the stack br br br Mark stack br This stack saves bookmarks to locations in the argument stack usable by each function so the functions doesn t necessarily get the whole argument stack to itself br br br Save stack br This stack is used for saving and restoring values of dynamically scoped local variables br br br Scope stack br This stack stores information about the actual scope and it is used only for debugging purposes br br br Other implementations br There is no standardization for the Perl language and Perl virtual machine The internal API is considered non stable and changes from version to version The Perl virtual machine is tied closely to the compiler br The most known and most stable implementation is the B C Perl module which translates opcodes tree to a representation in the C programming language and adds its own tree walker br Another implementation is an Acme Perl VM Perl module which is an implementation coded in Perl language only but it is still tied with original Perl virtual machine via B modules br br br See also br Comparison of application virtual machines br br br br br br External links br The Perl internals running stage br Introduction to the Perl API br The B op tree 