title: Moose (Perl)
id: 19946240
Moose is an extension of the object system of the Perl programming language Its stated purpose is to bring modern object oriented language features to Perl and to make object oriented Perl programming more consistent and less tedious br br br Features br Moose is built on top of Class MOP a metaobject protocol a k a MOP Using the MOP Moose provides complete introspection for all Moose using classes br br br Classes br Moose allows a programmer to create classes br br A class has zero or more attributes br A class has zero or more methods br A class has zero or more superclasses a k a parent classes A class inherits from its superclass es Moose supports multiple inheritance br A class has zero or more method modifiers These modifiers can apply to its own methods methods that are inherited from its ancestors or methods that are provided by roles br A class does zero or more roles also known as traits in other programming languages br A class has a constructor and a destructor br A class has a metaclass br br br Attributes br An attribute is a property of the class that defines it br br An attribute always has a name and it may have a number of other defining characteristics br An attribute s characteristics may include a read write flag a type accessor method names delegations a default value and lazy initialization br br br Roles br Roles in Moose are based on traits They perform a similar task as mixins but are composed horizontally rather than inherited They are also somewhat like interfaces but unlike some implementations of interfaces they can provide a default implementation Roles can be applied to individual instances as well as Classes br br A role has zero or more attributes br A role has zero or more methods br A role has zero or more method modifiers br A role has zero or more required methods br br br Extensions br There are a number of Moose extension modules on CPAN As of September there are modules in distributions in the MooseX namespace Most of them can be optionally installed with the Task Moose module br br br Examples br This is an example of a class Point and its subclass Point D br br There is a new set to method in the Point D class so the method of the same name defined in the Point class is not invoked in the case of Point D instances The clear method on the other hand is not replaced but extended in the subclass so both methods are run in the correct order br This is the same using the MooseX Declare extension br br br See also br Raku programming language Object oriented programming the inspiration for Moose br Joose framework a JavaScript framework inspired by Moose br Catalyst software a web application framework using Moose br br br br br br External links br Moose Homepage br Moose Documentation