title: Debugging
id: 24998792
In engineering debugging is the process of finding the root cause of and workarounds and possible fixes for bugs br For software debugging tactics can involve interactive debugging control flow analysis log file analysis monitoring at the application or system level memory dumps and profiling Many programming languages and software development tools also offer programs to aid in debugging known as debuggers br br br Etymology br br The term bug in the sense of defect dates back at least to when Thomas Edison wrote little faults and difficulties in his inventions as Bugs br A popular story from the s is from Admiral Grace Hopper While she was working on a Mark II computer at Harvard University her associates discovered a moth stuck in a relay that impeded operation and wrote in a log book First actual case of a bug being found Although probably a joke conflating the two meanings of bug biological and defect the story indicates that the term was used in the computer field at that time br Similarly the term debugging was used in aeronautics before entering the world of computers A letter from J Robert Oppenheimer director of the WWII atomic bomb Manhattan Project at Los Alamos used the term in a letter to Dr Ernest Lawrence at UC Berkeley dated October regarding the recruitment of additional technical staff br The Oxford English Dictionary entry for debug uses the term debugging in reference to airplane engine testing in a article in the Journal of the Royal Aeronautical Society br An article in Airforce June p refers to debugging aircraft cameras br The seminal article by Gill in is the earliest in depth discussion of programming errors but it does not use the term bug or debugging br In the ACM s digital library the term debugging is first used in three papers from ACM National Meetings Two of the three use the term in quotation marks br By debugging was a common enough term to be mentioned in passing without explanation on page of the CTSS manual br br br Scope br As software and electronic systems have become generally more complex the various common debugging techniques have expanded with more methods to detect anomalies assess impact and schedule software patches or full updates to a system The words anomaly and discrepancy can be used as being more neutral terms to avoid the words error and defect or bug where there might be an implication that all so called errors defects or bugs must be fixed at all costs Instead an impact assessment can be made to determine if changes to remove an anomaly or discrepancy would be cost effective for the system or perhaps a scheduled new release might render the change s unnecessary Not all issues are safety critical or mission critical in a system Also it is important to avoid the situation where a change might be more upsetting to users long term than living with the known problem s where the cure would be worse than the disease Basing decisions of the acceptability of some anomalies can avoid a culture of a zero defects mandate where people might be tempted to deny the existence of problems so that the result would appear as zero defects Considering the collateral issues such as the cost versus benefit impact assessment then broader debugging techniques will expand to determine the frequency of anomalies how often the same bugs occur to help assess their impact to the overall system br br br Tools br br Debugging ranges in complexity from fixing simple errors to performing lengthy and tiresome tasks of data collection analysis and scheduling updates The debugging skill of the programmer can be a major factor in the ability to debug a problem but the difficulty of software debugging varies greatly with the complexity of the system and also depends to some extent on the programming language s used and the available tools such as debuggers Debuggers are software tools which enable the programmer to monitor the execution of a program stop it restart it set breakpoints and change values in memory The term debugger can also refer to the person who is doing the debugging br Generally high level programming languages such as Java make debugging easier because they have features such as exception handling and type checking that make real sources of erratic behaviour easier to spot In programming languages such as C or assembly bugs may cause silent problems such as memory corruption and it is often difficult to see where the initial problem happened In those cases memory debugger tools may be needed br In certain situations general purpose software tools that are language specific in nature can be very useful These take the form of static code analysis tools These tools look for a very specific set of known problems some common and some rare within the source code concentrating more on the semantics e g data flow rather than the syntax as compilers and interpreters do br Both commercial and free tools exist for various languages some claim to be able to detect hundreds of different problems These tools can be extremely useful when checking very large source trees where it is impractical to do code walk throughs A typical example of a problem detected would be a variable dereference that occurs before the variable is assigned a value As another example some such tools perform strong type checking when the language does not require it Thus they are better at locating likely errors in code that is syntactically correct But these tools have a reputation of false positives where correct code is flagged as dubious The old Unix lint program is an early example br For debugging electronic hardware e g computer hardware as well as low level software e g BIOSes device drivers and firmware instruments such as oscilloscopes logic analyzers or in circuit emulators ICEs are often used alone or in combination An ICE may perform many of the typical software debugger s tasks on low level software and firmware br br br Debugging process br The debugging process normally begins with identifying the steps to reproduce the problem This can be a non trivial task particularly with parallel processes and some Heisenbugs for example The specific user environment and usage history can also make it difficult to reproduce the problem br After the bug is reproduced the input of the program may need to be simplified to make it easier to debug For example a bug in a compiler can make it crash when parsing a large source file However after simplification of the test case only few lines from the original source file can be sufficient to reproduce the same crash Simplification may be done manually using a divide and conquer approach in which the programmer attempts to remove some parts of original test case then checks if the problem still occurs When debugging in a GUI the programmer can try skipping some user interaction from the original problem description to check if the remaining actions are sufficient for causing the bug to occur br After the test case is sufficiently simplified a programmer can use a debugger tool to examine program states values of variables plus the call stack and track down the origin of the problem s Alternatively tracing can be used In simple cases tracing is just a few print statements which output the values of variables at particular points during the execution of the program br br br Techniques br Interactive debugging uses debugger tools which allow an program s execution to be processed one step at a time and to be paused to inspect or alter its state Subroutines or function calls may typically be executed at full speed and paused again upon return to their caller or themselves single stepped or any mixture of these options Setpoints may be installed which permit full speed execution of code that is not suspected to be faulty and then stop at a point that is Putting a setpoint immediately after the end of a program loop is a convenient way to evaluate repeating code Watchpoints are commonly available where execution can proceed until a particular variable changes and catchpoints which cause the debugger to stop for certain kinds of program events such as exceptions or the loading of a shared library br Print debugging or tracing is the act of watching live or recorded trace statements or print statements that indicate the flow of execution of a process and the data progression Tracing can be done with specialized tools like with GDB s trace or by insertion of trace statements into the source code The latter is sometimes called printf debugging due to the use of the printf function in C This kind of debugging was turned on by the command TRON in the original versions of the novice oriented BASIC programming language TRON stood for Trace On TRON caused the line numbers of each BASIC command line to print as the program ran br Activity tracing is like tracing above but rather than following program execution one instruction or function at a time follows program activity based on the overall amount of time spent by the processor CPU executing particular segments of code This is typically presented as a fraction of the program s execution time spent processing instructions within defined memory addresses machine code programs or certain program modules high level language or compiled programs If the program being debugged is shown to be spending an inordinate fraction of its execution time within traced areas this could indicate misallocation of processor time caused by faulty program logic or at least inefficient allocation of processor time that could benefit from optimization efforts br Remote debugging is the process of debugging a program running on a system different from the debugger To start remote debugging a debugger connects to a remote system over a communications link such as a local area network The debugger can then control the execution of the program on the remote system and retrieve information about its state br Post mortem debugging is debugging of the program after it has already crashed Related techniques often include various tracing techniques like examining log files outputting a call stack on the crash and analysis of memory dump or core dump of the crashed process The dump of the process could be obtained automatically by the system for example when the process has terminated due to an unhandled exception or by a programmer inserted instruction or manually by the interactive user br Wolf fence algorithm Edward Gauss described this simple but very useful and now famous algorithm in a article for Communications of the ACM as follows There s one wolf in Alaska how do you find it First build a fence down the middle of the state wait for the wolf to howl determine which side of the fence it is on Repeat process on that side only until you get to the point where you can see the wolf This is implemented e g in the Git version control system as the command git bisect which uses the above algorithm to determine which commit introduced a particular bug br Record and replay debugging is the technique of creating a program execution recording e g using Mozilla s free rr debugging tool enabling reversible debugging execution which can be replayed and interactively debugged Useful for remote debugging and debugging intermittent non deterministic and other hard to reproduce defects br Time travel debugging is the process of stepping back in time through source code e g using Undo LiveRecorder to understand what is happening during execution of a computer program to allow users to interact with the program to change the history if desired and to watch how the program responds br Delta Debugging a technique of automating test case simplification p br Saff Squeeze a technique of isolating failure within the test using progressive inlining of parts of the failing test br Causality tracking There are techniques to track the cause effect chains in the computation Those techniques can be tailored for specific bugs such as null pointer dereferences br br br Automatic bug fixing br br br Debugging for embedded systems br In contrast to the general purpose computer software design environment a primary characteristic of embedded environments is the sheer number of different platforms available to the developers CPU architectures vendors operating systems and their variants Embedded systems are by definition not general purpose designs they are typically developed for a single task or small range of tasks and the platform is chosen specifically to optimize that application Not only does this fact make life tough for embedded system developers it also makes debugging and testing of these systems harder as well since different debugging tools are needed for different platforms br Despite the challenge of heterogeneity mentioned above some debuggers have been developed commercially as well as research prototypes Examples of commercial solutions come from Green Hills Software Lauterbach GmbH and Microchip s MPLAB ICD for in circuit debugger Two examples of research prototype tools are Aveksha and Flocklab They all leverage a functionality available on low cost embedded processors an On Chip Debug Module OCDM whose signals are exposed through a standard JTAG interface They are benchmarked based on how much change to the application is needed and the rate of events that they can keep up with br In addition to the typical task of identifying bugs in the system embedded system debugging also seeks to collect information about the operating states of the system that may then be used to analyze the system to find ways to boost its performance or to optimize other important characteristics e g energy consumption reliability real time response etc br br br Anti debugging br Anti debugging is the implementation of one or more techniques within computer code that hinders attempts at reverse engineering or debugging a target process It is actively used by recognized publishers in copy protection schemas but is also used by malware to complicate its detection and elimination Techniques used in anti debugging include br br API based check for the existence of a debugger using system information br Exception based check to see if exceptions are interfered with br Process and thread blocks check whether process and thread blocks have been manipulated br Modified code check for code modifications made by a debugger handling software breakpoints br Hardware and register based check for hardware breakpoints and CPU registers br Timing and latency check the time taken for the execution of instructions br Detecting and penalizing debugger br An early example of anti debugging existed in early versions of Microsoft Word which if a debugger was detected produced a message that said The tree of evil bears bitter fruit Now trashing program disk after which it caused the floppy disk drive to emit alarming noises with the intent of scaring the user away from attempting it again br br br See also br br br br br br Further reading br Agans David J Debugging The Nine Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems AMACOM ISBN br Blunden Bill Software Exorcism A Handbook for Debugging and Optimizing Legacy Code APress ISBN br Ford Ann R Teorey Toby J Practical Debugging in C Prentice Hall ISBN br Gr tker Thorsten Holtmann Ulrich Keding Holger Wloka Markus The Developer s Guide to Debugging Second Edition Createspace ISBN br Metzger Robert C Debugging by Thinking A Multidisciplinary Approach Digital Press ISBN br Myers Glenford J The Art of Software Testing John Wiley Sons Inc ISBN br Robbins John Debugging Applications Microsoft Press ISBN br Telles Matthew A Hsieh Yuan The Science of Debugging The Coriolis Group ISBN br Vostokov Dmitry Memory Dump Analysis Anthology Volume OpenTask ISBN br Zeller Andreas Why Programs Fail Second Edition A Guide to Systematic Debugging Morgan Kaufmann ISBN br Peggy Aldrich Kidwell Stalking the Elusive Computer Bug IEEE Annals of the History of Computing br br br External links br br Crash dump analysis patterns in depth articles on analyzing and finding bugs in crash dumps br Learn the essentials of debugging how to improve your debugging skills a good article at IBM developerWorks archived from the original on February br Plug in Based Debugging For Embedded Systems br Embedded Systems test and debug about digital input generation results of a survey about embedded system test and debug Byte Paradigm archived from the original on January 