title: Perl
id: 23939
Perl is a high level general purpose interpreted dynamic programming language Though Perl is not officially an acronym there are various backronyms in use including Practical Extraction and Reporting Language br Perl was developed by Larry Wall in as a general purpose Unix scripting language to make report processing easier Since then it has undergone many changes and revisions Perl originally was not capitalized and the name was changed to being capitalized by the time Perl was released The latest release is Perl first released in From to October a sixth version of Perl was in development the sixth version s name was changed to Raku Both languages continue to be developed independently by different development teams which liberally borrow ideas from each other br Perl borrows features from other programming languages including C sh AWK and sed It provides text processing facilities without the arbitrary data length limits of many contemporary Unix command line tools Perl is a highly expressive programming language source code for a given algorithm can be short and highly compressible br Perl gained widespread popularity in the mid s as a CGI scripting language in part due to its powerful regular expression and string parsing abilities In addition to CGI Perl is used for system administration network programming finance bioinformatics and other applications such as for GUIs It has been nicknamed the Swiss Army chainsaw of scripting languages because of its flexibility and power In it was also referred to as the duct tape that holds the Internet together in reference to both its ubiquitous use as a glue language and its perceived inelegance br br br Name and logos br br Perl was originally named Pearl Wall wanted to give the language a short name with positive connotations It is also a Christian reference to the Parable of the Pearl from the Gospel of Matthew However Wall discovered the existing PEARL language before Perl s official release and changed the spelling of the name and dropped the a from the name br The name is occasionally expanded as a backronym Practical Extraction and Report Language and Wall s own Pathologically Eclectic Rubbish Lister which is in the manual page for perl br Programming Perl published by O Reilly Media features a picture of a dromedary camel on the cover and is commonly called the Camel Book This image has become an unofficial symbol of Perl O Reilly owns the image as a trademark but licenses it for non commercial use requiring only an acknowledgement and a link to www perl com Licensing for commercial use is decided on a case by case basis O Reilly also provides Programming Republic of Perl logos for non commercial sites and Powered by Perl buttons for any site that uses Perl br The Perl Foundation owns an alternative symbol an onion which it licenses to its subsidiaries Perl Mongers PerlMonks Perl org and others The symbol is a visual pun on pearl onion br Sebastian Riedel the creator of Mojolicious created a logo depicting a raptor dinosaur which is available under a CC SA License Version The analogue of the raptor comes from a series of talks given by Matt S Trout beginning in br br br History br br br Early versions br Larry Wall began work on Perl in while employed as a programmer at Unisys he released version on December Wall based early Perl on some methods existing languages used for text manipulation br Perl released in June featured a better regular expression engine Perl released in October added support for binary data streams br br br s br br Originally the only documentation for Perl was a single lengthy man page In Programming Perl known to many Perl programmers as the Camel Book because of its cover was published and became the de facto reference for the language At the same time the Perl version number was bumped to not to mark a major change in the language but to identify the version that was well documented by the book Perl was released in March br Perl went through a series of maintenance releases culminating in Perl in whereupon Wall abandoned Perl to begin work on Perl Initial design of Perl continued into The perl porters mailing list was established in May to coordinate work on porting Perl to different platforms It remains the primary forum for development maintenance and porting of Perl br Perl was released on October It was a nearly complete rewrite of the interpreter and it added many new features to the language including objects references lexical my variables and modules Importantly modules provided a mechanism for extending the language without modifying the interpreter This allowed the core interpreter to stabilize even as it enabled ordinary Perl programmers to add new language features Perl has been in active development since then br Perl was released on March Perl was released on February with the new prototypes feature This allowed module authors to make subroutines that behaved like Perl builtins Perl was released June as a security release br One of the most important events in Perl history took place outside of the language proper and was a consequence of its module support On October the Comprehensive Perl Archive Network CPAN was established as a repository for the Perl language and Perl modules as of December it carries over modules in distributions written by more than authors and is mirrored worldwide at more than locations br Perl was released on May and included among other things the UNIVERSAL package giving Perl a base object from which all classes were automatically derived and the ability to require versions of modules Another significant development was the inclusion of the CGI pm module which contributed to Perl s popularity as a CGI scripting language br Perl added support for Microsoft Windows Plan QNX and AmigaOS br Perl was released on July This release included several enhancements to the regex engine new hooks into the backend through the B modules the qr regex quote operator a large selection of other new core modules and added support for several more operating systems including BeOS br br br br br Perl was released on March Major changes included bit support Unicode string representation support for files over GiB and the our keyword When developing Perl the decision was made to switch the versioning scheme to one more similar to other open source projects after the next version became with plans for development versions to have odd numbers and stable versions to have even numbers br In Wall put forth a call for suggestions for a new version of Perl from the community The process resulted in RFC request for comments documents that were to be used in guiding development of Perl In work began on the Apocalypses for Perl a series of documents meant to summarize the change requests and present the design of the next generation of Perl They were presented as a digest of the RFCs rather than a formal document At this point Perl existed only as a description of a language br Perl was first released on July and further X versions have been released approximately yearly since then Perl improved Unicode support added a new I O implementation added a new thread implementation improved numeric accuracy and added several new modules As of this version still remained the most popular version of Perl and was used by Red Hat Suse Solaris HP UX and AIX br In work began on the Synopses documents that originally summarized the Apocalypses but which became the specification for the Perl language In February Audrey Tang began work on Pugs a Perl interpreter written in Haskell This was the first concerted effort toward making Perl a reality This effort stalled in br PONIE is an acronym for Perl On New Internal Engine The PONIE Project existed from until and was to be a bridge between Perl and Perl It was an effort to rewrite the Perl interpreter to run on Parrot the Perl virtual machine The goal was to ensure the future of the millions of lines of Perl code at thousands of companies around the world The PONIE project ended in and is no longer being actively developed Some of the improvements made to the Perl interpreter as part of PONIE were folded into that project br On December the th anniversary of Perl Perl was released Perl included notable new features which brought it closer to Perl These included a switch statement called given when regular expressions updates and the smart match operator br Around this same time development began in earnest on another implementation of Perl known as Rakudo Perl developed in tandem with the Parrot virtual machine As of November Rakudo Perl has had regular monthly releases and now is the most complete implementation of Perl br A major change in the development process of Perl occurred with Perl the development community has switched to a monthly release cycle of development releases with a yearly schedule of stable releases By that plan bugfix point releases will follow the stable releases every three months br On April Perl was released Notable core enhancements include new package NAME VERSION syntax the yada yada operator intended to mark placeholder code that is not yet implemented implicit strictures full Y compliance regex conversion overloading DTrace support and Unicode br On May Perl was released with JSON support built in br On May Perl was released Notable new features include the ability to specify a given version of Perl that one wishes to emulate allowing users to upgrade their version of Perl but still run old scripts that would normally be incompatible Perl also updates the core to support Unicode br On May Perl was released Notable new features include the new dtrace hooks lexical subs more CORE subs overhaul of the hash for security reasons support for Unicode br On May Perl was released Notable new features include subroutine signatures hash slices new slice syntax postfix dereferencing experimental Unicode and a rand function using a consistent random number generator br Some observers credit the release of Perl with the start of the Modern Perl movement In particular this phrase describes a style of development that embraces the use of the CPAN takes advantage of recent developments in the language and is rigorous about creating high quality code While the book Modern Perl may be the most visible standard bearer of this idea other groups such as the Enlightened Perl Organization have taken up the cause br In late and several projects for alternative implementations for Perl started Perl in Perl by the Rakudo Perl team moe by Stevan Little and friends p by the Perl team under Reini Urban gperl by goccy and rperl a Kickstarter project led by Will Braswell and affiliated with the Perl project br br br Perl and Raku br br At the Perl Conference Jon Orwant made a case for a major new language initiative This led to a decision to begin work on a redesign of the language to be called Perl Proposals for new language features were solicited from the Perl community at large which submitted more than RFCs br Wall spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl He presented his design for Perl in a series of documents called apocalypses numbered to correspond to chapters in Programming Perl As of January the developing specification of Perl was encapsulated in design documents called Synopses numbered to correspond to Apocalypses br Thesis work by Bradley M Kuhn overseen by Wall considered the possible use of the Java virtual machine as a runtime for Perl Kuhn s thesis showed this approach to be problematic In it was decided that Perl would run on a cross language virtual machine called Parrot br In Audrey Tang created the Pugs project an implementation of Perl in Haskell This acted as and continues to act as a test platform for the Perl language separate from the development of the actual implementation allowing the language designers to explore The Pugs project spawned an active Perl Haskell cross language community centered around the Libera Chat raku IRC channel Many functional programming influences were absorbed by the Perl design team br In Perl development was centered primarily on two compilers br br Rakudo an implementation running on the Parrot virtual machine and the Java virtual machine br Niecza which targets the Common Language Runtime br In MoarVM Metamodel On A Runtime a C language based virtual machine designed primarily for Rakudo was announced br In October Perl was renamed to Raku br As of only the Rakudo implementation and MoarVM are under active development and other virtual machines such as the Java Virtual Machine and JavaScript are supported br br br Perl br In June Perl was announced as the successor to Perl Perl was to initially be based on Perl with a release expected in first half of and release candidates sooner br This plan was revised in May without any release timeframe or version of Perl for use as a baseline specified When Perl would be released Perl would have gone into long term maintenance Supported Perl versions however would continue to get important security and bug fixes br Perl was announced on June at The Perl Conference in the Cloud as the successor to Perl Based on Perl Perl was planned to be backward compatible with modern Perl code Perl code without boilerplate pragma header needs adding use compat perl to stay compatible but modern code can drop some of the boilerplate br The plan to go to Perl brought up more discussion however and the Perl Steering Committee canceled it to avoid issues with backward compatibility for scripts that were not written to the pragmas and modules that would become the default in Perl Perl will only come out when the developers add enough features to warrant a major release upgrade br br br Design br br br Philosophy br According to Wall Perl has two slogans The first is There s more than one way to do it commonly known as TMTOWTDI pronounced Tim Toady As proponents of this motto argue this philosophy makes it easy to write concise statements br The second slogan is Easy things should be easy and hard things should be possible br The design of Perl can be understood as a response to three broad trends in the computer industry falling hardware costs rising labor costs and improvements in compiler technology Many earlier computer languages such as Fortran and C aimed to make efficient use of expensive computer hardware In contrast Perl was designed so that computer programmers could write programs more quickly and easily br Perl has many features that ease the task of the programmer at the expense of greater CPU and memory requirements These include automatic memory management dynamic typing strings lists and hashes regular expressions introspection and an eval function Perl follows the theory of no built in limits an idea similar to the Zero One Infinity rule br Wall was trained as a linguist and the design of Perl is very much informed by linguistic principles Examples include Huffman coding common constructions should be short good end weighting the important information should come first and a large collection of language primitives Perl favors language constructs that are concise and natural for humans to write even where they complicate the Perl interpreter br Perl s syntax reflects the idea that things that are different should look different For example scalars arrays and hashes have different leading sigils Array indices and hash keys use different kinds of braces Strings and regular expressions have different standard delimiters br There is a broad practical bent to both the Perl language and the community and culture that surround it The preface to Programming Perl begins Perl is a language for getting your job done One consequence of this is that Perl is not a tidy language It includes many features tolerates exceptions to its rules and employs heuristics to resolve syntactical ambiguities Because of the forgiving nature of the compiler bugs can sometimes be hard to find Perl s function documentation remarks on the variant behavior of built in functions in list and scalar contexts by saying In general they do what you want unless you want consistency br br br Features br The overall structure of Perl derives broadly from C Perl is procedural in nature with variables expressions assignment statements brace delimited blocks control structures and subroutines br Perl also takes features from shell programming All variables are marked with leading sigils which allow variables to be interpolated directly into strings However unlike the shell Perl uses sigils on all accesses to variables and unlike most other programming languages that use sigils the sigil doesn t denote the type of the variable but the type of the expression So for example while an array is denoted by the sigil for example arrayname an individual member of the array is denoted by the scalar sigil for example arrayname Perl also has many built in functions that provide tools often used in shell programming although many of these tools are implemented by programs external to the shell such as sorting and calling operating system facilities br Perl takes hashes associative arrays from AWK and regular expressions from sed These simplify many parsing text handling and data management tasks Shared with Lisp is the implicit return of the last value in a block and all statements are also expressions which can be used in larger expressions themselves br Perl added features that support complex data structures first class functions that is closures as values and an object oriented programming model These include references packages class based method dispatch and lexically scoped variables along with compiler directives for example the strict pragma A major additional feature introduced with Perl was the ability to package code as reusable modules Wall later stated that The whole intent of Perl s module system was to encourage the growth of Perl culture rather than the Perl core br All versions of Perl do automatic data typing and automatic memory management The interpreter knows the type and storage requirements of every data object in the program it allocates and frees storage for them as necessary using reference counting so it cannot deallocate circular data structures without manual intervention Legal type conversions for example conversions from number to string are done automatically at run time illegal type conversions are fatal errors br br br Syntax br Perl has been referred to as line noise and a write only language by its critics Randal L Schwartz in the first edition of the book Learning Perl in the first chapter states Yes sometimes Perl looks like line noise to the uninitiated but to the seasoned Perl programmer it looks like checksummed line noise with a mission in life He also stated that the accusation that Perl is a write only language could be avoided by coding with proper care The Perl overview document perlintro states that the names of built in magic scalar variables look like punctuation or line noise However the English module provides both long and short English alternatives perlstyle document states that line noise in regular expressions could be mitigated using the x modifier to add whitespace br According to the Perl FAQ Perl was designed to mitigate the usual suspects that elicit the line noise claim from Perl critics including the removal of the majority of the punctuation variables and the sanitization of the regex syntax The Perl FAQ also states that what is sometimes referred to as Perl s line noise is the actual syntax of the language just as gerunds and prepositions are a part of the English language In a December blog posting despite claiming that Rakudo Perl has failed and will continue to fail unless it gets some adult supervision chromatic stated that the design of Perl has a well defined grammar an improved type system a unified object system with an intelligent metamodel metaoperators and a clearer system of context that provides for such niceties as pervasive laziness He also stated that Perl has a coherence and a consistency that Perl lacks br In Perl one could write the Hello World program as br br Here is a more complex Perl program that counts down seconds from a given starting value br br The Perl interpreter can also be used for one off scripts on the command line The following example as invoked from an sh compatible shell such as Bash translates the string Bob in all files ending with txt in the current directory to Robert br br br Implementation br No written specification or standard for the Perl language exists for Perl versions through Perl and there are no plans to create one for the current version of Perl There has been only one implementation of the interpreter and the language has evolved along with it That interpreter together with its functional tests stands as a de facto specification of the language Perl however started with a specification and several projects aim to implement some or all of the specification br Perl is implemented as a core interpreter written in C together with a large collection of modules written in Perl and C As of the interpreter is lines of C code and compiles to a MB executable on typical machine architectures Alternatively the interpreter can be compiled to a link library and embedded in other programs There are nearly modules in the distribution comprising lines of Perl and an additional lines of C code much of the C code in the modules consists of character encoding tables br The interpreter has an object oriented architecture All of the elements of the Perl language scalars arrays hashes coderefs file handles are represented in the interpreter by C structs Operations on these structs are defined by a large collection of macros typedefs and functions these constitute the Perl C API The Perl API can be bewildering to the uninitiated but its entry points follow a consistent naming scheme which provides guidance to those who use it br The life of a Perl interpreter divides broadly into a compile phase and a run phase In Perl the phases are the major stages in the interpreter s life cycle Each interpreter goes through each phase only once and the phases follow in a fixed sequence br Most of what happens in Perl s compile phase is compilation and most of what happens in Perl s run phase is execution but there are significant exceptions Perl makes important use of its capability to execute Perl code during the compile phase Perl will also delay compilation into the run phase The terms that indicate the kind of processing that is actually occurring at any moment are compile time and run time Perl is in compile time at most points during the compile phase but compile time may also be entered during the run phase The compile time for code in a string argument passed to the eval built in occurs during the run phase Perl is often in run time during the compile phase and spends most of the run phase in run time Code in BEGIN blocks executes at run time but in the compile phase br At compile time the interpreter parses Perl code into a syntax tree At run time it executes the program by walking the tree Text is parsed only once and the syntax tree is subject to optimization before it is executed so that execution is relatively efficient Compile time optimizations on the syntax tree include constant folding and context propagation but peephole optimization is also performed br Perl has a Turing complete grammar because parsing can be affected by run time code executed during the compile phase Therefore Perl cannot be parsed by a straight Lex Yacc lexer parser combination Instead the interpreter implements its own lexer which coordinates with a modified GNU bison parser to resolve ambiguities in the language br It is often said that Only perl can parse Perl meaning that only the Perl interpreter perl can parse the Perl language Perl but even this is not in general true Because the Perl interpreter can simulate a Turing machine during its compile phase it would need to decide the halting problem in order to complete parsing in every case It is a longstanding result that the halting problem is undecidable and therefore not even Perl can always parse Perl Perl makes the unusual choice of giving the user access to its full programming power in its own compile phase The cost in terms of theoretical purity is high but practical inconvenience seems to be rare br Other programs that undertake to parse Perl such as source code analyzers and auto indenters have to contend not only with ambiguous syntactic constructs but also with the undecidability of Perl parsing in the general case Adam Kennedy s PPI project focused on parsing Perl code as a document retaining its integrity as a document instead of parsing Perl as executable code that not even Perl itself can always do It was Kennedy who first conjectured that parsing Perl suffers from the halting problem which was later proved br Perl is distributed with over functional tests for core Perl language and over functional tests for core modules These run as part of the normal build process and extensively exercise the interpreter and its core modules Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce software bugs additionally Perl users who see that the interpreter passes its functional tests on their system can have a high degree of confidence that it is working properly br br br Ports br Perl is dual licensed under both the Artistic License and the GNU General Public License Distributions are available for most operating systems It is particularly prevalent on Unix and Unix like systems but it has been ported to most modern and many obsolete platforms With only six reported exceptions Perl can be compiled from source code on all POSIX compliant or otherwise Unix compatible platforms br Because of unusual changes required for the classic Mac OS environment a special port called MacPerl was shipped independently br The Comprehensive Perl Archive Network carries a complete list of supported platforms with links to the distributions available on each CPAN is also the source for publicly available Perl modules that are not part of the core Perl distribution br ActivePerl is a closed source distribution from ActiveState that has regular releases that track the core Perl releases The distribution previously included the Perl package manager PPM a popular tool for installing removing upgrading and managing the use of common Perl modules however this tool was discontinued as of ActivePerl Included also is PerlScript a Windows Script Host WSH engine implementing the Perl language Visual Perl is an ActiveState tool that adds Perl to the Visual Studio NET development suite A VBScript to Perl converter a Perl compiler for Windows and converters of awk and sed to Perl have also been produced by this company and included on the ActiveState CD for Windows which includes all of their distributions plus the Komodo IDE and all but the first on the Unix Linux Posix variant thereof in and subsequently br br br Performance br The Computer Language Benchmarks Game compares the performance of implementations of typical programming problems in several programming languages The submitted Perl implementations typically perform toward the high end of the memory usage spectrum and give varied speed results Perl s performance in the benchmarks game is typical for interpreted languages br Large Perl programs start more slowly than similar programs in compiled languages because Perl has to compile the source every time it runs In a talk at the YAPC Europe conference and subsequent article A Timely Start Jean Louis Leroy found that his Perl programs took much longer to run than expected because the perl interpreter spent significant time finding modules within his over large include path Unlike Java Python and Ruby Perl has only experimental support for pre compiling Therefore Perl programs pay this overhead penalty on every execution The run phase of typical programs is long enough that amortized startup time is not substantial but benchmarks that measure very short execution times are likely to be skewed due to this overhead br A number of tools have been introduced to improve this situation The first such tool was Apache s mod perl which sought to address one of the most common reasons that small Perl programs were invoked rapidly CGI Web development ActivePerl via Microsoft ISAPI provides similar performance improvements br Once Perl code is compiled there is additional overhead during the execution phase that typically isn t present for programs written in compiled languages such as C or C Examples of such overhead include bytecode interpretation reference counting memory management and dynamic type checking br The most critical routines can be written in other languages such as C which can be connected to Perl via simple Inline modules or the more complex but flexible XS mechanism br br br Applications br Perl has many and varied applications compounded by the availability of many standard and third party modules br Perl has chiefly been used to write CGI scripts large projects written in Perl include cPanel Slash Bugzilla RT TWiki and Movable Type high traffic websites that use Perl extensively include Priceline com Craigslist IMDb LiveJournal DuckDuckGo Slashdot and Ticketmaster br It is also an optional component of the popular LAMP technology stack for Web development in lieu of PHP or Python Perl is used extensively as a system programming language in the Debian Linux distribution br Perl is often used as a glue language tying together systems and interfaces that were not specifically designed to interoperate and for data munging that is converting or processing large amounts of data for tasks such as creating reports These strengths are linked intimately The combination makes Perl a popular all purpose language for system administrators particularly because short programs often called one liner programs can be entered and run on a single command line br Perl code can be made portable across Windows and Unix such code is often used by suppliers of software both commercial off the shelf COTS and bespoke to simplify packaging and maintenance of software build and deployment scripts br Perl Tk and wxPerl are commonly used to add graphical user interfaces to Perl scripts br Perl s text handling capabilities can be used for generating SQL queries arrays hashes and automatic memory management make it easy to collect and process the returned data For example in Tim Bunce s Perl DBI application programming interface API the arguments to the API can be the text of SQL queries thus it is possible to program in multiple languages at the same time e g for generating a Web page using HTML JavaScript and SQL in a here document The use of Perl variable interpolation to programmatically customize each of the SQL queries and the specification of Perl arrays or hashes as the structures to programmatically hold the resulting data sets from each SQL query allows a high level mechanism for handling large amounts of data for post processing by a Perl subprogram br In early versions of Perl database interfaces were created by relinking the interpreter with a client side database library This was sufficiently difficult that it was done for only a few of the most important and most widely used databases and it restricted the resulting perl executable to using just one database interface at a time br In Perl database interfaces are implemented by Perl DBI modules The DBI Database Interface module presents a single database independent interface to Perl applications while the DBD Database Driver modules handle the details of accessing some different databases there are DBD drivers for most ANSI SQL databases br DBI provides caching for database handles and queries which can greatly improve performance in long lived execution environments such as mod perl helping high volume systems avert load spikes as in the Slashdot effect br In modern Perl applications especially those written using web frameworks such as Catalyst the DBI module is often used indirectly via object relational mappers such as DBIx Class Class DBI or Rose DB Object that generate SQL queries and handle data transparently to the application author br br br Community br Perl s culture and community has developed alongside the language itself Usenet was the first public venue in which Perl was introduced but over the course of its evolution Perl s community was shaped by the growth of broadening Internet based services including the introduction of the World Wide Web The community that surrounds Perl was in fact the topic of Wall s first State of the Onion talk br State of the Onion is the name for Wall s yearly keynote style summaries on the progress of Perl and its community They are characterized by his hallmark humor employing references to Perl s culture the wider hacker culture Wall s linguistic background sometimes his family life and occasionally even his Christian background Each talk is first given at various Perl conferences and is eventually also published online br In email Usenet and message board postings Just another Perl hacker JAPH programs are a common trend originated by Randal L Schwartz one of the earliest professional Perl trainers In the parlance of Perl culture Perl programmers are known as Perl hackers and from this derives the practice of writing short programs to print out the phrase Just another Perl hacker In the spirit of the original concept these programs are moderately obfuscated and short enough to fit into the signature of an email or Usenet message The canonical JAPH as developed by Schwartz includes the comma at the end although this is often omitted br br Perl golf is the pastime of reducing the number of characters key strokes used in a Perl program to the bare minimum much in the same way that golf players seek to take as few shots as possible in a round The phrase s first use emphasized the difference between pedestrian code meant to teach a newcomer and terse hacks likely to amuse experienced Perl programmers an example of the latter being JAPHs that were already used in signatures in Usenet postings and elsewhere Similar stunts had been an unnamed pastime in the language APL in previous decades The use of Perl to write a program that performed RSA encryption prompted a widespread and practical interest in this pastime In subsequent years the term code golf has been applied to the pastime in other languages A Perl Golf Apocalypse was held at Perl Conference in Monterey California in July br As with C obfuscated code competitions were a well known pastime in the late s The Obfuscated Perl Contest was a competition held by The Perl Journal from to that made an arch virtue of Perl s syntactic flexibility Awards were given for categories such as most powerful programs that made efficient use of space and best four line signature for programs that fit into four lines of characters in the style of a Usenet signature block br Perl poetry is the practice of writing poems that can be compiled as legal Perl code for example the piece known as Black Perl Perl poetry is made possible by the large number of English words that are used in the Perl language New poems are regularly submitted to the community at PerlMonks br br br See also br br Outline of Perl br Perl Data Language br Perl Object Environment br Plain Old Documentation br br br br br br Further reading br Learning Perl th Edition O Reilly Beginner level introduction to Perl br Beginning Perl st Edition Wrox A beginner s tutorial for those new to programming or just new to Perl br Modern Perl Archived December at the Wayback Machine nd Edition Onyx Neon Describes Modern Perl programming techniques br Programming Perl th Edition O Reilly The definitive Perl reference br Effective Perl Programming nd Edition Addison Wesley Intermediate to advanced level guide to writing idiomatic Perl br Perl Cookbook ISBN Practical Perl programming examples br Dominus Mark Jason Higher Order Perl Morgan Kaufmann ISBN Functional programming techniques in Perl br br br External links br br Official website