title: Asm.js
id: 38962533
asm js is a subset of JavaScript designed to allow computer software written in languages such as C to be run as web applications while maintaining performance characteristics considerably better than standard JavaScript which is the typical language used for such applications br asm js consists of a strict subset of JavaScript to which code written in statically typed languages with manual memory management such as C is translated by a source to source compiler such as Emscripten based on LLVM Performance is improved by limiting language features to those amenable to ahead of time optimization and other performance improvements br Mozilla Firefox was the first web browser to implement asm js specific optimizations starting with version br asm js is superseded by WebAssembly br br br Design br asm js enables significant performance improvements for web applications but does not aim to improve the performance of hand written JavaScript code nor does it enable anything other than enhanced performance br It is intended to have performance characteristics closer to that of native code than standard JavaScript by limiting language features to those amenable to ahead of time optimization and other performance improvements By using a subset of JavaScript asm js is largely supported by all major web browsers unlike alternative approaches such as Google Native Client br br br Code generation br br asm js is not typically written directly instead as an intermediate language it is generated through the use of a compiler that takes source code in a language such as C and outputs asm js br For example given the following C code br br Emscripten would output the following JS code br br Note the addition of and the lack of type specifiers In JavaScript bitwise operators convert their operands to bit signed integers and give integer results This means that a bitwise OR with zero converts a value to an integer a very simple conceptual presentation of bitwise operators may not deal with type conversion at all but every programming language defines operators for its own convenience as Javascript does here By doing this for each parameter this ensures that if the function is called from outside code the value will be converted to the correct type This is also used on the return value in this case to ensure that the result of adding to i will be an integer as otherwise it could become too large and to mark the return type of the function These conversions are required by asm js so that an optimising compiler can produce highly efficient native code ahead of time In such an optimising compiler no conversions are performed when asm js code calls other asm js code as the required type specifiers mean it is guaranteed that values will already have the correct type Furthermore rather than performing a floating point addition and converting to an integer it can simply do a native integer operation Together this leads to significant performance benefits br Here is another example to calculate the length of a string br br This would result in the following asm js code br br In the generated code the variable MEM is actually a byte by byte view of a typed buffer which serves as the heap of the asm js code br br br Performance br Since asm js runs in a browser the performance heavily depends on both the browser and hardware Preliminary benchmarks of C programs compiled to asm js are usually within a factor of slower than native compilation with Clang br Much of this performance gain over normal JavaScript is due to type consistency and virtually no garbage collection memory is manually managed in a large typed array This simpler model with no dynamic behavior no memory allocation or deallocation just a narrow set of well defined integer and floating point operations enables much greater performance and potential for optimization br Mozilla s benchmark from December showed significant improvements Firefox with float optimizations can run all those benchmarks at around slower than native or better Mozilla points out that the performance of natively compiled code is not a single measure but rather a range with different native compilers in this case Clang and GCC delivering code of differing performance In fact on some benchmarks like Box D FASTA and copy asm js is as close or closer to Clang than Clang is to GCC In one case asm js even beats Clang by a slight amount on Box D br br br Implementations br The Emscripten project provides tools that can be used to compile C and C codebases or any other languages that can be converted to LLVM IR into asm js br All browsers with support for ECMAScript should be able to run asm js code as it is a subset of that specification However since features were added in that edition to enable full asm js support Math fround older browsers lacking those features may encounter problems br Some browser implementations are especially optimised for asm js br br Mozilla Firefox was the first web browser to implement asm js specific optimizations starting with Firefox OdinMonkey Mozilla s asm js ahead of time compiler used in Firefox is a component of IonMonkey the JIT compiler of SpiderMonkey br Microsoft was implementing support for asm js in Chakra the JavaScript engine used by Microsoft Edge Legacy performing validation to produce highly optimised JIT code br The optimizations of Google Chrome s V JavaScript engine in Chrome made asm js benchmarks more than twice as fast as prior versions of Chrome although Chrome s V does not use ahead of time compilation br br br Adoption br br Almost all of the current applications based on asm js are C C applications compiled to asm js using Emscripten or Mandreel With that in mind the kind of applications that are going to target asm js in the near future are those that will benefit from the portability of running in a browser but which have a level of complexity for which a direct port to JavaScript would be infeasible br So far a number of programming languages application frameworks programs libraries games game engines and other software have already been ported Some of them are given below br br br Programming languages br C C Clang and LLVM br Rust targets Emscripten br Perl port of micro perl br Python port of CPython br Ruby port of Ruby br br br Application frameworks br pepper js Ports of miscellaneous PNaCl apps earth voronoi bullet etc br Qt ports of various Qt demos plus KDE apps such as Kate br br br Programs and libraries br OpenGL SDL and SDL br Vim Vi IMproved br FreeType TrueType font rendering in JavaScript using FreeType br SQLite br GNU Privacy Guard br ctags br gnuplot br Graphviz br zlib br br br Game engines br Unreal Engine was ported in days br Unreal Engine br Unity br ScummVM which supports numerous classic adventure games br Godot br br br Games br Doom the open source Freedoom game assets running on PrBoom which is based on the open source Doom code br SuperTux br Dune II via OpenDune br BananaBread based on Cube br Every game in the Humble Mozilla Bundle Super Hexagon AaAaAA for the Awesome Osmos Zen Bound Dustforce DX Voxatron FTL Advanced Edition and Democracy br br br Emulators br EM DOSBox an Emscripten port of DOSBox br Start io a web emulation platform targeting multiple gaming architectures br JSMESS a port of the MESS emulator for many game consoles and computer systems br br br Mathematics br HTML Fractal Playground draws iterating function generated fractals such as the Mandelbrot set br br br Deprecation br asm js is mostly rendered obsolete with the introduction of WebAssembly wasm which has a bytecode format that is faster to parse Efforts to extend JavaScript with more low level features like SIMD js has also been suspended since br asm js remains useful primarily as a fallback for wasm through a program written by the WebAssembly organization that converts wasm to asm js There is no dedicated converter from asm js to wasm but TypeScript to wasm compilers can be partially used The reference WebAssembly emitter binaryen used to contain an asm wasm module but it was removed after Emscripten stopped using it br br br See also br br CrossBridge br RPython br AssemblyScript br br br br br br External links br Official website