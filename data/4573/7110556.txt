title: Raku rules
id: 7110556
Raku rules are the regular expression string matching and general purpose parsing facility of the Raku programming language and are a core part of the language Since Perl s pattern matching constructs have exceeded the capabilities of formal regular expressions for some time Raku documentation refers to them exclusively as regexes distancing the term from the formal definition br Raku provides a superset of Perl features with respect to regexes folding them into a larger framework called rules which provide the capabilities of a parsing expression grammar as well as acting as a closure with respect to their lexical scope Rules are introduced with the rule keyword which has a usage quite similar to subroutine definitions Anonymous rules can be introduced with the regex or rx keyword or simply be used inline as regexes were in Perl via the m matching or s substitution operators br br br History br In Apocalypse a document outlining the preliminary design decisions for Raku pattern matching Larry Wall enumerated problems with the current regex culture Among these were that Perl s regexes were too compact and cute had too much reliance on too few metacharacters little support for named captures little support for grammars and poor integration with real language br Between late and mid a compiler for Raku style rules was developed for the Parrot virtual machine called Parrot Grammar Engine PGE which was later renamed to the more generic Parser Grammar Engine PGE is a combination of runtime and compiler for Raku style grammars that allows any parrot based compiler to use these tools for parsing and also to provide rules to their runtimes br Among other Raku features support for named captures was added to Perl in br In May the reference implementation of Raku Rakudo shipped its Rakudo Star monthly snapshot with a working JSON parser built entirely in Raku rules br br br Changes from Perl br There are only six unchanged features from Perl s regexes br br Literals word characters letters numbers and underscore matched literally br Capturing br Alternatives br Backslash escape br Repetition quantifiers and but not m n br Minimal matching suffix br A few of the most powerful additions include br br The ability to reference rules using rulename to build up entire grammars br A handful of commit operators that allow the programmer to control backtracking during matching br The following changes greatly improve the readability of regexes br br Simplified non capturing groups which are the same as Perl s br Simplified code assertions br Allows for whitespace to be included without being matched allowing for multiline regexes Use or to express whitespace br Extended regex formatting Perl s x is now the default br br br Implicit changes br Some of the features of Perl regular expressions are more powerful in Raku because of their ability to encapsulate the expanded features of Raku rules For example in Perl there were positive and negative lookahead operators and In Raku these same features exist but are called before and before br However because before can encapsulate arbitrary rules it can be used to express lookahead as a syntactic predicate for a grammar For example the following parsing expression grammar describes the classic non context free language br br br br br br a br br n br br br br b br br n br br br br c br br n br br br br n br br br br br br displaystyle a n b n c n n geq br br br br In Raku rules that would be br br Of course given the ability to mix rules and regular code that can be simplified even further br br However this makes use of assertions which is a subtly different concept in Raku rules but more substantially different in parsing theory making this a semantic rather than syntactic predicate The most important difference in practice is performance There is no way for the rule engine to know what conditions the assertion may match so no optimization of this process can be made br br br Integration with Perl br In many languages regular expressions are entered as strings which are then passed to library routines that parse and compile them into an internal state In Perl regular expressions shared some of the lexical analysis with Perl s scanner This simplified many aspects of regular expression usage though it added a great deal of complexity to the scanner In Raku rules are part of the grammar of the language No separate parser exists for rules as it did in Perl This means that code embedded in rules is parsed at the same time as the rule itself and its surrounding code For example it is possible to nest rules and code without re invoking the parser br br The above is a single block of Raku code that contains an outer rule definition an inner block of assertion code and inside of that a regex that contains one more level of assertion br br br Implementation br br br Keywords br There are several keywords used in conjunction with Raku rules br br regex br A named or anonymous regex that ignores whitespace within the regex by default br token br A named or anonymous regex that implies the ratchet modifier br rule br A named or anonymous regex that implies the ratchet and sigspace modifiers br rx br An anonymous regex that takes arbitrary delimiters such as where regex only takes braces br m br An operator form of anonymous regex that performs matches with arbitrary delimiters br mm br Shorthand for m with the sigspace modifier br s br An operator form of anonymous regex that performs substitution with arbitrary delimiters br ss br Shorthand for s with the sigspace modifier br br Simply placing a regex between slashes is shorthand for rx br Here is an example of typical use br br br Modifiers br Modifiers may be placed after any of the regex keywords and before the delimiter If a regex is named the modifier comes after the name Modifiers control the way regexes are parsed and how they behave They are always introduced with a leading character br Some of the more important modifiers include br br i or ignorecase Perform matching without respect to case br m or ignoremark Perform matching without respect to combining characters br g or global Perform the match more than once on a given target string br s or sigspace Replace whitespace in the regex with a whitespace matching rule rather than simply ignoring it br Perl Treat the regex as a Perl regular expression br ratchet Never perform backtracking in the rule br For example br br br Grammars br A grammar may be defined using the grammar operator A grammar is essentially just a namespace for rules br br This is the grammar used to define Perl s sprintf string formatting notation br Outside of this namespace you could use these rules like so br br A rule used in this way is actually identical to the invocation of a subroutine with the extra semantics and side effects of pattern matching e g rule invocations can be backtracked br br br Examples br Here are some example rules in Raku br br That last is identical to br br br br br br External links br Raku Grammars The reference manual page for grammars br Grammar tutorial A tutorial for grammars in Raku br Synopsis The standards document covering Perl regexes and rules br Perl Regex Introduction Gentle introduction to Perl regexes 