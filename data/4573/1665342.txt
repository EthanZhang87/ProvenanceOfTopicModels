title: NPAPI
id: 1665342
Netscape Plugin Application Programming Interface NPAPI is a deprecated application programming interface API for web browser plugins initially developed for Netscape Navigator in and subsequently adopted by other browsers br In the NPAPI architecture a plugin declares content types e g audio mp that it can handle When the browser encounters a content type it cannot handle natively it loads the appropriate plugin sets aside space within the browser context for the plugin to render and then streams data to it The plugin is responsible for rendering the data The plugin runs in place within the page as opposed to older browsers that had to launch an external application to handle unknown content types NPAPI requires each plugin to implement and expose approximately functions for initializing creating deleting and positioning plugin content NPAPI also supports scripting printing full screen plugins windowless plugins and content streaming br NPAPI was frequently used for plugins which required intensive low level performance such as video players including Adobe Flash Player and Microsoft Silverlight as well as platforms for web applications such as the Java Runtime Environment br NPAPI support among major browsers started to wane since and it was gradually deprecated over the following years All major web browsers have removed support for rd party NPAPI plugins for security and maintenance reasons while superior technology exists br br br Scripting support br Scripting is a feature allowing JavaScript code in a web page to interact with the plugin Various versions of Netscape and then Mozilla supported this feature using different technologies including LiveConnect XPConnect and NPRuntime br br br LiveConnect br LiveConnect is a feature of Web browsers that allows Java and JavaScript software to intercommunicate within a Web page From the Java side it allows an applet to invoke the embedded scripts of a page or to access the built in JavaScript environment much as scripts can Conversely from the JavaScript side it allows a script to invoke applet methods or to access Java runtime libraries much as applets can br LiveConnect was used in Netscape to implement scriptability of NPAPI plugins br The Open Java Interface dependent implementation of LiveConnect was removed from the Mozilla source code tree in late June as part of the Mozilla cleanup effort It is no longer needed with the release of a redesigned Java Runtime Environment from Sun Microsystems However the old implementation was restored for Gecko as Apple had yet to port the newer JRE over to Mac OS X br The Java JavaScript functionality supported by the redesigned Java Runtime Environment is still called LiveConnect despite the Open Java Interface specific approach having been abandoned With Netscape NPAPI was extended to allow plugins to be scripted This extension is called LiveConnect A plugin could implement a Java class and expose an instance of it The class could be called from JavaScript and from Java applets running within the page br The disadvantage of LiveConnect is that it is heavily tied to the version of Java embedded within the Netscape browser This prevented the browser from using other Java runtimes and added bloat to the browser download size since it required Java to script plugins Additionally LiveConnect is tricky to program The developer has to define a Java class for the plugin run it through a specialized Java header compiler and implement native methods Handling strings exceptions and other Java objects from C is non obvious In addition LiveConnect uses an earlier and now obsolete application programming interface API for invoking native C calls from Java called JRI The JRI technology has long since been supplanted by JNI br br br XPConnect br XPConnect Cross Platform Connect is a technology which enables simple interoperation between XPCOM and JavaScript br br br Object connection br XPConnect allows JavaScript objects to transparently access and manipulate XPCOM objects It also enables JavaScript objects to present XPCOM compliant interfaces to be called by XPCOM objects A main goal is that objects communicating from either side of an XPCOM style interface should not generally need to know or care about the implementation language of the object on the other side of the interface br XPConnect s primary reason for existence is to replace handwritten code used in places where native code needs to interact with JavaScript code An example is the DOM module br br br Security br Full privileges are only granted by default to chrome scripts i e scripts that are part of the application or of an extension For remote HTML XHTML XUL documents most XPCOM objects are not accessible by the scripts as they have limited privileges due to security reasons Even if they are accessible e g the XMLHttpRequest object the usual security restrictions can also be found e g cannot open URLs of other domains br Mozilla was already using XPCOM to define the interfaces to many objects implemented in C Each interface was defined by an IDL file and run through an IDL compiler that produced header files and a language neutral type library that was a binary representation of the interface This binary described the interface the methods the parameters the data structures and enumerations br XPConnect uses the type library information to marshal calls between different thread contexts and between JavaScript and natively compiled C XPConnect is used extensively throughout Mozilla Starting with Netscape and Mozilla NPAPI was extended so that a plugin could return a scriptable interface to itself and XPConnect would marshal calls to it from JavaScript and the C implementation br XPConnect has no Java dependency However the technology is based on XPCOM Thus the plugin developer must be familiar with reference counting interfaces and IDL to implement scripting The dependency on XPCOM led to certain dynamic linking issues e g the fragile base class problem which had to be solved before the plugin would work correctly with different browsers XPCOM has since been changed to supply a statically linked version to address such issues This approach also requires an xpt file to be installed next to the dynamic link library DLL otherwise the plugin appears to work but the scripting does not causing confusion br br br NPRuntime br At the end of all major browser companies using NPAPI agreed on NPRuntime as an extension to the original NPAPI to supply scripting via an API that is similar in style to the old C style NPAPI and is independent of other browser technologies like Java or XPCOM It is only supported by Firefox ESR Extended Support Release and Safari br br br Support br Because of the age of the API security issues and adoption of alternative technologies such as HTML many software vendors began to phase out NPAPI support in br br br Internet Explorer br Internet Explorer versions through SP supported NPAPI allowing plugins that functioned in Netscape Navigator to function in Internet Explorer Support came via a small ActiveX control named plugin ocx that acted as a shim between ActiveX and the NPAPI plugin Microsoft dropped support in version SP onwards for security reasons br br br Google Chrome br Google Chrome permanently dropped all NPAPI support from all platforms in September In September Google announced that it would phase out NPAPI support in its Google Chrome browser during stating that its s era architecture has become a leading cause of hangs crashes security incidents and code complexity In May NPAPI support was removed from the Linux version of Chrome and later In April Chrome for Windows and OS X versions and later disabled NPAPI support by default However until September version users could re enable NPAPI br br br Opera br Opera dropped support with version in May br br br Firefox br Mozilla Firefox release in March removed all support for NPAPI except for Flash Meanwhile the ESR channel retained general support for this feature with version ESR being the last NPAPI resort Firefox disabled the Flash NPAPI by default In Firefox released in January NPAPI support was completely removed In the ESR channel support for Flash NPAPI ended with version released in October br br br Safari br Safari has dropped support for all NPAPI plugins except for Flash with version released in September Flash support has been removed from Safari released in September br br br SeaMonkey br SeaMonkey stopped supporting NPAPI plugins from version with the exception of Flash NPAPI support was completely removed in SeaMonkey released in March br br br Support br The following list of web browsers support all NPAPI plugins br br Secure Browser Chinese or Extreme Explorer Chinese br Basilisk br K Meleon Goanna engine br Pale Moon Pale Moon future roadmap br Uzbl br br br Similar technologies br br br ActiveX br Internet Explorer and browsers based on Internet Explorer use ActiveX controls ActiveX documents and ActiveX scripting to offer in page extensibility on par with NPAPI Although commonly associated with Internet Explorer ActiveX is integration technology that allows any computer program to integrate parts of other computer programs that support such integration Internet Explorer however is discontinued and its replacement Microsoft Edge does not support ActiveX br br br PPAPI br br On August a page on Google Code introduced a new project called Pepper with the associated Pepper Plugin API PPAPI PPAPI is a derivative of NPAPI aimed to make plugins more portable and more secure This extension is designed specifically to ease the implementation of out of process plugin execution br PPAPI was initially only supported by Google Chrome and Chromium Later other Chromium based browsers such as Opera and Vivaldi added PPAPI plugin support br In February Adobe Systems announced that future Linux versions of Adobe Flash Player would be provided only via PPAPI The previous release Flash Player with NPAPI support would receive security updates for five years In August Adobe announced that contrary to their previous statement it would again support the NPAPI Flash Player on Linux and keep releasing new versions of it br In August Google announced that support for PPAPI would be removed from Google Chrome and Chromium in June br br br See also br Netscape Server Application Programming Interface NSAPI br br br br br br External links br Plugin development documentation Archived at the Wayback Machine on Mozilla Developer Center including the NPAPI API br An ActiveX control that hosts plugins a replacement for plugin ocx that was removed from Internet Explorer br Book on Programming Netscape Plug Ins by Zan Oliphant br Nixysa A glue code generation framework for NPAPI plugins Apache license br NPAPI Tutorial Building a Firefox Plugin Part two Part three Part four br Opera extensions documentation