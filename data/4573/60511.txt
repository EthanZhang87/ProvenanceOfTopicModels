title: Parrot virtual machine
id: 60511
Parrot is a discontinued register based process virtual machine designed to run dynamic languages efficiently It is possible to compile Parrot assembly language and Parrot intermediate representation PIR an intermediate language to Parrot bytecode and execute it Parrot is free and open source software br Parrot was started by the Perl community and developed with help from the open source and free software communities As a result it was focused on license compatibility with Perl Artistic License platform compatibility across a broad array of systems processor architecture compatibility across most modern processors speed of execution small size around k depending on platform and the flexibility to handle the varying demands made by Raku and other modern dynamic languages br Version with a stable application programming interface API for development was released on March The last version is release Andean Parakeet Parrot was officially discontinued in August after being supplanted by MoarVM in its main use Raku and never becoming a mainstream VM for any of its other supported languages br br br History br The name Parrot came from an April Fool s joke which announced a hypothetical language named Parrot that would unify Python and Perl The name was later adopted by the Parrot project initially a part of the Raku development effort which aimed to support Raku Python and other programming languages br The Parrot Foundation was dissolved in The Foundation was created in to hold the copyright and trademarks of the Parrot project to help drive development of language implementations and the core codebase to provide a base for growing the Parrot community and to reach out to other language communities br Historical design decisions are documented in the form of Parrot Design Documents or PDDs in the Parrot repository br Until late Dan Sugalski was the lead designer and chief architect of Parrot Chip Salzenberg a longtime Perl Linux kernel and C hacker took over until mid when he became the lead developer Allison Randal the lead developer of Punie and chief architect of Parrot s compiler tools was the chief architect until mid October when she stepped down and chose Christoph Otto as the new chief architect br br br Languages br The goal of the Parrot virtual machine was to host client languages and allow inter operation between them Several hurdles exist in accomplishing this goal in particular the difficulty of mapping high level concepts data and data structures between languages br br br Static and dynamic languages br The differing properties of statically and dynamically typed languages motivated the design of Parrot Current popular virtual machines such as the Java virtual machine and the Common Language Runtime for the NET platform have been designed for statically typed languages while the languages targeted by Parrot are dynamically typed br Virtual machines such as the Java virtual machine and the current Perl virtual machine are also stack based Parrot developers chose a register based design reasoning that it more closely resembles a hardware design allowing the vast literature on compiler optimization to be used in generating bytecode for the Parrot virtual machine that could run at speeds closer to machine code Other register based virtual machines inspired parts of Parrot s design including LLVM the Lua VM and Inferno s Dis br br br Functional concepts br Parrot has rich support for several features of functional programming including closures and continuations both of which can be particularly difficult to implement correctly and portably especially in conjunction with exception handling and threading The biggest advantage is the dynamic extendability of objects with methods which allows for polymorphic containers PMCs and associated opcodes Implementing solutions to these problems at the virtual machine level obviates the need to solve them in the individual client languages br br br Compiler tools br br Parrot provides a suite of compiler writing tools which includes the Parser Grammar Engine PGE a hybrid parser generator that can express a recursive descent parser as well as an operator precedence parser allowing free transition between the two in a single grammar The PGE feeds into the Tree Grammar Engine TGE which further transforms the parse tree generated by PGE for optimization and ultimately for code generation br br br Implementations br The most complete language implementations targeting the Parrot VM were Raku known at the time as Rakudo Perl Lua and a new language called Winxed Projects to implement many other languages were started including PHP Python and Ruby along with esoteric and demonstration languages such as Befunge and the squaak tutorial language None of these projects were successful in becoming the primary implementation of their respective languages br br br Internals br There are three forms of program code for Parrot br br Bytecode is binary and is natively interpreted by Parrot Bytecode is usually stored in files with the filename extension pbc br Parrot assembly language PASM is the low level language that compiles down to bytecode PASM code is usually stored in files with the filename extension pasm br Parrot intermediate representation PIR is a slightly higher level language than PASM and also compiles down to bytecode It is the primary target of language implementations PIR transparently manages Parrot s inter routine calling conventions provides improved syntax register allocation and more PIR code is usually stored in files with the filename extension pir br br br Examples br br br Registers br Parrot is register based like most hardware CPUs and unlike most virtual machines which are stack based Parrot provides four types of registers br br I native integer type br N floating point numbers br S advanced string registers with Unicode support br P PMC or Polymorphic Container Parrot object type br Parrot provides an arbitrary number of registers this number is fixed at compile time per subroutine br br br Arithmetic operations br In PASM br br In PIR br br br See also br br MoarVM br GraalVM br Common Language Runtime CLR br Comparison of application virtual machines br mod parrot br Da Vinci Machine br br br br br br External links br Official website br Perl and Parrot links