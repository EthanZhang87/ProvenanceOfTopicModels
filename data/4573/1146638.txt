title: Raku (programming language)
id: 1146638
Raku is a member of the Perl family of programming languages Formerly known as Perl it was renamed in October Raku introduces elements of many modern and historical languages Compatibility with Perl was not a goal though a compatibility mode is part of the specification The design process for Raku began in br br br History br In Perl we decided it would be better to fix the language than fix the user br The Raku design process was first announced on July on the fourth day of that year s Perl Conference by Larry Wall in his State of the Onion talk At that time the primary goals were to remove historical warts from the language easy things should stay easy hard things should get easier and impossible things should get hard and a general cleanup of the internal design and APIs The process began with a series of requests for comments or RFCs This process was open to all contributors and left no aspect of the language closed to change br Once the RFC process was complete Wall reviewed and classified each of the requests received He then began the process of writing several Apocalypses using the original meaning of the term revealing While the original goal was to write one Apocalypse for each chapter of Programming Perl it became obvious that as each Apocalypse was written previous Apocalypses were being invalidated by later changes For this reason a set of Synopses was published each one relating the contents of an Apocalypse but with any subsequent changes reflected in updates Today the Raku specification is managed through the roast testing suite while the Synopses are kept as a historical reference br There is also a series of Exegeses written by Damian Conway that explain the content of each Apocalypse in terms of practical usage Each Exegesis consists of code examples along with a discussion of the usage and implications of the examples br There are three primary methods of communication used in the development of Raku today The first is the raku IRC channel on Libera Chat The second is a set of mailing lists The third is the Git source code repository hosted at GitHub br br br Initial goals and implications br The major goal Wall suggested in his initial speech was the removal of historical warts These included the confusion surrounding sigil usage for containers the ambiguity between the select functions and the syntactic impact of bareword filehandles There were many other problems that Perl programmers had discussed fixing for years and these were explicitly addressed by Wall in his speech br An implication of these goals was that Perl would not have backward compatibility with the existing Perl codebase This meant that some code which was correctly interpreted by a Perl compiler would not be accepted by a Perl compiler Since backward compatibility is a common goal when enhancing software the breaking changes in Perl had to be stated explicitly The distinction between Perl and Perl became so large that eventually Perl was renamed Raku br br br Mascot br br The language s mascot is Camelia the Raku bug br Her name is a nod to the camel mascot associated with Perl and her form in the pun loving tradition of the Perl community is a play on software bug Spiral designs embedded in her butterfly like wings resemble the characters P the favored nickname for Perl and off center eye placement is an intentional pun on Wall eyed br One of the goals behind the lively and colorful design of the logo was to discourage misogyny in the community and for it to be an opportunity for those of masculine persuasion to show their sensitive side br br br Implementations br As of only the Rakudo implementation is under active development No implementation will be designated as the official Raku implementation rather Raku is anything that passes the official test suite br Rakudo Perl targets a number of virtual machines such as MoarVM the Java Virtual Machine and JavaScript MoarVM is a virtual machine built especially for Rakudo and the NQP Compiler Toolchain There is a layer between Raku and the virtual machines called Not Quite Perl or NQP which implements Raku rules for parsing Raku as well as an abstract syntax tree and backend specific code generation Large portions of Rakudo are written in Raku itself or in its subset NQP Rakudo is not a completely self hosting implementation nor are there concrete plans at this point to make Rakudo a bootstrapping compiler br br br Historical implementations br Pugs was an initial implementation of Perl written in Haskell Pugs used to be the most advanced implementation of Perl but since mid it is mostly dormant with updates made only to track the current version of GHC As of November Pugs was not being actively maintained br In v MiniPerl mp and its reimplementation v KindaPerl kp were written as a means to bootstrap the Perl STD using Perl The STD is a full grammar for Perl and is written in Perl In theory anything capable of parsing the STD and generating executable code is a suitable bootstrapping system for Perl kp is currently compiled by mp and can work with multiple backends mp and kp are not full Perl implementations and are designed only to implement the minimum featureset required to bootstrap a full Perl compiler br Yapsi was a Perl compiler and runtime written in Perl itself As a result it required an existing Perl interpreter such as one of the Rakudo Star releases in order to run br Niecza another major Perl implementation effort focused on optimization and efficient implementation research It targets the Common Language Infrastructure br br br Module system br The Raku specification requests that modules be identified by name version and authority It is possible to load only a specific version of a module or even two modules of the same name that differ in version or authority As a convenience aliasing to a short name is provided br CPAN the Perl module distribution system does not yet handle Raku modules Instead a prototype module system is in use br br br Books br br br Books published before Perl version known as version c br Randal Allison Sugalski Dan T tsch Leopold Perl Essentials st ed O Reilly Media ISBN br Randal Allison Sugalski Dan T tsch Leopold Perl and Parrot Essentials nd ed O Reilly Media ISBN br Walters Scott December Perl Now The Core Ideas Illustrated with Perl Expert s Voice in Open Source ISBN br Also a book dedicated to one of the first Perl virtual machines Parrot was published in br br Randal Allison Whitworth Andrew June Parrot Developer s Guide Pir Onyx Neon Press ISBN br br br Books published after Perl version known as version c br Shitov Andrew Perl at a Glance ISBN br Rosenfeld Laurent Downey Allen B Think Perl ISBN br Merelo J J July Learning to program with Perl First Steps Getting into programming without leaving the command line Learning to Program with Perl ISBN br Lenz Moritz July Perl Fundamentals Apress ISBN br Shitov Andrew September Perl Deep Dive ISBN br Shitov Andrew Using Perl ISBN br Szabo Gabor December Web Application Development in Perl Author br Lenz Moritz December Parsing with Perl Regexes and Grammars A Recursive Descent into Parsing Apress ISBN br Foy Brian D Learning Perl O Reilly Media ISBN br br br Books published with the new Raku name br Shitov Andrew October Using Raku Programming Challenges Solved in the Raku Programming Language nd ed ISBN br Shitov Andrew October Raku One Liners Getting the Most of Raku s Expressive Syntax for Your Daily Routines ISBN br Lenz Moritz September Raku Fundamentals A Primer with Examples Projects and Case Studies Apress ISBN br br br br br br External links br br Official website