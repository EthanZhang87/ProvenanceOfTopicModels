title: WebKit
id: 689524
WebKit is a browser engine primarily used in Apple s Safari web browser as well as all web browsers on iOS and iPadOS WebKit is also used by the PlayStation consoles starting with the PS the Tizen mobile operating systems the Amazon Kindle e book reader Nintendo consoles starting with the DS Internet Browser and the discontinued BlackBerry Browser br WebKit started as a fork of the KHTML and KJS libraries from KDE and has since been further developed by KDE contributors Apple Google Nokia Bitstream BlackBerry Sony Igalia and others WebKit supports macOS Windows Linux and various other Unix like operating systems On April Google announced that it had forked WebCore a component of WebKit to be used in future versions of Google Chrome and the Opera web browser under the name Blink br Its JavaScript engine JavascriptCore also powers the Bun server side JS runtime as opposed to V used by Node js and Blink WebKit s C application programming interface API provides a set of classes to display Web content in windows and implements browser features such as following links when clicked by the user managing a back forward list and managing a history of pages recently visited br WebKit is open source and available under the BSD Clause license with the exception of the WebCore and JavaScriptCore components which are available under the GNU Lesser General Public License As of March WebKit is a trademark of Apple registered with the U S Patent and Trademark Office br br br Origins br The code that would become WebKit began in as the KDE HTML KHTML layout engine and KDE JavaScript KJS engine The WebKit project was started within Apple by Lisa Melton on June as a fork of KHTML and KJS Melton explained in an e mail to KDE developers that KHTML and KJS allowed easier development than other available technologies by virtue of being small fewer than lines of code cleanly designed and standards compliant KHTML and KJS was ported to macOS with the help of an adapter library and renamed WebCore and JavaScriptCore JavaScriptCore was announced in an e mail to a KDE mailing list in June alongside the first release of Apple s changes br According to Apple some changes which called for different development tactics involved macOS specific features that are absent in KDE s KHTML such as Objective C KWQ pronounced quack an implementation of the subset of Qt required to make KHTML work on macOS written in Objective C and macOS calls br br br Split development br The exchange of code between WebCore and KHTML became increasingly difficult as the code base diverged because both projects had different approaches in coding and code sharing At one point KHTML developers said they were unlikely to accept Apple s changes and claimed the relationship between the two groups was a bitter failure They claimed Apple submitted their changes in large patches containing multiple changes with inadequate documentation often in relation to future additions to the codebase Thus these patches were difficult for the KDE developers to integrate back into KHTML Also Apple had demanded that developers sign non disclosure agreements before looking at Apple s source code and even then they were unable to access Apple s bug database br During the publicized divorce period KDE developer Kurt Pfeifle pipitas posted an article claiming KHTML developers had managed to backport many but not all Safari improvements from WebCore to KHTML and they always appreciated the improvements coming from Apple and still do so The article also noted Apple had begun to contact KHTML developers about discussing how to improve the mutual relationship and ways of future cooperation In fact the KDE project was able to incorporate some of these changes to improve KHTML s rendering speed and add features including compliance with the Acid rendering test br Following the appearance of a story of the fork in the news Apple released the source code of the WebKit fork in a public revision control repository br The WebKit team had also reversed many Apple specific changes in the original WebKit code base and implemented platform specific abstraction layers to make committing the core rendering code to other platforms significantly easier br In July Ars Technica reported that the KDE team would move from KHTML to WebKit Instead after several years of integration KDE Development Platform version was released in August with support for both WebKit and KHTML and development of KHTML continued until before it was officially discontinued in br br br Open sourcing br On June Safari developer Dave Hyatt announced on his weblog that Apple was open sourcing WebKit formerly only WebCore and JavaScriptCore were open source and opening up access to WebKit s revision control tree and the issue tracker br In mid December support for Scalable Vector Graphics SVG was merged into the standard build br WebKit s JavaScriptCore and WebCore components are available under the GNU Lesser General Public License while the rest of WebKit is available under the BSD Clause license br br br Further development br br Beginning in early the development team began to implement Cascading Style Sheets CSS extensions including animation transitions and both D and D transforms such extensions were released as working drafts to the World Wide Web Consortium W C in for standardization br In November the project announced that it had added support for media features of the HTML draft specification allowing embedded video to be natively rendered and script controlled in WebKit br On June the WebKit project announced they rewrote JavaScriptCore as SquirrelFish a bytecode interpreter The project evolved into SquirrelFish Extreme abbreviated SFX announced on September which compiles JavaScript into native machine code eliminating the need for a bytecode interpreter and thus speeding up JavaScript execution Initially the only supported processor architecture for SFX was the x but at the end of January SFX was enabled for macOS on x as it passes all tests on that platform br br br WebKit br On April a project named WebKit was announced to redesign WebKit Its goal was to abstract the components that provide web rendering cleanly from their surrounding interface or application shell creating a situation where web content JavaScript HTML layout etc lives in a separate process from the application UI This abstraction was intended to make reuse a more straightforward process for WebKit than for WebKit WebKit had an incompatible API change from the original WebKit which motivated its name change br The WebKit targets were set to Linux macOS Windows GTK and MeeGo Harmattan Safari for macOS switched to the new API with version Safari for iOS switched to WebKit with iOS br The original WebKit API has been renamed WebKitLegacy API WebKit API has been renamed just plain WebKit API br br br Use br br WebKit is used as the rendering engine within Safari and was formerly used by Google s Chrome web browser on Windows macOS and Android before version KitKat Chrome used only WebCore and included its own JavaScript engine named V and a multiprocess system Chrome for iOS continues to use WebKit because Apple requires that web browsers on that platform must do so Other applications on macOS and iOS make use of WebKit such as Apple s e mail client Mail App Store and the version of Microsoft s Entourage personal information manager both of which make use of WebKit to render HTML content br br br Installed base br New web browsers have been built around WebKit such as the S browser on Symbian mobile phones BlackBerry Browser ver Midori Chrome browser the Android Web browser before version KitKat and the browser used in PlayStation system software from version KDE s Rekonq web browser and Plasma Workspaces also use it as the native web rendering engine WebKit has been adopted as the rendering engine in OmniWeb iCab and Web formerly named Epiphany and Sleipnir replacing their original rendering engines GNOME s Web supported both Gecko and WebKit for some time but the team decided that Gecko s release cycle and future development plans would make it too cumbersome to continue supporting it webOS uses WebKit as the basis of its application runtime WebKit is used to render HTML and run JavaScript in the Adobe Integrated Runtime application platform In Adobe Creative Suite CS WebKit is used to render some parts of the user interface As of the first half of an analyst estimated the cumulative number of mobile handsets shipped with a WebKit based browser at million By mid April WebKit browser market share was br br br Ports br The week after Hyatt announced WebKit s open sourcing Nokia announced that it had ported WebKit to the Symbian operating system and was developing a browser based on WebKit for mobile phones running S Named Web Browser for S it was used on Nokia Samsung LG and other Symbian S mobile phones Apple has also ported WebKit to iOS to run on the iPhone iPod Touch and iPad where it is used to render content in the device s web browser and e mail software The Android mobile phone platform used WebKit and later versions its Blink fork as the basis of its web browser and the Palm Pre announced January has an interface based on WebKit The Amazon Kindle includes an experimental WebKit based browser br In June Apple announced that WebKit had been ported to Microsoft Windows as part of Safari Although Safari for Windows was silently discontinued by the company WebKit s ports to Microsoft s operating system are still actively maintained The Windows port uses Apple s proprietary libraries to function and is used for iCloud and iTunes for Windows whereas the WinCairo port is a fully open source and redistributable port br br WebKit has also been ported to several toolkits that support multiple platforms such as the GTK toolkit for Linux under the name WebKitGTK which is used by Eolie GNOME Web Adobe Integrated Runtime Enlightenment Foundation Libraries EFL and the Clutter toolkit Qt Software included a WebKit port in the Qt release as a module called QtWebKit since superseded by Qt WebEngine which uses Blink instead The Iris Browser on Qt also used WebKit The Enlightenment Foundation Libraries EFL port EWebKit was developed by Samsung and ProFusion focusing the embedded and mobile systems for use as stand alone browser widgets gadgets rich text viewer and composer The Clutter port is developed by Collabora and sponsored by Robert Bosch GmbH br There was also a project synchronized with WebKit sponsored by Pleyo called Origyn Web Browser which provided a meta port to an abstract platform with the aim of making porting to embedded or lightweight systems quicker and easier This port is used for embedded devices such as set top boxes PMP and it has been ported into AmigaOS AROS and MorphOS MorphOS version is the first version of Origyn Web Browser OWB supporting HTML media tags br br br Web Platform for Embedded br Web Platform for Embedded WPE is a WebKit port designed for embedded applications it further improves the architecture by splitting the basic rendering functional blocks into a general purpose routines library libwpe platform backends and engine itself called WPE WebKit br The GTK port albeit self contained can be built to use these base libraries instead of its internal platform support implementation The WPE port is currently maintained by Igalia br br br Forking by Google br On April Google announced that it would produce a fork of WebKit s WebCore component to be named Blink Chrome s developers decided on the fork to allow greater freedom in implementing WebCore s features in the browser without causing conflicts upstream and to allow simplifying its codebase by removing code for WebCore components unused by Chrome In relation to Opera Software s announcement earlier in the year that it would switch to WebKit by means of the Chromium codebase it was confirmed that the Opera web browser would also switch to Blink Following the announcement WebKit developers began discussions on removing Chrome specific code from the engine to streamline its codebase WebKit no longer has any Chrome specific code e g buildsystem V JavaScript engine hooks platform code etc br br br Components br br br WebCore br WebCore is a layout rendering and Document Object Model DOM library for HTML and Scalable Vector Graphics SVG developed by the WebKit project Its full source code is licensed under the GNU Lesser General Public License LGPL The WebKit framework wraps WebCore and JavaScriptCore providing an Objective C application programming interface to the C based WebCore rendering engine and JavaScriptCore script engine allowing it to be easily referenced by applications based on the Cocoa API later versions also include a cross platform C platform abstraction and various ports provide more APIs br WebKit passes the Acid and Acid tests with pixel perfect rendering and no timing or smoothness issues on reference hardware br br br JavaScriptCore br JavaScriptCore is a framework that provides a JavaScript engine for WebKit implementations and provides this type of scripting in other contexts within macOS JavaScriptCore is originally derived from KDE s JavaScript engine KJS library which is part of the KDE project and the PCRE regular expression library Since forking from KJS and PCRE JavaScriptCore has been improved with many new features and greatly improved performance br On June the WebKit project announced they rewrote JavaScriptCore as SquirrelFish a bytecode interpreter The project evolved into SquirrelFish Extreme abbreviated SFX marketed as Nitro announced on September further speeding up JavaScript execution br An optimizing just in time JIT compiler named FTL was announced on May It uses LLVM to generate optimized machine code FTL stands for Fourth Tier LLVM and unofficially for faster than light alluding to its speed As of February the backend of FTL JIT is replaced by Bare Bones Backend or B for short br br br See also br br Comparison of browser engines br List of WebKit based browsers br br br br br br External links br Official website br Official website for WebKitGTK br SunSpider JavaScript Benchmark Archived December at the Wayback Machine