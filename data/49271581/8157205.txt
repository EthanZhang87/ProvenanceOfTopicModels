title: TypeScript
id: 8157205
TypeScript is a free and open source high level programming language developed by Microsoft that adds static typing with optional type annotations to JavaScript It is designed for the development of large applications and transpiles to JavaScript Because TypeScript is a superset of JavaScript all JavaScript programs are syntactically valid TypeScript but they can fail to type check for safety reasons br TypeScript may be used to develop JavaScript applications for both client side and server side execution as with Node js Deno or Bun Multiple options are available for transpilation The default TypeScript Compiler can be used or the Babel compiler can be invoked to convert TypeScript to JavaScript br TypeScript supports definition files that can contain type information of existing JavaScript libraries much like C header files can describe the structure of existing object files This enables other programs to use the values defined in the files as if they were statically typed TypeScript entities There are third party header files for popular libraries such as jQuery MongoDB and D js TypeScript headers for the Node js library modules are also available allowing development of Node js programs within TypeScript br The TypeScript compiler is itself written in TypeScript and compiled to JavaScript It is licensed under the Apache License Anders Hejlsberg lead architect of C and creator of Delphi and Turbo Pascal has worked on the development of TypeScript br br br History br TypeScript was released to the public in October with version after two years of internal development at Microsoft Soon after the initial public release Miguel de Icaza praised the language itself but criticized the lack of mature IDE support apart from Microsoft Visual Studio which was not available on Linux and OS X at that time As of April there is support in other IDEs and text editors including Emacs Vim WebStorm Atom and Microsoft s own Visual Studio Code TypeScript released in added support for generics br TypeScript was released at Microsoft s Build developer conference in Visual Studio Update provides built in support for TypeScript Further improvement were made in July when the development team announced a new TypeScript compiler asserted to have a five fold performance increase Simultaneously the source code which was initially hosted on CodePlex was moved to GitHub br On September TypeScript was released introducing several features including the ability for programmers to optionally enforce null safety to mitigate what s sometimes referred to as the billion dollar mistake br TypeScript was released on July bringing many language additions like tuples in rest parameters and spread expressions rest parameters with tuple types generic rest parameters and so on br TypeScript was released on August While did not introduce any breaking changes it added language features such as Custom JSX Factories and Variadic Tuple Types br TypeScript was released on March and included support for decorators br br br Design br TypeScript originated from the shortcomings of JavaScript for the development of large scale applications both at Microsoft and among their external customers Challenges with dealing with complex JavaScript code led to demand for custom tooling to ease developing of components in the language br TypeScript developers sought a solution that would not break compatibility with the standard and its cross platform support Knowing that the current ECMAScript standard proposal promised future support for class based programming TypeScript was based on that proposal That led to a JavaScript compiler with a set of syntactical language extensions a superset based on the proposal that transforms the extensions into regular JavaScript In this sense the class feature of TypeScript was a preview of what to expect from ECMAScript A unique aspect not in the proposal but added to TypeScript is optional static typing also known as gradual typing that enables static language analysis to facilitate tooling and IDE support br br br ECMAScript support br br TypeScript adds support for features such as classes modules and an arrow function syntax as defined in the ECMAScript standard br br br Features br TypeScript is a language extension that adds features to ECMAScript Additional features include br br Type annotations and compile time type checking br Type inference br Type erasure br Interfaces br Enumerated types br Generics br Namespaces br Tuples br Async await br Explicit Resource Management br The following features are backported from ECMAScript br br Classes br Modules br Abbreviated arrow syntax for anonymous functions br Optional parameters and default parameters br Syntactically TypeScript is very similar to JScript NET another Microsoft implementation of the ECMA language standard that added support for static typing and classical object oriented language features such as classes inheritance interfaces and namespaces br br br Compatibility with JavaScript br br TypeScript is a strict superset of ECMAScript which is itself a superset of ECMAScript commonly referred to as JavaScript As such a JavaScript program is also a valid TypeScript program and a TypeScript program can seamlessly consume JavaScript By default the compiler targets ECMAScript the current prevailing standard but is also able to generate constructs used in ECMAScript or br With TypeScript it is possible to use existing JavaScript code incorporate popular JavaScript libraries and call TypeScript generated code from other JavaScript Type declarations for these libraries are provided with the source code br br br Type annotations br TypeScript provides static typing through type annotations to enable type checking at compile time This is optional and can be ignored to use the regular dynamic typing of JavaScript br br Primitive types are annotated using the types number boolean and string These types are distinct from their class counterparts Number Boolean etc which cannot have operations performed from values directly For instance a Number and a number cannot be added There is additionally undefined and null types for their respective values br All other types are annotated using their class name rather than primitives such as Error Arrays can be written in two different ways which are both syntactically the same the generic based syntax Array T and a shorthand with T br Additional built in data types are tuples unions never and any br br An array with predefined data types at each index is a tuple represented as type type typeN br A variable that can hold more than one type of data is a union represented using the logical OR symbol string number br The never type is used when a given type should be impossible to create which is useful for filtering mapped types br A value of type any supports the same operations as a value in JavaScript and minimal static type checking is performed which makes it suitable for weakly or dynamically typed structures although this is generally discouraged practice br Type annotations can be exported to a separate declarations file to make type information available for TypeScript scripts using types already compiled into JavaScript Annotations can be declared for an existing JavaScript library as has been done for Node js and jQuery br The TypeScript compiler makes use of type inference to infer types when types are not given For example the add method in the code above would be inferred as returning a number even if no return type annotation had been provided This is based on the static types of left and right being numbers and the compiler s knowledge that the result of adding two numbers is always a number However explicitly declaring the return type allows the compiler to verify correctness br If no type can be inferred because of lack of declarations such as in a JavaScript module without types then it defaults to the dynamic any type Additional module types can be provided using a d ts declaration file using the declare module moduleName syntax br br br Declaration files br When a TypeScript script gets compiled there is an option to generate a declaration file with the extension d ts that functions as an interface to the components in the compiled JavaScript In the process the compiler strips away all function and method bodies and preserves only the signatures of the types that are exported The resulting declaration file can then be used to describe the exported virtual TypeScript types of a JavaScript library or module when a third party developer consumes it from TypeScript br The concept of declaration files is analogous to the concept of header files found in C C br br Type declaration files can be written by hand for existing JavaScript libraries as has been done for jQuery and Node js br Large collections of declaration files for popular JavaScript libraries are hosted on GitHub in DefinitelyTyped br br br Generics br br TypeScript supports generic programming using a syntax similar to Java The following is an example of the identity function br br br Classes br TypeScript uses the same annotation style for class methods and fields as for functions and variables respectively Compared with vanilla JavaScript classes a TypeScript class can also implement an interface through the implements keyword use generic parameters similarly to Java and specify public and private fields br br br Union types br br br Enumerated types br br br Modules and namespaces br TypeScript distinguishes between modules and namespaces Both features in TypeScript support encapsulation of classes interfaces functions and variables into containers Namespaces formerly internal modules utilize JavaScript immediately invoked function expressions to encapsulate code whereas modules formerly external modules leverage JavaScript library patterns to do so AMD or CommonJS br br br Development tools br br br Compiler br The TypeScript compiler named tsc is written in TypeScript As a result it can be compiled into regular JavaScript and can then be executed in any JavaScript engine e g a browser The compiler package comes bundled with a script host that can execute the compiler It is also available as a Node js package that uses Node js as a host br The compiler can target a particular edition of ECMAScript such as ES for legacy browser compatibility but by default compiles to the latest version br br br IDE and editor support br Microsoft provides a plug in for Visual Studio and WebMatrix full integrated support in Visual Studio Visual Studio and basic text editor support for Emacs and Vim br Visual Studio Code supports TypeScript in addition to several other languages and offers features like debugging and intelligent code completion br alm tools is an open source cloud IDE for TypeScript built using TypeScript ReactJS and TypeStyle br JetBrains supports TypeScript with code completion refactoring and debugging in its IDEs built on IntelliJ platform such as PhpStorm WebStorm and IntelliJ IDEA as well as their Visual Studio Add in and extension ReSharper br Atom has a TypeScript plugin with support for code completion navigation formatting and fast compilation br The online Cloud IDE and Codenvy support TypeScript br A plugin is available for the NetBeans IDE br A plugin is available for the Eclipse IDE version Kepler br TypEcs is available for the Eclipse IDE br The Cross Platform Cloud IDE Codeanywhere supports TypeScript br Webclipse An Eclipse plugin designed to develop TypeScript and Angular br Angular IDE A standalone IDE available via npm to develop TypeScript and Angular applications with integrated terminal support br Tide TypeScript Interactive Development Environment for Emacs br br br Integration with build automation tools br br Using plug ins TypeScript can be integrated with build automation tools including Grunt grunt ts Apache Maven TypeScript Maven Plugin Gulp gulp typescript and Gradle TypeScript Gradle Plugin br br br Linting tools br TSLint scans TypeScript code for conformance to a set of standards and guidelines ESLint a standard JavaScript linter also provided some support for TypeScript via community plugins However ESLint s inability to leverage TypeScript s language services precluded certain forms of semantic linting and program wide analysis In early the TSLint team announced the linter s deprecation in favor of typescript eslint a joint effort of the TSLint ESLint and TypeScript teams to consolidate linting under the ESLint umbrella for improved performance community unity and developer accessibility br br br CodeDOM Provider br CodeDOM provides types that represent common types of source code elements which will be transformed to data types classes and statements etc of a programming language through a CodeDOMProvider Programmers use CodeDOM and a CodeDOM provider to construct a code generator that generates codes for an application domain br TypeScript CodeDOM Provider generates TypeScript codes according to a CodeDOM br br br Release history br br br See also br br Dart br Kotlin br JS br PureScript br br br br br br Citations br br br Sources br br br External links br TypeScript project at GitHub br TypeScript Language Specification br CATS Cross Platform TypeScript Editor br The Concise TypeScript Book br TypeScript Origins The Documentary on YouTube