title: Eventual consistency
id: 1756057
Eventual consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that if no new updates are made to a given data item eventually all accesses to that item will return the last updated value Eventual consistency also called optimistic replication is widely deployed in distributed systems and has origins in early mobile computing projects A system that has achieved eventual consistency is often said to have converged or achieved replica convergence Eventual consistency is a weak guarantee most stronger models like linearizability are trivially eventually consistent br Eventually consistent services are often classified as providing BASE semantics basically available soft state eventual consistency in contrast to traditional ACID atomicity consistency isolation durability In chemistry a base is the opposite of an acid which helps in remembering the acronym According to the same resource these are the rough definitions of each term in BASE br br Basically available reading and writing operations are available as much as possible using all nodes of a database cluster but might not be consistent the write might not persist after conflicts are reconciled and the read might not get the latest write br Soft state without consistency guarantees after some amount of time we only have some probability of knowing the state since it might not yet have converged br Eventually consistent If we execute some writes and then the system functions long enough we can know the state of the data any further reads of that data item will return the same value br Eventual consistency is sometimes criticized as increasing the complexity of distributed software applications This is partly because eventual consistency is purely a liveness guarantee reads eventually return the same value and does not guarantee safety an eventually consistent system can return any value before it converges br br br Conflict resolution br In order to ensure replica convergence a system must reconcile differences between multiple copies of distributed data This consists of two parts br br exchanging versions or updates of data between servers often known as anti entropy and br choosing an appropriate final state when concurrent updates have occurred called reconciliation br The most appropriate approach to reconciliation depends on the application A widespread approach is last writer wins Another is to invoke a user specified conflict handler Timestamps and vector clocks are often used to detect concurrency between updates Some people use first writer wins in situations where last writer wins is unacceptable br Reconciliation of concurrent writes must occur sometime before the next read and can be scheduled at different instants br br Read repair The correction is done when a read finds an inconsistency This slows down the read operation br Write repair The correction takes place during a write operation slowing down the write operation br Asynchronous repair The correction is not part of a read or write operation br br br Strong eventual consistency br Whereas eventual consistency is only a liveness guarantee updates will be observed eventually strong eventual consistency SEC adds the safety guarantee that any two nodes that have received the same unordered set of updates will be in the same state If furthermore the system is monotonic the application will never suffer rollbacks A common approach to ensure SEC is conflict free replicated data types br br br See also br ACID br CAP theorem br br br br br br Further reading br Burckhardt Sebastian Principles of Eventual Consistency Foundations and Trends in Programming Languages doi ISSN 