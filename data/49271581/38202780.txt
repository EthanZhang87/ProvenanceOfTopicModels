title: Elixir (programming language)
id: 38202780
Elixir is a functional concurrent high level general purpose programming language that runs on the BEAM virtual machine which is also used to implement the Erlang programming language Elixir builds on top of Erlang and shares the same abstractions for building distributed fault tolerant applications Elixir also provides tooling and an extensible design The latter is supported by compile time metaprogramming with macros and polymorphism via protocols br The community organizes yearly events in the United States Europe and Japan as well as minor local events and conferences br br br History br Jos Valim created the Elixir programming language as a research and development project at Plataformatec His goals were to enable higher extensibility and productivity in the Erlang VM while maintaining compatibility with Erlang s ecosystem br Elixir is aimed at large scale sites and apps It uses features of Ruby Erlang and Clojure to develop a high concurrency and low latency language It was designed to handle large data volumes Elixir is also used in telecommunications e commerce and finance br In the Numerical Elixir effort was announced with the goal of bringing machine learning neural networks GPU compilation data processing and computational notebooks to the Elixir ecosystem br br br Versioning br Each of the minor versions supports a specific range of Erlang OTP versions The current stable release version is br br br Features br Compiles to bytecode for the BEAM virtual machine of Erlang Full interoperability with Erlang code without runtime impact br Scalability and fault tolerance thanks to Erlang s lightweight concurrency mechanisms br Built in tooling for managing dependencies code compilation running tests formatting code remote debugging and more br An interactive REPL inside running programs including Phoenix web servers with code reloading and access to internal state br Everything is an expression br Pattern matching to promote assertive code br Type hints for static analysis tools br Immutable data with an emphasis like other functional languages on recursion and higher order functions instead of side effect based looping br Shared nothing concurrent programming via message passing actor model br Lazy and async collections with streams br Railway oriented programming via the with construct br Hygienic metaprogramming by direct access to the abstract syntax tree AST Libraries often implement small domain specific languages such as for databases or testing br Code execution at compile time The Elixir compiler also runs on the BEAM so modules that are being compiled can immediately run code which has already been compiled br Polymorphism via a mechanism called protocols Dynamic dispatch as in Clojure however without multiple dispatch because Elixir protocols dispatch on a single type br Support for documentation via Python like docstrings in the Markdown formatting language br Unicode support and UTF strings br br br Examples br The following examples can be run in an iex shell or saved in a file and run from the command line by typing elixir filename br Classic Hello world example br br Pipe operator br br Pattern matching a k a destructuring br br Pattern matching with multiple clauses br br List comprehension br br Asynchronously reading files with streams br br Multiple function bodies with guards br br Relational databases with the Ecto library br br Sequentially spawning a thousand processes br br Asynchronously performing a task br br br See also br br Concurrent computing br Distributed computing br Parallel computing br br br br br br Further reading br Simon St Laurent J Eisenberg December Introducing Elixir Getting Started in Functional Programming nd Edition O Reilly Media ASIN B N KCTIC ISBN br Sasa Juric January Elixir in Action nd Edition Manning Publications ASIN B KZTJG ISBN 