title: Andrei Alexandrescu
id: 156470
Tudor Andrei Cristian Alexandrescu born is a Romanian American C and D language programmer and author He is particularly known for his pioneering work on policy based design implemented via template metaprogramming These ideas are articulated in his book Modern C Design and were first implemented in his programming library Loki He also implemented the move constructors concept in his MOJO library He contributed to the C C Users Journal under the byline Generic Programming br He became an American citizen in August br br br Education and career br Alexandrescu received a B S degree in Electrical Engineering from Polytechnic University of Bucharest Universitatea Politehnica din Bucure ti in July br His first article was published in the C C Users Journal in September He was a program manager for Netzip Inc from April until February When the company was acquired by RealNetworks Inc he served there as a development manager from February through September br Alexandrescu earned a M S and a PhD in computer science from the University of Washington br In Alexandrescu began assisting Walter Bright on the development of the D programming language He released a book titled The D Programming Language in May br From to Alexandrescu Herb Sutter and Scott Meyers ran a small annual technical conference called C and Beyond br Alexandrescu worked as a research scientist at Facebook for over years before departing the company in August in order to focus on developing the D programming language br In January Alexandrescu began working at Nvidia as a Principal Research Scientist br br br Contributions br br br Expected br Expected is a template class for C which is on the C Standards track Alexandrescu proposes Expected T as a class for use as a return value which contains either a T or the exception preventing its creation which is an improvement over use of either return codes or exceptions exclusively Expected can be thought of as a restriction of sum union types or algebraic datatypes in various languages e g Hope or the more recent Haskell and Gallina or of the error handling mechanism of Google s Go or the Result type in Rust br He explains the benefits of Expected T as br br Associates errors with computational goals br Naturally allows multiple exceptions in flight br Switch between error handling and exception throwing styles br Teleportation possible across thread boundaries across nothrow subsystem boundaries and across time save now throw later br Collect group combine exceptions br br br Example br For example instead of any of the following common function prototypes br br int parseInt const string Returns on error and sets errno br br or br br int parseInt const string Throws invalid input or overflow br br he proposes the following br br Expected int parseInt const string Returns an expected int either an int or an exception br br br Scope guard br From onwards Alexandrescu has advocated and popularized the scope guard idiom He has introduced it as a language construct in D It has been implemented by others in many other languages br br br Bibliography br Andrei Alexandrescu February Modern C Design Generic Programming and Design Patterns Applied Addison Wesley ISBN br Herb Sutter Andrei Alexandrescu November C Coding Standards Rules Guidelines and Best Practices Addison Wesley ISBN br Andrei Alexandrescu June The D Programming Language Addison Wesley ISBN br br br br br br External links br Alexandrescu s homepage Contains links to downloadable Loki libraries for various compilers br in Romanian Interviu MONEY ro Facebook face angaj ri n Rom nia March 