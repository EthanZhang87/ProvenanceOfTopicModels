title: Windows Metafile
id: 81673
Windows Metafile WMF is an image file format originally designed for Microsoft Windows in the s The original Windows Metafile format was not device independent though could be made more so with placement headers and may contain both vector graphics and bitmap components It acts in a similar manner to SVG files WMF files were later superseded by Enhanced Metafiles EMF files which did provide for device independence EMF files were then themselves enhanced via EMF files br Essentially a metafile stores a list of records consisting of drawing commands property definitions and graphics objects to display an image on screen The drawing commands used are closely related to the commands of the Graphics Device Interface GDI API used for drawing in Microsoft Windows br There are three major types of metafiles a WMF is a bit format introduced in Windows It is the native vector format for Microsoft Office applications such as Word PowerPoint and Publisher As of revision of the Windows Metafile Format specification is available EMF files which replaced WMF files work on the same principle only it is a bit file format that also allows for the embedding of private data within comment records EMF is an extension to EMF files and embedded in these comment records allowing for images and text using commands objects and properties that are similar to Windows GDI br br br History br The original bit WMF file format was fully specified in volume of the Windows SDK documentation at least if combined with the descriptions of the individual functions and structures in the other volumes but that specification was vague about a few details These manuals were published as printed books available in bookstores with no click through EULA or other unusual licensing restrictions just a general warning that if purchased as part of a software bundle the software would be subject to one br Over time the existence of that historic specification was largely forgotten and some alternative implementations resorted to reverse engineering to figure out the file format from existing WMF files which was difficult and error prone In September Microsoft again published the WMF file format specification in a more complete form in the context of the Microsoft Open Specification Promise promising to not assert patent rights to file format implementors br Microsoft later deprecated WMF files in favour of bit EMF files as WMF files had real issues with device independence despite the use of a placeable file header which provided basic device independence Microsoft found that developers who use the format were embedding application location or scaling comments in the metafiles Others added headers to the metafile that provided various application specific information causing major compatibility issues Thus in with Windows NT Microsoft introduced the Enhanced Metafile format EMF a format which was based on the Win API and with which they built in device independence these were also known as NT metafiles With the release of Windows XP and GDI the set of records had to be significantly increased and so Microsoft released EMF as an extension to the existing EMF file format br br br Metafile structure br br WMF EMF and EMF files all consist of a series of records that are played back to produce graphical output Some records define objects which can specify graphical objects used to determine how graphics should be drawn e g pens specify the color and width of lines Each of these objects are stored in metafiles and are placed into an object table which tracks the usage of graphic objects while processing the metafile The object table is an associative array of indexes to graphical object structures defined within the metafile br WMF and EMF files handle object processing differently to EMF records in EMF files As a WMF and EMF file is being processed the records are read into an object table once an object is defined If an object is deleted then the object is released from the table and the identifier can be reused Notably an object will not be used until it is specifically selected during record playback This differs for EMF files which also use an associative array via a hashmap which records the object along with an object identifier However unlike WMF and EMF files which can delete an object when a new object is created that has the same index as an existing object the entry in the table is replaced with the new object An EMF file also does not need to specifically select an object before it is used br br br WMF br br WMF files were not originally designed to be device independent meaning that a file could not be played back on output devices that differed from the original device on which the file was recorded A partial solution to this issue was invented by Aldus Corporation who added an additional placeable header called the APM header which added a bounding rectangle a metafile version metafile size number of objects in the metafile and the size of the largest single record in the metafile This was later incorporated into the WMF format by Microsoft starting in Windows br WMF files are structured by a series of records starting with a number of control records the header record the aforementioned optional placeable record and finished by an end of file record br Encapsulated by the control records are the records that make up the image itself These records work within what is known as the playback device context which is the collection of properties and objects that make up a device s graphical environment as the metafile is being played back onto this output device br Records other than control records can be largely grouped into bitmap records drawing records object records state records and escape records br br br Bitmap records br Bitmap records manage and output bitmap images br br br Drawing records br Drawing records produce graphics output br br br Object records br Object records create and manage graphics objects In WMF files there are two broad categories of objects graphics objects and structure objects Structure objects are not explicitly created or deleted in a WMF they are instead of complex structures For example the BitmapCoreHeader contains information about the dimensions and color format of a device independent bitmap which is itself part of a DeviceIndependentBitmap object A graphics object however specifies parameters for graphics output and during playback of the WMF it sets up the playback device context br Graphics objects can be brushes defines the style color and pattern of a brush which defines how to paint an area of the graphic fonts defines properties that affect how text is displayed palettes specifies colors as device independent values defined by an application pens specifies the graphical attributes of a line and regions which specify line and curve segments that define a shape br br br State records br State records manage the graphics properties of the playback device context br br br Escape records br br Escape records are a means to extend metafile functionality via records that are not otherwise defined as a WMF record type Each escape record contains a record function an escape function and potentially escape data br The following escape records make up a WMF file br br There was a major vulnerability found in escape records around the Abort escape record which stores the abort procedure code within the record itself This affected Windows systems see CVE and the Wine project see CVE According to Secunia The vulnerability is caused due to an error in the handling of Windows Metafile files wmf containing specially crafted SETABORTPROC Escape records Such records allow arbitrary user defined function to be executed when the rendering of a WMF file fails According to the Windows SDK documentation the SETABORTPROC escape was obsoleted and replaced by the function of the same name in Windows long before the WMF vulnerability was discovered However the obsoleted escape code was retained for compatibility with bit programs written for or at least backwards compatible with Windows This change happened at approximately the same time as Microsoft was creating the bit reimplementation of GDI for Windows NT and it is likely that the vulnerability occurred during this effort br After Steve Gibson accused Microsoft of deliberately implementing a backdoor into their code Mark Russinovich provided a rebuttal and stated that br br things were different when the format was architected In the Windows large memory model code is inherently location independent and Windows was never patched so both Windows and an application could simply copy an application function into the WMF file and assume it would work when played back by the same application in a later run session In any case its not clear that the developers envisioned applications creating on disk metafiles with abort procedures Also as Microsoft s Stephen Toulouse pointed out in Microsoft s rebuttal to Steve s claims the security landscape in the early s was very different than today and all code including that stored in a WMF file was inherently trusted br Peter Ferrie of Symantec Security Response USA also disagreed with Gibson noting that br br Gibson claimed that a thread is created to run the SetAbortProc handler In fact no thread is created to run the handler it is a callback which is called by the parser and the parser has to wait until the callback returns otherwise the whole point of the function to abort the printing is lost By his own admission Gibson did not read the documentation in fact he claimed that he couldn t find it although it is freely available on Microsoft s Web site and he claimed that the device context is not available to the function handler Of course the device context is available to the function handler it is one of the two parameters that is passed to it see above and it is required in order to abort the printing Finally Gibson claimed that the control flow could not return to Windows It is simply a matter of the function returning and discarding the parameters that were passed on the stack If the record is well formed Windows will continue to parse the file as before Gibson admits that he was guessing about a number of things Unfortunately he guessed poorly I guess we know better now br br br EMF br br EMF files have three possible versions of headers The original headers is just a container for images the second and third version encapsulates the original header and contains a pixel format record and support for OpenGL records and the third version encapsulates the second header extension and increases EMF accuracy and scalability of EMFs as it adds the ability to measure distances of device surfaces using the metric system br Each EMF header starts with an EMR HEADER record and records the relevant properties of the device on which the metafile image was recorded The original EMF header has an byte header and an optional variable length description string Other metafiles contain extension fields which encapsulate the original header EmfMetafileHeaderExtension is a record that is inserted directly after the original EMF header specifies whether there is a pixel format descriptor and the offset to the descriptor object within the header as well as a field that specifies if OpenGL records exist in the metafile The pixel format descriptor specifies the capabilities of the drawing surface and whether a pixel is encoded in RGBA or is an index into a color table EmfMetafileHeaderExtension is a record that is inserted directly after the EmfMetafileHeaderExtension record and it contains two fields with the X and Y values to measure the device surface in micrometers br Like WMF files records can be classified by function however there are more record types in EMF files than there are in WMF files Records can be classified as control bitmap clipping comment drawing escape object creation object manipulation OpenGL path bracket state and transform records br br br EMF br With the release of Windows XP the Enhanced Metafile Format Plus Extensions EMF format was introduced EMF provides a way to serialize calls to the GDI API in the same way that WMF EMF stores calls to GDI br There are also compressed versions of Windows Metafiles known as Compressed Windows Metafile WMZ and Compressed Windows Enhanced Metafile EMZ which are basically gzip compressed WMF and EMF files correspondingly br br br Implementations br The WMF format was designed to be executed by the Windows GDI layer in order to restore the image but as the WMF binary files contain the definition of the GDI graphic primitives that constitute this image it is possible to design alternative libraries that render WMF binary files or convert them into other graphic formats br br br See also br PostScript br Vector Markup Language VML br Scalable Vector Graphics SVG br br br br br br External links br Windows Metafile Format Specification from Microsoft br Metafiles Windows applications br File Format Summary at fileformat info br Windows Metafile FAQ