title: GNU Unifont
id: 15199257
GNU Unifont is a free Unicode bitmap font created by Roman Czyborra The main Unifont covers all of the Basic Multilingual Plane BMP The upper companion covers significant parts of the Supplementary Multilingual Plane SMP The Unifont JP companion contains Japanese kanji present in the JIS X character set br It is present in most free operating systems and windowing systems such as Linux XFree or the X Org Server some embedded firmware such as RockBox as well as in Minecraft Java Edition The source code is released under the GPL or later license The font is released under the GPL or later license with Font exception embedding the font in a document does not require the document to be placed under the same license and from version dual licensed under SIL Open Font License The manual is released under the GFDL or later license br It became a GNU package in October The current maintainer is Paul Hardy br br br Status br The Unicode Basic Multilingual Plane covers code points Of this number are reserved for special use as UTF surrogate pairs and are reserved for private use This leaves code points to which glyphs can be assigned Some of these code points are special values that do not have an assigned glyph but most do have assigned glyphs br As of May the GNU Unifont has complete coverage of the Basic Multilingual Plane as defined in Unicode Its companion fonts Unifont Upper and Unifont CSUR have significant coverage of the Supplementary Multilingual Plane and the ConScript Unicode Registry respectively br For version Unifont JP was released which covers Japanese kanji present in the JIS X character set some of which are in the Supplementary Ideographic Plane It is derived from Jiskan a public domain font br Incomplete scripts can be added to by any contributor br Most of the CJK ideographs on the font has been copied from WenQuanYi s Unibit font with permission Wen Quan Yi Spring of Letters br Unifont stores only one glyph per printable Unicode code point Because of this it does not feature the OpenType features needed to render scripts with complex layouts correctly and it does not correctly position the combining diacritics with base letters if these combinations are not encoded in Unicode in their pre combined form the contextual forms including joining types and subjoined clusters are not handled as well This increases the number of glyphs to include in the basic font and it is not currently possible because of current OpenType limitations to encode all the needed glyphs to represent all the required combinations that can exist in a single Unicode plane this is also true for Chinese fonts that cannot cover completely all ideograms currently encoded in two planes and also in a third plane Unifont is then intended to only be used as a last resort default font suitable for simple alphabetic scripts or to render isolated characters but will make actual texts difficult or sometimes impossible to read correctly For correctly rendering Indic abugidas and semitic abjads if they are written with their optional combining diacritics other fonts should be specified before this one and additional fonts will be needed to cover Han ideographs encoded in supplementary planes or to render most historic or minority modern scripts not encoded in the BMP br br br Distribution br br Unifont as of version is available in TTF and OTF BDF PCF hex and PSF formats for the standard build Only the TrueType build is split into two fonts br A few specialized versions have been built by request and made available by Paul Hardy These include a bitmap TTF SBIT with empty glyphs filled with code point values for FontForge users to read a PSF bitmap with glyphs for APL programmers and single file versions in Roman s hex format see below The actual organization of the source consists of smaller hex files to be stitched together and converted to other formats in a build br br br Vectorization br Luis Alejandro Gonz lez Miranda wrote scripts to vectorize and convert the BDF font to TrueType format using FontForge Paul Hardy adjusted these scripts to handle combining characters accents etc for the latest TrueType versions TrueType Font Generation br br br hex format br The GNU Unifont hex format defines its glyphs as either or pixels in width by pixels in height Most Western script glyphs can be defined as pixels wide while other glyphs notably the Chinese Japanese Korean or CJK set are typically defined as pixels wide br The unifont hex file contains one line for each glyph Each line consists of a four digit Unicode hexadecimal code point a colon and the bitmap string The bit string is hexadecimal digits for an pixel wide glyph or hexadecimal digits for a pixel wide glyph The goal is to create an intermediate format that would facilitate adding new glyphs br The bit string is converted from hexadecimal to binary A bit in the binary bit string corresponds to an on pixel The pixel s bits are stored line by line from the top to the bottom in big endian order br br br Example br This is an example font containing one glyph for ASCII capital A br br E br br The first number is the hexadecimal Unicode code point with range through FFFF Hexadecimal is decimal the code point for the letter A The colon separates the code point from the bitmap In this example the glyph is pixels wide so the bit string is hexadecimal digits long br The bit string begins with zeros so the top rows will be empty hexadecimal digits per bit byte with bits per row for an pixel wide glyph The bit string also ends with zeros so the bottom rows will be empty It is implicit from this that the default font descender is rows below the baseline and the capital height is rows above the baseline This is the case in the GNU Unifont with Latin glyphs br Over time a number of ways have been created to handle the format The earliest way is the hexdraw Perl script which converts the string into an ASCII art representation to be edited in a text editor Another method involves generating a bitmap image grid for an entire range of code points and working with an image editor In either case the edited glyphs are later converted back into hex files for storage br br br History br Roman Czyborra created the Unifont format in after earlier efforts dating to br In Luis Alejandro Gonz lez Miranda wrote a program to convert Unifont into a TrueType font Paul Hardy modified it later to support combining characters in the TrueType version br Later Richard Stallman published Unifont as a GNU package in October with Paul Hardy as its maintainer br br br See also br Fallback font br br br br br br External links br br GNU Project Archives br Unifoundry com GNU Unifont page