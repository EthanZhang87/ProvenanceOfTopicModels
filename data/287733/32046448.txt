title: Strong and weak typing
id: 32046448
In computer programming one of the many ways that programming languages are colloquially classified is whether the language s type system makes it strongly typed or weakly typed loosely typed However there is no precise technical definition of what the terms mean and different authors disagree about the implied meaning of the terms and the relative rankings of the strength of the type systems of mainstream programming languages For this reason writers who wish to write unambiguously about type systems often eschew the terms strong typing and weak typing in favor of specific expressions such as type safety br Generally a strongly typed language has stricter typing rules at compile time which implies that errors and exceptions are more likely to happen during compilation Most of these rules affect variable assignment function return values procedure arguments and function calling Dynamically typed languages where type checking happens at run time can also be strongly typed In dynamically typed languages values rather than variables have types br A weakly typed language has looser typing rules and may produce unpredictable or even erroneous results or may perform implicit type conversion at runtime A different but related concept is latent typing br br br History br In Barbara Liskov and Stephen Zilles defined a strongly typed language as one in which whenever an object is passed from a calling function to a called function its type must be compatible with the type declared in the called function br In K Jackson wrote In a strongly typed language each data area will have a distinct type and each process will state its communication requirements in terms of these types br br br Definitions of strong or weak br A number of different language design decisions have been referred to as evidence of strong or weak typing Many of these are more accurately understood as the presence or absence of type safety memory safety static type checking or dynamic type checking br Strong typing generally refers to use of programming language types in order to both capture invariants of the code and ensure its correctness and definitely exclude certain classes of programming errors Thus there are many strong typing disciplines used to achieve these goals br br br Implicit type conversions and type punning br Some programming languages make it easy to use a value of one type as if it were a value of another type This is sometimes described as weak typing br For example Aahz Maruch observes that Coercion occurs when you have a statically typed language and you use the syntactic features of the language to force the usage of one type as if it were a different type consider the common use of void in C Coercion is usually a symptom of weak typing Conversion on the other hand creates a brand new object of the appropriate type br As another example GCC describes this as type punning and warns that it will break strict aliasing Thiago Macieira discusses several problems that can arise when type punning causes the compiler to make inappropriate optimizations br There are many examples of languages that allow implicit type conversions but in a type safe manner For example both C and C allow programs to define operators to convert a value from one type to another with well defined semantics When a C compiler encounters such a conversion it treats the operation just like a function call In contrast converting a value to the C type void is an unsafe operation that is invisible to the compiler br br br Pointers br Some programming languages expose pointers as if they were numeric values and allow users to perform arithmetic on them These languages are sometimes referred to as weakly typed since pointer arithmetic can be used to bypass the language s type system br br br Untagged unions br Some programming languages support untagged unions which allow a value of one type to be viewed as if it were a value of another type br br br Static type checking br In Luca Cardelli s article Typeful Programming a strong type system is described as one in which there is no possibility of an unchecked runtime type error In other writing the absence of unchecked run time errors is referred to as safety or type safety Tony Hoare s early papers call this property security br br br Variation across programming languages br br Some of these definitions are contradictory others are merely conceptually independent and still others are special cases with additional constraints of other more liberal less strong definitions Because of the wide divergence among these definitions it is possible to defend claims about most programming languages that they are either strongly or weakly typed For instance br br Java Pascal Ada and C require variables to have a declared type and support the use of explicit casts of arithmetic values to other arithmetic types Java C Ada and Pascal are sometimes said to be more strongly typed than C because C supports more kinds of implicit conversions and allows pointer values to be explicitly cast while Java and Pascal do not Java may be considered more strongly typed than Pascal as methods of evading the static type system in Java are controlled by the Java virtual machine s type system C and VB NET are similar to Java in that respect though they allow disabling of dynamic type checking by explicitly putting code segments in an unsafe context Pascal s type system has been described as too strong because the size of an array or string is part of its type making some programming tasks very difficult However Delphi fixes this issue br Smalltalk Ruby Python and Self are all strongly typed in the sense that typing errors are prevented at runtime and they do little implicit type conversion but these languages make no use of static type checking the compiler does not check or enforce type constraint rules The term duck typing is now used to describe the dynamic typing paradigm used by the languages in this group br The Lisp family of languages are all strongly typed in the sense that typing errors are prevented at runtime Some Lisp dialects like Common Lisp or Clojure do support various forms of type declarations and some compilers CMU Common Lisp CMUCL and related use these declarations together with type inference to enable various optimizations and limited forms of compile time type checks br Standard ML F OCaml Haskell Go and Rust are statically type checked but the compiler automatically infers a precise type for most values br Assembly language and Forth can be characterized as untyped There is no type checking it is up to the programmer to ensure that data given to functions is of the appropriate type br br br See also br Comparison of programming languages br Data type includes a more thorough discussion of typing issues br Design by contract strong typing as implicit contract form br Latent typing br Memory safety br Type safety br Type system br Strongly typed identifier br br br 