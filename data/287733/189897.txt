title: Programming paradigm
id: 189897
A programming paradigm is a relatively high level way to structure and conceptualize the implementation of a computer program A programming language can be classified as supporting one or more paradigms br Paradigms are separated along and described by different dimensions of programming Some paradigms are about implications of the execution model such as allowing side effects or whether the sequence of operations is defined by the execution model Other paradigms are about the way code is organized such as grouping into units that include both state and behavior Yet others are about syntax and grammar br Some common programming paradigms include shown in hierarchical relationship br br Imperative code directly controls execution flow and state change br procedural organized as procedures that call each other br object oriented organized as objects that contain both data structure and associated behavior br Declarative code declares properties of the desired result but not how to compute it br functional a desired result is declared as the value of a series of function evaluations br logic a desired result is declared as the answer to a question about a system of facts and rules br reactive a desired result is declared with data streams and the propagation of change br br br Overview br br Programming paradigms come from computer science research into existing practices of software development The findings allow for describing and comparing programming practices and the languages used to code programs For perspective other research studies br software engineering processes and describes various methodologies to describe and compare them br A programming language can be described in terms of paradigms Some languages support only one paradigm For example Smalltalk supports object oriented and Haskell supports functional Most languages support multiple paradigms For example a program written in C Object Pascal or PHP can be purely procedural purely object oriented or can contain aspects of both paradigms or others br When using a language that supports multiple paradigms the developer chooses which paradigm elements to use But this choice may not involve considering paradigms per se The developer often uses the features of a language as the language provides them and to the extent that the developer knows them Categorizing the resulting code by paradigm is often an academic activity done in retrospect br Languages categorized as imperative paradigm have two main features they state the order in which operations occur with constructs that explicitly control that order and they allow side effects in which state can be modified at one point in time within one unit of code and then later read at a different point in time inside a different unit of code The communication between the units of code is not explicit br In contrast languages in the declarative paradigm do not state the order in which to execute operations Instead they supply a number of available operations in the system along with the conditions under which each is allowed to execute The implementation of the language s execution model tracks which operations are free to execute and chooses the order independently More at Comparison of multi paradigm programming languages br In object oriented programming code is organized into objects that contain state that is owned by and usually controlled by the code of the object Most object oriented languages are also imperative languages br In object oriented programming programs are treated as a set of interacting objects In functional programming programs are treated as a sequence of stateless function evaluations When programming computers or systems with many processors in process oriented programming programs are treated as sets of concurrent processes that act on a logical shared data structures br Many programming paradigms are as well known for the techniques they forbid as for those they support For instance pure functional programming disallows side effects while structured programming disallows the goto construct Partly for this reason new paradigms are often regarded as doctrinaire or overly rigid by those accustomed to older ones Yet avoiding certain techniques can make it easier to understand program behavior and to prove theorems about program correctness br Programming paradigms can also be compared with programming models which allows invoking an execution model by using only an API Programming models can also be classified into paradigms based on features of the execution model br For parallel computing using a programming model instead of a language is common The reason is that details of the parallel hardware leak into the abstractions used to program the hardware This causes the programmer to have to map patterns in the algorithm onto patterns in the execution model which have been inserted due to leakage of hardware into the abstraction As a consequence no one parallel programming language maps well to all computation problems Thus it is more convenient to use a base sequential language and insert API calls to parallel execution models via a programming model Such parallel programming models can be classified according to abstractions that reflect the hardware such as shared memory distributed memory with message passing notions of place visible in the code and so forth These can be considered flavors of programming paradigm that apply to only parallel languages and programming models br br br Criticism br Some programming language researchers criticise the notion of paradigms as a classification of programming languages e g Harper and Krishnamurthi They argue that many programming languages cannot be strictly classified into one paradigm but rather include features from several paradigms See Comparison of multi paradigm programming languages br br br History br Different approaches to programming have developed over time Classification of each approach was either described at the time the approach was first developed but often not until some time later retrospectively An early approach consciously identified as such is structured programming advocated since the mid s The concept of a programming paradigm as such dates at least to in the Turing Award lecture of Robert W Floyd entitled The Paradigms of Programming which cites the notion of paradigm as used by Thomas Kuhn in his The Structure of Scientific Revolutions Early programming languages did not have clearly defined programming paradigms and sometimes programs made extensive use of goto statements Liberal use of which lead to spaghetti code which is difficult to understand and maintain This led to the development of structured programming paradigms that disallowed the use of goto statements only allowing the use of more structured programming constructs br br br Languages and paradigms br br br Machine code br Machine code is the lowest level of computer programming as it is machine instructions that define behavior at the lowest level of abstract possible for a computer As it is the most prescriptive way to code it is classified as imperative br It is sometimes called the first generation programming language br br br Assembly br Assembly language introduced mnemonics for machine instructions and memory addresses Assembly is classified as imperative and is sometimes called the second generation programming language br In the s assembly languages were developed to support library COPY and quite sophisticated conditional macro generation and preprocessing abilities CALL to subroutine external variables and common sections globals enabling significant code re use and isolation from hardware specifics via the use of logical operators such as READ WRITE GET PUT Assembly was and still is used for time critical systems and often in embedded systems as it gives the most control of what the machine does br br br Procedural languages br Procedural languages also called the third generation programming languages are the first described as high level languages They support vocabulary related to the problem being solved For example br br COmmon Business Oriented Language COBOL uses terms like file move and copy br FORmula TRANslation FORTRAN using mathematical language terminology it was developed mainly for scientific and engineering problems br ALGOrithmic Language ALGOL focused on being an appropriate language to define algorithms while using mathematical language terminology targeting scientific and engineering problems just like FORTRAN br Programming Language One PL I a hybrid commercial scientific general purpose language supporting pointers br Beginners All purpose Symbolic Instruction Code BASIC it was developed to enable more people to write programs br C a general purpose programming language initially developed by Dennis Ritchie between and at AT T Bell Labs br These languages are classified as procedural paradigm They directly control the step by step process that a computer program follows The efficacy and efficiency of such a program is therefore highly dependent on the programmer s skill br br br Object oriented programming br br In attempt to improve on procedural languages object oriented programming OOP languages were created such as Simula Smalltalk C Eiffel Python PHP Java and C In these languages data and methods to manipulate the data are in the same code unit called an object This encapsulation ensures that the only way that an object can access data is via methods of the object that contains the data Thus an object s inner workings may be changed without affecting code that uses the object br There is controversy raised by Alexander Stepanov Richard Stallman and other programmers concerning the efficacy of the OOP paradigm versus the procedural paradigm The need for every object to have associative methods leads some skeptics to associate OOP with software bloat an attempt to resolve this dilemma came through polymorphism br Although most OOP languages are third generation it is possible to create an object oriented assembler language High Level Assembly HLA is an example of this that fully supports advanced data types and object oriented assembly language programming despite its early origins Thus differing programming paradigms can be seen rather like motivational memes of their advocates rather than necessarily representing progress from one level to the next Precise comparisons of competing paradigms efficacy are frequently made more difficult because of new and differing terminology applied to similar entities and processes together with numerous implementation distinctions across languages br br br Declarative languages br A declarative programming program describes what the problem is not how to solve it The program is structured as a set of properties to find in the expected result not as a procedure to follow Given a database or a set of rules the computer tries to find a solution matching all the desired properties An archetype of a declarative language is the fourth generation language SQL and the family of functional languages and logic programming br Functional programming is a subset of declarative programming Programs written using this paradigm use functions blocks of code intended to behave like mathematical functions Functional languages discourage changes in the value of variables through assignment making a great deal of use of recursion instead br The logic programming paradigm views computation as automated reasoning over a body of knowledge Facts about the problem domain are expressed as logic formulas and programs are executed by applying inference rules over them until an answer to the problem is found or the set of formulas is proved inconsistent br br br Other paradigms br Symbolic programming is a paradigm that describes programs able to manipulate formulas and program components as data Programs can thus effectively modify themselves and appear to learn making them suited for applications such as artificial intelligence expert systems natural language processing and computer games Languages that support this paradigm include Lisp and Prolog br Differentiable programming structures programs so that they can be differentiated throughout usually via automatic differentiation br Literate programming as a form of imperative programming structures programs as a human centered web as in a hypertext essay documentation is integral to the program and the program is structured following the logic of prose exposition rather than compiler convenience br Symbolic techniques such as reflection which allow the program to refer to itself might also be considered as a programming paradigm However this is compatible with the major paradigms and thus is not a real paradigm in its own right br br br See also br br br br br br External links br br Classification of the principal programming paradigms br How programming paradigms evolve and get adopted 