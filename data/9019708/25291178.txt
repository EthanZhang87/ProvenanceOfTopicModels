title: Atom (programming language)
id: 25291178
Atom is a domain specific language DSL in Haskell for designing real time embedded software br br br History br Originally intended as a high level hardware description language HDL Atom was created in early and released as free and open source software FOSS of April of that year Inspired by TRS and Bluespec Atom compiled circuit descriptions that were based on guarded atomic operations or conditional term rewriting into Verilog netlists for simulation and logic synthesis As a hardware compiler Atom s main objective is to maximize the number of operations or rules that can execute in a given clock cycle without violating the semantics of atomic operation By employing the properties of conflict free and sequentially composable rules Atom reduced maximizing execution concurrency to a feedback arc set optimization of a rule data dependency graph This process was similar to James Hoe s original algorithm br When Atom s author switched careers in late from logic design to embedded system software engineering Atom was redesigned from an HDL to a domain specific language targeting hard real time computing embedded applications As a result Atom s compiler s main objective changed from maximizing rule concurrency to balancing processing load and minimizing worst case timing latency In September Atom was presented at the Commercial Users of Functional Programming CUFP conference In April in its new form it was released as FOSS br br br Overview br Atom is a concurrent programming language intended for embedded applications Atom features compile time task scheduling and generates code with deterministic execution time and memory use simplifying worst case execution time analysis for applications that need hard realtime performance Atom s concurrency model is that of guarded atomic actions which eliminates the need for and the problems of using mutex locks br By removing runtime task scheduling and mutex locking two services traditionally served by a real time operating system RTOS Atom can eliminate the need and overhead of an RTOS in embedded applications br br br Limits br To provide guarantees of deterministic execution time and memory consumption Atom places several restrictions on computing First Atom designs are always finite state all variables are global and declared at compile time and dynamic memory allocation is disallowed Second Atom provides no function or looping constructs Instead state variable updates are pure combinational logic functions of the current state br br br br br br External links br Official website br atom on GitHub