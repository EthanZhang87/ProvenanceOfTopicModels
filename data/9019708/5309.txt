title: Software
id: 5309
Software consists of computer programs that instruct the execution of a computer br Building on previous innovations in mathematics and technology software was created for the programmable digital computers that emerged in the late s and was necessary to realize their usefulness The first software was tied closely to the underlying computer hardware but over time the lower layers of the system have become more standardized and software has become increasingly portable between different systems and abstracted from the underlying machine code Operating systems manage the hardware resources and mediate between different applications that accomplish tasks for the user Programming languages are the format in which software is written and must be both human readable and capable of being translated into unambiguous instructions for computer hardware Compilers or interpreters are needed to link a program with other code that it relies on and convert the software into machine code that can be executed on the hardware Programs are combined with each other and with external input to be capable of accomplishing a complex task br Software development s central task is programming and maintaining a project s source code but the term also covers conceiving the project evaluating its feasibility analyzing the business requirements software design and release Software quality assurance including code review and testing is an essential part of the process as delivering quality code lowers the cost of reliability failures cyberattacks enabled by security vulnerabilities and maintenance costs Maintenance typically consumes percent or more of the software s lifetime engineering budget Source code is protected by copyright law which vests the owner with the exclusive right to copy the code Software has become ubiquitous in everyday life in developed countries In many cases software augments the functionality of pre existing technologies but it has also enabled the creation of entirely new technologies such as the Internet video games social media mobile phones and GPS br br br Definition br Software can be defined more narrowly as the instructions executed by the computer hardware or more broadly including other concepts tools and methods needed to make an executable system on computer hardware such as design documents specifications and testing suites An individual program or source code file consists of unambiguous instructions and algorithms Programs are combined with each other and with external input to be capable of accomplishing a complex task Tools such as compilers assemblers flowcharts design tools simulators and architectural diagrams some of which are also software are essential to the design and execution of most computing systems Although software is intangible software makes instructions for computer hardware to produce visible and tangible effects br br br History br br A host of earlier inventions were necessary for the creation of software including mathematics especially binary and decimal number systems and zero alphabets writing mechanical calculators boolean algebra transistors integrated circuits and plastics Software could not exist without digital computers as it was created specifically for these devices and was necessary to realize their usefulness br The first programmable computers which appeared at the end of the s were programmed in machine language simple instructions that could be directly executed by the processor Machine language was difficult to debug and was not portable between different computer systems Initially hardware resources were scarce and expensive while human resources were cheaper As programs grew more complex programmer productivity became a bottleneck This led to the introduction of high level programming languages in the mid s These languages abstracted away the details of the hardware instead being designed to express algorithms that could be understood more easily by humans As instructions are distinct from the underlying computer hardware software is therefore relatively recent dating to these early high level programming languages such as Fortran Lisp and COBOL The first use of the word software is credited to mathematician John Wilder Tukey in As this first definition of software was negative elements of a computer that were not tubes transistors wires tapes and the like it left open for a broad understanding of the concept of software as Historian of Computing Nathan Ensmenger posits For historians software is a sociotechnical system which means a system in which machines people and processes are inextricably interconnected and interdependent in Ensmenger s words Historian of Computing Thomas Haigh insists on the idea of circulation and argues software always involves packaging disparate elements such as computer code practices algorithms tacit knowledge and intellectual property rights into an artifact suitable for dissemination br The first software was tied closely to the underlying hardware and consequently was not portable to other systems As it has evolved newer software can be built and run on a wide variety of platforms Much of the increase in portability can be attributed to the standardization of lower level aspects of the system such as networking operating systems and databases Because there are only a relatively few operating systems TCP and IP are used for virtually all networking and SQL is used for many database queries application software can run more easily over a wide variety of hardware Increasing the number of layers of abstraction in the system is a related development both in programming languages where it enables better structure and increased modularity as well as enabling virtualization of system resources As a result of the increase in stability and abstraction software has become increasingly complex and can solve more problems Both industry and academia have had a strong influence on the development of different aspects of software br br br Types br br There are two main types of software br br Operating systems are the layer of software that manages a computer s resources for its users and their applications There are three main purposes that an operating system fulfills br Allocating resources between different applications deciding when they will receive central processing unit CPU time or space in memory br Providing an interface that abstracts the details of accessing hardware details like physical memory to make things easier for programmers br Offering common services such as an interface for accessing network and disk devices This enables an application to be run on different hardware without needing to be rewritten br Application software runs on top of the operating system and uses the computer s resources to perform a task There are many different types of application software because the range of tasks that can be performed with modern computers is so large Applications account for most software and require the environment provided by an operating system and often other applications in order to function br br Software can also be categorized by how it is deployed Traditional applications are purchased with a perpetual license for a specific version of the software downloaded and run on hardware belonging to the purchaser The rise of the Internet and cloud computing enabled a new model software as a service SaaS in which the provider hosts the software usually built on top of rented infrastructure or platforms and provides the use of the software to customers often in exchange for a subscription fee By SaaS products which are usually delivered via a web application had become the primary method that companies deliver applications br br br Software development and maintenance br br Software companies aim to deliver a high quality product on time and under budget A challenge is that software development effort estimation is often inaccurate Software development begins by conceiving the project evaluating its feasibility analyzing the business requirements and making a software design Most software projects speed up their development by reusing or incorporating existing software either in the form of commercial off the shelf COTS or open source software Software quality assurance is typically a combination of manual code review by other engineers and automated software testing Due to time constraints testing cannot cover all aspects of the software s intended functionality so developers often focus on the most critical functionality Formal methods are used in some safety critical systems to prove the correctness of code while user acceptance testing helps to ensure that the product meets customer expectations There are a variety of software development methodologies which vary from completing all steps in order to concurrent and iterative models Software development is driven by requirements taken from prospective users as opposed to maintenance which is driven by events such as a change request br Frequently software is released in an incomplete state when the development team runs out of time or funding Despite testing and quality assurance virtually all software contains bugs where the system does not work as intended Post release software maintenance is necessary to remediate these bugs when they are found and keep the software working as the environment changes over time New features are often added after the release Over time the level of maintenance becomes increasingly restricted before being cut off entirely when the product is withdrawn from the market As software ages it becomes known as legacy software and can remain in use for decades even if there is no one left who knows how to fix it Over the lifetime of the product software maintenance is estimated to comprise percent or more of the total development cost br Completing a software project involves various forms of expertise not just in software programmers but also testing documentation writing project management graphic design user experience user support marketing and fundraising br br br Quality and security br br Software quality is defined as meeting the stated requirements as well as customer expectations Quality is an overarching term that can refer to a code s correct and efficient behavior its reusability and portability or the ease of modification It is usually more cost effective to build quality into the product from the beginning rather than try to add it later in the development process Higher quality code will reduce lifetime cost to both suppliers and customers as it is more reliable and easier to maintain Software failures in safety critical systems can be very serious including death By some estimates the cost of poor quality software can be as high as to percent of sales Despite developers goal of delivering a product that works entirely as intended virtually all software contains bugs br The rise of the Internet also greatly increased the need for computer security as it enabled malicious actors to conduct cyberattacks remotely If a bug creates a security risk it is called a vulnerability Software patches are often released to fix identified vulnerabilities but those that remain unknown zero days as well as those that have not been patched are still liable for exploitation Vulnerabilities vary in their ability to be exploited by malicious actors and the actual risk is dependent on the nature of the vulnerability as well as the value of the surrounding system Although some vulnerabilities can only be used for denial of service attacks that compromise a system s availability others allow the attacker to inject and run their own code called malware without the user being aware of it To thwart cyberattacks all software in the system must be designed to withstand and recover from external attack Despite efforts to ensure security a significant fraction of computers are infected with malware br br br Encoding and execution br br br Programming languages br br Programming languages are the format in which software is written Since the s thousands of different programming languages have been invented some have been in use for decades while others have fallen into disuse Some definitions classify machine code the exact instructions directly implemented by the hardware and assembly language a more human readable alternative to machine code whose statements can be translated one to one into machine code as programming languages Programs written in the high level programming languages used to create software share a few main characteristics knowledge of machine code is not necessary to write them they can be ported to other computer systems and they are more concise and human readable than machine code They must be both human readable and capable of being translated into unambiguous instructions for computer hardware br br br Compilation interpretation and execution br The invention of high level programming languages was simultaneous with the compilers needed to translate them automatically into machine code Most programs do not contain all the resources needed to run them and rely on external libraries Part of the compiler s function is to link these files in such a way that the program can be executed by the hardware Once compiled the program can be saved as an object file and the loader part of the operating system can take this saved file and execute it as a process on the computer hardware Some programming languages use an interpreter instead of a compiler An interpreter converts the program into machine code at run time which makes them to times slower than compiled programming languages br br br Legal issues br br br Liability br br Software is often released with the knowledge that it is incomplete or contains bugs Purchasers knowingly buy it in this state which has led to a legal regime where liability for software products is significantly curtailed compared to other products br br br Licenses br br Source code is protected by copyright law that vests the owner with the exclusive right to copy the code The underlying ideas or algorithms are not protected by copyright law but are often treated as a trade secret and concealed by such methods as non disclosure agreements Software copyright has been recognized since the mid s and is vested in the company that makes the software not the employees or contractors who wrote it The use of most software is governed by an agreement software license between the copyright holder and the user Proprietary software is usually sold under a restrictive license that limits copying and reuse often enforced with tools such as digital rights management DRM Open source licenses in contrast allow free use and redistribution of software with few conditions Most open source licenses used for software require that modifications be released under the same license which can create complications when open source software is reused in proprietary projects br br br Patents br br Patents give an inventor an exclusive time limited license for a novel product or process Ideas about what software could accomplish are not protected by law and concrete implementations are instead covered by copyright law In some countries a requirement for the claimed invention to have an effect on the physical world may also be part of the requirements for a software patent to be held valid Software patents have been historically controversial Before the case State Street Bank Trust Co v Signature Financial Group Inc software patents were generally not recognized in the United States In that case the Supreme Court decided that business processes could be patented Patent applications are complex and costly and lawsuits involving patents can drive up the cost of products Unlike copyrights patents generally only apply in the jurisdiction where they were issued br br br Impact br br Engineer Capers Jones writes that computers and software are making profound changes to every aspect of human life education work warfare entertainment medicine law and everything else It has become ubiquitous in everyday life in developed countries In many cases software augments the functionality of existing technologies such as household appliances and elevators Software also spawned entirely new technologies such as the Internet video games mobile phones and GPS New methods of communication including email forums blogs microblogging wikis and social media were enabled by the Internet Massive amounts of knowledge exceeding any paper based library are now available with a quick web search Most creative professionals have switched to software based tools such as computer aided design D modeling digital image editing and computer animation Almost every complex device is controlled by software br br br br br br Sources 