title: Yesod (web framework)
id: 37305198
Yesod IPA je sod Hebrew Foundation is a web framework based on the programming language Haskell for productive development of type safe representational state transfer REST model based where uniform resource locators URLs identify resources and Hypertext Transfer Protocol HTTP methods identify transitions high performance web applications developed by Michael Snoyman et al It is free and open source software released under an MIT License br Yesod is based on templates to generate instances for listed entities and dynamic content process functions through Template Haskell constructs to host domain specific language eDSL content templates called QuasiQuotes where the content is translated into code expressions by metaprogramming instructions br There are also web like language snippet templates that admit code expression interpolations making them fully type checked at compile time br Yesod divides its functions in separate libraries database html rendering forms etc so functions may used as needed br br br MVC architecture br MVC br br br Controller br br br Server interface br Yesod uses a Web application interface WAI a type of application programming interface API to isolate servlets aka web apps from servers with handlers for the server protocols Common Gateway Interface CGI FastCGI Simple Common Gateway Interface SCGI Warp Launch open as local URL to the default browser closing the server when the window is closed br br br The foundation type br See ref Yesod requires a data type that instantiates the model view controller classes This is called the foundation type In the example below it is named MyApp br The REST model identifies a web resource with a web path Here REST resources are given names with an R suffix like HomeR and are listed in a parseRoutes site map description template From this list route names and dispatch handler names are derived br Yesod makes use of Template Haskell metaprogramming to generate code from templates at compile time assuring that the names in the templates match and everything typechecks e g web resource names and handler names br By inserting a mkYesod call this will call Template Haskell primitives to generate the code corresponding to the route type members and the instances of the dispatch controller classes as to dispatch GET calls to route HomeR to a routine named composing them both as getHomeR expecting an existing handler that matches the name br br br Hello World br Hello World program example based on a Common Gateway Interface CGI server interface the handler types have changed but the philosophy remains br br br Resources routes HTTP method handlers br See ref Yesod follows the representational state transfer model of access to web documents identifying docs and directories as resources with a Route constructor named with an uppercase R suffix for example HomeR br br The routes table br The parseRoutes template should list the resources specifying route pieces resource name and dispatch methods to be accepted br URL segment capture as parameter is possible specifying a prefix for single segment capture or for multisegment capture followed by the parameter type br br Applying the previous template generates the following route constructors br br For every supported HTTP method a handler function must be created to match the dispatch names generated by mkYesod from the parseRoutes template by prefixing the method name or the prefix handler if no method stated to the resource as described actual versions handler types have changed but the philosophy remains br br br Request data parameters cookies languages other header info br See ref br br br Authentication authorization br See ref Authentication plugins OpenID BrowserID Email GoogleEmail HashDB RpxNow br br There is an important setting for automatic redirection after authentication br br br Sessions br See ref Session back ends ClientSession it stores the session in a cookie ServerSession it stores most of the session data at the server br br To avoid undue bandwidth overhead production sites can serve their static content from a separate domain name to avoid the overhead of transmitting the session cookie for each request br br br Session messages br A success failure or indicative message can be stored setMessage in the Session and will be shown if it exists by the default layout routine through the default layout hamlet template being cleared on consultation br br br Subsites br Common URL prefix subsites for workflows file serving or site partitioning See ref br Built in subsites Static Auth br br br Form processing layout generation br See ref br The Form type here is an object that is used in the controller to parse and process the form fields user input and produce a FormResult Widget pair were the widget holds the layout of the next rendering of the form with error messages and marks It can also be used to generate a new form with blanks or default values br The form type takes the shape of a function of an html snippet to be embedded in the view that will hold security purpose hidden fields br A form object is generated from an Applicative Monadic composition of fields for a combined sequential parsing of field inputs br There are three types of forms br br Applicative with tabular layout br Monadic with free layout style both in the Yesod Form Functions module br Input for parsing only no view generated in the Yesod Form Input module br The field generators whose names are composed by the form type initial a m i followed by req opt required or optional have a fieldParse component and a fieldView one br br the function runForm Post Get runs the field parsers against the form field inputs and generates a FormResult Widget pair from the views offering a new form widget with the received form field values as defaults The function suffix is the http method used in the form submission br while generateForm Post Get ignores inputs from the client and generates a blank or defaults form widget br The actual function parameters and types have changed through Yesod versions Check the Yesod book and libraries signatures br The magic is in the FormResult data type Applicative instance where collects the error messages for the case of FormFailure textErrMsg result values br Monadic forms permit free form layout and better treatment of hiddenField members br A sample of an Applicative form br br br View br The types shown correspond to an older version but the philosophy remains br The Handler monad returns content in one or more of several formats as components of types that implement the HasReps class RepHtml RepJson RepXml RepPlain the dual RepHtmlJson a pair or list of pairs ContentType Content Json examples br The HasReps default implementation of chooseRep chooses the document representation to be returned according to the preferred content type list of the client accept header br br Widgets are HTML DOM code snippets made by specific commands e g setTitle or from templates of structure HTML behaviour JavaScript style CSS whose types instantiate the classes ToWidget ToWidgetHead or ToWidgetBody br A Widget monad based on a Writer one and argument to defaultLayout facilitate to piece the widgets together br br br Indentation based templates for tree structured markup br the hamlet quasiquoter a parser to compile time Template Haskell code specified in the T H Oxford brackets syntax qq introduces an indentation based structured html template See doc br prefixes lines of logic statements br Automatic closing tags are generated only for the tag at line start position br br the whamlet quasiquoter returns a Widget expression saves to Widget before hamlet br br br Template interpolation Shakespearean templates br See ref br These are content view templates that follow a common substitution pattern of code expressions within curly brackets with different character prefix to refer to br br template expressions with br refers to other templates of the same type with given parameters as template params br route expressions with br safe typed urls as HomeR br message expressions with br i n message rendering as MsgMessageLabel params br other Haskell expressions with br haskell expression rendering as haskell expression which type must be convertible br in case of hamlet html templates the expression type must be an instance of Text Blaze ToMarkup br in case of CSS templates the expression type must be an instance of Text Cassius ToCss br in case of JavaScript templates the expression type must be an instance of Text Julius ToJavascript br in case of i n message definitions in isoLanguage msg files with parameter interpolations the expression type must be an instance of Text Shakespeare I N ToMessage br in case of text plain templates for use in emails the expression type must be an instance of Text Shakespeare Text ToText br Using non English text in expressions requires use of the Unicode aware type Text since the Glasgow Haskell Compiler s GHC s show for the type String renders non ASCII characters as escaped numerical codes br br External file templates br br at compile time Template content can be loaded from external files using compile time splice calls as expr br at run time There is a reload mode for reparsing external template files at every service call except for HTML hamlet templates See doc br br br Other templates br for JavaScript CoffeeScript Roy br the julius quasiquoter introduces a JavaScript template JavaScript variants CoffeeScript and Roy language have also specific quasiquoters br for CSS br br the cassius quasiquoter introduces a css template with indentation based structuring br the lucius quasiquoter introduces a css template with standard syntax plus shakespeare template style substitutions br TypeScript and JSX templates br the tsc and tscJSX quasiquoters Only on UNIX derivatives no Windows by now br text plain templates br for e mail or text plain http content type br templates lt lazy text st strict text br templates for text with a left margin delimiter lbt lazy sbt strict br br br Localizable messages br See ref br Yesod app messages are localizable i n They should be held within the messages folder in files named based on ISO as iso language msg br Message entries follow the EBNF pattern br br message constructors are formed prepending Msg to the message label identifier br the message datatype is formed appending Message to the foundation type name br br Actual i n support is missing from the stack app template The mkMessage MyApp messagesFolder isoLangDefault must be added to the Foundation hs file to get the messages instantiated br br br Navigation breadcrumbs br Navigation breadcrumbs A YesodBreadcrumbs instance must be provided for the site where the generator function breadcrumb should return for each route a title and parent one Then the query function breadcrumbs will return the present route title and the ancestors route title pairs br br br Search engine XML Sitemap br Search engines XML Sitemaps where sitemap returns an XML Sitemap as http response with the routes we want the search engines to crawl and attributes to instruct the crawler from a provided list of SitemapUrl records br br br Web feed views br Web feed views RDF Site Summary RSS Atom Handlers return RepRss RepAtom or dual RepAtomRss content to be selected on accept headers preferred content type list from a given Feed structure br br br Model br br br Using in memory mutable data in the foundation datatype br E g a visitor count See ref br br br The Database layer br persistent is the name of the database access layer with templates for generating types for entities and keys as well as schema initialization br There is first class support for PostgreSQL SQLite MongoDB CouchDB and MySQL with experimental support for Redis br The Database layout is described in a template listing the entities fields and constraints br br For every entity listed an integer key column id is generated with autoincrement and primary index attributes with a type alias appending Id to the entity name br For every entity listed a record type named as the entity is generated were record fields names are composed prefixing the entity name to the field name like personName An EntityField type PersonName is also generated for foreign key referencing from other entities br There is an automatic database schema migration mechanism for DB schema updates which to succeed requires when adding columns to existent tables to specify Default column value constraints with sql level notation br At most one cardinality has a special mechanism around the type Checkmark br Weak entities childs in life constrained owner child relationships have no special support for cascade delete triggers but there are functions to deleteCascade manually in the Database Persist Class module br automatic table creation schema update and table migration br Modifications of the entities template produces an schema update with automatic table creation and migration for the DBMS s that support ALTER TABLE SQL commands in a migrateAll procedure generated from the template content See Migrations in ref to look for migration aware DBMS br br Esqueleto is a haskell combinators layer to generate correct relational queries to persistent br Example for persistent rawSQL and Esqueleto queries br br br E mail br The following packages are part of the yesod platform br br email validate Validating an email address br mime mail Compose and send MIME email messages br br br Facebook br Useful glue functions between the fb library and Yesod br br br Development cycle br New Yesod apps are generated from the HaskellStack tool templates replacing previous command yesod init br Stack based app template names are prefixed by yesod as yesod minimal postgres sqlite mysql mongo br br Since HaskellStack uses the stackage repo by default extra packages from the hackage repo should be referred in the stack yaml extra deps section br Packages may be customized to a local subfolder They must be referred in the stack yaml packages section br br br The Yesod helper tool br The yesod helper tool br yesod devel run from the project site recompiles and restarts the project at every file tree modification br yesod add handler adds a new handler and module to the project adding an import clause for the handler in the Application module br br br Deploying with Keter A web app server monitor and reverse proxy server br See refs br br Keter is a process as a service that handles deployment and restart of Yesod web app servers and per web app database creation for PostgreSQL br The console command yesod keter packs the web app as a keter bundle for uploading to a keter folder named incoming br Keter monitors the incoming folder and unpacks the app to a temporary one then assigns the web app a port to listen to and starts it br Initially it worked with Nginx as reverse proxy keter version adding virtual server entries to its configuration and making Nginx reload it but now Keter itself provides its own reverse proxy functionality removing Nginx dependency and acting as the main web server br Old documentation Nginx based br br br Integration with JavaScript generated from functional languages br See ref br br br See also br br Snap web framework br br br br br br External links br Official website br Presentations InfoQ Haskell eXchange br Slides A C M at Johns Hopkins University ReST ful Websites with Yesod br ScreenCast Yesod at Vimeo br O Reilly ebook Developing Web Applications with Haskell and Yesod Safety Driven Web Development br Q A StackOverflow com Yesod tagged Q A br br br Blog tutorials br FPComplete com My First Web Site Playing with Routes and Links br Yesod for newbies br hamberg no handlerToIO use forkIO in Yesod handlers br br br Comparisons br HaskellWiki Haskell web frameworks br A Hopefully Fair and Useful Comparison of Haskell Web Frameworks br University of Kent Comparing Dynamic and Static Language Approaches to Web Frameworks Yesod vs Ruby on Rails br br br Other languages br Haskell Biblio Yesod in Spanish University of Cadiz br br br At Linux distributions br Yesod at Debian br Yesod at Ubuntu