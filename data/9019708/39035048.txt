title: Idris (programming language)
id: 39035048
Idris is a purely functional programming language with dependent types optional lazy evaluation and features such as a totality checker Idris may be used as a proof assistant but is designed to be a general purpose programming language similar to Haskell br The Idris type system is similar to Agda s and proofs are similar to Coq s including tactics theorem proving functions procedures via elaborator reflection Compared to Agda and Coq Idris prioritizes management of side effects and support for embedded domain specific languages Idris compiles to C relying on a custom copying garbage collector using Cheney s algorithm and JavaScript both browser and Node js based There are third party code generators for other platforms including Java virtual machine JVM Common Intermediate Language CIL and LLVM br Idris is named after a singing dragon from the s UK children s television program Ivor the Engine br br br Features br Idris combines a number of features from relatively mainstream functional programming languages with features borrowed from proof assistants br br br Functional programming br The syntax of Idris shows many similarities with that of Haskell A hello world program in Idris might look like this br br The only differences between this program and its Haskell equivalent are the single instead of double colon in the type signature of the main function and the omission of the word where in the module declaration br br br Inductive and parametric data types br Idris supports inductively defined data types and parametric polymorphism Such types can be defined both in traditional Haskell like syntax br br or in the more general generalized algebraic data type GADT like syntax br br br Dependent types br With dependent types it is possible for values to appear in the types in effect any value level computation can be performed during type checking The following defines a type of lists whose lengths are known before the program runs traditionally called vectors br br This type can be used as follows br br The function append appends a vector of m elements of type a to a vector of n elements of type a Since the precise types of the input vectors depend on a value it is possible to be certain at compile time that the resulting vector will have exactly n m elements of type a br The word total invokes the totality checker which will report an error if the function doesn t cover all possible cases or cannot be automatically proven not to enter an infinite loop br Another common example is pairwise addition of two vectors that are parameterized over their length br br Num a signifies that the type a belongs to the type class Num Note that this function still typechecks successfully as total even though there is no case matching Nil in one vector and a number in the other Because the type system can prove that the vectors have the same length we can be sure at compile time that case will not occur and there is no need to include that case in the function s definition br br br Proof assistant features br Dependent types are powerful enough to encode most properties of programs and an Idris program can prove invariants at compile time This makes Idris into a proof assistant br There are two standard ways of interacting with proof assistants by writing a series of tactic invocations Coq style or by interactively elaborating a proof term Epigram Agda style Idris supports both modes of interaction although the set of available tactics is not yet as useful as that of Coq br br br Code generation br Because Idris contains a proof assistant Idris programs can be written to pass proofs around If treated na vely such proofs remain around at runtime Idris aims to avoid this pitfall by aggressively erasing unused terms br By default Idris generates native code through C The other officially supported backend generates JavaScript br br br Idris br Idris is a new self hosted version of the language which deeply integrates a linear type system based on quantitative type theory It currently compiles to Scheme and C br br br See also br List of proof assistants br Total functional programming br br br br br br External links br Official website documentation frequently asked questions examples br Idris at the Hackage repository br Documentation for the Idris Language tutorial language reference etc 