title: Agda (programming language)
id: 4426773
Agda is a dependently typed functional programming language originally developed by Ulf Norell at Chalmers University of Technology with implementation described in his PhD thesis The original Agda system was developed at Chalmers by Catarina Coquand in The current version originally known as Agda is a full rewrite which should be considered a new language that shares a name and tradition br Agda is also a proof assistant based on the propositions as types paradigm but unlike Coq has no separate tactics language and proofs are written in a functional programming style The language has ordinary programming constructs such as data types pattern matching records let expressions and modules and a Haskell like syntax The system has Emacs Atom and VS Code interfaces but can also be run in batch mode from the command line br Agda is based on Zhaohui Luo s unified theory of dependent types UTT a type theory similar to Martin L f type theory br Agda is named after the Swedish song H nan Agda written by Cornelis Vreeswijk which is about a hen named Agda This alludes to the name of the theorem prover Coq which was named after Thierry Coquand br br br Features br br br Inductive types br The main way of defining data types in Agda is via inductive data types which are similar to algebraic data types in non dependently typed programming languages br Here is a definition of Peano numbers in Agda br br Basically it means that there are two ways to construct a value of type br br br br br N br br br br displaystyle mathbb N br br representing a natural number To begin zero is a natural number and if n is a natural number then suc n standing for the successor of n is a natural number too br Here is a definition of the less than or equal relation between two natural numbers br br The first constructor z n corresponds to the axiom that zero is less than or equal to any natural number The second constructor s s corresponds to an inference rule allowing to turn a proof of n m into a proof of suc n suc m So the value s s zero suc zero z n suc zero is a proof that one the successor of zero is less than or equal to two the successor of one The parameters provided in curly brackets may be omitted if they can be inferred br br br Dependently typed pattern matching br In core type theory induction and recursion principles are used to prove theorems about inductive types In Agda dependently typed pattern matching is used instead For example natural number addition can be defined like this br br This way of writing recursive functions inductive proofs is more natural than applying raw induction principles In Agda dependently typed pattern matching is a primitive of the language the core language lacks the induction recursion principles that pattern matching translates to br br br Metavariables br One of the distinctive features of Agda when compared with other similar systems such as Coq is heavy reliance on metavariables for program construction For example one can write functions like this in Agda br br here is a metavariable When interacting with the system in emacs mode it will show the user expected type and allow them to refine the metavariable i e to replace it with more detailed code This feature allows incremental program construction in a way similar to tactics based proof assistants such as Coq br br br Proof automation br Programming in pure type theory involves a lot of tedious and repetitive proofs Although Agda has no separate tactics language it is possible to program useful tactics within Agda itself Typically this works by writing an Agda function that optionally returns a proof of some property of interest A tactic is then constructed by running this function at type checking time for example using the following auxiliary definitions br br Given a function check even n br br br br br N br br br br displaystyle mathbb N br br Maybe Even n that inputs a number and optionally returns a proof of its evenness a tactic can then be constructed as follows br br The actual proof of each lemma will be automatically constructed at type checking time If the tactic fails type checking will fail br Additionally to write more complex tactics Agda has support for automation via reflection The reflection mechanism allows one to quote program fragments into or unquote them from the abstract syntax tree The way reflection is used is similar to the way Template Haskell works br Another mechanism for proof automation is proof search action in emacs mode It enumerates possible proof terms limited to seconds and if one of the terms fits the specification it will be put in the meta variable where the action is invoked This action accepts hints e g which theorems and from which modules can be used whether the action can use pattern matching etc br br br Termination checking br Agda is a total language i e each program in it must terminate and all possible patterns must be matched Without this feature the logic behind the language becomes inconsistent and it becomes possible to prove arbitrary statements For termination checking Agda uses the approach of the Foetus termination checker br br br Standard library br Agda has an extensive de facto standard library which includes many useful definitions and theorems about basic data structures such as natural numbers lists and vectors The library is in beta and is under active development br br br Unicode br One of the more notable features of Agda is a heavy reliance on Unicode in program source code The standard emacs mode uses shortcuts for input such as Sigma for br br br Backends br There are two compiler backends MAlonzo for Haskell and one for JavaScript br br br See also br List of proof assistants br br br br br br Further reading br Bove Ana Dybjer Peter Norell Ulf n d Brief Overview of Agda A Functional Language with Dependent Types PDF br Norell Ulf Chapman James n d Dependently Typed Programming in Agda PDF br br br External links br Official website br Introduction to Agda a five part YouTube playlist by Daniel Peebles br Brutal Meta Introduction to Dependent Types in Agda br Agda Tutorial explore programming in Agda without theoretical background br HoTTEST Summer School lectures on Homotopy Type Theory including a number of introductory lectures and exercises on Agda