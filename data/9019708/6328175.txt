title: Hume (programming language)
id: 6328175
Hume is a functionally based programming language developed at the University of St Andrews and Heriot Watt University in Scotland since the year The language name is both an acronym meaning Higher order Unified Meta Environment and an honorific to the th century philosopher David Hume It targets real time computing embedded systems aiming to produce a design that is both highly abstract and yet allows precise extraction of time and space execution costs This allows guaranteeing the bounded time and space demands of executing programs br Hume combines functional programming ideas with ideas from finite state automata Automata are used to structure communicating programs into a series of boxes where each box maps inputs to outputs in a purely functional way using high level pattern matching It is structured as a series of levels each of which exposes different machine properties br br br Design model br The Hume language design attempts to maintain the essential properties and features required by the embedded systems domain especially for transparent time and space costing whilst incorporating as high a level of program abstraction as possible It aims to target applications ranging from simple microcontrollers to complex real time systems such as smartphones This ambitious goal requires incorporating both low level notions such as interrupt handling and high level ones of data structure abstraction etc Such systems are programmed in widely differing ways but the language design should accommodate such varying requirements br Hume is a three layer language an outer static declaration metaprogramming layer an intermediate coordination layer describing a static layout of dynamic processes and the associated devices and an inner layer describing each process as a dynamic mapping from patterns to expressions The inner layer is stateless and purely functional br Rather than attempting to apply cost modeling and correctness proving technology to an existing language framework either directly or by altering a more general language as with e g RTSJ the approach taken by the Hume designers is to design Hume in such a way that formal models and proofs can definitely be constructed Hume is structured as a series of overlapping language levels where each level adds expressibility to the expression semantics but either loses some desirable property or increases the technical difficulty of providing formal correctness cost models br br br Characteristics br The interpreter and compiler versions differ a bit br br the interpreter concept prover admits timeout and custom exceptions br the compiler admits heap and stack cost bounding but exceptions only print the exception name br The coordination system wires boxes in a dataflow programming style br The expression language is Haskell like br The message passing concurrency system remembers JoCaml s join patterns or Polyphonic C Sharp chords but with all channels asynchronous br There is a scheduler built in that continuously checks pattern matching through all boxes in turn putting on hold the boxes that cannot copy outputs to busy input destinations br br br Examples br br br Vending machine br br br br br br Further reading br Patai Gergely Hanak Peter Embedded Functional Programming in Hume PDF Archived from the original PDF on December br br br External links br The Hume Programming Language web site br The Hume Project at Heriot Watt University br EmBounded project certifies resource bounded code in Hume br Hume and Multicore