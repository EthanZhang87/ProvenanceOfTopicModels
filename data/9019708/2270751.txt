title: Darcs
id: 2270751
Darcs is a distributed version control system created by David Roundy Key features include the ability to choose which changes to accept from other repositories interaction with either other local on disk repositories or remote repositories via SSH HTTP or email and an unusually interactive interface The developers also emphasize the use of advanced software tools for verifying correctness the expressive type system of the functional programming language Haskell enforces some properties and randomized testing via QuickCheck verifies many others The name is a recursive acronym for Darcs Advanced Revision Control System br br br Model br Darcs treats patches as first class citizens For the user a repository can be seen as a set of patches where each patch is not necessarily ordered with respect to other patches i e the set of patches is only a partially ordered set In many cases patches can be independently transmitted between various repositories br Many branching merging and cherry picking operations that would require additional commands with snapshot based systems like Git or Mercurial can be directly done with Darcs with the usual pull and push commands In terms of user interface this means that Darcs has fewer commands These commands are more interactive one can choose more precisely which patches they want to exchange with remote repositories br The patches of a repository are linearly ordered Darcs automatically calculates whether patches can be reordered an operation called commutation and how to do it These calculations implement a so called patch theory br A Darcs patch can contain changes of the following kinds br br line changes br file and directory creation and deletion br file and directory moving br word substitution typically used in code refactoring for instance rename all occurrences of foo to bar in a given file br The notion of dependency between patches is defined syntactically Intuitively a patch B depends on another patch A if A provides the content that B modifies This means that patches that modify different parts of the code are considered by default independent To address cases when this is not desirable Darcs enables the user to specify explicit dependencies between patches br Since version Darcs uses patience diff by default br br br History br Darcs evolved out of David Roundy s efforts to design a new patch format for GNU arch in June These discussions didn t lead to any code being committed to Arch but did lead to the conception of the theory of patches After writing an initial version of Darcs in C the Haskell version was written in Autumn and released to the public in April Darcs was released in April and introduced a more robust repository format as well as a new patch semantic called darcs aimed at minimizing exponential merge conflicts The current development strategy focuses on implementing optimizations and adding new features while maintaining the same repository format br br br Shortcomings br Darcs has been criticized for its performance issues This includes challenges related to the merge algorithms of Darcs x which showed exponential work to merge certain conflicts Although not resolved completely in the subsequent versions of Darcs the frequency of exponential merges did show noticeable reductions br Bugs still remain in which merging of recursive conflicts fails br br br See also br br Comparison of version control software br br br br br br External links br br Official website br Homotopical patch theory