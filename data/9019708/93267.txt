title: Miranda (programming language)
id: 93267
Miranda is a lazy purely functional programming language designed by David Turner as a successor to his earlier programming languages SASL and KRC using some concepts from ML and Hope It was produced by Research Software Ltd of England which holds a trademark on the name Miranda and was the first purely functional language to be commercially supported br Miranda was first released in as a fast interpreter in C for Unix flavour operating systems with subsequent releases in and It had a strong influence on the later Haskell language Turner stated that the benefits of Miranda over Haskell are Smaller language simpler type system simpler arithmetic br In a version of Miranda was released as open source under a BSD licence The code has been updated to conform to modern C standards C C and to generate bit binaries This has been tested on operating systems including Debian Ubuntu WSL Ubuntu and macOS Catalina br br br Name br br The name Miranda is taken from the gerundive form of the latin verb miror meaning to be admired br The logo features a rendition by John William Waterhouse of the character Miranda from Shakespeare s The Tempest br br br Overview br Miranda is a lazy purely functional programming language That is it lacks side effects and imperative programming features A Miranda program called a script is a set of equations that define various mathematical functions and algebraic data types The word set is important here the order of the equations is in general irrelevant and there is no need to define an entity prior to its use br Since the parsing algorithm makes intelligent use of layout indentation via off side rule bracketing statements are rarely needed and statement terminators are unneeded This feature inspired by ISWIM is also used in occam and Haskell and was later popularized by Python br Commentary is introduced into regular scripts by the characters and continue to the end of the same line An alternative commenting convention affects an entire source code file known as a literate script in which every line is considered a comment unless it starts with a sign br Miranda s basic data types are char num and bool A character string is simply a list of char while num is silently converted between two underlying forms arbitrary precision integers a k a bignums by default and regular floating point values as required br Tuples are sequences of elements of potentially mixed types analogous to records in Pascal like languages and are written delimited with parentheses br br The list instead is the most commonly used data structure in Miranda It is written delimited by square brackets and with comma separated elements all of which must be of the same type br br List concatenation is subtraction is construction is sizing is and indexing is so br br There are several list building shortcuts is used for lists whose elements form an arithmetic series with the possibility for specifying an increment other than br br More general and powerful list building facilities are provided by list comprehensions previously known as ZF expressions which come in two main forms an expression applied to a series of terms e g br br which is read list of n squared where n is taken from the list of all positive integers and a series where each term is a function of the previous one e g br br As these two examples imply Miranda allows for lists with an infinite number of elements of which the simplest is the list of all positive integers br The notation for function application is simply juxtaposition as in sin x br In Miranda as in most other purely functional languages functions are first class citizens which is to say that they can be passed as arguments to other functions returned as results or included as elements of data structures What is more a function with two or more parameters may be partially parameterised or curried by supplying fewer arguments than the full number of parameters This gives another function which given the remaining parameters will return a result For example br br is a roundabout way of creating a function increment which adds one to its argument In reality add takes the two parameter function add applies it to obtaining a single parameter function that adds four to its argument then applies that to br Any function with two parameters operands can be turned into an infix operator for example given the definition of the add function above the term add is in every way equivalent to the operator and every infix operator taking two parameters can be turned into a corresponding function br Thus br br is the briefest way to create a function that adds one to its argument Similarly in br br two single parameter functions are generated The interpreter understands in each case which of the divide operator s two parameters is being supplied giving functions which respectively divide a number by two and return its reciprocal br Although Miranda is a strongly typed programming language it does not insist on explicit type declarations If a function s type is not explicitly declared the interpreter infers it from the type of its parameters and how they are used within the function In addition to the basic types char num bool it includes an anything type where the type of a parameter does not matter as in the list reversing function br br which can be applied to a list of any data type for which the explicit function type declaration would be br br Finally it has mechanisms for creating and managing program modules whose internal functions are invisible to programs calling those modules br br br Sample code br The following Miranda script determines the set of all subsets of a set of numbers br br and this is a literate script for a function primes br which gives the list of all prime numbers br br Here we have some more examples br br br br br br External links br Official website