title: Haskell
id: 27404990
Haskell is a general purpose statically typed purely functional programming language with type inference and lazy evaluation Designed for teaching research and industrial applications Haskell has pioneered a number of programming language features such as type classes which enable type safe operator overloading and monadic input output IO It is named after logician Haskell Curry Haskell s main implementation is the Glasgow Haskell Compiler GHC br Haskell s semantics are historically based on those of the Miranda programming language which served to focus the efforts of the initial Haskell working group The last formal specification of the language was made in July while the development of GHC continues to expand Haskell via language extensions br Haskell is used in academia and industry As of May Haskell was the th most popular programming language by Google searches for tutorials and made up less than of active users on the GitHub source code repository br br br History br After the release of Miranda by Research Software Ltd in interest in lazy functional languages grew By more than a dozen non strict purely functional programming languages existed Miranda was the most widely used but it was proprietary software At the conference on Functional Programming Languages and Computer Architecture FPCA in Portland Oregon there was a strong consensus that a committee be formed to define an open standard for such languages The committee s purpose was to consolidate existing functional languages into a common one to serve as a basis for future research in functional language design br br br Haskell to br Haskell was developed by a committee attempting to bring together off the shelf solutions where possible br Type classes which enable type safe operator overloading were first proposed by Philip Wadler and Stephen Blott to address the ad hoc handling of equality types and arithmetic overloading in languages at the time br In early versions of Haskell up until and including version user interaction and IO input and output were handled by both streams based and continuation based mechanisms which were widely considered unsatisfactory In version monadic IO was introduced along with the generalisation of type classes to higher kinds type constructors Along with do notation which provides syntactic sugar for the Monad type class this gave Haskell an effect system that maintained referential transparency and was convenient br Other notable changes in early versions were the approach to the seq function which creates a data dependency between values and is used in lazy languages to avoid excessive memory consumption with it moving from a type class to a standard function to make refactoring more practical br The first version of Haskell Haskell was defined in The committee s efforts resulted in a series of language definitions br br br Haskell br In late the series culminated in Haskell intended to specify a stable minimal portable version of the language and an accompanying standard library for teaching and as a base for future extensions The committee expressly welcomed creating extensions and variants of Haskell via adding and incorporating experimental features br In February the Haskell language standard was originally published as The Haskell Report In January a revised version was published as Haskell Language and Libraries The Revised Report The language continues to evolve rapidly with the Glasgow Haskell Compiler GHC implementation representing the current de facto standard br br br Haskell br In early the process of defining a successor to the Haskell standard informally named Haskell Prime began This was intended to be an ongoing incremental process to revise the language definition producing a new revision up to once per year The first revision named Haskell was announced in November and published in July br Haskell is an incremental update to the language mostly incorporating several well used and uncontroversial features previously enabled via compiler specific flags br br Hierarchical module names Module names are allowed to consist of dot separated sequences of capitalized identifiers rather than only one such identifier This lets modules be named in a hierarchical manner e g Data List instead of List although technically modules are still in a single monolithic namespace This extension was specified in an addendum to Haskell and was in practice universally used br The foreign function interface FFI allows bindings to other programming languages Only bindings to C are specified in the Report but the design allows for other language bindings To support this data type declarations were permitted to contain no constructors enabling robust nonce types for foreign data that could not be constructed in Haskell This extension was also previously specified in an Addendum to the Haskell Report and widely used br So called n k patterns definitions of the form fact n n fact n were no longer allowed This syntactic sugar had misleading semantics in which the code looked like it used the operator but in fact desugared to code using and br The rules of type inference were relaxed to allow more programs to type check br Some syntax issues changes in the formal grammar were fixed pattern guards were added allowing pattern matching within guards resolution of operator fixity was specified in a simpler way that reflected actual practice an edge case in the interaction of the language s lexical syntax of operators and comments was addressed and the interaction of do notation and if then else was tweaked to eliminate unexpected syntax errors br The LANGUAGE pragma was specified By dozens of extensions to the language were in wide use and GHC among other compilers provided the LANGUAGE pragma to specify individual extensions with a list of identifiers Haskell compilers are required to support the Haskell extension and are encouraged to support several others which correspond to extensions added in Haskell br br br Future standards br The next formal specification had been planned for On October with GHC version the GHC extension was released While this is not a formal language spec it combines a number of stable widely used GHC extensions to Haskell br br br Features br br Haskell features lazy evaluation lambda expressions pattern matching list comprehension type classes and type polymorphism It is a purely functional language which means that functions generally have no side effects A distinct construct exists to represent side effects orthogonal to the type of functions A pure function can return a side effect that is subsequently executed modeling the impure functions of other languages br Haskell has a strong static type system based on Hindley Milner type inference Its principal innovation in this area is type classes originally conceived as a principled way to add overloading to the language but since finding many more uses br The construct that represents side effects is an example of a monad a general framework which can model various computations such as error handling nondeterminism parsing and software transactional memory They are defined as ordinary datatypes but Haskell provides some syntactic sugar for their use br Haskell has an open published specification and multiple implementations exist Its main implementation the Glasgow Haskell Compiler GHC is both an interpreter and native code compiler that runs on most platforms GHC is noted for its rich type system incorporating recent innovations such as generalized algebraic data types and type families The Computer Language Benchmarks Game also highlights its high performance implementation of concurrency and parallelism br An active growing community exists around the language and more than third party open source libraries and tools are available in the online package repository Hackage br br br Code examples br br A Hello World program in Haskell only the last line is strictly necessary br br The factorial function in Haskell defined in a few different ways the first line is the type annotation which is optional and is the same for each implementation br br Using Haskell s Fixed point combinator allows this function to be written without any explicit recursion br br As the Integer type has arbitrary precision this code will compute values such as factorial a digit number with no loss of precision br An implementation of an algorithm similar to quick sort over lists where the first element is taken as the pivot br br br Implementations br All listed implementations are distributed under open source licenses br Implementations that fully or nearly comply with the Haskell standard include br br The Glasgow Haskell Compiler GHC compiles to native code on many different processor architectures and to ANSI C via one of two intermediate languages C or in more recent versions LLVM formerly Low Level Virtual Machine bitcode GHC has become the de facto standard Haskell dialect There are libraries e g bindings to OpenGL that work only with GHC GHC was also distributed with the Haskell platform br Jhc a Haskell compiler written by John Meacham emphasizes speed and efficiency of generated programs and exploring new program transformations br Ajhc is a fork of Jhc br The Utrecht Haskell Compiler UHC is a Haskell implementation from Utrecht University It supports almost all Haskell features plus many experimental extensions It is implemented using attribute grammars and is primarily used for research on generated type systems and language extensions br Implementations no longer actively maintained include br br The Haskell User s Gofer System Hugs is a bytecode interpreter It was once one of the implementations used most widely alongside the GHC compiler but has now been mostly replaced by GHCi It also comes with a graphics library br HBC is an early implementation supporting Haskell It was implemented by Lennart Augustsson in and based on Lazy ML It has not been actively developed for some time br nhc is a bytecode compiler focusing on minimizing memory use br The York Haskell Compiler Yhc was a fork of nhc with the goals of being simpler more portable and efficient and integrating support for Hat the Haskell tracer It also had a JavaScript backend allowing users to run Haskell programs in web browsers br Implementations not fully Haskell compliant and using a variant Haskell language include br br Eta and Frege are dialects of Haskell targeting the Java virtual machine br Gofer is an educational dialect of Haskell with a feature called constructor classes developed by Mark Jones It is supplanted by Haskell User s Gofer System Hugs br Helium a newer dialect of Haskell The focus is on making learning easier via clearer error messages by disabling type classes as a default br br br Notable applications br The proof assistant Agda is written in Haskell br Cabal is a tool for building and packaging Haskell libraries and programs br Darcs is a revision control system written in Haskell with several innovative features such as more precise control of patches to apply br GHC is also often a testbed for advanced functional programming features and optimizations in other programming languages br Git annex is a tool to manage big data files under Git version control It also provides a distributed file synchronization system git annex assistant br Linspire Linux chose Haskell for system tools development br Pandoc is a tool to convert one markup format into another br Pugs is a compiler and interpreter for the Raku programming language formerly Perl br TidalCycles is a domain special language for live coding musical patterns embedded in Haskell br Xmonad is a window manager for the X Window System written fully in Haskell br GarganText is a collaborative tool to map through semantic analysis texts on any web browser written fully in Haskell and PureScript which is used for instance in the research community to draw up state of the art reports and roadmaps br br br Industry br Bluespec SystemVerilog BSV is a language for semiconductor design that is an extension of Haskell Also Bluespec Inc s tools are implemented in Haskell Note this is an example of a domain specific language embedded into Haskell br Cryptol a language and toolchain for developing and verifying cryptography algorithms is implemented in Haskell br Facebook implements its anti spam programs in Haskell maintaining the underlying data access library as open source software br The Cardano blockchain platform is implemented in Haskell br GitHub implemented Semantic an open source library for analysis diffing and interpretation of untrusted source code in Haskell br Standard Chartered s financial modelling language Mu is syntactic Haskell running on a strict runtime br seL the first formally verified microkernel used Haskell as a prototyping language for the OS developer p At the same time the Haskell code defined an executable specification with which to reason for automatic translation by the theorem proving tool p The Haskell code thus served as an intermediate prototype before final C refinement p br Target stores supply chain optimization software is written in Haskell br Co Star br br br Web br Notable web frameworks written for Haskell include br br IHP br Servant br Snap br Yesod br br br Criticism br Jan Willem Maessen in and Simon Peyton Jones in discussed problems associated with lazy evaluation while also acknowledging the theoretical motives for it In addition to purely practical considerations such as improved performance they note that lazy evaluation makes it more difficult for programmers to reason about the performance of their code particularly its space use br Bastiaan Heeren Daan Leijen and Arjan van IJzendoorn in also observed some stumbling blocks for Haskell learners The subtle syntax and sophisticated type system of Haskell are a double edged sword highly appreciated by experienced programmers but also a source of frustration among beginners since the generality of Haskell often leads to cryptic error messages To address the error messages researchers from Utrecht University developed an advanced interpreter called Helium which improved the user friendliness of error messages by limiting the generality of some Haskell features In particular it disables type classes by default br Ben Lippmeier designed Disciple as a strict by default lazy by explicit annotation dialect of Haskell with a type and effect system to address Haskell s difficulties in reasoning about lazy evaluation and in using traditional data structures such as mutable arrays He argues p that destructive update furnishes the programmer with two important and powerful tools a set of efficient array like data structures for managing collections of objects and the ability to broadcast a new value to all parts of a program with minimal burden on the programmer br Robert Harper one of the authors of Standard ML has given his reasons for not using Haskell to teach introductory programming Among these are the difficulty of reasoning about resource use with non strict evaluation that lazy evaluation complicates the definition of datatypes and inductive reasoning and the inferiority of Haskell s old class system compared to ML s module system br Haskell s build tool Cabal has historically been criticized for poorly handling multiple versions of the same library a problem known as Cabal hell The Stackage server and Stack build tool were made in response to these criticisms Cabal itself now has a much more sophisticated build system heavily inspired by Nix which became the default with version br br br Related languages br Clean is a close slightly older relative of Haskell Its biggest deviation from Haskell is in the use of uniqueness types instead of monads for I O and side effects br A series of languages inspired by Haskell but with different type systems have been developed including br br Agda a functional language with dependent types br Cayenne with dependent types br Elm a functional language to create web front end apps no support for user defined or higher kinded type classes or instances br Epigram a functional language with dependent types suitable for proving properties of programs br Idris a general purpose functional language with dependent types developed at the University of St Andrews br PureScript transpiles to JavaScript br mega a strict language that allows introduction of new kinds and programming at the type level br Other related languages include br br Curry a functional logic programming language based on Haskell br Notable Haskell variants include br br Generic Haskell a version of Haskell with type system support for generic programming br Hume a strict functional language for embedded systems based on processes as stateless automata over a sort of tuples of one element mailbox channels where the state is kept by feedback into the mailboxes and a mapping description from outputs to channels as box wiring with a Haskell like expression language and syntax br br br Conferences and workshops br The Haskell community meets regularly for research and development activities The main events are br br International Conference on Functional Programming ICFP br Haskell Symposium formerly the Haskell Workshop br Haskell Implementors Workshop br Commercial Users of Functional Programming CUFP br ZuriHac kind of Hackathon held every year in Zurich br Starting in a series of organized hackathons has occurred the Hac series aimed at improving the programming language tools and libraries br br br br br br Bibliography br Reports br Peyton Jones Simon ed Haskell Language and Libraries The Revised Report Cambridge University Press ISBN br Marlow Simon ed Haskell Language Report PDF Haskell org br Textbooks br Davie Antony An Introduction to Functional Programming Systems Using Haskell Cambridge University Press ISBN br Bird Richard Introduction to Functional Programming using Haskell nd ed Prentice Hall Press ISBN br Hudak Paul The Haskell School of Expression Learning Functional Programming through Multimedia New York Cambridge University Press ISBN br Hutton Graham Programming in Haskell Cambridge University Press ISBN br O Sullivan Bryan Stewart Don Goerzen John Real World Haskell Sebastopol O Reilly ISBN Real World Haskell full text br Thompson Simon Haskell The Craft of Functional Programming rd ed Addison Wesley ISBN br Lipova a Miran April Learn You a Haskell for Great Good San Francisco No Starch Press ISBN full text br Bird Richard Thinking Functionally with Haskell Cambridge University Press ISBN br Bird Richard Gibbons Jeremy July Algorithm Design with Haskell Cambridge University Press ISBN br Tutorials br Hudak Paul Peterson John Fasel Joseph June A Gentle Introduction To Haskell Version Haskell org br Learn You a Haskell for Great Good A community version learnyouahaskell github io An up to date community maintained version of the renowned Learn You a Haskell LYAH guide br Daum Hal III Yet Another Haskell Tutorial PDF cite journal Cite journal requires journal help Assumes far less prior knowledge than official tutorial br Yorgey Brent March The Typeclassopedia PDF The Monad Reader br Maguire Sandy Thinking with Types Type Level Programming in Haskell br History br Hudak Paul Hughes John Peyton Jones Simon Wadler Philip A history of Haskell PDF Proceedings of the third ACM SIGPLAN conference on History of programming languages pp doi ISBN S CID br Hamilton Naomi September The A Z of Programming Languages Haskell Computerworld br br br External links br br Official website