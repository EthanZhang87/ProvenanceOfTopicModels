title: Pugs (compiler)
id: 1532361
Pugs is a compiler and interpreter for the Raku programming language started on February by Audrey Tang At the time Raku was known as Perl br Pugs development is now placed on hiatus with most Raku implementation efforts now taking place on Rakudo br br br Overview br The Pugs project aimed to bootstrap Perl by implementing the full Perl specification as detailed in the Synopses It is written in Haskell specifically targeting the Glasgow Haskell Compiler br Pugs includes two main executables br br Pugs is the interpreter with an interactive shell br Pugscc can compile Perl programs into Haskell code Perl JavaScript or Parrot virtual machine s PIR assembly br Pugs is free software distributable under the terms of either the GNU General Public License or the Artistic License These are the same terms as Perl br br br Version numbering br The major minor version numbers of Pugs converges to being reminiscent of TeX and METAFONT which use a similar scheme each significant digit in the minor version represents a successfully completed milestone The third digit is incremented for each release The current milestones are br br Initial release br Basic IO and control flow elements mutable variables assignment br Classes and traits br Rules and Grammars br Type system and linking br Macros br Port Pugs to Perl if needed br br br Perl compatibility br As of version Pugs also has the ability to embed Perl and use CPAN modules installed on the system The example below demonstrates the use of the popular Perl DBI module to manage a database br br br Development model br Several factors have been suggested as reasons for Pugs s progress br br Haskell s static typing can make it easier for program bugs to be detected at compile time Haskell code is also often thought to be concise The Parsec library a monadic combinatorial parser written entirely in Haskell simplifies parsing Because Haskell is a purely functional language making the functional code interact with the real world inputs outputs and time driven environment requires thought To achieve this Pugs makes extensive use of monads br Pugs s use of test driven methodology a tenet of Extreme Programming This methodology dictates that every module should have test code even before the modules are implemented Advocates of this methodology argue that it improves software quality However the project often silenced failed regression tests before releases removing much of the benefit of test driven development br Tang s liberal granting of the commit bit Pugs development is currently based around a Subversion repository and access is freely given especially to people wishing to write tests Because of this a huge library of tests has accumulated Other Perl implementations rely on many tests developed for Pugs as an executable specification for Perl br Tang s communication style her journal linked below attracted many people to the project br Despite these factors progress on the Haskell implementation stalled in late as personal issues kept Audrey from devoting as much time to the project as she had in br Many Pugs contributors have since moved on to implement Perl inspired systems as CPAN modules on Perl such as the Moose project br br br br br br External links br Official website br pugscode org Pugs homepage br Pugs Journal br Ofun Optimizing for Fun Archived at the Wayback Machine br Perl Pugs on CPAN br Kudos from Perl Design Team