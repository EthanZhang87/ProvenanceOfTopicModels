title: Software design
id: 223325
Software design is the process of conceptualizing how a software system will work before it is implemented or modified br br Software design also refers to the direct result of the design process the concepts of how the software will work which consists of both design documentation and undocumented concepts br Software design usually is directed by goals for the resulting system and involves problem solving and planning including both br high level software architecture and low level component and algorithm design br In terms of the waterfall development process software design is the activity of following requirements specification and before coding br br br General process br The design process enables a designer to model various aspects of a software system before it exists br Creativity past experience a sense of what makes good software and a commitment to quality are success factors for a competent design However the design process is not always a straightforward procedure br The software design model can be compared to an architected plan for a house High level plans represent the totality of the house e g a three dimensional rendering of the house Lower level plans provide guidance for constructing each detail e g the plumbing lay Similarly the software design model provides a variety of views of the proposed software solution br br br Value br Software design documentation may be reviewed or presented to allow constraints specifications and even requirements to be adjusted prior to coding Redesign may occur after a review of a programmed simulation or prototype It is possible to design software in the process of coding without a plan or requirement analysis but for more complex projects this is less feasible A separate design prior to coding allows for multidisciplinary designers and subject matter experts SMEs to collaborate with programmers in order to produce software that is useful and technically sound br br br Requirements analysis br One component of software design is software requirements analysis SRA SRA is a part of the software development process that lists specifications used in software engineering br The output of the analysis is smaller problems to solve br In contrast the design focuses on capabilities and thus multiple designs for the same problem can exist Depending on the environment the design often varies whether it is created from reliable frameworks or implemented with suitable design patterns br br br Artifacts br A design process may include the production of artifacts such as flow chart use case Pseudocode Unified Modeling Language model and other Fundamental modeling concepts For user centered software design may involve user experience design yielding a storyboard to help determine those specifications br Sometimes the output of a design process is br design documentation br br br Design principles br Basic design principles enable a software engineer to navigate the design process Davis suggests a set of principles for software design which have been adapted and extended in the following list br br The design process should not suffer from tunnel vision A good designer should consider alternative approaches judging each based on the requirements of the problem the resources available to do the job br The design should be traceable to the analysis model Because a single element of the design model can often be traced back to multiple requirements it is necessary to have a means for tracking how requirements have been satisfied by the design model br The design should not reinvent the wheel Systems are constructed using a set of design patterns many of which have likely been encountered before These patterns should always be chosen as an alternative to reinvention Time is short and resources are limited design time should be invested in representing truly new ideas by integrating patterns that already exist when applicable br The design should minimize the intellectual distance between the software and the problem as it exists in the real world That is the structure of the software design should whenever possible mimic the structure of the problem domain br The design should exhibit uniformity and integration A design is uniform if it appears fully coherent In order to achieve this outcome rules of style and format should be defined for a design team before design work begins A design is integrated if care is taken in defining interfaces between design components br The design should be structured to accommodate change The design concepts discussed in the next section enable a design to achieve this principle br The design should be structured to degrade gently even when aberrant data events or operating conditions are encountered Well designed software should never bomb it should be designed to accommodate unusual circumstances and if it must terminate processing it should do so in a graceful manner br Design is not coding coding is not design Even when detailed procedural designs are created for program components the level of abstraction of the design model is higher than the source code The only design decisions made at the coding level should address the small implementation details that enable the procedural design to be coded br The design should be assessed for quality as it is being created not after the fact A variety of design concepts and design measures are available to assist the designer in assessing quality throughout the development process br The design should be reviewed to minimize conceptual semantic errors There is sometimes a tendency to focus on minutiae when the design is reviewed missing the forest for the trees A design team should ensure that major conceptual elements of the design omissions ambiguity inconsistency have been addressed before worrying about the syntax of the design model br br br Design concepts br Design concepts provide a designer with a foundation from which more sophisticated methods can be applied A set of design concepts has evolved including br br Abstraction Abstraction is the process or result of generalization by reducing the information content of a concept or an observable phenomenon typically to retain only information that is relevant for a particular purpose It is an act of Representing essential features without including the background details or explanations br Refinement It is the process of elaboration A hierarchy is developed by decomposing a macroscopic statement of function in a step wise fashion until programming language statements are reached In each step one or several instructions of a given program are decomposed into more detailed instructions Abstraction and Refinement are complementary concepts br Modularity Software architecture is divided into components called modules br Software Architecture It refers to the overall structure of the software and the ways in which that structure provides conceptual integrity for a system Good software architecture will yield a good return on investment with respect to the desired outcome of the project e g in terms of performance quality schedule and cost br Control Hierarchy A program structure that represents the organization of a program component and implies a hierarchy of control br Structural Partitioning The program structure can be divided horizontally and vertically Horizontal partitions define separate branches of modular hierarchy for each major program function Vertical partitioning suggests that control and work should be distributed top down in the program structure br Data Structure It is a representation of the logical relationship among individual elements of data br Software Procedure It focuses on the processing of each module individually br Information Hiding Modules should be specified and designed so that information contained within a module is inaccessible to other modules that have no need for such information br In his object model Grady Booch mentions Abstraction Encapsulation Modularisation and Hierarchy as fundamental software design principles The acronym PHAME Principles of Hierarchy Abstraction Modularisation and Encapsulation is sometimes used to refer to these four fundamental principles br br br Design considerations br There are many aspects to consider in the design of a piece of software The importance of each consideration should reflect the goals and expectations that the software is being created to meet Some of these aspects are br br Compatibility The software is able to operate with other products that are designed for interoperability with another product For example a piece of software may be backward compatible with an older version of itself br Extensibility New capabilities can be added to the software without major changes to the underlying architecture br Modularity the resulting software comprises well defined independent components which leads to better maintainability The components could be then implemented and tested in isolation before being integrated to form a desired software system This allows division of work in a software development project br Fault tolerance The software is resistant to and able to recover from component failure br Maintainability A measure of how easily bug fixes or functional modifications can be accomplished High maintainability can be the product of modularity and extensibility br Reliability Software durability The software is able to perform a required function under stated conditions for a specified period of time br Reusability The ability to use some or all of the aspects of the preexisting software in other projects with little to no modification br Robustness The software is able to operate under stress or tolerate unpredictable or invalid input For example it can be designed with resilience to low memory conditions br Security The software is able to withstand and resist hostile acts and influences br Usability The software user interface must be usable for its target user audience Default values for the parameters must be chosen so that they are a good choice for the majority of the users br Performance The software performs its tasks within a time frame that is acceptable for the user and does not require too much memory br Portability The software should be usable across a number of different conditions and environments br Scalability The software adapts well to increasing data or added features or number of users br br br Modeling language br A modeling language can be used to express information knowledge or systems in a structure that is defined by a consistent set of rules These rules are used for interpretation of the components within the structure A modeling language can be graphical or textual Examples of graphical modeling languages for software design include br br Architecture description language ADL is a language used to describe and represent the software architecture of a software system br Business Process Modeling Notation BPMN is an example of a Process Modeling language br EXPRESS and EXPRESS G ISO is an international standard general purpose data modeling language br Extended Enterprise Modeling Language EEML is commonly used for business process modeling across a number of layers br Flowcharts are schematic representations of algorithms or other step wise processes br Fundamental Modeling Concepts FMC is modeling language for software intensive systems br IDEF is a family of modeling languages the most notable of which include IDEF for functional modeling IDEF X for information modeling and IDEF for modeling ontologies br Jackson Structured Programming JSP is a method for structured programming based on correspondences between data stream structure and program structure br LePUS is an object oriented visual Design Description Language and a formal specification language that is suitable primarily for modeling large object oriented Java C C programs and design patterns br Unified Modeling Language UML is a general modeling language to describe software both structurally and behaviorally It has a graphical notation and allows for extension with a Profile UML br Alloy specification language is a general purpose specification language for expressing complex structural constraints and behavior in a software system It provides a concise language base on first order relational logic br Systems Modeling Language SysML is a new general purpose modeling language for systems engineering br Service oriented modeling framework SOMF br br br Design patterns br A software designer may identify a design aspect which has been visited and perhaps even solved by others in the past A template or pattern describing a solution to a common problem is known as a design pattern The reuse of such patterns can increase software development velocity br br br Code as design br The difficulty of using the term design in relation to software is that in some senses the source code of a program is the design for the program that it produces To the extent that this is true software design refers to the design of the design Edsger W Dijkstra referred to this layering of semantic levels as the radical novelty of computer programming and Donald Knuth used his experience writing TeX to describe the futility of attempting to design a program prior to implementing it br br TEX would have been a complete failure if I had merely specified it and not participated fully in its initial implementation The process of implementation constantly led me to unanticipated questions and to new insights about how the original specifications could be improved br br br See also br br Aspect oriented software development br Design br Design rationale br Graphic design br Interaction design br Icon design br Outline of software br Outline of software development br Outline of software engineering br Search based software engineering br Software Design Description IEEE br Software development br User experience br User interface design br Web design br Zero One Infinity br br br br br Roger S Pressman Software engineering a practitioner s approach McGraw Hill ISBN 