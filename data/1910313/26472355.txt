title: Responsibility-driven design
id: 26472355
Responsibility driven design is a design technique in object oriented programming which improves encapsulation by using the client server model It focuses on the contract by considering the actions that the object is responsible for and the information that the object shares It was proposed by Rebecca Wirfs Brock and Brian Wilkerson br Responsibility driven design is in direct contrast with data driven design which promotes defining the behavior of a class along with the data that it holds Data driven design is not the same as data driven programming which is concerned with using data to determine the control flow not class design br In the client server model they refer to both the client and the server are classes or instances of classes At any particular time either the client or the server represents an object Both the parties commit to a contract and exchange information by adhering to it The client can only make the requests specified in the contract and the server must answer these requests Thus responsibility driven design tries to avoid dealing with details such as the way in which requests are carried out by instead only specifying the intent of a certain request The benefit is increased encapsulation since the specification of the exact way in which a request is carried out is private to the server br To further the encapsulation of the server Wirfs Brock and Wilkerson call for language features that limit outside influence to the behavior of a class They demand that the visibility of members and functions should be finely grained such as in Eiffel programming language Even finer control of the visibility of even classes is available in the Newspeak programming language br br br Overview br Responsibility driven design focuses on the objects as behavioral abstractions which are characterized by their responsibilities The CRC card modelling technique is used to generate these behavioral abstractions The rest of the object structure including data attributes are assigned later as and when required This makes the design follow type hierarchy for inheritance which improves encapsulation and makes it easier to identify abstract classes It can also group the classes together based on their clients which is considered a unique ability br A good object oriented design involves an early focus on behaviors to realize the capabilities meeting the stated requirements and a late binding of implementation details to the requirements This approach especially helps to decentralize control and distribute system behavior which can help manage the complexities of high functionality large or distributed systems Similarly it can help to design and maintain explanation facilities for cognitive models intelligent agents and other knowledge based systems br br br Building blocks br In their book Object Design Roles Responsibilities and Collaborations the authors describe the following building blocks that make up responsibility driven design br br Application A software application is referred to as a set of interacting objects br Candidates Candidates or candidate objects are key concepts in the form of objects described on CRC cards They serve as initial inventions in the process of object design br Collaborations A collaboration is defined as an interaction of objects or roles or both br CRC Cards CRC stands for Candidates Responsibilities Collaborators They are index cards used in early design for recording candidates These cards are split up into an unlined and a lined side br Content of lined side On this side the candidate s name its responsibilities and its collaborators are recorded br Content of unlined side On this side the candidate s name its purpose in the application stereotype roles and anything worthwhile such as the names of roles in patterns it participates in are recorded br Hot Spots Hot Spots are points in the application where variations occur They are recorded using Hot Spot Cards br Hot Spot Cards Hot Spot Cards are used for recording variations with just enough detail so you can discriminate important difference Similar to CRC cards these are also created from index cards These cards consist of br Hot Spot Name br General description of the variation br At least two specific examples where the variation occurs br br br Objects br Objects are described as things that have machine like behaviors that can be plugged together to work in concert These objects play well defined roles and encapsulate scripted responses and information br br Object Neighborhoods Another term for subsystem It is a logical grouping of collaborators br Responsibilities A responsibility is an obligation to perform a task or know information These are further categorized according to their usage scenario br Public Responsibilities Public responsibilities are the responsibilities an object offers as services to others and the information it provides to others br Private Responsibilities Private responsibilities are the actions an object takes in support of public responsibilities br Subresponsibilities Sometimes a large or complicated responsibility is split up into smaller ones called subresponsibilities They are further categorized based on what they do br Subordinate Responsibilities These include the major steps in each subresponsibility br Sequencing Responsibilities These refer to the sequencing of the execution of subordinate responsibilities br br br Roles br Object role refers to an exterior view of what general service is offered by the object It is a set of related responsibilities It can be implemented as a class or an interface Interface however is the preferred implementation as it increases flexibility by hiding the concrete class which ultimately does the work br Role Stereotypes Role stereotypes are simplified roles that come with predefined responsibilities There are several categories br br Controller Object implementing this role makes decisions and closely directs the action of other objects br Coordinator This role reacts to events by delegating tasks to others br Information Holder Information holder knows and provides information br Information Provider A slight variation of an information holder is the information provider which takes a more active role in managing and maintaining information This distinction can be used if a designer needs to get more specific br Interfacer This role transforms information and requests between distinct parts of an application It is further divided into more specific roles br External Interfacer External interfacer communicates with other applications rather than its own It is mainly used for encapsulating non object oriented APIs and does not collaborate a lot br Internal Interfacer Also called intersystem interfacer It act as a bridge between object neighborhoods br User Interfacer User interfacer communicates with users by responding to events generated in the UI and then passing them on to more appropriate objects br Service Provider This role performs work and offers computing services br Structurer This role maintains relationships between objects and information about those relationships br br br Control style br An important part in the responsibility driven design process is the distribution of control responsibilities that results in developing a control style A control style is concerned about the control flow between subsystems br br Concept of Control The responsibilities and collaborations among the classes br Control Centers An important aspect of developing a control style is the invention of so called control centers These are places where objects charged with controlling and coordinating reside br Control Style Variations A control style comes in three distinct variations These are not precise definitions though since a control style can be said to be more centralized or delegated than another br br br Centralized control style br This control style inflicts a procedural paradigm on the structure of the application and places major decision making responsibilities in only a few objects or a single object br br Types br Call return model The control of the objects in the application is in hierarchical way Control starts at root and moves downwards It is used in a sequential model br Manager model The control of the objects in the application is in with only one object Generally it is implemented in concurrent models It can also be implemented in sequential model using case statement br Advantages br Application logic is in one place br Disadvantages br Control logic can get overly complex br Controllers can become dependent on information holders contents br Objects can become coupled indirectly through the actions of their controller br The only interesting work is done in the controller br When to use br When decisions to be made are few simple and related to a single task br br br Delegated control style br A delegated control style lies in between a centralized and dispersed control style It passes some of the decision making and much of the action to objects surrounding a control center Each neighboring object has a significant role to play It can also be called as event driven model where the control is delegated to the object requesting it to process the event br br Types reference br Broadcast model An event is broadcast to all objects in the application The object which can handle the event can acquire the control br Interrupt driven model There will be the interrupt handler to process the interrupt and passes to some object to process it br Advantages br It is easy to understand br Though there is an external coordinator Objects can be made smarter to know what they are supposed to do and can be reused in other applications br Delegating coordinators tend to know about fewer objects than dominating controllers br Dialogs are higher level br It is easy to change as changes typically affect fewer objects br It is easier to divide design work among team members br Disadvantages br Too much distribution of responsibility can lead to weak objects and weak collaborations br When to use br When one wants to delegate work to objects that are more specialized br br br Clustered control style br This control style is a variation of the centralized control style wherein control is factored among a group of objects whose actions are coordinated The main difference between a clustered and delegated control style is that in a clustered control style the decision making objects are located within a control center whereas in a delegated control style they are mostly outside br br br Dispersed control style br A dispersed control style does not contain any control centers The logic is spread across the entire population of objects keeping each object small and building in as few dependencies among them as possible br br Advantages br None br Disadvantages br When you want to find out how something works you must trace the sequence of requests for services across many objects br Not very reusable because no single object contributes much br When to use br Never br br br Preferred control style br After extensive results of experiments conducted only the senior management has the necessary skills to make use of delegated control style and centralized control style benefits programmers There is no context mentioned about the mid level employees br br br br br br Bibliography br Object oriented design a responsibility driven approach In Conference Proceedings on Object Oriented Programming Systems Languages and Applications New Orleans Louisiana United States October OOPSLA ACM Press New York NY br Wirfs Brock Rebecca McKean Alan November Object Design Roles Responsibilities and Collaborations Addison Wesley ISBN 