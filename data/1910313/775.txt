title: Algorithm
id: 775
In mathematics and computer science an algorithm is a finite sequence of mathematically rigorous instructions typically used to solve a class of specific problems or to perform a computation Algorithms are used as specifications for performing calculations and data processing More advanced algorithms can use conditionals to divert the code execution through various routes referred to as automated decision making and deduce valid inferences referred to as automated reasoning achieving automation eventually Using human characteristics as descriptors of machines in metaphorical ways was already practiced by Alan Turing with terms such as memory search and stimulus br In contrast a heuristic is an approach to problem solving that may not be fully specified or may not guarantee correct or optimal results especially in problem domains where there is no well defined correct or optimal result For example social media recommender systems rely on heuristics in such a way that although widely characterized as algorithms in st century popular media cannot deliver correct results due to the nature of the problem br As an effective method an algorithm can be expressed within a finite amount of space and time and in a well defined formal language for calculating a function Starting from an initial state and initial input perhaps empty the instructions describe a computation that when executed proceeds through a finite number of well defined successive states eventually producing output and terminating at a final ending state The transition from one state to the next is not necessarily deterministic some algorithms known as randomized algorithms incorporate random input br br br Etymology br Around AD Persian scientist and polymath Mu ammad ibn M s al Khw rizm wrote kit b al is b al hind Book of Indian computation and kitab al jam wa l tafriq al is b al hind Addition and subtraction in Indian arithmetic In the early th century Latin translations of said al Khwarizmi texts involving the Hindu Arabic numeral system and arithmetic appeared for example Liber Alghoarismi de practica arismetrice attributed to John of Seville and Liber Algorismi de numero Indorum attributed to Adelard of Bath Hereby alghoarismi or algorismi is the Latinization of Al Khwarizmi s name the text starts with the phrase Dixit Algorismi or Thus spoke Al Khwarizmi Around the English word algorism is attested and then by Chaucer in English adopted the French term In the th century under the influence of the Greek word arithmos number cf arithmetic the Latin word was altered to algorithmus br br br Definition br br One informal definition is a set of rules that precisely defines a sequence of operations which would include all computer programs including programs that do not perform numeric calculations and for example any prescribed bureaucratic procedure br or cook book recipe In general a program is an algorithm only if it stops eventually even though infinite loops may sometimes prove desirable Boolos Jeffrey define an algorithm to be a set of instructions for determining an output given explicitly in a form that can be followed by either a computing machine or a human who could only carry out specific elementary operations on symbols br The concept of algorithm is also used to define the notion of decidability a notion that is central for explaining how formal systems come into being starting from a small set of axioms and rules In logic the time that an algorithm requires to complete cannot be measured as it is not apparently related to the customary physical dimension From such uncertainties that characterize ongoing work stems the unavailability of a definition of algorithm that suits both concrete in some sense and abstract usage of the term br Most algorithms are intended to be implemented as computer programs However algorithms are also implemented by other means such as in a biological neural network for example the human brain implementing arithmetic or an insect looking for food in an electrical circuit or in a mechanical device br br br History br br br Ancient algorithms br Since antiquity step by step procedures for solving mathematical problems have been attested This includes in Babylonian mathematics around BC Egyptian mathematics around BC Indian mathematics around BC and later The Ifa Oracle around BC Greek mathematics around BC and Arabic mathematics around AD br The earliest evidence of algorithms is found in the Babylonian mathematics of ancient Mesopotamia modern Iraq A Sumerian clay tablet found in Shuruppak near Baghdad and dated to c BC described the earliest division algorithm During the Hammurabi dynasty c c BC Babylonian clay tablets described algorithms for computing formulas Algorithms were also used in Babylonian astronomy Babylonian clay tablets describe and employ algorithmic procedures to compute the time and place of significant astronomical events br Algorithms for arithmetic are also found in ancient Egyptian mathematics dating back to the Rhind Mathematical Papyrus c BC Algorithms were later used in ancient Hellenistic mathematics Two examples are the Sieve of Eratosthenes which was described in the Introduction to Arithmetic by Nicomachus Ch and the Euclidean algorithm which was first described in Euclid s Elements c BC Ch Examples of ancient Indian mathematics included the Shulba Sutras the Kerala School and the Br hmasphu asiddh nta br The first cryptographic algorithm for deciphering encrypted code was developed by Al Kindi a th century Arab mathematician in A Manuscript On Deciphering Cryptographic Messages He gave the first description of cryptanalysis by frequency analysis the earliest codebreaking algorithm br br br Computers br br br Weight driven clocks br Bolter credits the invention of the weight driven clock as The key invention of Europe in the Middle Ages In particular he credits the verge escapement mechanism that provides us with the tick and tock of a mechanical clock The accurate automatic machine led immediately to mechanical automata beginning in the th century and finally to computational machines the difference engine and analytical engines of Charles Babbage and Countess Ada Lovelace mid th century Lovelace is credited with the first creation of an algorithm intended for processing on a computer Babbage s analytical engine the first device considered a real Turing complete computer instead of just a calculator and is sometimes called history s first programmer as a result though a full implementation of Babbage s second device would not be realized until decades after her lifetime br br br Electromechanical relay br Bell and Newell indicate that the Jacquard loom a precursor to Hollerith cards punch cards and telephone switching technologies were the roots of a tree leading to the development of the first computers By the mid th century the telegraph the precursor of the telephone was in use throughout the world its discrete and distinguishable encoding of letters as dots and dashes a common sound By the late th century the ticker tape c s was in use as was the use of Hollerith cards in the U S census Then came the teleprinter c with its punched paper use of Baudot code on tape br Telephone switching networks of electromechanical relays invented was behind the work of George Stibitz the inventor of the digital adding device As he worked in Bell Laboratories he observed the burdensome use of mechanical calculators with gears He went home one evening in intending to test his idea When the tinkering was over Stibitz had constructed a binary adding device The mathematician Martin Davis supported the particular importance of the electromechanical relay br br br Formalization br br In a partial formalization of the modern concept of algorithms began with attempts to solve the Entscheidungsproblem decision problem posed by David Hilbert Later formalizations were framed as attempts to define effective calculability or effective method Those formalizations included the G del Herbrand Kleene recursive functions of and Alonzo Church s lambda calculus of Emil Post s Formulation of and Alan Turing s turing machines of and br br br Representations br Algorithms can be expressed in many kinds of notation including natural languages pseudocode flowcharts drakon charts programming languages or control tables processed by interpreters Natural language expressions of algorithms tend to be verbose and ambiguous and are rarely used for complex or technical algorithms Pseudocode flowcharts drakon charts and control tables are structured ways to express algorithms that avoid many of the ambiguities common in statements based on natural language Programming languages are primarily intended for expressing algorithms in a form that can be executed by a computer but they are also often used as a way to define or document algorithms br br br Turing machines br There is a wide variety of representations possible and one can express a given Turing machine program as a sequence of machine tables see finite state machine state transition table and control table for more as flowcharts and drakon charts see state diagram for more or as a form of rudimentary machine code or assembly code called sets of quadruples see Turing machine for more Representations of algorithms can also be classified into three accepted levels of Turing machine description high level description implementation description and formal description A high level description describes qualities of the algorithm itself ignoring how it is implemented on the Turing machine An implementation description describes the general manner in which the machine moves its head and stores data in order to carry out the algorithm but doesn t give exact states In the most detail a formal description gives the exact state table and list of transitions of the Turing machine br br br Flowchart representation br The graphical aid called a flowchart offers a way to describe and document an algorithm and a computer program corresponding to it Like the program flow of a Minsky machine a flowchart always starts at the top of a page and proceeds down Its primary symbols are only four the directed arrow showing program flow the rectangle SEQUENCE GOTO the diamond IF THEN ELSE and the dot OR tie The B hm Jacopini canonical structures are made of these primitive shapes Sub structures can nest in rectangles but only if a single exit occurs from the superstructure The symbols and their use to build the canonical structures are shown in the diagram br br br Algorithmic analysis br br It is frequently important to know how much of a particular resource such as time or storage is theoretically required for a given algorithm Methods have been developed for the analysis of algorithms to obtain such quantitative answers estimates for example an algorithm that adds up the elements of a list of n numbers would have a time requirement of br br br br O br br n br br br br displaystyle O n br br using big O notation At all times the algorithm only needs to remember two values the sum of all the elements so far and its current position in the input list Therefore it is said to have a space requirement of br br br br O br br br br br br displaystyle O br br if the space required to store the input numbers is not counted or br br br br O br br n br br br br displaystyle O n br br if it is counted br Different algorithms may complete the same task with a different set of instructions in less or more time space or effort than others For example a binary search algorithm with cost br br br br O br br log br br n br br br br displaystyle O log n br br outperforms a sequential search cost br br br br O br br n br br br br displaystyle O n br br when used for table lookups on sorted lists or arrays br br br Formal versus empirical br br The analysis and study of algorithms is a discipline of computer science and is often practiced abstractly without the use of a specific programming language or implementation In this sense algorithm analysis resembles other mathematical disciplines in that it focuses on the underlying properties of the algorithm and not on the specifics of any particular implementation Usually pseudocode is used for analysis as it is the simplest and most general representation However ultimately most algorithms are usually implemented on particular hardware software platforms and their algorithmic efficiency is eventually put to the test using real code For the solution of a one off problem the efficiency of a particular algorithm may not have significant consequences unless n is extremely large but for algorithms designed for fast interactive commercial or long life scientific usage it may be critical Scaling from small n to large n frequently exposes inefficient algorithms that are otherwise benign br Empirical testing is useful because it may uncover unexpected interactions that affect performance Benchmarks may be used to compare before after potential improvements to an algorithm after program optimization br Empirical tests cannot replace formal analysis though and are not trivial to perform in a fair manner br br br Execution efficiency br br To illustrate the potential improvements possible even in well established algorithms a recent significant innovation relating to FFT algorithms used heavily in the field of image processing can decrease processing time up to times for applications like medical imaging In general speed improvements depend on special properties of the problem which are very common in practical applications Speedups of this magnitude enable computing devices that make extensive use of image processing like digital cameras and medical equipment to consume less power br br br Design br br Algorithm design refers to a method or a mathematical process for problem solving and engineering algorithms The design of algorithms is part of many solution theories such as divide and conquer or dynamic programming within operation research Techniques for designing and implementing algorithm designs are also called algorithm design patterns with examples including the template method pattern and the decorator pattern One of the most important aspects of algorithm design is resource run time memory usage efficiency the big O notation is used to describe e g an algorithm s run time growth as the size of its input increases br br br Structured programming br Per the Church Turing thesis any algorithm can be computed by a model known to be Turing complete In fact it has been demonstrated that Turing completeness requires only four instruction types conditional GOTO unconditional GOTO assignment HALT However Kemeny and Kurtz observe that while undisciplined use of unconditional GOTOs and conditional IF THEN GOTOs can result in spaghetti code a programmer can write structured programs using only these instructions on the other hand it is also possible and not too hard to write badly structured programs in a structured language Tausworthe augments the three B hm Jacopini canonical structures SEQUENCE IF THEN ELSE and WHILE DO with two more DO WHILE and CASE An additional benefit of a structured program is that it lends itself to proofs of correctness using mathematical induction br br br Classification br There are various ways to classify algorithms each with its own merits br br br By implementation br One way to classify algorithms is by implementation means br br Recursion br A recursive algorithm is one that invokes makes reference to itself repeatedly until a certain condition also known as termination condition matches which is a method common to functional programming Iterative algorithms use repetitive constructs like loops and sometimes additional data structures like stacks to solve the given problems Some problems are naturally suited for one implementation or the other For example towers of Hanoi is well understood using recursive implementation Every recursive version has an equivalent but possibly more or less complex iterative version and vice versa br Serial parallel or distributed br Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time Those computers are sometimes called serial computers An algorithm designed for such an environment is called a serial algorithm as opposed to parallel algorithms or distributed algorithms Parallel algorithms are algorithms that take advantage of computer architectures where multiple processors can work on a problem at the same time Distributed algorithms are algorithms that use multiple machines connected to a computer network Parallel and distributed algorithms divide the problem into more symmetrical or asymmetrical subproblems and collect the results back together For example a CPU would be an example of a parallel algorithm The resource consumption in such algorithms is not only processor cycles on each processor but also the communication overhead between the processors Some sorting algorithms can be parallelized efficiently but their communication overhead is expensive Iterative algorithms are generally parallelizable but some problems have no parallel algorithms and are called inherently serial problems br Deterministic or non deterministic br Deterministic algorithms solve the problem with exact decision at every step of the algorithm whereas non deterministic algorithms solve problems via guessing although typical guesses are made more accurate through the use of heuristics br Exact or approximate br While many algorithms reach an exact solution approximation algorithms seek an approximation that is closer to the true solution The approximation can be reached by either using a deterministic or a random strategy Such algorithms have practical value for many hard problems One of the examples of an approximate algorithm is the Knapsack problem where there is a set of given items Its goal is to pack the knapsack to get the maximum total value Each item has some weight and some value The total weight that can be carried is no more than some fixed number X So the solution must consider weights of items as well as their value br Quantum algorithm br Quantum algorithms run on a realistic model of quantum computation The term is usually used for those algorithms which seem inherently quantum or use some essential feature of Quantum computing such as quantum superposition or quantum entanglement br br br By design paradigm br Another way of classifying algorithms is by their design methodology or paradigm There is a certain number of paradigms each different from the other Furthermore each of these categories includes many different types of algorithms Some common paradigms are br br Brute force or exhaustive search br Brute force is a method of problem solving that involves systematically trying every possible option until the optimal solution is found This approach can be very time consuming as it requires going through every possible combination of variables However it is often used when other methods are not available or too complex Brute force can be used to solve a variety of problems including finding the shortest path between two points and cracking passwords br Divide and conquer br A divide and conquer algorithm repeatedly reduces an instance of a problem to one or more smaller instances of the same problem usually recursively until the instances are small enough to solve easily One such example of divide and conquer is merge sorting Sorting can be done on each segment of data after dividing data into segments and sorting of entire data can be obtained in the conquer phase by merging the segments A simpler variant of divide and conquer is called a decrease and conquer algorithm which solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem Divide and conquer divides the problem into multiple subproblems and so the conquer stage is more complex than decrease and conquer algorithms An example of a decrease and conquer algorithm is the binary search algorithm br Search and enumeration br Many problems such as playing chess can be modeled as problems on graphs A graph exploration algorithm specifies rules for moving around a graph and is useful for such problems This category also includes search algorithms branch and bound enumeration and backtracking br Randomized algorithm br Such algorithms make some choices randomly or pseudo randomly They can be very useful in finding approximate solutions for problems where finding exact solutions can be impractical see heuristic method below For some of these problems it is known that the fastest approximations must involve some randomness Whether randomized algorithms with polynomial time complexity can be the fastest algorithm for some problems is an open question known as the P versus NP problem There are two large classes of such algorithms br Monte Carlo algorithms return a correct answer with high probability E g RP is the subclass of these that run in polynomial time br Las Vegas algorithms always return the correct answer but their running time is only probabilistically bound e g ZPP br Reduction of complexity br This technique involves solving a difficult problem by transforming it into a better known problem for which we have hopefully asymptotically optimal algorithms The goal is to find a reducing algorithm whose complexity is not dominated by the resulting reduced algorithms For example one selection algorithm for finding the median in an unsorted list involves first sorting the list the expensive portion and then pulling out the middle element in the sorted list the cheap portion This technique is also known as transform and conquer br Back tracking br In this approach multiple solutions are built incrementally and abandoned when it is determined that they cannot lead to a valid full solution br br br Optimization problems br For optimization problems there is a more specific classification of algorithms an algorithm for such problems may fall into one or more of the general categories described above as well as into one of the following br br Linear programming br When searching for optimal solutions to a linear function bound to linear equality and inequality constraints the constraints of the problem can be used directly in producing the optimal solutions There are algorithms that can solve any problem in this category such as the popular simplex algorithm Problems that can be solved with linear programming include the maximum flow problem for directed graphs If a problem additionally requires that one or more of the unknowns must be an integer then it is classified in integer programming A linear programming algorithm can solve such a problem if it can be proved that all restrictions for integer values are superficial i e the solutions satisfy these restrictions anyway In the general case a specialized algorithm or an algorithm that finds approximate solutions is used depending on the difficulty of the problem br Dynamic programming br When a problem shows optimal substructures meaning the optimal solution to a problem can be constructed from optimal solutions to subproblems and overlapping subproblems meaning the same subproblems are used to solve many different problem instances a quicker approach called dynamic programming avoids recomputing solutions that have already been computed For example Floyd Warshall algorithm the shortest path to a goal from a vertex in a weighted graph can be found by using the shortest path to the goal from all adjacent vertices Dynamic programming and memoization go together The main difference between dynamic programming and divide and conquer is that subproblems are more or less independent in divide and conquer whereas subproblems overlap in dynamic programming The difference between dynamic programming and straightforward recursion is in caching or memoization of recursive calls When subproblems are independent and there is no repetition memoization does not help hence dynamic programming is not a solution for all complex problems By using memoization or maintaining a table of subproblems already solved dynamic programming reduces the exponential nature of many problems to polynomial complexity br The greedy method br A greedy algorithm is similar to a dynamic programming algorithm in that it works by examining substructures in this case not of the problem but of a given solution Such algorithms start with some solution which may be given or have been constructed in some way and improve it by making small modifications For some problems they can find the optimal solution while for others they stop at local optima that is at solutions that cannot be improved by the algorithm but are not optimum The most popular use of greedy algorithms is for finding the minimal spanning tree where finding the optimal solution is possible with this method Huffman Tree Kruskal Prim Sollin are greedy algorithms that can solve this optimization problem br The heuristic method br In optimization problems heuristic algorithms can be used to find a solution close to the optimal solution in cases where finding the optimal solution is impractical These algorithms work by getting closer and closer to the optimal solution as they progress In principle if run for an infinite amount of time they will find the optimal solution Their merit is that they can find a solution very close to the optimal solution in a relatively short time Such algorithms include local search tabu search simulated annealing and genetic algorithms Some of them like simulated annealing are non deterministic algorithms while others like tabu search are deterministic When a bound on the error of the non optimal solution is known the algorithm is further categorized as an approximation algorithm br br br Legal status br br Algorithms by themselves are not usually patentable In the United States a claim consisting solely of simple manipulations of abstract concepts numbers or signals does not constitute processes USPTO so algorithms are not patentable as in Gottschalk v Benson However practical applications of algorithms are sometimes patentable For example in Diamond v Diehr the application of a simple feedback algorithm to aid in the curing of synthetic rubber was deemed patentable The patenting of software is controversial and there are criticized patents involving algorithms especially data compression algorithms such as Unisys s LZW patent Additionally some cryptographic algorithms have export restrictions see export of cryptography br br br Examples br br One of the simplest algorithms is to find the largest number in a list of numbers of random order Finding the solution requires looking at every number in the list From this follows a simple algorithm which can be stated in a high level description in English prose as br High level description br br If there are no numbers in the set then there is no highest number br Assume the first number in the set is the largest number in the set br For each remaining number in the set if this number is larger than the current largest number consider this number to be the largest number in the set br When there are no numbers left in the set to iterate over consider the current largest number to be the largest number of the set br Quasi formal description br Written in prose but much closer to the high level language of a computer program the following is the more formal coding of the algorithm in pseudocode or pidgin code br br br See also br br br Notes br br br Bibliography br br Zaslavsky C Mathematics of the Yoruba People and of Their Neighbors in Southern Nigeria The Two Year College Mathematics Journal https doi org br br br Further reading br br br External links br br Algorithm Encyclopedia of Mathematics EMS Press br Algorithms at Curlie br Weisstein Eric W Algorithm MathWorld br Dictionary of Algorithms and Data Structures National Institute of Standards and Technology br Algorithm repositories br The Stony Brook Algorithm Repository State University of New York at Stony Brook br Collected Algorithms of the ACM Associations for Computing Machinery br The Stanford GraphBase Archived December at the Wayback Machine Stanford University