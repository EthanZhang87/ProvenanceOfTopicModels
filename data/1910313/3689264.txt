title: Design closure
id: 3689264
Design Closure is a part of the digital electronic design automation workflow by which an integrated circuit i e VLSI design is modified from its initial description to meet a growing list of design constraints and objectives br Every step in the IC design such as static timing analysis placement routing and so on is already complex and often forms its own field of study This article however looks at the overall design closure process which takes a chip from its initial design state to the final form in which all of its design constraints are met br br br Introduction br Every chip starts off as someone s idea of a good thing If we can make a part that performs function X we will all be rich Once the concept is established someone from marketing says To make this chip profitably it must cost C and run at frequency F Someone from manufacturing says To meet this chip s targets it must have a yield of Y Someone from packaging says It must fit in the P package and dissipate no more than W watts Eventually the team generates an extensive list of all the constraints and objectives they must meet to manufacture a product that can be sold profitably The management then forms a design team which consists of chip architects logic designers functional verification engineers physical designers and timing engineers and assigns them to create a chip to the specifications br br br Constraints vs Objectives br The distinction between constraints and objectives is straightforward a constraint is a design target that must be met for the design to be successful For example a chip may be required to run at a specific frequency so it can interface with other components in a system In contrast an objective is a design target where more br or less is better For example yield is generally an objective which is maximized to lower manufacturing cost For the purposes of design closure the distinction between constraints and objectives is not important this article uses the words interchangeably br br br Evolution of the Design Closure Flow br Designing a chip used to be a much simpler task In the early days of VLSI a chip consisted of a few thousand logic circuits that performed a simple function at speeds of a few MHz Design closure was simple if all of the necessary circuits and wires fit the chip would perform the desired function br Modern design closure has grown orders of magnitude more complex Modern logic chips can have tens to hundreds of millions of logic elements switching at speeds of several br GHz This improvement has been driven by Moore s law of scaling of technology and has introduced many new design considerations As a result a modern VLSI designer must consider the performance of a chip against a list of dozens of design constraints and objectives including performance power signal integrity reliability and yield In response to this growing list of constraints the design closure flow has evolved from a simple linear list of tasks to a very complex highly iterative flow such as the following simplified ASIC design flow br br br Reference ASIC Design Flow br Concept phase Functional objectives and architecture of a chip are developed br Logic design Architecture is implemented in a register transfer level RTL language then simulated to verify that it performs the desired functions This includes functional verification br Floorplanning The RTL of the chip is assigned to gross regions of the chip input output I O pins are assigned and large objects arrays cores etc are placed br Logic synthesis The RTL is mapped into a gate level netlist in the target technology of the chip br Design for Testability The test structures like scan chains are inserted br Placement The gates in the netlist are assigned to nonoverlapping locations on the chip br Logic placement refinement Iterative logical and placement transformations to close performance and power constraints br Clock insertion Balanced buffered clock trees are introduced into the design br Routing The wires that connect the gates in the netlist are added br Postwiring optimization Remaining performance noise and yield violations are removed br Design for manufacturability The design is modified where possible to make it as easy as possible to produce br Signoff checks Since errors are expensive time consuming and hard to spot extensive error checking is the rule making sure the mapping to logic was done correctly and checking that the manufacturing rules were followed faithfully br Tapeout and mask generation the design data is turned into photomasks in mask data preparation br br br Evolution of design constraints br The purpose of the flow is to take a design from concept phase to working chip The complexity of the flow is a direct result of the addition and evolution of the list of design closure constraints To understand this evolution it is important to understand the life cycle of a design constraint In general design constraints influence the design flow via the following five stage evolution br br Early warnings Before chip issues begin occurring academics and industry visionaries make dire predictions about the future impact of some new technology effect br Hardware problems Sporadic hardware failures start showing up in the field due to the new effect Postmanufacturing redesign and hardware re spins are required to get the chip to function br Trial and error Constraints on the effect are formulated and used to drive postdesign checking Violations of the constraint are fixed manually br Find and repair Large number of violations of the constraint drives the creation of automatic postdesign analysis and repair flows br Predict and prevent Constraint checking moves earlier in the flow using predictive estimations of the effect These drive optimizations to prevent violations of the constraint br A good example of this evolution can be found in the signal integrity constraint In the mid s nm br node industry visionaries were describing the impending dangers of coupling noise long before chips were br failing By the mid late s noise problems were cropping up in advanced microprocessor designs br By automated noise analysis tools were available and were used to guide manual fix up The total br number of noise problems identified by the analysis tools identified by the flow quickly became too many br to correct manually In response CAD companies developed the noise avoidance flows that are currently in br use in the industry br At any point in time the constraints in the design flow are at different stages of their life cycle At the br time of this writing for example performance optimization is the most mature and is well into the fifth br phase with the widespread use of timing driven design flows Power and defect oriented yield optimization br is well into the fourth phase power supply integrity a type of noise constraint is in the third phase br circuit limited yield optimization is in the second phase etc A list of the first phase impending constraint br crises can always be found in the International Technology Roadmap for Semiconductors ITRS year outlook technology roadmaps br As a constraint matures in the design flow it tends to work its way from the end of the flow to the beginning br As it does this it also tends to increase in complexity and in the degree that it contends with other constraints br Constraints tend to move up in the flow due to one of the basic paradoxes of design accuracy vs br influence Specifically the earlier in a design flow a constraint is addressed the more flexibility there is to br address the constraint Ironically the earlier one is in a design flow the more difficult it is to predict compliance br For example an architectural decision to pipeline a logic function can have a far greater impact on br total chip performance than any amount of postrouting fix up At the same time accurately predicting the br performance impact of such a change before the chip logic is synthesized let alone placed or routed is very br difficult This paradox has shaped the evolution of the design closure flow in several ways First it requires br that the design flow is no longer composed of a linear set of discrete steps In the early stages of VLSI it was br sufficient to break the design into discrete stages i e first do logic synthesis then do placement then do br routing As the number and complexity of design closure constraints has increased the linear design flow br has broken down In the past if there were too many timing constraint violations left after routing it was br necessary to loop back modify the tool settings slightly and reexecute the previous placement steps If the br constraints were still not met it was necessary to reach further back in the flow and modify the chip logic br and repeat the synthesis and placement steps This type of looping is both time consuming and unable to br guarantee convergence i e it is possible to loop back in the flow to correct one constraint violation only to br find that the correction induced another unrelated violation br br br See also br Timing closure br Electronic design automation br Design flow EDA br Integrated circuit design br br br br br Electronic Design Automation For Integrated Circuits Handbook by Lavagno Martin and Scheffer ISBN A survey of the field of electronic design automation In particular this article is derived with permission from the introduction of Chapter Volume II Design Closure by John Cohn 