title: Abstract type
id: 3893576
In programming languages an abstract type also known as existential types is a type in a nominative type system that cannot be instantiated directly by contrast a concrete type can be instantiated directly Instantiation of an abstract type can occur only indirectly via a concrete subtype br An abstract type may provide no implementation or an incomplete implementation In some languages abstract types with no implementation rather than an incomplete implementation are known as protocols interfaces signatures or class types In class based object oriented programming abstract types are implemented as abstract classes also known as abstract base classes and concrete types as concrete classes In generic programming the analogous notion is a concept which similarly specifies syntax and semantics but does not require a subtype relationship two unrelated types may satisfy the same concept br Often abstract types will have one or more implementations provided separately for example in the form of concrete subtypes that can be instantiated In object oriented programming an abstract class may include abstract methods or abstract properties that are shared by its subclasses Other names for language features that are or may be used to implement abstract types include traits mixins flavors roles or type classes br Abstract types may also include any number of non abstract methods and properties such as when implementing the Template Method Pattern which uses a mixture of invariant methods with fixed implementations and hook methods which can be overridden in concrete subclasses to provide custonised logic br br br Creation br Abstract classes can be created signified or simulated in several ways br br By use of the explicit keyword abstract in the class definition as in Java D or C br By including in the class definition one or more abstract methods called pure virtual functions in C which the class is declared to accept as part of its protocol but for which no implementation is provided br By inheriting from an abstract type and not overriding all missing features necessary to complete the class definition In other words a child type that does not implement all abstract methods from its parent becomes abstract itself br In many dynamically typed languages such as Smalltalk any class that sends a particular method to this but does not implement that method can be considered abstract However in many such languages like Objective C the error is not detected until the class is used and the message returns results in an exception error message such as Does not recognize selector xxx as NSObject doesNotRecognizeSelector SEL selector is invoked upon detection of an unimplemented method br br br Examples br br br Java br By default all methods in all classes are concrete unless the abstract keyword is used An abstract class may include abstract methods which have no implementation br By default all methods in all interfaces are abstract unless the default keyword is used br The default keyword can be used to specify a concrete method in an interface br br br Usage br Abstract types are an important feature in statically typed OOP languages Many dynamically typed languages have no equivalent feature although the use of duck typing makes abstract types unnecessary however traits are found in some modern dynamically typed languages br Some authors argue that classes should be leaf classes have no subtypes or else be abstract br Abstract types are useful in that they can be used to define and enforce a protocol a set of operations that all objects implementing the protocol must support br Abstract types are also an essential part of the Template Method Pattern br br br See also br Class br Concept br Type class br br br br br br Further reading br Head First Java O Reilly Media pp ISBN br Core Java An Integrated Approach by R Nageswara Rao br br br External links br Abstract or Skeletal Interfaces Explained br Types and Programming Languages by Benjamin Pierce MIT Press br Abstract type at Rosetta Code