title: Haxe
id: 5404706
Haxe is a high level cross platform programming language and compiler that can produce applications and source code for many different computing platforms from one code base It is free and open source software released under an MIT License The compiler written in OCaml is released under the GNU General Public License GPL version br Haxe includes a set of features and a standard library supported across all platforms including numeric data types strings arrays maps binary reflective programming maths Hypertext Transfer Protocol HTTP file system and common file formats Haxe also includes platform specific application programming interfaces APIs for each compiler target Kha OpenFL and Heaps io are popular Haxe frameworks that enable creating multi platform content from one codebase br Haxe originated with the idea of supporting client side and server side programming in one language and simplifying the communication logic between them Code written in Haxe can be compiled into JavaScript C Java JVM PHP C Python Lua and Node js Haxe can also directly compile SWF HashLink and NekoVM bytecode and also runs in interpreted mode br Haxe supports externs definition files that can contain data type information of extant libraries to describe target specific interaction in a type safe manner like C header files can describe the structure of existing object files This enables to use the values defined in the files as if they were statically typed Haxe entities Beside externs other solutions exist to access each platform s native capabilities br Many popular IDEs and source code editors have support available for Haxe development No particular development environment or tool set is officially recommended by the Haxe Foundation although VS Code IntelliJ IDEA and HaxeDevelop have the most support for Haxe development The core functionalities of syntax highlighting code completion refactoring debugging etc are available to various degrees br br br History br Development of Haxe began in October The first alpha version was released on November Haxe was released in April with support for Adobe Flash JavaScript and NekoVM programs Support for PHP was added in and C was added in More platforms such as C and Java were added with a compiler overhaul in br Haxe was developed by Nicolas Cannasse and other contributors and was originally named haXe because it was short simple and has an X inside which the author asserts humorously is needed to make any new technology a success br Haxe is the successor to the open source ActionScript compiler MTASC also built by Nicolas Cannasse and is released under the GNU General Public License version or later br br br Compiler br The Haxe language can compile into bytecode that can be executed directly by the virtual machines it targets It can compile to source code in C JavaScript PHP C Java Python and Lua Haxe also has an interpreter called eval This same interpreter is also used compile time to run macros which allow modification of the abstract syntax tree AST br This strategy of compiling to multiple source code languages is inspired by the write once run anywhere paradigm It also allows the programmer to choose the best platform for the job Typical Haxe programs run identically on all platforms but developers can specify platform specific code and use conditional compilation to prevent it from compiling on other platforms br The Haxe compiler is an optimizing compiler and uses field and function inlining tail recursion elimination constant folding loop unrolling and dead code elimination DCE to optimize the run time performance of compiled programs The Haxe compiler offers opt in null safety it checks compile time for nullable values br br br Targets br In Haxe supported platforms are known as targets which consist of the following modules br br The compiler backends that are responsible for generating the respective code br The run time specific APIs that go beyond the core language support platform targets br The following table documents platform and language support in Haxe The Haxe language allows developers to gain access to many platform features but Haxe is not a full featured engine they might need frameworks that enable create content for certain platforms br br br Advantages br Ability to target multiple platforms and devices using the same language br Ability to use strictly typed code br Ability to use macros syntax transformation which can be done with Haxe language br Added language features such as extension methods and functional programming br The run time performance of Haxe programs is at comparable speed to handwritten sources br br br Language br Haxe is a general purpose programming language supporting object oriented programming generic programming and various functional programming constructs Features such as iterations exceptions and reflective programming code reflection are also built in functions of the language and libraries Unusual among programming languages Haxe contains a type system which is both strong and dynamic The compiler will check types implicitly via type inference and give compile time errors but it also enables programs to bypass type checking and rely on a target platform s dynamic type handling All of the native target APIs can be used br br br Type system br Haxe has a sophisticated and flexible type system The type kinds it offers are classes interfaces function method types anonymous types algebraic data types called enum in Haxe and abstract types Parametric polymorphism is possible with classes algebraic types and function types giving the language support for generic programming based on type erasure This includes support for variance in polymorphic functions although not in type constructors br The type system is static unless annotations for dynamic typing are present for use with targets that support them Type checking follows nominal typing with the exception of anonymous types where structural typing is used instead Finally type inference is supported allowing for variable declarations without type annotations br br br Modules and namespaces br All Haxe code is organized in modules which are addressed using paths In essence each hx file represents a module which may contain several types For example to create the type A in the package my pack as shown the folder structure should be my pack and the file could be A hx in the folder pack br br In other modules other types can be imported by putting import statements below the package definition e g import my pack A br A module can contain multiple types such as the following It is possible to import one type at a time from that module using import my pack A A type may be private in which case only its containing module can access it br br br Classes br Classes keyword class in Haxe are similar to those in Java or TypeScript Their fields can be either methods variables or properties each static or per instance respectively Haxe supports the accessors public and private and more advanced methods for access control that are denoted using annotations Methods and static constant variables can be inlined using the keyword inline Fields can be marked as final to declare a constant that must be initialized immediately or in the constructor and cannot be written to in case of function final will mark as non overridable in subclasses br Interfaces in Haxe are very similar to those in for example Java br br br Generics br Haxe supports generic programming The following is an example of the identity function br br br Enumerated types br Enumerated types are an important feature of the language they can have type parameters and be recursive They provide basic support for algebraic data types allowing the inclusion of product types in a fashion similar to Haskell and ML A switch expression can apply pattern matching to an enum value allowing for elegant solutions to complex programming problems br br Examples of parametric enum types are the Haxe standard library types Option and Either br br Haxe also supports generalized algebraic data types GADTs br br br Anonymous types br Anonymous types are defined by denoting their structure explicitly using a syntax that follows the mathematical record based representation of a type They can be used to implement structural typing for function arguments see below and can be given an alias with the keyword typedef br br br Function types br Functions are first class values in Haxe Their type is denoted by using arrows between argument types and between the argument type s and return type as common in many functional languages However unlike in prominent examples like Haskell or the ML language family not all functions are unary functions functions with one argument only and in Haxe functions can t be partially applied per default Thus the following type signatures have different semantics than in the aforementioned languages The type F is a function that takes a String as arguments and returns a value of type Float br Types F and F denote the same type except that F uses labelled parameter which is useful for completion and documentation br Types F and F denote the same type Both are binary functions that return a binary function of type F For F the syntax to declare a function type within a function type is used br br br Anonymous functions br br br Abstract types br A relatively new addition to the Haxe type system is a concept termed abstract types As used in Haxe this refers to something different from a conventional abstract type They are used to make conversions between types implicit allowing reuse of existing types for specific purposes like implementing types for units of measurement This greatly reduces the risk of mixing up values of the same underlying type but with different meanings e g miles vs km br The following example assumes that the metric system is the default while a conversion to miles is needed for legacy data Haxe can automatically convert miles to kilometers but not the reverse br br As the example shows no explicit conversion is needed for the assignment km one Miles to do the right thing br Abstract types are entirely a compile time feature of Haxe and do not exist at all at program runtime As an example both variables using abstract types above Mile and Kilometer will be of the type Float at runtime br br br Structural typing br In many functional programming languages structural typing plays a major role Haxe employs it in the presence of anonymous types using the nominative typing of object oriented programming when only named types are involved Anonymous types in Haxe are analogous to the implicit interfaces of the language Go as to typing In contrast with Go interfaces it is possible to construct a value using an anonymous type br br br Internal architecture br br br Compiler br The Haxe compiler is divided into one frontend and multiple backends The frontend creates an abstract syntax tree AST from the source code and performs type checking macro expansion and optimization on the AST The various backends translate the processed AST into source code or generate bytecode depending on their target br The compiler is written in OCaml It can be run in server mode to provide code completion for integrated development environments IDEs and maintain a cache to further speed compiling br br br See also br br Dart programming language br Nim programming language br Opa programming language br Clojure br CoffeeScript br TypeScript br Scala programming language br Vala programming language br Emscripten br OpenFL br br br br br br External links br Official website