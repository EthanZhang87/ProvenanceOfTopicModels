title: Uniqueness type
id: 161881
In computing a unique type guarantees that an object is used in a single threaded way with at most a single reference to it If a value has a unique type a function applied to it can be optimized to update the value in place in the object code Such in place updates improve the efficiency of functional languages while maintaining referential transparency Unique types can also be used to integrate functional and imperative programming br br br Introduction br Uniqueness typing is best explained using an example Consider a function readLine that reads the next line of text from a given file br br Now doImperativeReadLineSystemCall reads the next line from the file using an OS level system call which has the side effect of changing the current position in the file But this violates referential transparency because calling it multiple times with the same argument will return different results each time as the current position in the file gets moved This in turn makes readLine violate referential transparency because it calls doImperativeReadLineSystemCall br However using uniqueness typing we can construct a new version of readLine that is referentially transparent even though it s built on top of a function that s not referentially transparent br br The unique declaration specifies that the type of f is unique that is to say that f may never be referred to again by the caller of readLine after readLine returns and this restriction is enforced by the type system And since readLine does not return f itself but rather a new different file object differentF this means that it s impossible for readLine to be called with f as an argument ever again thus preserving referential transparency while allowing for side effects to occur br br br Programming languages br Uniqueness types are implemented in functional programming languages such as Clean Mercury SAC and Idris They are sometimes used for doing I O operations in functional languages in lieu of monads br A compiler extension has been developed for the Scala programming language which uses annotations to handle uniqueness in the context of message passing between actors br br br Relationship to linear typing br A unique type is very similar to a linear type to the point that the terms are often used interchangeably but there is in fact a distinction actual linear typing allows a non linear value to be typecast to a linear form while still retaining multiple references to it Uniqueness guarantees that a value has no other references to it while linearity guarantees that no more references can be made to a value br Linearity and uniqueness can be seen as particularly distinct when in relation to non linearity and non uniqueness modalities but can then also be unified in a single type system br br br See also br Linear type br Linear logic br br br br br br External links br Bibliography on Linear Logic br Uniqueness Typing Simplified