title: Gradual typing
id: 39764472
Gradual typing is a type system that lies inbetween static typing and in dynamic typing Some variables and expressions may be given types and the correctness of the typing is checked at compile time which is static typing and some expressions may be left untyped and eventual type errors are reported at runtime which is dynamic typing br Gradual typing allows software developers to choose either type paradigm as appropriate from within a single language In many cases gradual typing is added to an existing dynamic language creating a derived language allowing but not requiring static typing to be used In some cases a language uses gradual typing from the start br br br History br The term was coined by Jeremy Siek who developed gradual typing in with Walid Taha br br br Implementation br In gradual typing a special type named dynamic is used to represent statically unknown types The notion of type equality is replaced by a new relation called consistency that relates the dynamic type to every other type The consistency relation is reflexive and symmetric but not transitive br Prior attempts at integrating static and dynamic typing tried to make the dynamic type be both the top and bottom of the subtype hierarchy However because subtyping is transitive that results in every type becoming related to every other type and so subtyping would no longer rule out any static type errors The addition of a second phase of plausibility checking to the type system did not completely solve this problem br Gradual typing can easily be integrated into the type system of an object oriented language that already uses the subsumption rule to allow implicit upcasts with respect to subtyping The main idea is that consistency and subtyping are orthogonal ideas that compose nicely To add subtyping to a gradually typed language simply add the subsumption rule and add a subtyping rule that makes the dynamic type a subtype of itself because subtyping is supposed to be reflexive But do not make the top of the subtyping order dynamic br br br Examples br Examples of gradually typed languages derived from existing dynamically typed languages include Closure Compiler TypeScript both for JavaScript Hack for PHP PHP since Typed Racket for Racket Typed Clojure for Clojure Cython a Python compiler mypy a static type checker for Python pyre alternative static type checker for Python or cperl a typed Perl ActionScript is a gradually typed language that is now an implementation of ECMAScript though it originally arose separately as a sibling both influenced by Apple s HyperTalk br A system for the J programming language has been developed adding coercion error propagation and filtering to the normal validation properties of the type system as well as applying type functions outside of function definitions thereby the increasing flexibility of type definitions br Conversely C started as a statically typed language but as of version is gradually typed allowing variables to be explicitly marked as dynamic by using the dynamic type Gradually typed languages not derived from a dynamically typed language include Dart Dylan and Raku br Raku formerly Perl has gradual typing implemented from the start Type checks occur at all locations where values are assigned or bound An untyped variable or parameter is typed as Any which will match almost all values The compiler flags type checking conflicts at compile time if it can determine at compile time that they will never succeed br Objective C has gradual typing for object pointers with respect to method calls Static typing is used when a variable is typed as pointer to a certain class of object when a method call is made to the variable the compiler statically checks that the class is declared to support such a method or it generates a warning or error However if a variable of the type id is used the compiler will allow any method to be called on it br The JS programming language released in is a superset of JavaScript dynamically typed with a gradual type system that is sound for ECMAScript and DOM API corner cases br br br br br br Further reading br Siek Jeremy G Vitousek Michael M Cimini Matteo Boyland John Tang Ball Thomas Bodik Rastislav Krishnamurthi Shriram Lerner Benjamin S Morrisett Greg eds Refined Criteria for Gradual Typing Leibniz International Proceedings in Informatics Vol Dagstuhl Germany Schloss Dagstuhl Leibniz Zentrum fuer Informatik pp doi lipics snapl ISBN S CID 