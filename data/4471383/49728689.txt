title: Flow-sensitive typing
id: 49728689
In programming language theory flow sensitive typing also called flow typing or occurrence typing is a type system where the type of an expression depends on its position in the control flow br In statically typed languages a type of an expression is determined by the types of the sub expressions that compose it However in flow sensitive typing an expression s type may be updated to a more specific type if it follows an operation that validates its type Validating operations can include type predicates imperative updates and control flow br br br Examples br br br Ceylon br See the following example in Ceylon which illustrates the concept br br and which outputs br br Hello world br Hello object br Hello John Doe br String size is br br br Kotlin br See this example in Kotlin br br br Benefits br This technique coupled with type inference reduces the need for writing type annotations for all variables or to do type casting like is seen with dynamic languages that use duck typing It reduces verbosity and makes for terser code easier to read and modify br It can also help language implementers provide implementations that execute dynamic languages faster by predicting the type of objects statically br Finally it increases type safety and can prevent problems due to null pointers labeled by C A R Hoare the null reference inventor as the billion dollar mistake br From a Programming Languages perspective it s reasonable to say that flow sensitive typing is the feature that finally made it possible to build usable type safe programming languages with union types and without rampant dynamic checking Until this point attempts to add this feature to languages such as Scheme generally resulted in intractably large type representations One example of a system with limited support for union types is Wright and Cartwright s Soft Scheme br br br Implementations br Typed Scheme a type system for Scheme was the first type system with this feature Its successor Typed Racket a dialect of Racket is also based on occurrence typing Shortly after Typed Scheme David J Pearce independently reinvented flow typing in Whiley br Typed JavaScript observed that in scripting languages flow typing depends on more than conditional predicates it also depends on state and control flow This style has since been adopted in languages like Ceylon TypeScript and Facebook Flow br There are also a few languages that don t have union types but do have nullable types that have a limited form of this feature that only applies to nullable types such as C Kotlin and Lobster br br br Alternatives br Pattern matching reaches the same goals as flow sensitive typing namely reducing verbosity and making up for terser code easier to read and modify br It achieves this is in a different way it allows to match the type of a structure extract data out of it at the same time by declaring new variable As such it reduces the ceremony around type casting and value extraction Pattern matching works best when used in conjunction with algebraic data types because all the cases can be enumerated and statically checked by the compiler br See this example mock for Java br br In a statically typed language the advantage of pattern matching over flow sensitive typing is that the type of a variable always stays the same it does not change depending on control flow When writing down the pattern to be matched a new variable is declared that will have the new type br br br 