title: Transmission Control Protocol
id: 30538
The Transmission Control Protocol TCP is one of the main protocols of the Internet protocol suite It originated in the initial network implementation in which it complemented the Internet Protocol IP Therefore the entire suite is commonly referred to as TCP IP TCP provides reliable ordered and error checked delivery of a stream of octets bytes between applications running on hosts communicating via an IP network Major internet applications such as the World Wide Web email remote administration and file transfer rely on TCP which is part of the Transport layer of the TCP IP suite SSL TLS often runs on top of TCP br TCP is connection oriented meaning that sender and receiver firstly need to establish a connection based on agreed parameters they do this through three way handshake procedure The server must be listening passive open for connection requests from clients before a connection is established Three way handshake active open retransmission and error detection adds to reliability but lengthens latency Applications that do not require reliable data stream service may use the User Datagram Protocol UDP instead which provides a connectionless datagram service that prioritizes time over reliability TCP employs network congestion avoidance However there are vulnerabilities in TCP including denial of service connection hijacking TCP veto and reset attack br br br Historical origin br In May Vint Cerf and Bob Kahn described an internetworking protocol for sharing resources using packet switching among network nodes The authors had been working with G rard Le Lann to incorporate concepts from the French CYCLADES project into the new network The specification of the resulting protocol RFC Specification of Internet Transmission Control Program was written by Vint Cerf Yogen Dalal and Carl Sunshine and published in December It contains the first attested use of the term internet as a shorthand for internetwork br The Transmission Control Program incorporated both connection oriented links and datagram services between hosts In version the monolithic Transmission Control Program was divided into a modular architecture consisting of the Transmission Control Protocol and the Internet Protocol This resulted in a networking model that became known informally as TCP IP although formally it was variously referred to as the DoD internet architecture model DoD model for short or DARPA model Later it became the part of and synonymous with the Internet Protocol Suite br The following Internet Experiment Note IEN documents describe the evolution of TCP into the modern version br br IEN Specification of Internet Transmission Control Program TCP Version March br IEN Specification of Internetwork Transmission Control Program TCP Version January br IEN br IEN br IEN br IEN br IEN br IEN br IEN br TCP was standardized in January as RFC br In Vint Cerf and Bob Kahn received the Turing Award for their foundational work on TCP IP br br br Network function br The Transmission Control Protocol provides a communication service at an intermediate level between an application program and the Internet Protocol It provides host to host connectivity at the transport layer of the Internet model An application does not need to know the particular mechanisms for sending data via a link to another host such as the required IP fragmentation to accommodate the maximum transmission unit of the transmission medium At the transport layer TCP handles all handshaking and transmission details and presents an abstraction of the network connection to the application typically through a network socket interface br At the lower levels of the protocol stack due to network congestion traffic load balancing or unpredictable network behavior IP packets may be lost duplicated or delivered out of order TCP detects these problems requests re transmission of lost data rearranges out of order data and even helps minimize network congestion to reduce the occurrence of the other problems If the data still remains undelivered the source is notified of this failure Once the TCP receiver has reassembled the sequence of octets originally transmitted it passes them to the receiving application Thus TCP abstracts the application s communication from the underlying networking details br TCP is used extensively by many internet applications including the World Wide Web WWW email File Transfer Protocol Secure Shell peer to peer file sharing and streaming media br TCP is optimized for accurate delivery rather than timely delivery and can incur relatively long delays on the order of seconds while waiting for out of order messages or re transmissions of lost messages Therefore it is not particularly suitable for real time applications such as voice over IP For such applications protocols like the Real time Transport Protocol RTP operating over the User Datagram Protocol UDP are usually recommended instead br TCP is a reliable byte stream delivery service that guarantees that all bytes received will be identical and in the same order as those sent Since packet transfer by many networks is not reliable TCP achieves this using a technique known as positive acknowledgment with re transmission This requires the receiver to respond with an acknowledgment message as it receives the data The sender keeps a record of each packet it sends and maintains a timer from when the packet was sent The sender re transmits a packet if the timer expires before receiving the acknowledgment The timer is needed in case a packet gets lost or corrupted br While IP handles actual delivery of the data TCP keeps track of segments the individual units of data transmission that a message is divided into for efficient routing through the network For example when an HTML file is sent from a web server the TCP software layer of that server divides the file into segments and forwards them individually to the internet layer in the network stack The internet layer software encapsulates each TCP segment into an IP packet by adding a header that includes among other data the destination IP address When the client program on the destination computer receives them the TCP software in the transport layer re assembles the segments and ensures they are correctly ordered and error free as it streams the file contents to the receiving application br br br TCP segment structure br Transmission Control Protocol accepts data from a data stream divides it into chunks and adds a TCP header creating a TCP segment The TCP segment is then encapsulated into an Internet Protocol IP datagram and exchanged with peers br The term TCP packet appears in both informal and formal usage whereas in more precise terminology segment refers to the TCP protocol data unit PDU datagram to the IP PDU and frame to the data link layer PDU br br Processes transmit data by calling on the TCP and passing buffers of data as arguments The TCP packages the data from these buffers into segments and calls on the internet module e g IP to transmit each segment to the destination TCP br br A TCP segment consists of a segment header and a data section The segment header contains mandatory fields and an optional extension field Options pink background in table The data section follows the header and is the payload data carried for the application The length of the data section is not specified in the segment header it can be calculated by subtracting the combined length of the segment header and IP header from the total IP datagram length specified in the IP header br br Source port bits br Identifies the sending port br Destination port bits br Identifies the receiving port br Sequence number bits br Has a dual role br If the SYN flag is set then this is the initial sequence number The sequence number of the actual first data byte and the acknowledged number in the corresponding ACK are then this sequence number plus br If the SYN flag is unset then this is the accumulated sequence number of the first data byte of this segment for the current session br Acknowledgment number bits br If the ACK flag is set then the value of this field is the next sequence number that the sender of the ACK is expecting This acknowledges receipt of all prior bytes if any The first ACK sent by each end acknowledges the other end s initial sequence number itself but no data br Data offset bits br Specifies the size of the TCP header in bit words The minimum size header is words and the maximum is words thus giving the minimum size of bytes and maximum of bytes allowing for up to bytes of options in the header This field gets its name from the fact that it is also the offset from the start of the TCP segment to the actual data br Reserved bits br For future use and should be set to zero senders should not set these and receivers should ignore them if set in the absence of further specification and implementation br From to the last bit bit of the header was defined as the NS Nonce Sum flag by the experimental RFC ECN nonce ECN nonce never gained widespread use and the RFC was moved to Historic status br Flags bits br Contains bit flags control bits as follows br CWR bit Congestion window reduced CWR flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set and had responded in congestion control mechanism br ECE bit ECN Echo has a dual role depending on the value of the SYN flag It indicates br If the SYN flag is set the TCP peer is ECN capable br If the SYN flag is unset a packet with the Congestion Experienced flag set ECN in its IP header was received during normal transmission This serves as an indication of network congestion or impending congestion to the TCP sender br URG bit Indicates that the Urgent pointer field is significant br ACK bit Indicates that the Acknowledgment field is significant All packets after the initial SYN packet sent by the client should have this flag set br PSH bit Push function Asks to push the buffered data to the receiving application br RST bit Reset the connection br SYN bit Synchronize sequence numbers Only the first packet sent from each end should have this flag set Some other flags and fields change meaning based on this flag and some are only valid when it is set and others when it is clear br FIN bit Last packet from sender br Window size bits br The size of the receive window which specifies the number of window size units that the sender of this segment is currently willing to receive See Flow control and Window scaling br Checksum bits br The bit checksum field is used for error checking of the TCP header the payload and an IP pseudo header The pseudo header consists of the source IP address the destination IP address the protocol number for the TCP protocol and the length of the TCP headers and payload in bytes br Urgent pointer bits br If the URG flag is set then this bit field is an offset from the sequence number indicating the last urgent data byte br Options Variable bits in units of bits br The length of this field is determined by the data offset field Options have up to three fields Option Kind byte Option Length byte Option Data variable The Option Kind field indicates the type of option and is the only field that is not optional Depending on Option Kind value the next two fields may be set Option Length indicates the total length of the option and Option Data contains data associated with the option if applicable For example an Option Kind byte of indicates that this is a no operation option used only for padding and does not have an Option Length or Option Data fields following it An Option Kind byte of marks the end of options and is also only one byte An Option Kind byte of is used to indicate Maximum Segment Size option and will be followed by an Option Length byte specifying the length of the MSS field Option Length is the total length of the given options field including Option Kind and Option Length fields So while the MSS value is typically expressed in two bytes Option Length will be As an example an MSS option field with a value of x B is coded as x x x B in the TCP options section br Some options may only be sent when SYN is set they are indicated below as SYN Option Kind and standard lengths given as Option Kind Option Length br br The remaining Option Kind values are historical obsolete experimental not yet standardized or unassigned Option number assignments are maintained by the Internet Assigned Numbers Authority IANA br Padding br The TCP header padding is used to ensure that the TCP header ends and data begins on a bit boundary The padding is composed of zeros br br br Protocol operation br br TCP protocol operations may be divided into three phases Connection establishment is a multi step handshake process that establishes a connection before entering the data transfer phase After data transfer is completed the connection termination closes the connection and releases all allocated resources br A TCP connection is managed by an operating system through a resource that represents the local end point for communications the Internet socket During the lifetime of a TCP connection the local end point undergoes a series of state changes br br br Connection establishment br Before a client attempts to connect with a server the server must first bind to and listen at a port to open it up for connections this is called a passive open Once the passive open is established a client may establish a connection by initiating an active open using the three way or step handshake br br SYN The active open is performed by the client sending a SYN to the server The client sets the segment s sequence number to a random value A br SYN ACK In response the server replies with a SYN ACK The acknowledgment number is set to one more than the received sequence number i e A and the sequence number that the server chooses for the packet is another random number B br ACK Finally the client sends an ACK back to the server The sequence number is set to the received acknowledgment value i e A and the acknowledgment number is set to one more than the received sequence number i e B br Steps and establish and acknowledge the sequence number for one direction client to server Steps and establish and acknowledge the sequence number for the other direction server to client Following the completion of these steps both the client and server have received acknowledgments and a full duplex communication is established br br br Connection termination br br The connection termination phase uses a four way handshake with each side of the connection terminating independently When an endpoint wishes to stop its half of the connection it transmits a FIN packet which the other end acknowledges with an ACK Therefore a typical tear down requires a pair of FIN and ACK segments from each TCP endpoint After the side that sent the first FIN has responded with the final ACK it waits for a timeout before finally closing the connection during which time the local port is unavailable for new connections this state lets the TCP client resend the final acknowledgment to the server in case the ACK is lost in transit The time duration is implementation dependent but some common values are seconds minute and minutes After the timeout the client enters the CLOSED state and the local port becomes available for new connections br It is also possible to terminate the connection by a way handshake when host A sends a FIN and host B replies with a FIN ACK combining two steps into one and host A replies with an ACK br Some operating systems such as Linux and HP UX implement a half duplex close sequence If the host actively closes a connection while still having unread incoming data available the host sends the signal RST losing any received data instead of FIN This assures that a TCP application is aware there was a data loss br A connection can be in a half open state in which case one side has terminated the connection but the other has not The side that has terminated can no longer send any data into the connection but the other side can The terminating side should continue reading the data until the other side terminates as well br br br Resource usage br Most implementations allocate an entry in a table that maps a session to a running operating system process Because TCP packets do not include a session identifier both endpoints identify the session using the client s address and port Whenever a packet is received the TCP implementation must perform a lookup on this table to find the destination process Each entry in the table is known as a Transmission Control Block or TCB It contains information about the endpoints IP and port status of the connection running data about the packets that are being exchanged and buffers for sending and receiving data br The number of sessions in the server side is limited only by memory and can grow as new connections arrive but the client must allocate an ephemeral port before sending the first SYN to the server This port remains allocated during the whole conversation and effectively limits the number of outgoing connections from each of the client s IP addresses If an application fails to properly close unrequired connections a client can run out of resources and become unable to establish new TCP connections even from other applications br Both endpoints must also allocate space for unacknowledged packets and received but unread data br br br Data transfer br The Transmission Control Protocol differs in several key features compared to the User Datagram Protocol br br Ordered data transfer the destination host rearranges segments according to a sequence number br Retransmission of lost packets any cumulative stream not acknowledged is retransmitted br Error free data transfer corrupted packets are treated as lost and are retransmitted br Flow control limits the rate a sender transfers data to guarantee reliable delivery The receiver continually hints the sender on how much data can be received When the receiving host s buffer fills the next acknowledgment suspends the transfer and allows the data in the buffer to be processed br Congestion control lost packets presumed due to congestion trigger a reduction in data delivery rate br br br Reliable transmission br TCP uses a sequence number to identify each byte of data The sequence number identifies the order of the bytes sent from each computer so that the data can be reconstructed in order regardless of any out of order delivery that may occur The sequence number of the first byte is chosen by the transmitter for the first packet which is flagged SYN This number can be arbitrary and should in fact be unpredictable to defend against TCP sequence prediction attacks br Acknowledgments ACKs are sent with a sequence number by the receiver of data to tell the sender that data has been received to the specified byte ACKs do not imply that the data has been delivered to the application they merely signify that it is now the receiver s responsibility to deliver the data br Reliability is achieved by the sender detecting lost data and retransmitting it TCP uses two primary techniques to identify loss Retransmission timeout RTO and duplicate cumulative acknowledgments DupAcks br When a TCP segment is retransmitted it retains the same sequence number as the original delivery attempt This conflation of delivery and logical data ordering means that when acknowledgment is received after a retransmission the sender cannot tell whether the original transmission or the retransmission is being acknowledged the so called retransmission ambiguity TCP incurs complexity due to retransmission ambiguity br br br Dupack based retransmission br If a single segment say segment number in a stream is lost then the receiver cannot acknowledge packets above that segment number because it uses cumulative ACKs Hence the receiver acknowledges packet again on the receipt of another data packet This duplicate acknowledgement is used as a signal for packet loss That is if the sender receives three duplicate acknowledgments it retransmits the last unacknowledged packet A threshold of three is used because the network may reorder segments causing duplicate acknowledgements This threshold has been demonstrated to avoid spurious retransmissions due to reordering Some TCP implementations use selective acknowledgements SACKs to provide explicit feedback about the segments that have been received This greatly improves TCP s ability to retransmit the right segments br Retransmission ambiguity can cause spurious fast retransmissions and congestion avoidance if there is reordering beyond the duplicate acknowledgment threshold In the last two decades more packet reordering has been observed over the Internet which led TCP implementations such as the one in the Linux Kernel to adopt heuristic methods to scale the duplicate acknowledgment threshold Recently there have been efforts to completely phase out dupack based fast retransmissions and replace them with timer based ones Not to be confused with the classic RTO discussed below The time based loss detection algorithm called Recent Acknowledgment RACK has been adopted as the default algorithm in Linux and Windows br br br Timeout based retransmission br When a sender transmits a segment it initializes a timer with a conservative estimate of the arrival time of the acknowledgment The segment is retransmitted if the timer expires with a new timeout threshold of twice the previous value resulting in exponential backoff behavior Typically the initial timer value is br br br br br smoothed RTT br br br max br br G br br br br br RTT variation br br br br br displaystyle text smoothed RTT max G times text RTT variation br br where br br br br G br br br displaystyle G br br is the clock granularity This guards against excessive transmission traffic due to faulty or malicious actors such as man in the middle denial of service attackers br Accurate RTT estimates are important for loss recovery as it allows a sender to assume an unacknowledged packet to be lost after sufficient time elapses i e determining the RTO time Retransmission ambiguity can lead a sender s estimate of RTT to be imprecise In an environment with variable RTTs spurious timeouts can occur if the RTT is under estimated then the RTO fires and triggers a needless retransmit and slow start After a spurious retransmission when the acknowledgments for the original transmissions arrive the sender may believe them to be acknowledging the retransmission and conclude incorrectly that segments sent between the original transmission and retransmission have been lost causing further needless retransmissions to the extent that the link truly becomes congested selective acknowledgement can reduce this effect RFC specifies that implementations must not use retransmitted segments when estimating RTT Karn s algorithm ensures that a good RTT estimate will be produced eventually by waiting until there is an unambiguous acknowledgment before adjusting the RTO After spurious retransmissions however it may take significant time before such an unambiguous acknowledgment arrives degrading performance in the interim TCP timestamps also resolve the retransmission ambiguity problem in setting the RTO though they do not necessarily improve the RTT estimate br br br Error detection br Sequence numbers allow receivers to discard duplicate packets and properly sequence out of order packets Acknowledgments allow senders to determine when to retransmit lost packets br To assure correctness a checksum field is included see Checksum computation for details The TCP checksum is a weak check by modern standards and is normally paired with a CRC integrity check at layer below both TCP and IP such as is used in PPP or the Ethernet frame However introduction of errors in packets between CRC protected hops is common and the bit TCP checksum catches most of these br br br Flow control br TCP uses an end to end flow control protocol to avoid having the sender send data too fast for the TCP receiver to receive and process it reliably Having a mechanism for flow control is essential in an environment where machines of diverse network speeds communicate For example if a PC sends data to a smartphone that is slowly processing received data the smartphone must be able to regulate the data flow so as not to be overwhelmed br TCP uses a sliding window flow control protocol In each TCP segment the receiver specifies in the receive window field the amount of additionally received data in bytes that it is willing to buffer for the connection The sending host can send only up to that amount of data before it must wait for an acknowledgment and receive window update from the receiving host br br When a receiver advertises a window size of the sender stops sending data and starts its persist timer The persist timer is used to protect TCP from a deadlock situation that could arise if a subsequent window size update from the receiver is lost and the sender cannot send more data until receiving a new window size update from the receiver When the persist timer expires the TCP sender attempts recovery by sending a small packet so that the receiver responds by sending another acknowledgment containing the new window size br If a receiver is processing incoming data in small increments it may repeatedly advertise a small receive window This is referred to as the silly window syndrome since it is inefficient to send only a few bytes of data in a TCP segment given the relatively large overhead of the TCP header br br br Congestion control br br The final main aspect of TCP is congestion control TCP uses a number of mechanisms to achieve high performance and avoid congestive collapse a gridlock situation where network performance is severely degraded These mechanisms control the rate of data entering the network keeping the data flow below a rate that would trigger collapse They also yield an approximately max min fair allocation between flows br Acknowledgments for data sent or the lack of acknowledgments are used by senders to infer network conditions between the TCP sender and receiver Coupled with timers TCP senders and receivers can alter the behavior of the flow of data This is more generally referred to as congestion control or congestion avoidance br Modern implementations of TCP contain four intertwined algorithms slow start congestion avoidance fast retransmit and fast recovery br In addition senders employ a retransmission timeout RTO that is based on the estimated round trip time RTT between the sender and receiver as well as the variance in this round trip time There are subtleties in the estimation of RTT For example senders must be careful when calculating RTT samples for retransmitted packets typically they use Karn s Algorithm or TCP timestamps These individual RTT samples are then averaged over time to create a smoothed round trip time SRTT using Jacobson s algorithm This SRTT value is what is used as the round trip time estimate br Enhancing TCP to reliably handle loss minimize errors manage congestion and go fast in very high speed environments are ongoing areas of research and standards development As a result there are a number of TCP congestion avoidance algorithm variations br br br Maximum segment size br The maximum segment size MSS is the largest amount of data specified in bytes that TCP is willing to receive in a single segment For best performance the MSS should be set small enough to avoid IP fragmentation which can lead to packet loss and excessive retransmissions To accomplish this typically the MSS is announced by each side using the MSS option when the TCP connection is established The option value is derived from the maximum transmission unit MTU size of the data link layer of the networks to which the sender and receiver are directly attached TCP senders can use path MTU discovery to infer the minimum MTU along the network path between the sender and receiver and use this to dynamically adjust the MSS to avoid IP fragmentation within the network br MSS announcement may also be called MSS negotiation but strictly speaking the MSS is not negotiated Two completely independent values of MSS are permitted for the two directions of data flow in a TCP connection so there is no need to agree on a common MSS configuration for a bidirectional connection br br br Selective acknowledgments br br Relying purely on the cumulative acknowledgment scheme employed by the original TCP can lead to inefficiencies when packets are lost For example suppose bytes with sequence number to are sent in different TCP segments of equal size and the second segment sequence numbers to is lost during transmission In a pure cumulative acknowledgment protocol the receiver can only send a cumulative ACK value of the sequence number immediately following the last sequence number of the received data and cannot say that it received bytes to successfully Thus the sender may then have to resend all data starting with sequence number br To alleviate this issue TCP employs the selective acknowledgment SACK option defined in in RFC which allows the receiver to acknowledge discontinuous blocks of packets that were received correctly in addition to the sequence number immediately following the last sequence number of the last contiguous byte received successively as in the basic TCP acknowledgment The acknowledgment can include a number of SACK blocks where each SACK block is conveyed by the Left Edge of Block the first sequence number of the block and the Right Edge of Block the sequence number immediately following the last sequence number of the block with a Block being a contiguous range that the receiver correctly received In the example above the receiver would send an ACK segment with a cumulative ACK value of and a SACK option header with sequence numbers and The sender would accordingly retransmit only the second segment with sequence numbers to br A TCP sender may interpret an out of order segment delivery as a lost segment If it does so the TCP sender will retransmit the segment previous to the out of order packet and slow its data delivery rate for that connection The duplicate SACK option an extension to the SACK option that was defined in May in RFC solves this problem The TCP receiver sends a D ACK to indicate that no segments were lost and the TCP sender can then reinstate the higher transmission rate br The SACK option is not mandatory and comes into operation only if both parties support it This is negotiated when a connection is established SACK uses a TCP header option see TCP segment structure for details The use of SACK has become widespread all popular TCP stacks support it Selective acknowledgment is also used in Stream Control Transmission Protocol SCTP br Selective acknowledgements can be reneged where the receiver unilaterally discards the selectively acknowledged data RFC discouraged such behavior but did not prohibit it to allow receivers the option of reneging if they for example ran out of buffer space The possibility of reneging leads to implementation complexity for both senders and receivers and also imposes memory costs on the sender br br br Window scaling br br For more efficient use of high bandwidth networks a larger TCP window size may be used A bit TCP window size field controls the flow of data and its value is limited to bytes Since the size field cannot be expanded beyond this limit a scaling factor is used The TCP window scale option as defined in RFC is an option used to increase the maximum window size to gigabyte Scaling up to these larger window sizes is necessary for TCP tuning br The window scale option is used only during the TCP way handshake The window scale value represents the number of bits to left shift the bit window size field when interpreting it The window scale value can be set from no shift to for each direction independently Both sides must send the option in their SYN segments to enable window scaling in either direction br Some routers and packet firewalls rewrite the window scaling factor during a transmission This causes sending and receiving sides to assume different TCP window sizes The result is non stable traffic that may be very slow The problem is visible on some sites behind a defective router br br br TCP timestamps br TCP timestamps defined in RFC in can help TCP determine in which order packets were sent TCP timestamps are not normally aligned to the system clock and start at some random value Many operating systems will increment the timestamp for every elapsed millisecond however the RFC only states that the ticks should be proportional br There are two timestamp fields br br a byte sender timestamp value my timestamp br a byte echo reply timestamp value the most recent timestamp received from you br TCP timestamps are used in an algorithm known as Protection Against Wrapped Sequence numbers or PAWS PAWS is used when the receive window crosses the sequence number wraparound boundary In the case where a packet was potentially retransmitted it answers the question Is this sequence number in the first GB or the second And the timestamp is used to break the tie br Also the Eifel detection algorithm uses TCP timestamps to determine if retransmissions are occurring because packets are lost or simply out of order br TCP timestamps are enabled by default in Linux and disabled by default in Windows Server and br Recent Statistics show that the level of TCP timestamp adoption has stagnated at owing to Windows Server dropping support since Windows Server br br br Out of band data br It is possible to interrupt or abort the queued stream instead of waiting for the stream to finish This is done by specifying the data as urgent This marks the transmission as out of band data OOB and tells the receiving program to process it immediately When finished TCP informs the application and resumes the stream queue An example is when TCP is used for a remote login session where the user can send a keyboard sequence that interrupts or aborts the remotely running program without waiting for the program to finish its current transfer br The urgent pointer only alters the processing on the remote host and doesn t expedite any processing on the network itself The capability is implemented differently or poorly on different systems or may not be supported Where it is available it is prudent to assume only single bytes of OOB data will be reliably handled Since the feature is not frequently used it is not well tested on some platforms and has been associated with vulnerabilities WinNuke for instance br br br Forcing data delivery br Normally TCP waits for ms for a full packet of data to send Nagle s Algorithm tries to group small messages into a single packet This wait creates small but potentially serious delays if repeated constantly during a file transfer For example a typical send block would be KB a typical MSS is so packets go out on a Mbit s Ethernet taking ms each followed by a third carrying the remaining after a ms pause because TCP is waiting for a full buffer In the case of telnet each user keystroke is echoed back by the server before the user can see it on the screen This delay would become very annoying br Setting the socket option TCP NODELAY overrides the default ms send delay Application programs use this socket option to force output to be sent after writing a character or line of characters br The RFC defines the PSH push bit as a message to the receiving TCP stack to send this data immediately up to the receiving application There is no way to indicate or control it in user space using Berkeley sockets it is controlled by the protocol stack only br br br Vulnerabilities br TCP may be attacked in a variety of ways The results of a thorough security assessment of TCP along with possible mitigations for the identified issues were published in and was pursued within the IETF through Notable vulnerabilities include denial of service connection hijacking TCP veto and TCP reset attack br br br Denial of service br By using a spoofed IP address and repeatedly sending purposely assembled SYN packets followed by many ACK packets attackers can cause the server to consume large amounts of resources keeping track of the bogus connections This is known as a SYN flood attack Proposed solutions to this problem include SYN cookies and cryptographic puzzles though SYN cookies come with their own set of vulnerabilities Sockstress is a similar attack that might be mitigated with system resource management An advanced DoS attack involving the exploitation of the TCP persist timer was analyzed in Phrack No PUSH and ACK floods are other variants br br br Connection hijacking br br An attacker who is able to eavesdrop on a TCP session and redirect packets can hijack a TCP connection To do so the attacker learns the sequence number from the ongoing communication and forges a false segment that looks like the next segment in the stream A simple hijack can result in one packet being erroneously accepted at one end When the receiving host acknowledges the false segment synchronization is lost Hijacking may be combined with ARP spoofing or other routing attacks that allow an attacker to take permanent control of the TCP connection br Impersonating a different IP address was not difficult prior to RFC when the initial sequence number was easily guessable The earlier implementations allowed an attacker to blindly send a sequence of packets that the receiver would believe came from a different IP address without the need to intercept communication through ARP or routing attacks it is enough to ensure that the legitimate host of the impersonated IP address is down or bring it to that condition using denial of service attacks This is why the initial sequence number is now chosen at random br br br TCP veto br An attacker who can eavesdrop and predict the size of the next packet to be sent can cause the receiver to accept a malicious payload without disrupting the existing connection The attacker injects a malicious packet with the sequence number and a payload size of the next expected packet When the legitimate packet is ultimately received it is found to have the same sequence number and length as a packet already received and is silently dropped as a normal duplicate packet the legitimate packet is vetoed by the malicious packet Unlike in connection hijacking the connection is never desynchronized and communication continues as normal after the malicious payload is accepted TCP veto gives the attacker less control over the communication but makes the attack particularly resistant to detection The only evidence to the receiver that something is amiss is a single duplicate packet a normal occurrence in an IP network The sender of the vetoed packet never sees any evidence of an attack br br br TCP ports br br A TCP connection is identified by a four tuple of the source address source port destination address and destination port Port numbers are used to identify different services and to allow multiple connections between hosts TCP uses bit port numbers providing possible values for each of the source and destination ports The dependency of connection identity on addresses means that TCP connections are bound to a single network path TCP cannot use other routes that multihomed hosts have available and connections break if an endpoint s address changes br Port numbers are categorized into three basic categories well known registered and dynamic or private The well known ports are assigned by the Internet Assigned Numbers Authority IANA and are typically used by system level processes Well known applications running as servers and passively listening for connections typically use these ports Some examples include FTP and SSH TELNET SMTP HTTP over SSL TLS and HTTP Registered ports are typically used by end user applications as ephemeral source ports when contacting servers but they can also identify named services that have been registered by a third party Dynamic or private ports can also be used by end user applications however these ports typically do not contain any meaning outside a particular TCP connection br Network Address Translation NAT typically uses dynamic port numbers on the public facing side to disambiguate the flow of traffic that is passing between a public network and a private subnetwork thereby allowing many IP addresses and their ports on the subnet to be serviced by a single public facing address br br br Development br TCP is a complex protocol However while significant enhancements have been made and proposed over the years its most basic operation has not changed significantly since its first specification RFC in and the v specification RFC published in September RFC published in October clarified a number of TCP protocol implementation requirements A list of the required specifications and over strongly encouraged enhancements is available in RFC Among this list is RFC TCP Congestion Control one of the most important TCP related RFCs in recent years describes updated algorithms that avoid undue congestion In RFC was written to describe Explicit Congestion Notification ECN a congestion avoidance signaling mechanism br The original TCP congestion avoidance algorithm was known as TCP Tahoe but many alternative algorithms have since been proposed including TCP Reno TCP Vegas FAST TCP TCP New Reno and TCP Hybla br Multipath TCP MPTCP is an ongoing effort within the IETF that aims at allowing a TCP connection to use multiple paths to maximize resource usage and increase redundancy The redundancy offered by Multipath TCP in the context of wireless networks enables the simultaneous use of different networks which brings higher throughput and better handover capabilities Multipath TCP also brings performance benefits in datacenter environments The reference implementation of Multipath TCP was developed in the Linux kernel Multipath TCP is used to support the Siri voice recognition application on iPhones iPads and Macs br tcpcrypt is an extension proposed in July to provide transport level encryption directly in TCP itself It is designed to work transparently and not require any configuration Unlike TLS SSL tcpcrypt itself does not provide authentication but provides simple primitives down to the application to do that The tcpcrypt RFC was published by the IETF in May br TCP Fast Open is an extension to speed up the opening of successive TCP connections between two endpoints It works by skipping the three way handshake using a cryptographic cookie It is similar to an earlier proposal called T TCP which was not widely adopted due to security issues TCP Fast Open was published as RFC in br Proposed in May Proportional Rate Reduction PRR is a TCP extension developed by Google engineers PRR ensures that the TCP window size after recovery is as close to the slow start threshold as possible The algorithm is designed to improve the speed of recovery and is the default congestion control algorithm in Linux kernels br br br Deprecated proposals br TCP Cookie Transactions TCPCT is an extension proposed in December to secure servers against denial of service attacks Unlike SYN cookies TCPCT does not conflict with other TCP extensions such as window scaling TCPCT was designed due to necessities of DNSSEC where servers have to handle large numbers of short lived TCP connections In TCPCT was deprecated in favor of TCP Fast Open The status of the original RFC was changed to historic br br br Hardware implementations br One way to overcome the processing power requirements of TCP is to build hardware implementations of it widely known as TCP offload engines TOE The main problem of TOEs is that they are hard to integrate into computing systems requiring extensive changes in the operating system of the computer or device br br br Wire image and ossification br The wire data of TCP provides significant information gathering and modification opportunities to on path observers as the protocol metadata is transmitted in cleartext While this transparency is useful to network operators and researchers information gathered from protocol metadata may reduce the end user s privacy This visibility and malleability of metadata has led to TCP being difficult to extend a case of protocol ossification as any intermediate node a middlebox can make decisions based on that metadata or even modify it breaking the end to end principle One measurement found that a third of paths across the Internet encounter at least one intermediary that modifies TCP metadata and of paths encounter harmful ossifying effects from intermediaries Avoiding extensibility hazards from intermediaries placed significant constraints on the design of MPTCP and difficulties caused by intermediaries have hindered the deployment of TCP Fast Open in web browsers Another source of ossification is the difficulty of modification of TCP functions at the endpoints typically in the operating system kernel or in hardware with a TCP offload engine br br br Performance br As TCP provides applications with the abstraction of a reliable byte stream it can suffer from head of line blocking if packets are reordered or lost and need to be retransmitted and thus are reordered data from sequentially later parts of the stream may be received before sequentially earlier parts of the stream however the later data cannot typically be used until the earlier data has been received incurring network latency If multiple independent higher level messages are encapsulated and multiplexed onto a single TCP connection then head of line blocking can cause processing of a fully received message that was sent later to wait for delivery of a message that was sent earlier Web browsers attempt to mitigate head of line blocking by opening multiple parallel connections This incurs the cost of connection establishment repeatedly as well as multiplying the resources needed to track those connections at the endpoints Parallel connections also have congestion control operating independently of each other rather than being able to pool information together and respond more promptly to observed network conditions TCP s aggressive initial sending patterns can cause congestion if multiple parallel connections are opened and the per connection fairness model leads to a monopolization of resources by applications that take this approach br Connection establishment is a major contributor to latency as experienced by Web users TCP s three way handshake introduces one RTT of latency during connection establishment before data can be sent For short flows these delays are very significant Transport Layer Security TLS requires a handshake of its own for key exchange at connection establishment Because of the layered design the TCP handshake and the TLS handshake proceed serially the TLS handshake cannot begin until the TCP handshake has concluded Two RTTs are required for connection establishment with TLS over TCP TLS allows for zero RTT connection resumption in some circumstances but when layered over TCP one RTT is still required for the TCP handshake and this cannot assist the initial connection zero RTT handshakes also present cryptographic challenges as efficient replay safe and forward secure non interactive key exchange is an open research topic TCP Fast Open allows the transmission of data in the initial i e SYN and SYN ACK packets removing one RTT of latency during connection establishment However TCP Fast Open has been difficult to deploy due to protocol ossification in no Web browsers used it by default br TCP throughput is affected by packet reordering Reordered packets can cause duplicate acknowledgments to be sent which if they cross the threshold will then trigger a spurious retransmission and congestion control Transmission behaviour can also become less smooth and more bursty as large ranges are acknowledged all at once when a reordered packet at the range s start is received in a similar manner to how head of line blocking affects applications Blanton Allman found that throughput was inversely related to the amount of reordering up to a limit where all reordering triggers spurious retransmission Mitigating reordering depends on a sender s ability to determine that it has sent a spurious retransmission and hence on resolving retransmission ambiguity Reducing reordering induced spurious retransmissions trades off against speedy recovery from genuine loss br Selective acknowledgment can provide a significant benefit to throughput Bruyeron Hemon Zhang measured gains of up to An important factor in the improvement is that selective acknowledgment can more often avoid going into slow start after a loss and can hence better use available bandwidth However TCP can only selectively acknowledge a maximum of three blocks of sequence numbers This can limit the retransmission rate and hence loss recovery or cause needless retransmissions especially in high loss environments br TCP was originally designed for wired networks Packet loss is considered to be the result of network congestion and the congestion window size is reduced dramatically as a precaution However wireless links are known to experience sporadic and usually temporary losses due to fading shadowing hand off interference and other radio effects that are not strictly congestion After the erroneous back off of the congestion window size due to wireless packet loss there may be a congestion avoidance phase with a conservative decrease in window size This causes the radio link to be underused Extensive research on combating these harmful effects has been conducted Suggested solutions can be categorized as end to end solutions which require modifications at the client or server link layer solutions such as Radio Link Protocol RLP in cellular networks or proxy based solutions which require some changes in the network without modifying end nodes br A number of alternative congestion control algorithms such as Vegas Westwood Veno and Santa Cruz have been proposed to help solve the wireless problem br br br Acceleration br The idea of a TCP accelerator is to terminate TCP connections inside the network processor and then relay the data to a second connection toward the end system The data packets that originate from the sender are buffered at the accelerator node which is responsible for performing local retransmissions in the event of packet loss Thus in case of losses the feedback loop between the sender and the receiver is shortened to the one between the acceleration node and the receiver which guarantees a faster delivery of data to the receiver br Since TCP is a rate adaptive protocol the rate at which the TCP sender injects packets into the network is directly proportional to the prevailing load condition within the network as well as the processing capacity of the receiver The prevalent conditions within the network are judged by the sender on the basis of the acknowledgments received by it The acceleration node splits the feedback loop between the sender and the receiver and thus guarantees a shorter round trip time RTT per packet A shorter RTT is beneficial as it ensures a quicker response time to any changes in the network and a faster adaptation by the sender to combat these changes br Disadvantages of the method include the fact that the TCP session has to be directed through the accelerator this means that if routing changes so that the accelerator is no longer in the path the connection will be broken It also destroys the end to end property of the TCP ack mechanism when the ACK is received by the sender the packet has been stored by the accelerator not delivered to the receiver br br br Debugging br A packet sniffer which intercepts TCP traffic on a network link can be useful in debugging networks network stacks and applications that use TCP by showing the user what packets are passing through a link Some networking stacks support the SO DEBUG socket option which can be enabled on the socket using setsockopt That option dumps all the packets TCP states and events on that socket which is helpful in debugging Netstat is another utility that can be used for debugging br br br Alternatives br For many applications TCP is not appropriate One problem at least with normal implementations is that the application cannot access the packets coming after a lost packet until the retransmitted copy of the lost packet is received This causes problems for real time applications such as streaming media real time multiplayer games and voice over IP VoIP where it is generally more useful to get most of the data in a timely fashion than it is to get all of the data in order br For historical and performance reasons most storage area networks SANs use Fibre Channel Protocol FCP over Fibre Channel connections br Also for embedded systems network booting and servers that serve simple requests from huge numbers of clients e g DNS servers the complexity of TCP can be a problem Finally some tricks such as transmitting data between two hosts that are both behind NAT using STUN or similar systems are far simpler without a relatively complex protocol like TCP in the way br Generally where TCP is unsuitable the User Datagram Protocol UDP is used This provides the application multiplexing and checksums that TCP does but does not handle streams or retransmission giving the application developer the ability to code them in a way suitable for the situation or to replace them with other methods like forward error correction or interpolation br Stream Control Transmission Protocol SCTP is another protocol that provides reliable stream oriented services similar to TCP It is newer and considerably more complex than TCP and has not yet seen widespread deployment However it is especially designed to be used in situations where reliability and near real time considerations are important br Venturi Transport Protocol VTP is a patented proprietary protocol that is designed to replace TCP transparently to overcome perceived inefficiencies related to wireless data transport br TCP also has issues in high bandwidth environments The TCP congestion avoidance algorithm works very well for ad hoc environments where the data sender is not known in advance If the environment is predictable a timing based protocol such as Asynchronous Transfer Mode ATM can avoid TCP s retransmits overhead br UDP based Data Transfer Protocol UDT has better efficiency and fairness than TCP in networks that have high bandwidth delay product br Multipurpose Transaction Protocol MTP IP is patented proprietary software that is designed to adaptively achieve high throughput and transaction performance in a wide variety of network conditions particularly those where TCP is perceived to be inefficient br br br Checksum computation br br br TCP checksum for IPv br When TCP runs over IPv the method used to compute the checksum is defined as follows br br The checksum field is the bit ones complement of the ones complement sum of all bit words in the header and text The checksum computation needs to ensure the bit alignment of the data being summed If a segment contains an odd number of header and text octets alignment can be achieved by padding the last octet with zeros on its right to form a bit word for checksum purposes The pad is not transmitted as part of the segment While computing the checksum the checksum field itself is replaced with zeros br In other words after appropriate padding all bit words are added using ones complement arithmetic The sum is then bitwise complemented and inserted as the checksum field A pseudo header that mimics the IPv packet header used in the checksum computation is shown in the table below br br The source and destination addresses are those of the IPv header The protocol value is for TCP cf List of IP protocol numbers The TCP length field is the length of the TCP header and data measured in octets br br br TCP checksum for IPv br When TCP runs over IPv the method used to compute the checksum is changed br br Any transport or other upper layer protocol that includes the addresses from the IP header in its checksum computation must be modified for use over IPv to include the bit IPv addresses instead of bit IPv addresses br br A pseudo header that mimics the IPv header for computation of the checksum is shown below br br Source address the one in the IPv header br Destination address the final destination if the IPv packet doesn t contain a Routing header TCP uses the destination address in the IPv header otherwise at the originating node it uses the address in the last element of the Routing header and at the receiving node it uses the destination address in the IPv header br TCP length the length of the TCP header and data br Next Header the protocol value for TCP br br br Checksum offload br Many TCP IP software stack implementations provide options to use hardware assistance to automatically compute the checksum in the network adapter prior to transmission onto the network or upon reception from the network for validation This may relieve the OS from using precious CPU cycles calculating the checksum Hence overall network performance is increased br This feature may cause packet analyzers that are unaware or uncertain about the use of checksum offload to report invalid checksums in outbound packets that have not yet reached the network adapter This will only occur for packets that are intercepted before being transmitted by the network adapter all packets transmitted by the network adaptor on the wire will have valid checksums This issue can also occur when monitoring packets being transmitted between virtual machines on the same host where a virtual device driver may omit the checksum calculation as an optimization knowing that the checksum will be calculated later by the VM host kernel or its physical hardware br br br See also br br br Notes br br br br br br Bibliography br br br Requests for Comments br Cerf Vint Dalal Yogen Sunshine Carl December Specification of Internet Transmission Control Program December Version doi RFC RFC br Postel Jon September Internet Protocol doi RFC RFC br Postel Jon September Transmission Control Protocol doi RFC RFC br Braden Robert ed October Requirements for Internet Hosts Communication Layers doi RFC RFC br Jacobson Van Braden Bob Borman Dave May TCP Extensions for High Performance doi RFC RFC br Bellovin Steven M May Defending Against Sequence Number Attacks doi RFC RFC br Mathis Matt Mahdavi Jamshid Floyd Sally Romanow Allyn October TCP Selective Acknowledgment Options doi RFC RFC br Allman Mark Paxson Vern Stevens W Richard April TCP Congestion Control doi RFC RFC br Floyd Sally Mahdavi Jamshid Mathis Matt Podolsky Matthew July An Extension to the Selective Acknowledgement SACK Option for TCP doi RFC RFC br Ramakrishnan K K Floyd Sally Black David September The Addition of Explicit Congestion Notification ECN to IP doi RFC RFC br Ludwig Reiner Meyer Michael April The Eifel Detection Algorithm for TCP doi RFC RFC br Spring Neil Weatherall David Ely David June Robust Explicit Congestion Notification ECN Signaling with Nonces doi RFC RFC br Allman Mark Paxson Vern Blanton Ethan September TCP Congestion Control doi RFC RFC br Simpson William Allen January TCP Cookie Transactions TCPCT doi RFC RFC br Ford Alan Raiciu Costin Handley Mark Barre Sebastien Iyengar Janardhan March Architectural Guidelines for Multipath TCP Development doi RFC RFC br Paxson Vern Allman Mark Chu H K Jerry Sargent Matt June Computing TCP s Retransmission Timer doi RFC RFC br Ford Alan Raiciu Costin Handley Mark Bonaventure Olivier January TCP Extensions for Multipath Operation with Multiple Addresses doi RFC RFC br Mathis Matt Dukkipati Nandita Cheng Yuchung May Proportional Rate Reduction for TCP doi RFC RFC br Borman David Braden Bob Jacobson Van September Scheffenegger Richard ed TCP Extensions for High Performance doi RFC RFC br Duke Martin Braden Robert Eddy Wesley M Blanton Ethan Zimmermann Alexander February A Roadmap for Transmission Control Protocol TCP Specification Documents doi RFC RFC br Cheng Yuchung Chu Jerry Radhakrishnan Sivasankar Jain Arvind December TCP Fast Open doi RFC RFC br Zimmermann Alexander Eddy Wesley M Eggert Lars April Moving Outdated TCP Extensions and TCP Related Documents to Historic or Informational Status doi RFC RFC br Fairhurst Gorry Trammell Brian Kuehlewind Mirja eds March Services Provided by IETF Transport Protocols and Congestion Control Mechanisms doi RFC RFC br Cheng Yuchung Cardwell Neal Dukkipati Nandita Jha Priyaranjan eds February The RACK TLP Loss Detection Algorithm for TCP doi RFC RFC br Deering Stephen E Hinden Robert M July Internet Protocol Version IPv Specification doi RFC RFC br Trammell Brian Kuehlewind Mirja April The Wire Image of a Network Protocol doi RFC RFC br Hardie Ted ed April Transport Protocol Path Signals doi RFC RFC br Iyengar Jana Swett Ian eds May QUIC Loss Detection and Congestion Control doi RFC RFC br Fairhurst Gorry Perkins Colin July Considerations around Transport Header Confidentiality Network Operations and the Evolution of Internet Transport Protocols doi RFC RFC br Thomson Martin Pauly Tommy December Long Term Viability of Protocol Extension Mechanisms doi RFC RFC br Eddy Wesley M ed August Transmission Control Protocol TCP doi RFC RFC br br br Other documents br Allman Mark Paxson Vern October On estimating end to end network path properties ACM SIGCOMM Computer Communication Review doi hdl br Bhat Divyashri Rizk Amr Zink Michael June Not so QUIC A Performance Study of DASH over QUIC NOSSDAV Proceedings of the th Workshop on Network and Operating Systems Support for Digital Audio and Video pp doi S CID br Blanton Ethan Allman Mark January On making TCP more robust to packet reordering PDF ACM SIGCOMM Computer Communication Review doi S CID br Briscoe Bob Brunstrom Anna Petlund Andreas Hayes David Ros David Tsang Ing Jyh Gjessing Stein Fairhurst Gorry Griwodz Carsten Welzl Michael Reducing Internet Latency A Survey of Techniques and Their Merits IEEE Communications Surveys Tutorials doi COMST hdl S CID br Bruyeron Renaud Hemon Bruno Zhang Lixa April Experimentations with TCP selective acknowledgment ACM SIGCOMM Computer Communication Review doi S CID br Chen Shan Jero Samuel Jagielski Matthew Boldyreva Alexandra Nita Rotaru Cristina Secure Communication Channel Establishment TLS Over TCP Fast Open versus QUIC Journal of Cryptology doi s w S CID br Corbet Jonathan December Checksum offloads and protocol ossification LWN net br Corbet Jonathan January QUIC as a solution to protocol ossification LWN net br Edeline Korian Donnet Benoit A Bottom Up Investigation of the Transport Layer Ossification Network Traffic Measurement and Analysis Conference TMA doi TMA br Ghedini Alessandro July The Road to QUIC Cloudflare br Gurtov Andrei Floyd Sally February Resolving Acknowledgment Ambiguity in non SACK TCP PDF Next Generation Teletraffic and Wired Wireless Advanced Networking NEW AN br Gurtov Andrei Ludwig Reiner Responding to Spurious Timeouts in TCP PDF IEEE INFOCOM Twenty second Annual Joint Conference of the IEEE Computer and Communications Societies doi INFCOM br Hesmans Benjamin Duchene Fabien Paasch Christoph Detal Gregory Bonaventure Olivier Are TCP extensions middlebox proof HotMiddlebox CiteSeerX doi br IETF HTTP Working Group HTTP Frequently Asked Questions br Karn Phil Partridge Craig November Improving round trip time estimates in reliable transport protocols ACM Transactions on Computer Systems doi br Ludwig Reiner Katz Randy Howard January The Eifel algorithm making TCP robust against spurious retransmissions ACM SIGCOMM Computer Communication Review doi br Marx Robin December Head of Line Blocking in QUIC and HTTP The Details br Paasch Christoph Bonaventure Olivier April Multipath TCP Communications of the ACM doi S CID br Papastergiou Giorgos Fairhurst Gorry Ros David Brunstrom Anna Grinnemo Karl Johan Hurtig Per Khademi Naeem T xen Michael Welzl Michael Damjanovic Dragana Mangiante Simone De Ossifying the Internet Transport Layer A Survey and Future Perspectives IEEE Communications Surveys Tutorials doi COMST hdl S CID br Rybczy ska Marta March A QUIC look at HTTP LWN net br Sy Erik Mueller Tobias Burkert Christian Federrath Hannes Fischer Mathias Enhanced Performance and Privacy for TLS over TCP Fast Open Proceedings on Privacy Enhancing Technologies arXiv doi popets br Zhang Lixia August Why TCP timers don t work well ACM SIGCOMM Computer Communication Review doi br br br Further reading br Stevens W Richard TCP IP Illustrated Volume The Protocols Addison Wesley Pub Co ISBN br Stevens W Richard Wright Gary R TCP IP Illustrated Volume The Implementation Addison Wesley ISBN br Stevens W Richard TCP IP Illustrated Volume TCP for Transactions HTTP NNTP and the UNIX Domain Protocols Addison Wesley ISBN br br br External links br br Oral history interview with Robert E Kahn br IANA Port Assignments br IANA TCP Parameters br John Kristoff s Overview of TCP Fundamental concepts behind TCP and how it is used to transport data between two endpoints br Checksum example