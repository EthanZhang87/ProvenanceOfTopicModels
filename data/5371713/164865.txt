title: Strategy pattern
id: 164865
In computer programming the strategy pattern also known as the policy pattern is a behavioral software design pattern that enables selecting an algorithm at runtime Instead of implementing a single algorithm directly code receives runtime instructions as to which in a family of algorithms to use br Strategy lets the algorithm vary independently from clients that use it Strategy is one of the patterns included in the influential book Design Patterns by Gamma et al that popularized the concept of using design patterns to describe how to design flexible and reusable object oriented software Deferring the decision about which algorithm to use until runtime allows the calling code to be more flexible and reusable br For instance a class that performs validation on incoming data may use the strategy pattern to select a validation algorithm depending on the type of data the source of the data user choice or other discriminating factors These factors are not known until runtime and may require radically different validation to be performed The validation algorithms strategies encapsulated separately from the validating object may be used by other validating objects in different areas of the system or even different systems without code duplication br Typically the strategy pattern stores a reference to code in a data structure and retrieves it This can be achieved by mechanisms such as the native function pointer the first class function classes or class instances in object oriented programming languages or accessing the language implementation s internal storage of code via reflection br br br Structure br br br UML class and sequence diagram br br In the above UML class diagram the Context class does not implement an algorithm directly br Instead Context refers to the Strategy interface for performing an algorithm strategy algorithm which makes Context independent of how an algorithm is implemented br The Strategy and Strategy classes implement the Strategy interface that is implement encapsulate an algorithm br br The UML sequence diagram br shows the runtime interactions The Context object delegates an algorithm to different Strategy objects First Context calls algorithm on a Strategy object br which performs the algorithm and returns the result to Context br Thereafter Context changes its strategy and calls algorithm on a Strategy object br which performs the algorithm and returns the result to Context br br br Class diagram br br br Strategy and open closed principle br br According to the strategy pattern the behaviors of a class should not be inherited Instead they should be encapsulated using interfaces This is compatible with the open closed principle OCP which proposes that classes should be open for extension but closed for modification br As an example consider a car class Two possible functionalities for car are brake and accelerate Since accelerate and brake behaviors change frequently between models a common approach is to implement these behaviors in subclasses This approach has significant drawbacks accelerate and brake behaviors must be declared in each new car model The work of managing these behaviors increases greatly as the number of models increases and requires code to be duplicated across models Additionally it is not easy to determine the exact nature of the behavior for each model without investigating the code in each br The strategy pattern uses composition instead of inheritance In the strategy pattern behaviors are defined as separate interfaces and specific classes that implement these interfaces This allows better decoupling between the behavior and the class that uses the behavior The behavior can be changed without breaking the classes that use it and the classes can switch between behaviors by changing the specific implementation used without requiring any significant code changes Behaviors can also be changed at runtime as well as at design time For instance a car object s brake behavior can be changed from BrakeWithABS to Brake by changing the brakeBehavior member to br br br See also br Dependency injection br Higher order function br List of object oriented programming terms br Mixin br Policy based design br Type class br Entity component system br Composition over inheritance br br br br br br External links br br Strategy Pattern in UML in Spanish br Geary David April Strategy for success Java Design Patterns JavaWorld Retrieved br Strategy Pattern for C article br Refactoring Replace Type Code with State Strategy br The Strategy Design Pattern at the Wayback Machine archived Implementation of the Strategy pattern in JavaScript