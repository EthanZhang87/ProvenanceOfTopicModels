title: Spring Framework
id: 5371713
The Spring Framework is an application framework and inversion of control container for the Java platform The framework s core features can be used by any Java application but there are extensions for building web applications on top of the Java EE Enterprise Edition platform The framework does not impose any specific programming model The framework has become popular in the Java community as an addition to the Enterprise JavaBeans EJB model The Spring Framework is free and open source software br br br Version history br br The first version was written by Rod Johnson who released the framework with the publication of his book Expert One on One J EE Design and Development in October The framework was first released under the Apache license in June The first production release was released in March The Spring framework won a Jolt productivity award and a JAX Innovation Award in Spring was released in October Spring in November Spring in December Spring in December and Spring in November Spring Framework was released in December Notable improvements in Spring included support for Java SE Standard Edition Groovy br some aspects of Java EE and WebSocket br br Spring Framework was released on July and was immediately upgraded to version which was released on Sept It is compatible with Java and with a focus on core refinements and modern web capabilities br Spring Framework has been released on June and was supported until It was announced to be the final generation within the general Spring system requirements Java Servlet br Spring is announced to be built upon Reactive Streams compatible Reactor Core br Spring Framework has been released on November and came with a Java baseline and a move to Jakarta EE in the jakarta namespace with a focus on the recently released Jakarta EE APIs such as Servlet and JPA br br br Modules br The Spring Framework includes several modules that provide a range of services br br Spring Core Container this is the base module of Spring and provides spring containers BeanFactory and ApplicationContext In this context spring core is the artifact found in the core module belonging to the org springframework group The spring core artifact consists of the IoC container as well as the utility classes used throughout the application br Aspect oriented programming enables implementing cross cutting concerns The spring aop is an artifact for the AOP framework br Authentication and authorization configurable security processes that support a range of standards protocols tools and practices via the Spring Security sub project formerly Acegi Security System for Spring br Convention over configuration a rapid application development solution for Spring based enterprise applications is offered in the Spring Roo module br Data access working with relational database management systems on the Java platform using Java Database Connectivity JDBC and object relational mapping tools and with NoSQL databases The spring jdbc is an artifact found in the JDBC module while supports JDBC access by including datasource setup classes br Inversion of control container configuration of application components and lifecycle management of Java objects done mainly via dependency injection br Messaging declarative registration of message listener objects for transparent message consumption from message queues via Java Message Service JMS improvement of message sending over standard JMS APIs br Model view controller an HTTP and servlet based framework providing hooks for extension and customization for web applications and RESTful representational state transfer Web services br Remote access framework declarative remote procedure call RPC style marshalling of Java objects over networks supporting Java remote method invocation RMI CORBA Common Object Request Broker Architecture and HTTP based protocols including Web services such as SOAP Simple Object Access Protocol br Transaction management unifies several transaction management APIs and coordinates transactions for Java objects br Remote management declarative exposure and management of Java objects for local or remote configuration via Java Management Extensions JMX br Testing support classes for writing unit tests and integration tests br WebFlux support support for using reactive runtimes or web servers such as UnderTow and Netty br Web Socket support Support for communicating using the WebSocket protocol The artifact for this module is spring websocket br XML support support for object toXML mapping Libraries such as Jakarta XML Binding JAXB and XStream are supported The artifact for this module is spring oxm br Spring modules are packaged as JAR files These artifacts can be accessed via the Maven Central Repository using Maven or Gradle br br br Inversion of control container br The inversion of control IoC container is the core container in the Spring Framework It provides a consistent means of configuring and managing Java objects using reflection The container is responsible for managing object lifecycles of specific objects creating these objects calling their initialization methods and configuring these objects by wiring them together br In many cases one need not use the container when using other parts of the Spring Framework although using it will likely make an application easier to configure and customize The Spring container provides a consistent mechanism to configure applications and integrates with almost all Java environments from small scale applications to large enterprise applications br The programmer does not directly create an object but describes how it should be created by defining it in the Spring configuration file Similarly services and components are not called directly instead a Spring configuration file defines which services and components must be called This IoC is intended to increase the ease of maintenance and testing br br br Creating and managing beans br Objects created by the container are called managed objects or beans The container can be configured by loading XML Extensible Markup Language files or detecting specific Java annotations on configuration classes These data sources contain the bean definitions that provide the information required to create the beans br The Configuration is a Spring specific annotation that marks a class as the configuration class The configuration class provides the beans to the Spring ApplicationContext Each of the methods in the Spring configuration class is configured with the Bean annotation The ApplicationContext interface will then return the objects configured with the Bean annotation as beans The advantage of java based configuration over XML based configuration is better type safety and refactorability br br br Types of Inversion of Control br There are several types of Inversion of Control Dependency injection and dependency lookup are examples of Inversion of Control Objects can be obtained by means of either dependency lookup or dependency injection br br br Dependency Injection br br Dependency injection is a pattern where the container passes objects by name to other objects via either constructors properties or factory methods There are several ways to implement dependency injection constructor based dependency injection setter based dependency injection and field based dependency injection br br br Dependency Lookup br Dependency lookup is a pattern where a caller asks the container object for an object with a specific name or of a specific type br br br Autowiring br The Spring framework has a feature known as autowiring which uses the spring container to automatically satisfy the dependencies specified in the JavaBean properties to objects of the appropriate type in the current factory This can only occur if there is only one object with the appropriate type br There are several annotations that can be used for autowiring POJOs including the Spring specific annotation Autowire as well as several other Spring specific annotations that help resolve autowire ambiguity such as the Qualifier or Primary annotations and the standard Java annotations Resource and Inject br The Qualifier annotation can be used on a class that defines a bean to inform Spring to prioritize the bean creation when autowiring it by name br The Primary annotation can be used on a class that defines a bean to inform Spring to prioritize the bean creation when autowiring it by type br The Resource annotation is an annotation that conforms to JSR or Common Annotations for the Java Platform The Resource annotation is used for autowiring references to POJOs by name The Inject annotation is annotation that conforms to JSR or Standard Annotations for injection The Inject annotation is used for autowiring references to POJOs by type br br br Aspect oriented programming framework br br The Spring Framework has its own Aspect oriented programming AOP framework that modularizes cross cutting concerns in aspects The motivation for creating a separate AOP framework is to provide basic AOP features without too much complexity in either design implementation or configuration The Spring AOP framework takes full advantage of the Spring container br The Spring AOP framework is proxy pattern based It is configured at run time This removes the need for a compilation step or load time weaving On the other hand interception only allows for public method execution on existing objects at a join point br Compared to the AspectJ framework Spring AOP is less powerful but also less complicated Spring includes support to configure AspectJ aspects in the container Spring added more integration with AspectJ for example the pointcut language is reused and can be mixed with Spring AOP based aspects Further Spring added a Spring Aspects library that uses AspectJ to offer common Spring features such as declarative transaction management and dependency injection via AspectJ compile time or load time weaving SpringSource uses AspectJ AOP in other Spring projects such as Spring Roo and Spring Insight with Spring Security offering an AspectJ based aspect library br Spring AOP has been designed to work with cross cutting concerns inside the Spring Framework Any object which is created and configured by the container can be enriched using Spring AOP br The Spring Framework uses Spring AOP internally for transaction management security remote access and JMX br Since version of the framework Spring provides two approaches to the AOP configuration br br schema based approach and br AspectJ based annotation style br br The Spring team decided not to introduce new AOP related terminology Therefore in the Spring reference documentation and API terms such as aspect join point advice pointcut introduction target object advised object AOP proxy and weaving all have the same meanings as in most other AOP frameworks particularly AspectJ br br br Data access framework br Spring s data access framework addresses common difficulties developers face when working with databases in applications Support is provided for all popular data access frameworks in Java JDBC iBatis MyBatis Hibernate Java Data Objects JDO discontinued since x Jakarta Persistence API JPA Oracle TopLink Apache OJB and Apache Cayenne among others br For all of these supported frameworks Spring provides these features br br Resource management automatically acquiring and releasing database resources br Exception handling translating data access related exception to a Spring data access hierarchy br Transaction participation transparent participation in ongoing transactions br Resource unwrapping retrieving database objects from connection pool wrappers br Abstraction for binary large object BLOB and character large object CLOB handling br All these features become available when using template classes provided by Spring for each supported framework Critics have said these template classes are intrusive and offer no advantage over using for example the Hibernate API directly In response the Spring developers have made it possible to use the Hibernate and JPA APIs directly This however requires transparent transaction management as application code no longer assumes the responsibility to obtain and close database resources and does not support exception translation br Together with Spring s transaction management its data access framework offers a flexible abstraction for working with data access frameworks The Spring Framework doesn t offer a common data access API instead the full power of the supported APIs is kept intact The Spring Framework is the only framework available in Java that offers managed data access environments outside of an application server or container br While using Spring for transaction management with Hibernate the following beans may have to be configured br br A Datasource like com mchange v c p ComboPooledDataSource or org apache commons dbcp BasicDataSource br A SessionFactory like org springframework orm hibernate LocalSessionFactoryBean with a DataSource attribute br A HibernateProperties like org springframework beans factory config PropertiesFactoryBean br A TransactionManager like org springframework orm hibernate HibernateTransactionManager with a SessionFactory attribute br Other points of configuration include br br An AOP configuration of cutting points br Transaction semantics of AOP advice br br br Transaction management br Spring s transaction management framework brings an abstraction mechanism to the Java platform Its abstraction is capable of br br working with local and global transactions local transaction does not require an application server br working with nested transactions br working with savepoints br working in almost all environments of the Java platform br In comparison Java Transaction API JTA only supports nested transactions and global transactions and requires an application server and in some cases deployment of applications in an application server br The Spring Framework ships a PlatformTransactionManager for a number of transaction management strategies br br Transactions managed on a JDBC Connection br Transactions managed on Object relational mapping Units of Work br Transactions managed via the JTA JtaTransactionManager and UserTransaction br Transactions managed on other resources like object databases br Next to this abstraction mechanism the framework provides two ways of adding transaction management to applications br br Procedurally by using Spring s TransactionTemplate br Declaratively by using metadata like XML or Java annotations Transactional etc br Together with Spring s data access framework which integrates the transaction management framework it is possible to set up a transactional system through configuration without having to rely on JTA or EJB The transactional framework also integrates with messaging and caching engines br br br Model view controller framework br br The Spring Framework features its own model view controller MVC web application framework which was not originally planned The Spring developers decided to write their own Web framework as a reaction to what they perceived as the poor design of the then popular Jakarta Struts Web framework as well as deficiencies in other available frameworks In particular they felt there was insufficient separation between the presentation and request handling layers and between the request handling layer and the model br Like Struts Spring MVC is a request based framework The framework defines strategy interfaces for all of the responsibilities that must be handled by a modern request based framework The goal of each interface is to be simple and clear so that it s easy for Spring MVC users to write their own implementations if they so choose MVC paves the way for cleaner front end code All interfaces are tightly coupled to the Servlet API This tight coupling to the Servlet API is seen by some as a failure on the part of the Spring developers to offer a high level of abstraction for Web based applications However this coupling ensures that the features of the Servlet API remain available to developers while offering a high abstraction framework to ease working with it br The DispatcherServlet class is the front controller of the framework and is responsible for delegating control to the various interfaces during the execution phases of an HTTP request br The most important interfaces defined by Spring MVC and their responsibilities are listed below br br Controller comes between Model and View to manage incoming requests and redirect to proper response Controller will map the http request to corresponding methods It acts as a gate that directs the incoming information It switches between going into Model or View br HandlerAdapter responsible for execution of objects that handle incoming requests br HandlerInterceptor responsible for intercepting incoming requests Comparable but not equal to Servlet filters use is optional and not controlled by DispatcherServlet br HandlerMapping responsible for selecting objects that handle incoming requests handlers based on any attribute or condition internal or external to those requests br LocaleResolver responsible for resolving and optionally saving of the locale of an individual user br MultipartResolver facilitate working with file uploads by wrapping incoming requests br View responsible for returning a response to the client The View should not contain any business logic and should only present the data encapsulated by the Model Some requests may go straight to View without going to the Model part others may go through all three br ViewResolver responsible for selecting a View based on a logical name for the View use is not strictly required br Model responsible for encapsulating business data The Model is exposed to the view by the controller use is not strictly required br Each strategy interface above has an important responsibility in the overall framework The abstractions offered by these interfaces are powerful so to allow for a set of variations in their implementations Spring MVC ships with implementations of all these interfaces and offers a feature set on top of the Servlet API However developers and vendors are free to write other implementations Spring MVC uses the Java java util Map interface as a data oriented abstraction for the Model where keys are expected to be String values br The ease of testing the implementations of these interfaces is one important advantage of the high level of abstraction offered by Spring MVC DispatcherServlet is tightly coupled to the Spring inversion of control container for configuring the web layers of applications However web applications can use other parts of the Spring Framework including the container and choose not to use Spring MVC br br br A workflow of Spring MVC br When a user clicks a link or submits a form in their web browser the request goes to the Spring DispatcherServlet DispatcherServlet is a front controller in Spring MVC The DispatcherServlet is highly customizable and flexible Specifically it is capable of handling more types of handlers than any implementations of org br springframework web servlet mvc Controller or org br springframework stereotype Controller annotated classes It consults one or more handler mappings DispatcherServlet chooses an appropriate controller and forwards the request to it The Controller processes the particular request and generates a result It is known as Model This information needs to be formatted in html or any front end technology like Jakarta Server Pages also known as JSP or Thymeleaf This is the View of an application All of the information is in the Model And View object When the controller is not coupled to a particular view DispatcherServlet finds the actual View such as JSP with the help of ViewResolver br br br Configuration of DispatcherServlet br As of Servlet Specification version there are a few ways of configuring the DispatcherServlet br br By configuring it in web xml as shown below br br By configuring it in web fragment xml br By using javax servlet ServletContainerInitializer br By implementing the org springframework web WebApplicationInitializer interface br By using the built in autoconfiguration for Spring Boot which uses the SpringBootServletInitializer class br br br Remote access framework br Spring s Remote Access framework is an abstraction for working with various RPC remote procedure call based technologies available on the Java platform both for client connectivity and marshalling objects on servers The most important feature offered by this framework is to ease configuration and usage of these technologies as much as possible by combining inversion of control and AOP br The framework provides fault recovery automatic reconnection after connection failure and some optimizations for client side use of EJB remote stateless session beans br Spring provides support for these protocols and products out of the box br br HTTP based protocols br Hessian binary serialization protocol open sourced and maintained by CORBA based protocols Hessian is maintained by the company Caucho Hessian is suitable for stateless remoting needs in particular Java to Java communication br Burlap An XML based binary protocol that is open sourced and also maintained by the company Caucho The only advantage of using Burlap instead of Hessian is that it is XML parsable and human readable For Java to Java communication the Hessian is preferred since it is more light weight and efficient br RMI method invocations using RMI infrastructure yet specific to Spring br RMI method invocations using RMI interfaces complying with regular RMI usage br RMI IIOP CORBA method invocations using RMI IIOP CORBA br Enterprise JavaBean client integration br Local EJB stateless session bean connectivity connecting to local stateless session beans br Remote EJB stateless session bean connectivity connecting to remote stateless session beans br SOAP br Integration with the Apache Axis Web services framework br Apache CXF provides integration with the Spring Framework for RPC style exporting of objects on the server side br Both client and server setup for all RPC style protocols and products supported by the Spring Remote access framework except for the Apache Axis support is configured in the Spring Core container br There is an alternative open source implementation Cluster Spring of a remoting subsystem included in the Spring Framework that is intended to support various schemes of remoting many dynamic services discovering br br br Convention over configuration rapid application development br br br Spring Boot br br Spring Boot Extension is Spring s convention over configuration solution for creating stand alone production grade Spring based Applications that you can just run It is preconfigured with the Spring team s opinionated view of the best configuration and use of the Spring platform and third party libraries so you can get started with minimum fuss Most Spring Boot applications need very little Spring configuration br Key Features br br Create stand alone Spring applications br Embed Tomcat or Jetty directly no need to deploy WAR files br Provide opinionated starter Project Object Models POMs to simplify your Maven Gradle configuration br Automatically configure Spring whenever possible br Provide production ready features such as metrics health checks and externalized configuration br Absolutely no code generation and no requirement for XML configuration br Smooth Integration and supports all Enterprise Integration Patterns br br br Spring Roo br br Spring Roo is a community project which provides an alternative code generation based approach at using convention over configuration to rapidly build applications in Java It currently supports Spring Framework Spring Security and Spring Web Flow Roo differs from other rapid application development frameworks by focusing on br br Extensibility via add ons br Java platform productivity as opposed to other languages br Lock in avoidance Roo can be removed within a few minutes from any application br Runtime avoidance with associated deployment advantages br Usability particularly via the shell features and usage patterns br br br Batch framework br br Spring Batch is a framework for batch processing that provides reusable functions that are essential in processing large volumes of records including br br logging tracing br transaction management br job processing statistics br job restart br It provides more advanced technical services and features that enables extremely high volume and high performance batch jobs through optimizations and partitioning techniques br Spring Batch executes a series of jobs a job consists of many steps and each step consists of a READ PROCESS WRITE task or single operation task tasklet A single operation task is also known as a tasklet It means doing a single task only like cleaning up the resources before or after a step is started or completed br The READ PROCESS WRITE process consists of these steps read data from a resource comma separated values CSV XML or database process it then write it to other resources CSV XML or database For example a step may read data from a CSV file process it and write it into the database Spring Batch provides many classes to read write CSV XML and database br The steps can be chained together to run as a job br br br Integration framework br br Spring Integration is a framework for Enterprise application integration that provides reusable functions essential to messaging or event driven architectures br br routers routes a message to a message channel based on conditions br transformers converts transforms changes the message payload and creates a new message with transformed payload br adapters integrates with other technologies and systems HTTP AMQP Advanced Message Queuing Protocol JMS Java Message Service XMPP Extensible Messaging and Presence Protocol SMTP Simple Mail Transfer Protocol IMAP Internet Message Access Protocol FTP File Transfer Protocol as well as FTPS SFTP file systems etc br filters filters a message based on criteria If the criteria are not met the message is dropped br service activators invoke an operation on a service object Spring supports the use of the annotation ServiceActivator to declare the component that requires this functionality br management and auditing br gateways exposes an interface to the client for the requested services A messaging middleware is responsible for provisioning this interface This interface decouples the messaging middleware from the client by hiding the underlying JMS or Spring Integration APIs Gateways are related to the Facade pattern Spring s Integration class SimpleMessagingGateway provides essential support for gateways SimpleMessagingGateway enables the Spring application to specify the channel that sends requests and the channel that expects to receive responses The primary focus of SimpleMessagingGateway is to deal with payloads which spares the client from the intricate details of the transmitted and received messages SimpleMessagingGateway is used along with channels to enable integration with file systems JMS e mail or any other systems that require payloads and channels br splitter Separates a large payload into smaller payloads to support different processing flows The splitter is achieved in Spring using the splitter component The splitter component usually forwards the messages to classes with more specialized functionality Spring supports the Splitter annotation to declare the component that requires this functionality br aggregator Used for combining many messages into a single result Loosely speaking the aggregator is the reverse of the splitter The aggregator publishes a single message for all components downstream Spring supports the Aggregator annotation to declare the component that requires this functionality br Spring Integration supports pipe and filter based architectures br br br Spring WebSocket br An essential rule for dealing with data streams effectively is to never block The WebSocket is a viable solution to this problem The WebSocket Protocol is a low level transport protocol that allows full duplex communication channels over a TCP connection The WebSocket acts as an alternative to HTTP to enable two way communication between the client and the server The WebSocket is especially useful for applications that require frequent and fast exchanges of small data chunks at a high speed and volume br Spring supports the WebSocket protocol by providing the WebSocket API for the reactive application The EnableWebSocket annotation gives Websocket request processing functionality when places in a Spring configuration class A mandatory interface is the WebSocketConfigurer which grants access to the WebSocketConfigurer Then the Websocket URL is mapped to the relevant handlers by implementing the registerWebSocketHandlers WebSocketHandlerRegistry method br br br Spring WebFlux br Spring WebFlux is a framework following the functional programming paradigm designed for building reactive Spring applications This framework uses functional programming and Reactive Streams extensively A good use case for Spring WebFlux is for applications that require sending and receiving instantaneous information such as a web application with chatting capabilities br Although applications using Spring WebFlux technology is usually less readable than their MVC counterparts they are more resilient and simpler to extend Spring WebFlux reduces the need to deal with the complications associated with synchronizing thread access br Spring WebFlux supports server sent events SSE which is a server push technology that allows the client to get automatic updates from a server through an HTTP connection This communication is unidirectional and shares many similarities with the publish subscribe model found in JMS br br br Relationship with Jakarta Enterprise Beans EJB br br The container can be turned into a partially compliant EJB Enterprise JavaBeans container by means of the Pitchfork project Some criticize the Spring Framework for not complying with standards However SpringSource doesn t see EJB compliance as a major goal and claims that the Spring Framework and the container allow for more powerful programming models br br br Spring Shell vulnerability br br A remote code execution vulnerability affecting certain versions of Spring Framework was published in April under CVE It was given the name Spring Shell in reference to the recent Log Shell vulnerability both having similar proofs of concept in which attackers could on vulnerable machines gain shell access or even full control br br br See also br br Apache Tapestry br Google Guice br Hibernate framework br List of Java frameworks br Comparison of web frameworks br Spring Web Flow br br br Citations br br br br br br External links br br Official website br Spring Tutorials