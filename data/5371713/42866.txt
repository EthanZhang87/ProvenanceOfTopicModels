title: Jakarta Messaging
id: 42866
The Jakarta Messaging API formerly Java Message Service or JMS API is a Java application programming interface API for message oriented middleware It provides generic messaging models able to handle the producer consumer problem that can be used to facilitate the sending and receiving of messages between software systems Jakarta Messaging is a part of Jakarta EE and was originally defined by a specification developed at Sun Microsystems before being guided by the Java Community Process br br br General idea of messaging br br Messaging is a form of loosely coupled distributed communication where in this context the term communication can be understood as an exchange of messages between software components Message oriented technologies attempt to relax tightly coupled communication such as TCP network sockets CORBA or RMI by the introduction of an intermediary component This approach allows software components to communicate with each other indirectly Benefits of this include message senders not needing to have precise knowledge of their receivers br The advantages of messaging include the ability to integrate heterogeneous platforms reduce system bottlenecks increase scalability and respond more quickly to change br br br Version history br JMS br JMS October br JMS a October br JMS December br JMS a December br JMS b August br JMS April br JMS May br JMS a March br JMS is currently maintained under the Java Community Process as JSR br JMS is under early development as part of Jakarta EE br br br Elements br The following are JMS elements br br JMS provider br An implementation of the JMS interface for message oriented middleware MOM Providers are implemented as either a Java JMS implementation or an adapter to a non Java MOM br JMS client br An application or process that produces and or receives messages br JMS producer publisher br A JMS client that creates and sends messages br JMS consumer subscriber br A JMS client that receives messages br JMS message br An object that contains the data being transferred between JMS clients br JMS queue br A staging area that contains messages that have been sent and are waiting to be read by only one consumer As the name queue suggests the messages are delivered in the order sent A JMS queue guarantees that each message is processed only once br JMS topic br A distribution mechanism for publishing messages that are delivered to multiple subscribers br br br Models br The JMS API supports two distinct models br br Point to point br Publish and subscribe br br br Point to point model br Under the point to point messaging system messages are routed to individual consumers who maintain queues of incoming messages This messaging type is built on the concept of message queues senders and receivers Each message is addressed to a specific queue and the receiving clients extract messages from the queues established to hold their messages While any number of producers can send messages to the queue each message is guaranteed to be delivered and consumed by one consumer Queues retain all messages sent to them until the messages are consumed or until the messages expire If no consumers are registered to consume the messages the queue holds them until a consumer registers to consume them br br br Publish and subscribe model br The publish and subscribe model supports publishing messages to a particular message topic Subscribers may register interest in receiving messages published on a particular message topic In this model neither the publisher nor the subscriber knows about each other A good analogy for this is an anonymous bulletin board br br Zero or more consumers will receive the message br There is a timing dependency between publishers and subscribers The publisher has to create a message topic for clients to subscribe The subscriber has to remain continuously active to receive messages unless it has established a durable subscription In that case messages published while the subscriber is not connected will be redistributed whenever it reconnects br JMS provides a way of separating the application from the transport layer of providing data The same Java classes can be used to communicate with different JMS providers by using the Java Naming and Directory Interface JNDI information for the desired provider The classes first use a connection factory to connect to the queue or topic and then use populate and send or publish the messages On the receiving side the clients then receive or subscribe to the messages br br br URI scheme br RFC defines a jms URI scheme for the Java Message Service br br br Provider implementations br To use JMS one must have a JMS provider that can manage the sessions queues and topics Starting from Java EE version a JMS provider has to be contained in all Java EE application servers This can be implemented using the message inflow management of the Java EE Connector Architecture which was first made available in that version br The following is a list of common JMS providers br br Amazon SQS s Java Messaging Library br Apache ActiveMQ br Apache Qpid using AMQP br IBM MQ formerly MQSeries then WebSphere MQ br IBM WebSphere Application Server s Service Integration Bus SIBus br JBoss Messaging and HornetQ from JBoss br JORAM from the OW Consortium br Open Message Queue from Oracle br OpenJMS from the OpenJMS Group br Oracle WebLogic Server and Oracle AQ br PubSub from Solace br RabbitMQ from Pivotal Software br TIBCO Cloud Messaging from TIBCO Software br TIBCO Enterprise Message Service from TIBCO Software br br br See also br Message Driven Beans br Message queue the concept underlying JMS br Service oriented architecture br Event driven SOA br Messaging technologies that do not implement the JMS API include br Advanced Message Queuing Protocol AMQP standardized message queue protocol with multiple independent implementations br Data Distribution Service DDS An Object Management Group OMG standardized real time messaging system with over ten implementations that have demonstrated interoperability between publishers and subscribers br Microsoft Message Queuing similar technology implemented for NET Framework br br br br br br Further reading br Richards Mark Richard Monson Haefel David A Chappell Java Message Service Second Edition O Reilly ISBN br br br External links br br Official website br JSR Java Message Service br javax jms API Javadoc documentation br Oracle s Java EE JMS tutorial br A historical comparison matrix of JMS providers