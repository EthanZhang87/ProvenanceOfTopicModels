title: Java Platform Module System
id: 11409268
The Java Platform Module System specifies a distribution format for collections of Java code and associated resources It also specifies a repository for storing these collections or modules and identifies how they can be discovered loaded and checked for integrity It includes features such as namespaces with the aim of fixing some of the shortcomings in the existing JAR format especially the JAR Hell which can lead to issues such as classpath and class loading problems br The Java Module System was initially being developed under the Java Community Process as JSR and was scheduled to be released with Java br JSR later was put on hold and Project Jigsaw was created to modularize the JDK This JSR was superseded by JSR Java Platform Module System br Project Jigsaw was originally intended for Java but was deferred to Java as part of Plan B and again deferred to a Java release in Java including the Java Module System was released on September br br br Architecture br The Java Module System implemented in Java includes the following JEPs and JSR Java Specification Request br br JEP The Modular JDK Define a modular structure for the JDK br JEP Modular Source Code Reorganize the JDK source code into modules enhance the build system to compile modules and enforce module boundaries at build time br JEP Modular Run Time Images Restructure the JDK and JRE run time images to accommodate modules and to improve performance security and maintainability br JEP Module System Implement the Java Platform Module System br JEP The Java Linker Create a tool that can assemble and optimize a set of modules and their dependencies into a custom run time image br JSR Java Platform Module System br Additionally several other JDK features have been added to ease transition to the module system br br JEP Multi Release JAR Files Extend the JAR file format to allow multiple Java release specific versions of class files to coexist in a single archive br JEP Prepare JavaFX UI Controls CSS APIs for Modularization Define public APIs for the JavaFX functionalities that is presently only available via internal APIs and would become inaccessible due to modularization br JEP Encapsulate Most Internal APIs Make most of the JDK s internal APIs inaccessible by default but leave a few critical widely used internal APIs accessible until supported replacements exist for all or most of their functionality br JEP Modular Java Application Packaging The Java packager will evolve for JDK making it aware of modules allowing for example to package a module and all the modules it depends on br br br Properties of modules br Modules are a new way of grouping code Contrary to Jar files modules explicitly declare which modules they depend on and what packages they export Explicit dependency declarations improve the integrity of the code by making it easier to reason about large applications and the dependencies between software components br The module declaration is placed in a file named module info java at the root of the module s source file hierarchy The JDK will verify dependencies and interactions between modules both at compile time and runtime br For example the following module declaration declares that the module com foo bar depends on another com foo baz module and exports the following packages com foo bar alpha and com foo bar beta br br module com foo bar br requires com foo baz br exports com foo bar alpha br exports com foo bar beta br br br The public members of com foo bar alpha and com foo bar beta packages will be accessible by dependent modules Private members are inaccessible even through a means such as reflection Note that in Java versions through whether such illegal access is de facto permitted depends on a command line setting br The JDK itself has been modularized in Java br br br Links with OSGi br The Java Module System does not intend to support all the functionalities that the OSGi platform currently supports for example the Life Cycle model and the Services Registry However the Java Module System will support functions which are not supported by OSGi such as modularity at compile time and built in support for native libraries A couple of articles exploring how the Java Module System and OSGi could interoperate were published in These can be found on InfoQ and also the OSGi Alliance Blog br br br See also br Java package br Classpath br Java Classloader br br br br br br External links br JSR br JSR br JSR br Project Jigsaw br The State of the Module System br Java Platform Module System Issue Summary