title: Jakarta Transactions
id: 42759
The Jakarta Transactions JTA formerly Java Transaction API one of the Jakarta EE APIs enables distributed transactions to be done across multiple X Open XA resources in a Java environment JTA was a specification developed under the Java Community Process as JSR JTA provides for br br demarcation of transaction boundaries br X Open XA API allowing resources to participate in transactions br br br X Open XA architecture br br In the X Open XA architecture a transaction manager or transaction processing monitor TP monitor coordinates the transactions across multiple resources such as databases and message queues Each resource has its own resource manager The resource manager typically has its own API for manipulating the resource for example the JDBC API to work with relational databases In addition the resource manager allows a TP monitor to coordinate a distributed transaction between its own and other resource managers Finally there is the application which communicates with the TP monitor to begin commit or roll back the transactions The application also communicates with the individual resources using their own API to modify the resource br br br JTA implementation of the X Open XA architecture br The JTA API consists of classes in two Java packages br br javax transaction br javax transaction xa br The JTA is modelled on the X Open XA architecture but it defines two different APIs for demarcating transaction boundaries It distinguishes between an application server such as an EJB server and an application component It provides an interface javax transaction TransactionManager that is used by the application server itself to begin commit and roll back the transactions It provides a different interface the javax transaction UserTransaction that is used by general client code such as a servlet or an EJB to manage the transactions br The JTA architecture requires that each resource manager must implement the javax transaction xa XAResource interface in order to be managed by the TP monitor As stated previously each resource will have its own specific API for instance br br relational databases use JDBC br messaging services use JMS br generalized EIS Enterprise Information System resources use Java EE Connector API br br br Application Programming Interface br The Jakarta Transactions API consists of three elements a high level application transaction demarcation interface a high level transaction manager interface intended for an application server and a standard Java mapping of the X Open XA protocol intended for a transactional resource manager br br br UserTransaction interface br The javax transaction UserTransaction interface provides the application the br ability to control transaction boundaries programmatically This interface may be used br by Java client programs or EJB beans br The UserTransaction begin method starts a global transaction and associates the br transaction with the calling thread The transaction to thread association is managed br transparently by the Transaction Manager br Support for nested transactions is not required The UserTransaction begin method br throws the NotSupportedException when the calling thread is already associated br with a transaction and the transaction manager implementation does not support nested br transactions br Transaction context propagation between application programs is provided by the br underlying transaction manager implementations on the client and server machines br The transaction context format used for propagation is protocol dependent and must be br negotiated between the client and server hosts For example if the transaction manager br is an implementation of the JTS specification it will use the transaction context br propagation format as specified in the CORBA OTS specification Transaction br propagation is transparent to application programs br br br Transactional annotation br The javax transaction Transactional annotation provides the application the br ability to control transaction boundaries declaratively This annotation can be applied to any class that the Jakarta EE specification br defines as a managed bean which includes CDI managed beans br The code sample below illustrates the usage of Transactional in a request scoped CDI managed bean br br Transactional behavior can be configured via an attribute on the annotation The available options closely mirror those of the EJB specification br br br TransactionScoped annotation br The javax transaction TransactionScoped annotation provides the application the br ability to declare that the scope during which a bean lives is tied to the time a given transaction is active br The code sample below illustrates the usage of TransactionScoped in a request scoped CDI managed bean br br If method foo is first called on a managed instance of ExampleBean and then subsequently method bar is called the number printed will be and not This is because each method had its own transaction and therefore its own instance of TxScopedBean The number that was set during the call to foo will therefore not be seen during the call to bar br br br UserTransaction support in EJB server br EJB servers are required to support the UserTransaction interface for use by EJB br beans with the BEAN value in the javax ejb TransactionManagement annotation this is called bean managed transactions or BMT The UserTransaction br interface is exposed to EJB components through either the EJBContext interface using the br getUserTransaction method or directly via injection using the general Resource annotation Thus an EJB application does not interface with the br Transaction Manager directly for transaction demarcation instead the EJB bean relies br on the EJB server to provide support for all of its transaction work as defined in the br Jakarta Enterprise Beans Specification The underlying interaction between the EJB br Server and the TM is transparent to the application the burden of implementing transaction management is on the EJB container and server provider br The code sample below illustrates the usage of UserTransaction via bean managed transactions in an EJB session bean br br Alternatively the UserTransaction can be obtained from the SessionContext br br Note though that in the example above if the TransactionManagement BEAN annotation is omitted a JTA transaction is automatically started whenever foo is called and is automatically committed or rolled back when foo is exited Making use of a UserTransaction is thus not necessary in EJB programming but might be needed for very specialized code br br br UserTransaction support in JNDI br The UserTransaction should be available under java comp UserTransaction if a JTA implementation is installed in the environment br br br See also br br Java transaction service br br br br br br External links br Official website br JSR br Atomikos transaction manager website br Narayana transaction manager website br Bitronix transaction manager website