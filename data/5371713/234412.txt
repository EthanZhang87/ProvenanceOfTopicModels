title: Pointcut
id: 234412
In aspect oriented programming a pointcut is a set of join points Pointcut specifies where exactly to apply advice which allows separation of concerns and helps in modularizing business logic Pointcuts are often specified using class names or method names in some cases using regular expressions that match class or method name Different frameworks support different Pointcut expressions AspectJ syntax is considered as de facto standard Frameworks are available for various programming languages like Java Perl Ruby and many more which support pointcut br br br Background br Due to limitations in various programming languages cross cutting concern has not modularized Cross cutting concern refers to parts of software that logically belong to one module and affect the whole system this could be security or logging for example Aspect oriented programming tries to solve these cross cutting concerns by allowing programmers to write modules called aspects which contain pieces of code executed at particular point The expressions required to select a particular point led to creation of Pointcut Expressions br br br Execution br Whenever the program execution reaches one of the join points described in the pointcut a piece of code associated with the pointcut called advice is executed This allows a programmer to describe where and when additional code should be executed in addition to already defined behavior Pointcut permits the addition of aspects to existing software as well as the design of software with a clear separation of concerns wherein the programmer weaves merges different aspects into a complete application br br br Example br Suppose there is an application where we can modify records in a database Whenever users modify the database we want to have a log of information regarding who is modifying the records The traditional way to log is to call a log method just before modifying the database With aspect oriented programming we can apply pointcut to the Modify Database method and have an advice that is called to log the required information br br br Expressions br Following are some important pointcut expressions supported by AspectJ These expressions can be combined using logical operators br br This pointcut matches execution of the User setPassword method br br When User getPassword is called this pointcut is matched br br Pointcut will match when there is an ArrayIndexOutOfBounds exception br br Pointcut will match when the object currently executing is of UserType br br Pointcut will match when the target object is of UserType br br Pointcut will match when the code executing belongs to UserType br br br Criticisms br Pointcut languages impact important software properties like evolvability and comprehensibility in a negative way There might be a possibility where there is a need to perform refactoring to define a correct aspect which in general should not happen since refactoring is to make code cleaner It is also not scalable when there are multiple aspects to be applied on the same code and each aspect requires a different refactoring In general every aspect will be tightly coupled with an application s structure as the pointcuts explicitly contain a method s signature so when an application changes the pointcut needs to be changed as well This can be quite problematic for a developer br br br br br br External links br Paper Back to the Future Pointcuts as Predicates over Traces by Karl Klose and Klaus Ostermann br Paper Remote Pointcut A Language Construct for Distributed AOP by Muga Nishizawa Shigeru Chiba and Michiaki Tatsubori br Paper Datalog as a Pointcut Language in Aspect Oriented Programming br Paper Expressiveness and Complexity of Crosscut Languages by Karl J Lieberherr Jeffrey Palm and Ravi Sundaram