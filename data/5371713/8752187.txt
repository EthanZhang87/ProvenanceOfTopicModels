title: Tracing (software)
id: 8752187
Tracing in software engineering refers to the process of capturing and recording information about the execution of a software program This information is typically used by programmers for debugging purposes and additionally depending on the type and detail of information contained in a trace log by experienced system administrators or technical support personnel and by software monitoring tools to diagnose common problems with software Tracing is a cross cutting concern br There is not always a clear distinction between tracing and other forms of logging except that the term tracing is almost never applied to logging that is a functional requirement of a program therefore excluding logging of data from an external source such as data acquisition in a high energy physics experiment and write ahead logging Logs that record program usage such as a server log or operating system events primarily of interest to a system administrator see for example Event Viewer fall into a terminological gray area br Tracing is primarily used for anomaly detection fault analysis debugging or diagnostic purposes in distributed software systems such as microservices or serverless functions br br br Software tracing br Software tracing is a tool for developers to gather information for debugging This information is used both during development cycles and post release Unlike event logging software tracing usually does not have the concept of a class of event or an event code Other reasons why event logging solutions based on event codes are inappropriate for software tracing include br br Because software tracing is low level there are often many more types of messages that would need to be defined many of which would only be used at one place in the code The event code paradigm introduces significant development overhead for these one shot messages br The types of messages that are logged are often less stable through the development cycle than for event logging br Because the tracing output is intended to be consumed by the developer the messages don t need to be localized Keeping tracing messages separate from other resources that need to be localized such as event messages is therefore important br There are messages that should never be seen br Tracing messages should be kept in the code because they can add to the readability of the code This is not always possible or feasible with event logging solutions br br br Tools br OpenTelemetry is a CNCF open source project that provides comprehensive support for distributed tracing Some vendors including Datadog New Relic Splunk also offer tracing SaaS services br Google and Meta have developed their own tracing frameworks namely Dapper and Canopy br br br Application Specific Tracing br Tracing with GNU Debugger s trace command br Linux C C application tracing with cwrap br Linux application tracing with UST part of the same project as LTTng br Windows software trace preprocessor aka WPP br Instruction set simulation br br br System Specific Tracing br In operating systems tracing can be used in situations such as booting where some of the technologies used to provide event logging may not be available br Linux offers system level and user level tracing capabilities with kernel markers and LTTng ftrace also supports Linux kernel tracing syslog is another tool in various operating systems for logging and tracing system messages br FreeBSD and SmartOS employ DTrace for tracing for the kernel and the userland br In embedded software tracing also requires special techniques for efficient instrumentation and logging and low CPU overhead br br br Techniques br br br Trace generation and collection br Trace generation of method calls can be done with source code instrumentation runtime information collection or under debugger control Tracing macros Aspect oriented programming and related instrumentation techniques can be employed br Libraries used in source code send data to an agent or directly to the collection component br br br Trace Analysis br To model execution trees ISVis converts a rooted tree into a directed acyclic graph while Jinsight utilizes the call frame principle to gather and represent cumulative information about traces br The primary visualization method is the swimlane view which is exemplified by tools like Jaeger and often includes annotations and key value attributes Despite its widespread use this design lacks rigorous justification and users frequently face challenges like missing features and confusing navigation Alternatives to swimlane views exist like Jaeger s service dependency view or SkyWalking s List Tree and Table views Aggregate visualizations are also used for analyzing large volumes of traces with systems like Canopy offering queryable metrics and Jaeger providing trace comparison features br br br Challenges and limitations br Enabling or disabling tracing during runtime often necessitates the inclusion of extra data in the binary This can lead to performance degradation even when tracing is not active br If tracing is enabled or disabled at compile time collecting trace data from a client s system hinges on their willingness and capability to install a version of the software specifically enabled for tracing and subsequently replicate the issue br Tracing in software typically demands high standards of robustness not only in the accuracy and reliability of the trace output but also in ensuring that the process being traced remains uninterrupted br Given its low level nature tracing can generate a large volume of messages To mitigate performance issues it s often necessary to have the option to deactivate software tracing either at the time of compilation or during run time br br br Security and privacy br In proprietary software tracing data may include sensitive information about the product s source code br br br See also br Branch trace br Debugging br Instrumentation computer programming br Logging br Observability software br br br 