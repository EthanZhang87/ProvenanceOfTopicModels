title: Apache Tapestry
id: 2052309
Apache Tapestry is an open source component oriented Java web application framework conceptually similar to JavaServer Faces and Apache Wicket Tapestry was created by Howard Lewis Ship and was adopted by the Apache Software Foundation as a top level project in br Tapestry emphasizes simplicity ease of use and developer productivity It adheres to the Convention over Configuration paradigm eliminating almost all XML configuration Tapestry uses a modular approach to web development by having a strong binding between each user interface component object on the web page and its corresponding Java class This component based architecture borrows many ideas from WebObjects br br br Notable features br Live Class Reloading br Tapestry monitors the file system for changes to Java page classes component classes service implementation classes HTML templates and component property files and it hot swaps the changes into the running application without requiring a restart This provides a very short code save view feedback cycle that is claimed to greatly improve developer productivity br Component based br Pages may be constructed with small nestable components each having a template and a component class Custom components are purportedly trivial to construct br Convention over configuration br Tapestry uses naming conventions and annotations rather than XML to configure the application br Spare use of HTTPSession br By making minimal use of the HTTPSession Tapestry is designed to be highly efficient in a clustered session replicated environment br Post Redirect Get br Most form submissions follow the Post Redirect Get PRG pattern which reduces multiple form submission accidents and makes URLs friendlier and more bookmarkable along with enabling the browser Back and Refresh buttons to operate normally br Inversion of Control IoC br Tapestry is built on a lightweight Inversion of Control layer with similarities to Google Guice but designed to make nearly all aspects of Tapestry s behavior configurable and replaceable br br br Hello World Example br A minimal templated Tapestry application needs only three files br br HelloWorld tml br The X HTML template for the helloworld page Tapestry templates can contain any well formed X HTML markup br br HelloWorld java br The page class associated with the template Here it merely provides a username property that the template can access br br web xml br The servlet application Deployment Descriptor which installs Tapestry as a servlet filter br br br Class transformation br Tapestry uses bytecode manipulation to transform page and component classes at runtime This approach allows the page and component classes to be written as simple POJOs with a few naming conventions and annotations potentially triggering substantial additional behavior at class load time Tapestry versions and used the Javassist bytecode manipulation library Subsequent versions replaced Javassist with a new bytecode manipulation layer called Plastic that is based on ObjectWeb ASM br br br Client side support br Tapestry versions up through bundled the Prototype and script aculo us JavaScript frameworks along with a Tapestry specific library so as to support Ajax operations as first class citizens Third party modules are available to integrate jQuery instead of or in addition to Prototype Scriptaculous br Starting with version Tapestry includes a new JavaScript layer that removes built in components reliance on Prototype allowing jQuery or another JavaScript framework to be plugged in br Version also introduces support for JavaScript modules using the RequireJS module loading system br br br Core principles br The Tapestry project documentation cites four principles that govern all development decisions for Tapestry starting with version in br br Static Structure Dynamic Behavior page and component structure is essentially static eliminating the need to construct and store in session memory large page and component trees br Adaptive API the framework is designed to adapt to the code rather than having the code adapt to the framework br Differentiate Public vs Internal APIs all APIs are explicitly internal private except those that are necessarily public br Ensure Backwards Compatibility The Tapestry developers are reportedly committed to ensuring that upgrading to the latest version of Tapestry is always easy br br br Criticism br Tapestry has been criticized as not being backward compatible across major versions especially noted in the transition from version to version where no clean migration path was available for existing applications Project team members have acknowledged this as a major problem for Tapestry s users in the past and backward compatibility was made a major design goal for Tapestry going forward From early on in the development of version backward compatibility was listed as one of Tapestry s four new Core Principles and two of the other three were intended to make the evolution of the framework possible without sacrificing backward compatibility Project team members claim that all Tapestry releases since have been highly backward compatible br Early criticisms of Tapestry also mentioned documentation as a shortcoming Project members now claim that this deficiency has been largely addressed with a thoroughly revised and updated User s Guide and other documentation br Since version Tapestry has bundled the Prototype and Scriptaculous JavaScript libraries According to Howard Lewis Ship in the timeframe these were reasonable choices Since then however Prototype s popularity has declined and jQuery s has risen dramatically In response the Tapestry community developed modules that allowed jQuery to be used in addition to or instead of Prototype Meanwhile the current version of Tapestry removes the dependency on Prototype entirely replacing it with a compatibility layer into which either jQuery or Prototype or potentially any other JavaScript framework can be plugged br br br Relation to other frameworks br According to Howard Lewis Ship Tapestry was initially conceived as an attempt to implement in Java some of the general concepts and approaches found in WebObjects which was at that time written in Objective C and closed source br Apache Wicket was developed as a response to the complexity of early versions of Tapestry according to Wicket originator Jonathan Locke br Facelets the default view technology in JavaServer Faces was reportedly inspired by early versions of Tapestry as an attempt to fill the need for a framework like Tapestry backed by JavaServer Faces as the industry standard br br br History br br br See also br Apache Wicket br Comparison of web frameworks br Facelets br Java EE br Java view technologies and frameworks br br br br br br Notes br br br External links br Official website