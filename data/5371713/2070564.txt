title: Java Card
id: 2070564
Java Card is a software technology that allows Java based applications applets to be run securely on smart cards and more generally on similar secure small memory footprint devices which are called secure elements SE Today a secure element is not limited to its smart cards and other removable cryptographic tokens form factors embedded SEs soldered onto a device board and new security designs embedded into general purpose chips are also widely used Java Card addresses this hardware fragmentation and specificities while retaining code portability brought forward by Java br Java Card is the tiniest of Java platforms targeted for embedded devices Java Card gives the user the ability to program the devices and make them application specific It is widely used in different markets wireless telecommunications within SIM cards and embedded SIM payment within banking cards and NFC mobile payment and for identity cards healthcare cards and passports Several IoT products like gateways are also using Java Card based products to secure communications with a cloud service for instance br The first Java Card was introduced in by Schlumberger s card division which later merged with Gemplus to form Gemalto Java Card products are based on the specifications by Sun Microsystems later a subsidiary of Oracle Corporation Many Java card products also rely on the GlobalPlatform specifications for the secure management of applications on the card download installation personalization deletion br The main design goals of the Java Card technology are portability security and backward compatibility br br br Portability br Java Card aims at defining a standard smart card computing environment allowing the same Java Card applet to run on different smart cards much like a Java applet runs on different computers As in Java this is accomplished using the combination of a virtual machine the Java Card Virtual Machine and a well defined runtime library which largely abstracts the applet from differences between smart cards Portability remains mitigated by issues of memory size performance and runtime support e g for communication protocols or cryptographic algorithms br br br Security br Java Card technology was originally developed for the purpose of securing sensitive information stored on smart cards Security is determined by various aspects of this technology br br Data encapsulation br Data is stored within the application and Java Card applications are executed in an isolated environment the Java Card VM separate from the underlying operating system and hardware br Applet firewall br Unlike other Java VMs a Java Card VM usually manages several applications each one controlling sensitive data Different applications are therefore separated from each other by an applet firewall which restricts and checks access of data elements of one applet to another br Cryptography br Commonly used symmetric key algorithms like DES Triple DES AES and asymmetric key algorithms such as RSA elliptic curve cryptography are supported as well as other cryptographic services like signing key generation and key exchange br Applet br The applet is a state machine which processes only incoming command requests and responds by sending data or response status words back to the interface device br br br Design br At the language level Java Card is a precise subset of Java all language constructs of Java Card exist in Java and behave identically This goes to the point that as part of a standard build cycle a Java Card program is compiled into a Java class file by a Java compiler the class file is post processed by tools specific to the Java Card platform br However many Java language features are not supported by Java Card in particular types char double float and long the transient qualifier enums arrays of more than one dimension finalization object cloning threads Further some common features of Java are not provided at runtime by many actual smart cards in particular type int which is the default type of a Java expression and garbage collection of objects br br br Bytecode br Java Card bytecode run by the Java Card Virtual Machine is a functional subset of Java bytecode run by a standard Java Virtual Machine but with a different encoding to optimize for size A Java Card applet thus typically uses less bytecode than the hypothetical Java applet obtained by compiling the same Java source code This conserves memory a necessity in resource constrained devices like smart cards As a design tradeoff there is no support for some Java language features as mentioned above and size limitations Techniques exist for overcoming the size limitations such as dividing the application s code into packages below the KiB limit br br br Library and runtime br Standard Java Card class library and runtime support differs a lot from that in Java and the common subset is minimal For example the Java Security Manager class is not supported in Java Card where security policies are implemented by the Java Card Virtual Machine and transients non persistent fast RAM variables that can be class members are supported via a Java Card class library while they have native language support in Java br br br Specific features br The Java Card runtime and virtual machine also support features that are specific to the Java Card platform br br Persistence br With Java Card objects are by default stored in persistent memory RAM is very scarce on smart cards and it is only used for temporary or security sensitive objects The runtime environment as well as the bytecode have therefore been adapted to manage persistent objects br Atomicity br As smart cards are externally powered and rely on persistent memory persistent updates must be atomic The individual write operations performed by individual bytecode instructions and API methods are therefore guaranteed atomic and the Java Card Runtime includes a limited transaction mechanism br Applet isolation br The Java Card firewall is a mechanism that isolates the different applets present on a card from each other It also includes a sharing mechanism that allows an applet to explicitly make an object available to other applets br br br Development br Coding techniques used in a practical Java Card program differ significantly from those used in a Java program Still that Java Card uses a precise subset of the Java language speeds up the learning curve and enables using a Java environment to develop and debug a Java Card program caveat even if debugging occurs with Java bytecode make sure that the class file fits the limitation of Java Card language by converting it to Java Card bytecode and test in a real Java Card smart card early on to get an idea of the performance further one can run and debug both the Java Card code for the application to be embedded in a smart card and a Java application that will be in the host using the smart card all working jointly in the same environment br br br Versions br Oracle has released several Java Card platform specifications and is providing SDK tools for application development br Usually smart card vendors implement just a subset of algorithms specified in Java Card platform target br and the only way to discover what subset of specification is implemented is to test the card br br Version br Introduced support for D TLS protocols br Added API clarifications to help application developers and significantly increase the level of interoperability across multiple implementations br Version br Added configurable key pair generation support named elliptic curves support new algorithms and operations support additional AES modes and Chinese algorithms br Version br Oracle SDK Java Card Classic Development Kit u br Added support for Diffie Hellman modular exponentiation Domain Data Conservation for Diffie Hellman Elliptic Curve and DSA keys RSA SHA plain ECDSA AES CMAC AES CTR br Version br Oracle SDK Java Card Classic Development Kit br Added support for DES MAC ISO br Version br Oracle SDK Java Card Development Kit RR br Added support for SHA SHA for all signature algorithms br Version br Oracle SDK Java Card Development Kit br Added support for SHA SHA SHA ISO HMAC Korean SEED MAC NOPAD Korean SEED NOPAD br Version br Oracle SDK Java Card Development Kit br Version br Added support for AES cryptography key encapsulation CRC algorithms Elliptic Curve Cryptography key encapsulation Diffie Hellman key exchange using ECC ECC keys for binary polynomial curves and for prime integer curves AES ECC and RSA with variable key lengths br Version br Oracle SDK Java Card Development Kit br Added support for RSA without padding br Version br br br Java Card br The version of the Java Card specification draft released in March is separated in two editions the Classic Edition and the Connected Edition br br The Classic Edition currently at version released in June is an evolution of the Java Card Platform version which last version was released in March which supports traditional card applets on resource constrained devices such as Smart Cards Older applets are generally compatible with newer Classic Edition devices and applets for these newer devices can be compatible with older devices if not referring to new library functions Smart Cards implementing Java Card Classic Edition have been security certified by multiple vendors and are commercially available br The Connected Edition currently at version released in December aims to provide a new virtual machine and an enhanced execution environment with network oriented features Applications can be developed as classic card applets requested by APDU commands or as servlets using HTTP to support web based schemes of communication HTML REST SOAP with the card The runtime uses a subset of the Java bytecode without Floating Point it supports volatile objects garbage collection multithreading inter application communications facilities persistence transactions card management facilities As of there has been little adoption in commercially available Smart Cards so much that reference to Java Card including in the present Wikipedia page often implicitly excludes the Connected Edition br br br Java Card br Java Card was released in January br br br New CAP file Format and Applet Deployment Model br Applet functionality can be split into multiple Java packages br CAP file sizes can exceed KB br br br New I O Framework and Trusted Peripherals br A variety of physical layers and application protocol is supported beyond smart card protocols defined in ISO br Logical access to device peripherals by secure element applications is facilitated br br br Core Platform Enhancements br Array Views views on a subset of an array Static Resources embedded within a CAP file and Improved API extensibility br br br Security Services br Certificate API Key Derivation API Monotonic Counter API System Time API br br br New Cryptographic Extensions br Configurable Key Pair generation Named Elliptic Curves like Edwards Curves Additional AES modes CFB XTS Chinese Algorithms SM SM SM br br br See also br br Java Card OpenPlatform br br br br br br External links br Java Card overview Oracle br Defcon The Secret Life of SIM Cards on YouTube br JavaCards OpenSC