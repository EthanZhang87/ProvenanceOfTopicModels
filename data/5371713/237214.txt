title: AspectJ
id: 237214
AspectJ is an aspect oriented programming AOP extension for the Java programming language created at PARC It is available in Eclipse Foundation open source projects both stand alone and integrated into Eclipse AspectJ has become a widely used de facto standard for AOP by emphasizing simplicity and usability for end users It uses Java like syntax and included IDE integrations for displaying crosscutting structure since its initial public release in br br br Simple language description br All valid Java programs are also valid AspectJ programs but AspectJ lets programmers define special constructs called aspects Aspects can contain several entities unavailable to standard classes These are br br Extension methods br Allow a programmer to add methods fields or interfaces to existing classes from within the aspect This example adds an acceptVisitor see visitor pattern method to the Point class br br Pointcuts br Allow a programmer to specify join points well defined moments in the execution of a program like method call object instantiation or variable access All pointcuts are expressions quantifications that determine whether a given join point matches For example this point cut matches the execution of any instance method in an object of type Point whose name begins with set br br Advices br Allow a programmer to specify code to run at a join point matched by a pointcut The actions can be performed before after or around the specified join point Here the advice refreshes the display every time something on Point is set using the pointcut declared above br br AspectJ also supports limited forms of pointcut based static checking and aspect reuse by inheritance See the AspectJ Programming Guide for a more detailed description of the language br br br AspectJ compatibility and implementations br AspectJ can be implemented in many ways including source weaving or bytecode weaving and directly in the virtual machine VM In all cases the AspectJ program becomes a valid Java program that runs in a Java VM Classes affected by aspects are binary compatible with unaffected classes to remain compatible with classes compiled with the unaffected originals Supporting multiple implementations allows the language to grow as technology changes and being Java compatible ensures platform availability br Key to its success has been engineering and language decisions that make the language usable and programs deployable The original Xerox AspectJ implementation used source weaving which required access to source code When Xerox contributed the code to Eclipse AspectJ was reimplemented using the Eclipse Java compiler and a bytecode weaver based on BCEL so developers could write aspects for code in binary class form At this time the AspectJ language was restricted to support a per class model essential for incremental compilation and load time weaving This made IDE integrations as responsive as their Java counterparts and it let developers deploy aspects without altering the build process This led to increased adoption as AspectJ became usable for impatient Java programmers and enterprise level deployments Since then the Eclipse team has increased performance and correctness upgraded the AspectJ language to support Java language features like generics and annotations and integrated annotation style pure java aspects from AspectWerkz br The Eclipse project supports both command line and Ant interfaces A related Eclipse project has steadily improved the Eclipse IDE support for AspectJ called AspectJ Development Tools AJDT and other providers of crosscutting structure IDE support for emacs NetBeans and JBuilder foundered when Xerox put them into open source but support for Oracle s JDeveloper did appear IDE support has been key to Java programmers using AspectJ and understanding crosscutting concerns br BEA has offered limited VM support for aspect oriented extensions but for extensions supported in all Java VM s would require agreement through Sun s Java Community Process see also the java lang instrument package available since Java SE which is a common ground for JVM load time instrumentation br Academic interest in the semantics and implementation of aspect oriented languages has surrounded AspectJ since its release The leading research implementation of AspectJ is the AspectBench Compiler or abc it supports extensions for changing the syntax and semantics of the language and forms the basis for many AOP experiments that the AspectJ team can no longer support given its broad user base br Many programmers discover AspectJ as an enabling technology for other projects most notably Spring AOP A sister Spring project Spring Roo automatically maintains AspectJ inter type declarations as its principal code generation output br br br History and contributors br Gregor Kiczales started and led the Xerox PARC team that eventually developed AspectJ He coined the term crosscutting Fourth on the team Chris Maeda coined the term aspect oriented programming Jim Hugunin and Erik Hilsdale Xerox PARC team members and were the original compiler and weaver engineers Mik Kersten implemented the IDE integration and started the Eclipse AJDT project with Adrian Colyer and Andrew Clement After Adrian Colyer Andrew Clement took over as project lead and main contributor for AspectJ AJDT has since been retired as a separate project and taken over into the Eclipse AspectJ umbrella project to streamline maintenance However both AspectJ and AJDT are still maintained in separate source repositories br In Alexander Kriegisch joined the project first as a contributor then as a committer and maintainer Since March he is basically the sole maintainer Since he also is formally the AspectJ and AJDT project lead br The AspectBench Compiler was developed and is maintained as a joint effort of the Programming Tools Group at the Oxford University Computing Laboratory the Sable Research Group at McGill University and the Institute for Basic Research in Computer Science BRICS br br br AspectWerkz br AspectWerkz was a dynamic lightweight and high performance AOP AOSD framework for Java It has been merged with the AspectJ project which supports AspectWerkz functionality since AspectJ br Jonas Boner and Alex Vasseur engineered the AspectWerkz project and later contributed to the AspectJ project when it merged in the AspectWerkz annotation style and load time weaving support br Unlike AspectJ prior to version AspectWerkz did not add any new language constructs to Java but instead supported declaration of aspects within Java annotations It utilizes bytecode modification to weave classes at project build time class load time as well as runtime It uses standardized JVM level APIs Aspects can be defined using either Java annotations introduced with Java Java custom doclet or a simple XML definition file br AspectWerkz provides an API to use the very same aspects for proxies hence providing a transparent experience allowing a smooth transition for users familiar with proxies br AspectWerkz is free software The LGPL style license allows the use of AspectWerkz in both commercial and open source projects br br br See also br Aspect oriented programming br Spring AOP part of the Spring Framework br Aspect oriented software development br br br br br br External links br AJDT br Aspect bench https web archive org web http www sable mcgill ca abc br AspectJ Home Page br AspectWerkz Project homepage br Improve modularity with aspect oriented programming br Spring AOP and AspectJ Introduction br The AspectJ Programming Guide br Xerox has U S patent for AOP AspectJ but published AspectJ source code under the Common Public License which grants some patent rights 