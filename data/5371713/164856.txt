title: Proxy pattern
id: 164856
In computer programming the proxy pattern is a software design pattern A proxy in its most general form is a class functioning as an interface to something else The proxy could interface to anything a network connection a large object in memory a file or some other resource that is expensive or impossible to duplicate In short a proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes Use of the proxy can simply be forwarding to the real object or can provide additional logic In the proxy extra functionality can be provided for example caching when operations on the real object are resource intensive or checking preconditions before operations on the real object are invoked For the client usage of a proxy object is similar to using the real object because both implement the same interface br br br Overview br The Proxy br br design pattern is one of the twenty three well known br GoF design patterns br that describe how to solve recurring design problems to design flexible and reusable object oriented software that is objects that are easier to implement change test and reuse br br br What problems can the Proxy design pattern solve br The access to an object should be controlled br Additional functionality should be provided when accessing an object br When accessing sensitive objects for example it should be possible to check that clients have the needed access rights br br br What solution does the Proxy design pattern describe br Define a separate Proxy object that br br can be used as substitute for another object Subject and br implements additional functionality to control the access to this subject br This makes it possible to work through a Proxy object to perform additional functionality when accessing a subject For example to check the access rights of clients accessing a sensitive object br To act as substitute for a subject a proxy must implement the Subject interface br Clients can t tell whether they work with a subject or its proxy br See also the UML class and sequence diagram below br br br Structure br br br UML class and sequence diagram br br In the above UML class diagram br the Proxy class implements the Subject interface so that it can act as substitute for Subject objects It maintains a reference realSubject br to the substituted object RealSubject so that it can forward requests to it br realSubject operation br The sequence diagram br shows the run time interactions The Client object br works through a Proxy object that br controls the access to a RealSubject object br In this example the Proxy forwards the request to the RealSubject which performs the request br br br Class diagram br br br Possible usage scenarios br br br Remote proxy br In distributed object communication a local object represents a remote object one that belongs to a different address space The local object is a proxy for the remote object and method invocation on the local object results in remote method invocation on the remote object An example would be an ATM implementation where the ATM might hold proxy objects for bank information that exists in the remote server br br br Virtual proxy br br In place of a complex or heavy object a skeleton representation may be advantageous in some cases When an underlying image is huge in size it may be represented using a virtual proxy object loading the real object on demand br br br Protection proxy br A protection proxy might be used to control access to a resource based on access rights br br br See also br Composite pattern br Decorator pattern br Lazy initialization br br br br br br External links br br Geary David February Take control with the Proxy design pattern JavaWorld Retrieved br PerfectJPattern Open Source Project Provides componentized implementation of the Proxy Pattern in Java br Adapter vs Proxy vs Facade Pattern Comparison at the Wayback Machine archived br Proxy Design Pattern br Proxy pattern C implementation example at the Wayback Machine archived br Proxy pattern description from the Portland Pattern Repository