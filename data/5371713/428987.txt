title: SSH File Transfer Protocol
id: 428987
In computing the SSH File Transfer Protocol also known as Secure File Transfer Protocol or SFTP is a network protocol that provides file access file transfer and file management over any reliable data stream It was designed by the Internet Engineering Task Force IETF as an extension of the Secure Shell protocol SSH version to provide secure file transfer capabilities and is seen as a replacement of File Transfer Protocol FTP due to superior security The IETF Internet Draft states that even though this protocol is described in the context of the SSH protocol it could be used in a number of different applications such as secure file transfer over Transport Layer Security TLS and transfer of management information in VPN applications br This protocol assumes that it is run over a secure channel such as SSH that the server has already authenticated the client and that the identity of the client user is available to the protocol br br br Capabilities br Compared to the SCP protocol which only allows file transfers the SFTP protocol allows for a range of operations on remote files which make it more like a remote file system protocol An SFTP client s extra capabilities include resuming interrupted transfers directory listings and remote file removal There is also support for all UNIX file types including symbolic links br SFTP attempts to be more platform independent than SCP with SCP for instance the expansion of wildcards specified by the client is up to the server whereas SFTP s design avoids this problem While SCP is most frequently implemented on Unix platforms SFTP servers are commonly available on most platforms In SFTP the file transfer can be easily terminated without terminating a session like other mechanisms do br SFTP is not FTP run over SSH but rather a new protocol designed from the ground up by the IETF SECSH working group It is sometimes confused with Simple File Transfer Protocol br The protocol itself does not provide authentication and security it expects the underlying protocol to secure this SFTP is most often used as subsystem of SSH protocol version implementations having been designed by the same working group It is possible however to run it over SSH and some implementations support this or other data streams Running an SFTP server over SSH is not platform independent as SSH does not support the concept of subsystems An SFTP client willing to connect to an SSH server needs to know the path to the SFTP server binary on the server side br Uploaded files may be associated with their basic attributes such as time stamps This is an advantage over the common FTP protocol br br br History and development br The Internet Engineering Task Force IETF working group Secsh that was responsible for the development of the Secure Shell version protocol RFC also attempted to draft an extension of that standard for secure file transfer functionality Internet Drafts were created that successively revised the protocol into new versions The software industry began to implement various versions of the protocol before the drafts were standardized As development work progressed the scope of the Secsh File Transfer project expanded to include file access and file management Eventually development stalled as some committee members began to view SFTP as a file system protocol not just a file access or file transfer protocol which places it beyond the purview of the working group After a seven year hiatus in an attempt was made to restart work on SFTP using the version draft as the baseline br br br Versions br Prior to the IETF s involvement SFTP was a proprietary protocol of SSH Communications Security designed by Tatu Yl nen with assistance from Sami Lehtinen in Differences between versions and version are enumerated upon in section of draft ietf secsh filexfer br br br Version br At the outset of the IETF Secure Shell File Transfer project the Secsh group stated that its objective of SSH File Transfer Protocol was to provide a secure file transfer functionality over any reliable data stream and to be the standard file transfer protocol for use with the SSH protocol br Drafts of the IETF Internet Draft define successive revisions of version of the SFTP protocol br br SSH File Transfer Protocol Draft January br SSH File Transfer Protocol Draft March br SSH File Transfer Protocol Draft October br br br Version br Drafts of the IETF Internet Draft define version of the protocol br br SSH File Transfer Protocol Draft October br SSH File Transfer Protocol Draft December br br br Version br Draft of the IETF Internet Draft defines version of the protocol br br SSH File Transfer Protocol Draft January br br br Version br Drafts of the IETF Internet Draft define successive revisions of version of the protocol br br SSH File Transfer Protocol Draft October br SSH File Transfer Protocol Draft March br SSH File Transfer Protocol Draft April br SSH File Transfer Protocol Draft June Added byte range locks ACL changes Rearranged SSH FXP REALPATH request parameters br SSH File Transfer Protocol Draft June Extensions vendor id md hash space available home directory removed ACL changes br SSH File Transfer Protocol Draft January ACL transfer fully specified Editorial changes br SSH File Transfer Protocol Draft January Added IANA considerations A size parameter is now allowed for file creation as an advisory signal br SSH File Transfer Protocol Draft July editorial changes br br br Extensions br The SFTP protocol supports a generic way of indicating extended commands along with a method of including them in version negotiation An IANA registry is requested but since the protocol never became an official standard no such registry has been created br br Draft specifies text seek supported acl supported newline versions version select filename charset filename translation control br OpenSSH the most widespread implementation defines constants to convery ST NOSUID and ST RDONLY values across the protocol using the statvfs openssh com version identifier It only implements version from draft br br br Software br br br SFTP client br The term SFTP can also refer to Secure file transfer program a command line program that implements the client part of this protocol As an example the sftp program supplied with OpenSSH implements this br Some implementations of the scp program support both the SFTP and SCP protocols to perform file transfers depending on what the server supports The scp program supplied with OpenSSH and higher defaults to using SFTP br br br SFTP server br Some FTP server implementations implement the SFTP protocol however outside of dedicated file servers SFTP protocol support is usually provided by an SSH server implementation as it shares the default port of with other SSH services SFTP implementations may include an SSH protocol implementation to leverage integration of SSH connection details with preexisting FTP server access controls where an alternative SSH server is tolerable or where alternative ports may be used An SSH server which supports subsystems may be leveraged to keep a uniform SSH implementation while enhancing access controls with third party software at the cost of fine grained integration with connection details and SSH compatibility br br br SFTP proxy br It is difficult to control SFTP transfers on security devices at the network perimeter There are standard tools for logging FTP transactions like TIS gdev or SUSE FTP proxy but SFTP is encrypted rendering traditional proxies ineffective for controlling SFTP traffic br There are some tools that implement man in the middle for SSH which also feature SFTP control Examples of such a tool are Shell Control Box from Balabit and CryptoAuditor from SSH Communications Security the original developer of the Secure Shell protocol which provides functions such as SFTP transaction logging and logging of the actual data transmitted on the wire br br br See also br Comparison of SSH clients br Comparison of SSH servers br Comparison of file transfer protocols br FISH br FTPS br Lsh a GNU SSH and SFTP server for Unix like OSes br SSHFS and Rclone Mounting remote filesystem using SFTP and SSH br Category FTP clients br Category SSH File Transfer Protocol clients br br br 