title: Event-driven architecture
id: 4731786
Event driven architecture EDA is a software architecture paradigm concerning the production and detection of events br br br Overview br An event can be defined as a significant change in state For example when a consumer purchases a car the car s state changes from for sale to sold A car dealer s system architecture may treat this state change as an event whose occurrence can be made known to other applications within the architecture From a formal perspective what is produced published propagated detected or consumed is a typically asynchronous message called the event notification and not the event itself which is the state change that triggered the message emission Events do not travel they just occur However the term event is often used metonymically to denote the notification message itself which may lead to some confusion This is due to Event driven architectures often being designed atop message driven architectures where such communication pattern requires one of the inputs to be text only the message to differentiate how each communication should be handled br This architectural pattern may be applied by the design and implementation of applications and systems that transmit events among loosely coupled software components and services An event driven system typically consists of event emitters or agents event consumers or sinks and event channels Emitters have the responsibility to detect gather and transfer events An Event Emitter does not know the consumers of the event it does not even know if a consumer exists and in case it exists it does not know how the event is used or further processed Sinks have the responsibility of applying a reaction as soon as an event is presented The reaction might or might not be completely provided by the sink itself For instance the sink might just have the responsibility to filter transform and forward the event to another component or it might provide a self contained reaction to such an event Event channels are conduits in which events are transmitted from event emitters to event consumers The knowledge of the correct distribution of events is exclusively present within the event channel The physical implementation of event channels can be based on traditional components such as message oriented middleware or point to point communication which might require a more appropriate transactional executive framework br Building systems around an event driven architecture simplifies horizontal scalability in distributed computing models and makes them more resilient to failure This is because application state can be copied across multiple parallel snapshots for high availability New events can be initiated anywhere but more importantly propagate across the network of data stores updating each as they arrive Adding extra nodes becomes trivial as well you can simply take a copy of the application state feed it a stream of events and run with it br Event driven architecture can complement service oriented architecture SOA because services can be activated by triggers fired on incoming events br This paradigm is particularly useful whenever the sink does not provide any self contained executive br SOA evolves the implications SOA and EDA architectures provide to a richer more robust level by leveraging previously unknown causal relationships to form a new event pattern This new business intelligence pattern triggers further autonomous human or automated processing that adds exponential value to the enterprise by injecting value added information into the recognized pattern which could not have been achieved previously br br br Event structure br An event can be made of two parts the event header and the event body The event header might include information such as event name time stamp for the event and type of event br The event body provides the details of the state change detected An event body should not be confused with the pattern or the logic that may be applied in reaction to the occurrence of the event itself br br br Event flow layers br An event driven architecture may be built on four logical layers starting with the sensing of an event i e a significant temporal state or fact proceeding to the creation of its technical representation in the form of an event structure and ending with a non empty set of reactions to that event br br br Event Producer br The first logical layer is the event producer which senses a fact and represents that fact as an event message As an example an event producer could be an email client an E commerce system a monitoring agent or some type of physical sensor br Converting the data collected from such a diverse set of data sources to a single standardized form of data for evaluation is a significant task in the design and implementation of this first logical layer However considering that an event is a strongly declarative frame any informational operations can be easily applied thus eliminating the need for a high level of standardization br br br Event channel br This is the second logical layer An event channel is a mechanism of propagating the information collected from an event generator to the event engine or sink br This could be a TCP IP connection or any type of an input file flat XML format e mail etc Several event channels can be opened at the same time Usually because the event processing engine has to process them in near real time the event channels will be read asynchronously The events are stored in a queue waiting to be processed later by the event processing engine br br br Event processing engine br The event processing engine is the logical layer responsible for identifying an event and then selecting and executing the appropriate reaction It can also trigger a number of assertions For example if the event that comes into the event processing engine is a product ID low in stock this may trigger reactions such as Order product ID and Notify personnel br br br Downstream event driven activity br This is the logical layer where the consequences of the event are shown This can be done in many different ways and forms e g an email is sent to someone and an application may display some kind of warning on the screen Depending on the level of automation provided by the sink event processing engine the downstream activity might not be required br br br Event processing styles br There are three general styles of event processing simple stream and complex The three styles are often used together in a mature event driven architecture br br br Simple event processing br Simple event processing concerns events that are directly related to specific measurable changes of condition In simple event processing a notable event happens which initiates downstream action s Simple event processing is commonly used to drive the real time flow of work thereby reducing lag time and cost br For example simple events can be created by a sensor detecting changes in tire pressures or ambient temperature The car s tire incorrect pressure will generate a simple event from the sensor that will trigger a yellow light advising the driver about the state of a tire br br br Event stream processing br br In event stream processing ESP both ordinary and notable events happen Ordinary events orders RFID transmissions are screened for notability and streamed to information subscribers Event stream processing is commonly used to drive the real time flow of information in and around the enterprise which enables in time decision making br br br Complex event processing br br Complex event processing CEP allows patterns of simple and ordinary events to be considered to infer that a complex event has occurred Complex event processing evaluates a confluence of events and then takes action The events notable or ordinary may cross event types and occur over a long period of time The event correlation may be causal temporal or spatial CEP requires the employment of sophisticated event interpreters event pattern definition and matching and correlation techniques CEP is commonly used to detect and respond to business anomalies threats and opportunities br br br Online event processing br Online event processing OLEP uses asynchronous distributed event logs to process complex events and manage persistent data OLEP allows reliably composing related events of a complex scenario across heterogeneous systems It thereby enables very flexible distribution patterns with high scalability and offers strong consistency However it cannot guarantee upper bounds on processing time br br br Extreme loose coupling and well distributed br An event driven architecture is extremely loosely coupled and well distributed The great distribution of this architecture exists because an event can be almost anything and exist almost anywhere The architecture is extremely loosely coupled because the event itself doesn t know about the consequences of its cause e g If we have an alarm system that records information when the front door opens the door itself doesn t know that the alarm system will add information when the door opens just that the door has been opened br br br Semantic Coupling and further research br Event driven architectures have loose coupling within space time and synchronization providing a scalable infrastructure for information exchange and distributed workflows However event architectures are tightly coupled via event subscriptions and patterns to the semantics of the underlying event schema and values The high degree of semantic heterogeneity of events in large and open deployments such as smart cities and the sensor web makes it difficult to develop and maintain event based systems In order to address semantic coupling within event based systems the use of approximate semantic matching of events is an active area of research br br br Implementations and examples br br br Java Swing br br The Java Swing API is based on an event driven architecture This works particularly well with the motivation behind Swing to provide user interface related components and functionality The API uses a nomenclature convention e g ActionListener and ActionEvent to relate and organize event concerns A class which needs to be aware of a particular event simply implements the appropriate listener overrides the inherited methods and is then added to the object that fires the event A very simple example could be br br Alternatively another implementation choice is to add the listener to the object as an anonymous class and thus use the lambda notation since Java Below is an example br br br JavaScript br br Usage br br br Object Pascal br br Events are one of the fundamental elements of the Object Pascal language The uni cast model one to one is used here i e the sender sends information to only one recipient This limitation has the advantage that it does not need a special event listener The event itself is a pointer to a method in another object If the pointer is not empty when an event occurs the event handler is called Events are commonly used in classes that support GUI This is not the only area of application for events however The following code is an example of using events br br The created class can be used as follows br br br See also br Event driven programming br Process Driven Messaging Service br Service oriented architecture br Event driven SOA br Space based architecture br Complex event processing br Event stream processing br Event Processing Technical Society br Staged event driven architecture SEDA br Reactor pattern br Autonomous peripheral operation br br br Articles br Article defining the differences between EDA and SOA How EDA extends SOA and why it is important by Jack van Hoof br Real world example of business events flowing in an SOA SOA EDA and CEP a winning combo by Udi Dahan br Article describing the concept of event data Analytics for hackers how to think about event data by Michelle Wetzler Web archive br br br br br br External links br Event Driven Applications Costs Benefits and Design Approaches Archived at the Wayback Machine br th Anniversary Edition Event Driven Architecture Overview Brenda M Michelson br Complex Event Processing and Service Oriented Architecture