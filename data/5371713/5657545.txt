title: Advanced Message Queuing Protocol
id: 5657545
The Advanced Message Queuing Protocol AMQP is an open standard application layer protocol for message oriented middleware The defining features of AMQP are message orientation queuing routing including point to point and publish and subscribe reliability and security br AMQP mandates the behavior of the messaging provider and client to the extent that implementations from different vendors are interoperable in the same way as SMTP HTTP FTP etc have created interoperable systems Previous standardizations of middleware have happened at the API level e g JMS and were focused on standardizing programmer interaction with different middleware implementations rather than on providing interoperability between multiple implementations Unlike JMS which defines an API and a set of behaviors that a messaging implementation must provide AMQP is a wire level protocol A wire level protocol is a description of the format of the data that is sent across the network as a stream of bytes Consequently any tool that can create and interpret messages that conform to this data format can interoperate with any other compliant tool irrespective of implementation language br br br Overview br AMQP is a binary application layer protocol designed to efficiently support a wide variety of messaging applications and communication patterns It provides flow controlled message oriented communication with message delivery guarantees such as at most once where each message is delivered once or never at least once where each message is certain to be delivered but may do so multiple times and exactly once where the message will always certainly arrive and do so only once and authentication and or encryption based on SASL and or TLS It assumes an underlying reliable transport layer protocol such as Transmission Control Protocol TCP br The AMQP specification is defined in several layers i a type system ii a symmetric asynchronous protocol for the transfer of messages from one process to another iii a standard extensible message format and iv a set of standardised but extensible messaging capabilities br br br History br AMQP was originated in by John O Hara at JPMorgan Chase in London AMQP was conceived as a co operative open effort The initial design was by JPMorgan Chase from mid to mid and it contracted iMatix Corporation to develop a C broker and protocol documentation In JPMorgan Chase approached other firms to form a working group that included Cisco Systems IONA Technologies iMatix Red Hat and Transaction Workflow Innovation Standards Team TWIST In the same year JPMorgan Chase partnered with Red Hat to create Apache Qpid initially in Java and soon after C Independently RabbitMQ was developed in Erlang by Rabbit Technologies followed later by the Microsoft and StormMQ implementations br The working group grew to companies including Bank of America Barclays Cisco Systems Credit Suisse Deutsche B rse Goldman Sachs HCL Technologies Ltd Progress Software IIT Software INETCO Systems Limited Informatica including West JPMorgan Chase Microsoft Corporation my Channels Novell Red Hat Software AG Solace Systems StormMQ Tervela Inc TWIST Process Innovations ltd VMware which acquired Rabbit Technologies and WSO br In Pieter Hintjens CEO and chief software designer of iMatix wrote an article called What is wrong with AMQP and how to fix it and distributed it to the working group to alert of imminent failure identify problems seen by iMatix and propose ways to fix the AMQP specification By then iMatix had already started work on ZeroMQ In Hintjens announced that iMatix would leave the AMQP workgroup and did not plan to support AMQP in favor of the significantly simpler and faster ZeroMQ br In August the AMQP working group announced its reorganization into an OASIS member section br AMQP was released by the AMQP working group on October at a conference in New York At the event Microsoft Red Hat VMware Apache INETCO and IIT Software demonstrated software running the protocol in an interoperability demonstration The next day on November the formation of an OASIS Technical Committee was announced to advance this contributed AMQP version through the international open standards process The first draft from OASIS was released in February the changes as compared to that published by the Working Group being restricted to edits for improved clarity no functional changes The second draft was released for public review on June again with no functional changes and AMQP was approved as an OASIS standard on October br OASIS AMQP was approved for release as an ISO and IEC International Standard in April AMQP was balloted through the Joint Technical Committee on Information Technology JTC of the International Standards Organization ISO and the International Electrotechnical Commission IEC The approved OASIS AMQP submission has been given the designation ISO IEC br Previous versions of AMQP were published in June published in December published in February and published in November These earlier releases are significantly different from the specification br Whilst AMQP originated in the financial services industry it has general applicability to a broad range of middleware problems br br br Description of AMQP br br br Type system br AMQP defines a self describing encoding scheme allowing interoperable representation of a wide range of commonly used types It also allows typed data to be annotated with additional meaning for example a particular string value might be annotated so that it could be understood as a URL Likewise a map value containing key value pairs for name address etc might be annotated as being a representation of a customer type br The type system is used to define a message format allowing standard and extended meta data to be expressed and understood by processing entities It is also used to define the communication primitives through which messages are exchanged between such entities i e the AMQP frame bodies br br br Performatives and the link protocol br The basic unit of data in AMQP is a frame There are nine AMQP frame bodies defined that are used to initiate control and tear down the transfer of messages between two peers These are br br open the connection br begin the session br attach the link br transfer br flow br disposition br detach the link br end the session br close the connection br The link protocol is at the heart of AMQP br An attach frame body is sent to initiate a new link a detach to tear down a link Links may be established in order to receive or send messages br Messages are sent over an established link using the transfer frame Messages on a link flow in only one direction br Transfers are subject to a credit based flow control scheme managed using flow frames This allows a process to protect itself from being overwhelmed by too large a volume of messages or more simply to allow a subscribing link to pull messages as and when desired br Each transferred message must eventually be settled Settlement ensures that the sender and receiver agree on the state of the transfer providing reliability guarantees Changes in state and settlement for a transfer or set of transfers are communicated between the peers using the disposition frame Various reliability guarantees can be enforced this way at most once at least once and exactly once br Multiple links in both directions can be grouped together in a session A session is a bidirectional sequential conversation between two peers that is initiated with a begin frame and terminated with an end frame A connection between two peers can have multiple sessions multiplexed over it each logically independent Connections are initiated with an open frame in which the sending peer s capabilities are expressed and terminated with a close frame br br br Message format br AMQP defines as the bare message that part of the message that is created by the sending application This is considered immutable as the message is transferred between one or more processes br Ensuring the message as sent by the application is immutable allows for end to end message signing and or encryption and ensures that any integrity checks e g hashes or digests remain valid The message can be annotated by intermediaries during transit but any such annotations are kept distinct from the immutable bare message Annotations may be added before or after the bare message br The header is a standard set of delivery related annotations that can be requested or indicated for a message and includes time to live durability priority br The bare message itself is structured as an optional list of standard properties message id user id creation time reply to subject correlation id group id etc an optional list of br application specific properties i e extended properties and a body which AMQP refers to as application data br Properties are specified in the AMQP type system as are annotations The application data can be of any form and in any encoding the application chooses One option is to use the AMQP type system to send structured self describing data br br br Messaging capabilities br The link protocol transfers messages between two nodes but assumes very little as to what those nodes are or how they are implemented br A key category is those nodes used as a rendezvous point between senders and receivers of messages e g queues or topics The AMQP specification calls such nodes distribution nodes and codifies some common behaviors br This includes br br some standard outcomes for transfers through which receivers of messages can for example accept or reject messages br a mechanism for indicating or requesting one of the two basic distribution patterns competing and non competing consumers through the distribution modes move and copy respectively br the ability to create nodes on demand e g for temporary response queues br the ability to refine the set of message of interest to a receiver through filters br Though AMQP can be used in simple peer to peer systems defining this framework for messaging capabilities additionally enables interoperability with messaging intermediaries brokers bridges etc br in larger richer messaging networks The framework specified covers basic behaviors but allows for extensions to evolve that can be further codified and standardised br br br Implementations br br br AMQP broker implementations br Apache Qpid an open source project at the Apache Foundation br Apache ActiveMQ an open source project at the Apache Foundation br Azure Event Hubs br Azure Service Bus br IBM MQ br Solace PubSub a multi protocol broker in hardware software and cloud br br br Pre AMQP broker implementations br JORAM a Java open source implementation from the OW Consortium br Apache Qpid maintains support for multiple AMQP versions br RabbitMQ an open source project sponsored by VMware primarily supports AMQP with via a plugin br br br Specification br AMQP protocol version is the current specification version It focuses on core features which are necessary for interoperability at Internet scale It contains less explicit routing than previous versions because core functionality is the first to be rigorously standardized AMQP interoperability has been more extensively tested with more implementors than prior versions br The AMQP website contains the OASIS specification for version br Earlier versions of AMQP published prior to the release of see History above and significantly different from it include br br AMQP which has clients available for many popular programming languages and platforms br AMQP br br br Comparable specifications br These open protocol specifications cover the same or a similar space as AMQP br br Streaming Text Oriented Messaging Protocol STOMP a text based protocol developed at Codehaus uses the JMS like semantics of destination br Extensible Messaging and Presence Protocol XMPP the Extensible Messaging and Presence Protocol br MQTT a lightweight publish subscribe protocol br OpenWire as used by ActiveMQ br Java Message Service JMS is often compared to AMQP However JMS is an API specification part of the Java EE specification that defines how message producers and consumers are implemented JMS does not guarantee interoperability between implementations and the JMS compliant messaging system in use may need to be deployed on both client and server On the other hand AMQP is a wire level protocol specification In theory AMQP provides interoperability as different AMQP compliant software can be deployed on the client and server sides br br br See also br Peer to peer br Message queue br Message queuing service br Data Distribution Service br IBM MQ br br br br br br External links br Official website br OASIS AMQP technical committee br High level Overview of AMQP and the AMQP Model version br OMG Analysis of AMQP and comparison with DDS RTPS br Google Tech Talk with video and slides about RabbitMQ br Presentation of AMQP and RestMS messaging at FOSDEM br List of AMQP clients