title: Java Database Connectivity
id: 26257672
Java Database Connectivity JDBC is an application programming interface API for the Java programming language which defines how a client may access a database It is a Java based data access technology used for Java database connectivity It is part of the Java Standard Edition platform from Oracle Corporation It provides methods to query and update data in a database and is oriented toward relational databases A JDBC to ODBC bridge enables connections to any ODBC accessible data source in the Java virtual machine JVM host environment br br br History and implementation br Sun Microsystems released JDBC as part of Java Development Kit JDK on February br Since then it has been part of the Java Platform Standard Edition Java SE br The JDBC classes are contained in the Java package java sql and javax sql br Starting with version JDBC has been developed under the Java Community Process JSR specifies JDBC included in J SE JSR specifies the JDBC Rowset additions and JSR is the specification of JDBC included in Java SE br JDBC is specified by a maintenance release of JSR and is included in Java SE br JDBC is specified by a maintenance release of JSR and is included in Java SE br The latest version JDBC is specified by a maintenance release of JSR and is included in Java SE br br br Functionality br br Since JDBC Java Database Connectivity is mostly a collection of interface definitions and specifications it allows multiple implementations of these interfaces to exist and be used by the same application at runtime The API provides a mechanism for dynamically loading the correct Java packages and registering them with the JDBC Driver Manager DriverManager DriverManager is used as a Connection factory for creating JDBC connections br JDBC connections support creating and executing statements JDBC connections support update statements such as SQL s CREATE INSERT UPDATE and DELETE or query statements such as SELECT Additionally stored procedures may be invoked through a JDBC connection JDBC represents statements using one of the following classes br br Statement the Statement is sent to the database server each and every time In other words the Statement methods are executed using SQL statements to obtain a ResultSet object containing the data br PreparedStatement PreparedStatement is a subinterface of the Statement interface The statement is cached and then the execution path is pre determined on the database server allowing it to be executed multiple times in an efficient manner PreparedStatement is used to execute pre compiled SQL statements Running pre compiled statements increases statement execution efficiency and performance The PreparedStatement is often used for dynamic statement where some input parameters must be passed into the target database The br PreparedStatement allows the dynamic query to vary depending on the query parameter br br CallableStatement CallableStatement is a subinterface of the Statement interface It is used for executing stored procedures on the database Both input and output parameters must be passed into the database for stored procedures br Update statements such as INSERT UPDATE and DELETE return an update count indicating the number of rows affected in the database as an integer These statements do not return any other information br Query statements return a JDBC row result set The row result set is used to walk over the result set Individual columns in a row are retrieved either by name or by column number There may be any number of rows in the result set The row result set has metadata that describes the names of the columns and their types br There is an extension to the basic JDBC API in the javax sql br JDBC connections are often managed via a connection pool rather than obtained directly from the driver br br br Examples br When a Java application needs a database connection one of the DriverManager getConnection methods is used to create a JDBC Connection The URL used is dependent upon the particular database and JDBC driver It will always begin with the jdbc protocol but the rest is up to the particular vendor br br Starting from Java SE you can use Java s try with resources statement to simplify the above code br br Once a connection is established a Statement can be created br br Note that Connections Statements and ResultSets often tie up operating system resources such as sockets or file descriptors In the case of Connections to remote database servers further resources are tied up on the server e g cursors for currently open ResultSets br It is vital to close any JDBC object as soon as it has played its part br garbage collection should not be relied upon br The above try with resources construct is a code pattern that obviates this br Data is retrieved from the database using a database query mechanism The example below shows creating a statement and executing a query br br The following code is an example of a PreparedStatement query which uses conn and class from the first example br br If a database operation fails JDBC raises an SQLException There is typically very little one can do to recover from such an error apart from logging it with as much detail as possible It is recommended that the SQLException be translated into an application domain exception an unchecked one that eventually results in a transaction rollback and a notification to the user br The following code is an example of a database transaction br br For an example of a CallableStatement to call stored procedures in the database see the JDBC API Guide documentation br br br JDBC drivers br br JDBC drivers are client side adapters installed on the client machine not on the server that convert requests from Java programs to a protocol that the DBMS can understand br br br Types br Commercial and free drivers provide connectivity to most relational database servers These drivers fall into one of the following types br br Type that calls native code of the locally available ODBC driver Note In JDBC JDBC ODBC bridge has been removed br Type that calls database vendor native library on a client side This code then talks to database over the network br Type the pure java driver that talks with the server side middleware that then talks to the database br Type the pure java driver that uses database native protocol br Note also a type called an internal JDBC driver a driver embedded with JRE in Java enabled SQL databases It is used for Java stored procedures This does not fit into the classification scheme above although it would likely resemble either a type or type driver depending on whether the database itself is implemented in Java or not An example of this is the KPRB Kernel Program Bundled driver br supplied with Oracle RDBMS jdbc default connection offers a relatively standard way of making such a connection at least the Oracle database and Apache Derby support it However in the case of an internal JDBC driver the JDBC client actually runs as part of the database being accessed and so can access data directly rather than through network protocols br br br Sources br Oracle provides a list of some JDBC drivers and vendors br Simba Technologies ships an SDK for building custom JDBC Drivers for any custom proprietary relational data source br CData Software ships type JDBC Drivers for various applications databases and Web APIs br RSSBus Type JDBC Drivers for applications databases and web services br DataDirect Technologies provides a comprehensive suite of fast Type JDBC drivers for all major database they advertise as Type br IDS Software provides a Type JDBC driver for concurrent access to all major databases Supported features include resultset caching SSL encryption custom data source dbShield br JDBaccess is a Java persistence library for MySQL and Oracle which defines major database access operations in an easy usable API above JDBC br JNetDirect provides a suite of fully Sun J EE certified high performance JDBC drivers br JDBCR is a service program written by Scott Klement to allow access to JDBC from RPG on the IBM i br HSQLDB is a RDBMS with a JDBC driver and is available under a BSD license br SchemaCrawler is an open source API that leverages JDBC and makes database metadata available as plain old Java objects POJOs br br br See also br GNU Data Access GDA br JDBCFacade br Open Database Connectivity ODBC br Object relational mapping ORM br br br Citations br br br br Bai Ying SQL Server Database Programming with Java Cham Springer International Publishing doi ISBN br Horstmann Cay April Core Java Oracle Press Java ISBN br br br External links br br JDBC API Guide br java sql API Javadoc documentation br javax sql API Javadoc documentation br O R Broker Scala JDBC framework br SqlTool Open source command line generic JDBC client utility Works with any JDBC supporting database br JDBC URL Strings and related information of All Databases 