title: Advice (programming)
id: 1169621
In aspect and functional programming advice describes a class of functions which modify other functions when the latter are run it is a certain function method or procedure that is to be applied at a given join point of a program br br br Use br The practical use of advice functions is generally to modify or otherwise extend the behavior of functions which cannot or should not be readily modified or extended For instance the Emacspeak Emacs addon makes extensive use of advice it must modify thousands of existing Emacs modules and functions such that it can produce audio output for the blind corresponding to the visual presentation but it would be infeasible to copy all of them and redefine them to produce audio output in addition to their normal outputs so the Emacspeak programmers define advice functions which run before and after br For a simple Emacs example suppose after a user corrected a mis spelled word using the Emacs ispell module they wanted to re spellcheck the entire buffer ispell word offers no such functionality even if the corrected word appears frequently in the buffer The user could track down the definition of ispell word copy it into their personal Emacs files and add the desired functionality there but this is tedious and worse brittle the user s version is now out of sync with the core Emacs implementation if it even works without further refactoring What the user wants is quite simple just to run another command any time ispell word runs Using advice it can be done as simply as this br br While this example is obviously trivial the strength of advice especially when compared to similar facilities such as Python decorators and Java annotations lies in the fact that not only do the advised functions methods not need to be designed to accept advice but also the advice themselves need not be designed to be usable as advice they re just normal functions The availability of evaluation throughout the lifetime of a piece of code cf code staging in Lisp allows advice to be inlined automatically into any other code in a variety of ways Any piece of code can be advised to carry out any other computation before after around or instead of its original definition br br br Readability br Advice has the potential to introduce confusion as a piece of advice applied to a function is not apparent to a user who tracks down the function s source definition to learn about it In such cases advice acts almost like a COMEFROM a joke facility added to INTERCAL to spoof the spaghettification attendant to the extensive use of GOTOs In practice however such issues rarely present themselves Upstream developers and maintainers of Lisp packages and modules never use advice since there is no advantage to be gained by advising functions when their original source definitions can be freely rewritten to include the desired features Advice is only useful in that it enables downstream users to subsequently modify default behaviour in a way that does not require propagation of such modifications into the core implementation s source definition br br br Implementations br A form of advices were part of C with Classes in the late s and early s namely functions called call and return defined in a class which were called before respectively after member functions of the class However these were dropped from C br Advices are part of the Common Lisp Object System CLOS as before after and around methods which are combined with the primary method under standard method combination br Common Lisp implementations provide advice functionality in addition to the standard method combination for CLOS as extensions LispWorks supports advising functions macros and CLOS methods br EmacsLisp added advice related code in version br br br History br The following is taken from a discussion at the mailing list aosd discuss Pascal Costanza contributed the following br The term advice goes back to the term advising as introduced by Warren Teitelman in his PhD thesis in Here is a quote from Chapter of his thesis br br Advising is the basic innovation in the model and in the PILOT system Advising consists of inserting new procedures at any or all of the entry or exit points to a particular procedure or class of procedures The procedures inserted are called advice procedures or simply advice br Since each piece of advice is itself a procedure it has its own entries and exits In particular this means that the execution of advice can cause the procedure that it modifies to be bypassed completely e g by specifying as an exit from the advice one of the exits from the original procedure or the advice may change essential variables and continue with the computation so that the original procedure is executed but with modified variables Finally the advice may not alter the execution or affect the original procedure at all e g it may merely perform some additional computation such as printing a message or recording history Since advice can be conditional the decision as to what is to be done can depend on the results of the computation up to that point br The principal advantage of advising is that the user need not be concerned about the details of the actual changes in his program nor the internal representation of advice He can treat the procedure to be advised as a unit a single block and make changes to it without concern for the particulars of this block This may be contrasted with editing in which the programmer must be cognizant of the internal structure of the procedure br Advising found its way into BBN Lisp and later into Xerox PARC s Interlisp br It also found its way to Flavors the first object oriented extension to Lisp developed at MIT They were subsumed under the notion of method combination br Since method combination and macros are closely related it s also interesting to note that the first macro system was described in three years before Warren Teitelman s PhD thesis br br br See also br Function decorator w r t Python br Aspect oriented software development Advice bodies br br br Notes br Gregor Kiczales comments the above as follows br br br br br br External links br Teitelman s PhD thesis PILOT A Step Toward Man Computer Symbiosis AITR br Interlisp reference manual from br Origin of Advice 