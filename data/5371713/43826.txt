title: Jakarta Servlet
id: 43826
A Jakarta Servlet formerly Java Servlet is a Java software component that extends the capabilities of a server Although servlets can respond to many types of requests they most commonly implement web containers for hosting web applications on web servers and thus qualify as a server side servlet web API Such web servlets are the Java counterpart to other dynamic web content technologies such as PHP and ASP NET br br br Introduction br A Jakarta Servlet is a Java class in Jakarta EE that conforms to the Jakarta Servlet API a standard for implementing Java classes that respond to requests Servlets could in principle communicate over any client server protocol but they are most often used with HTTP In principle any servlets can extend the GenericServlet class however realistically speaking all servlets extend the HttpServlet class Thus servlet is often used as shorthand for HTTP servlet Thus a servlet can be used to add dynamic content to a web server using the Java platform The generated content is commonly HTML but may be other data such as XML and more commonly JSON br The Jakarta Servlet API has to some extent been superseded by two standard Java technologies for web services br br the Jakarta RESTful Web Services JAX RS useful for AJAX JSON and REST services and br the Jakarta XML Web Services JAX WS useful for SOAP Web Services br A Servlet is an object that receives a request and generates a response based on that request The basic Servlet package defines Java objects to represent servlet requests and responses as well as objects to reflect the servlet s configuration parameters and execution environment br The Servlet API contained in the Java package hierarchy javax servlet defines the expected interactions of the web container and a servlet br The package javax servlet http defines HTTP specific subclasses of the GenericServlet This package includes session management objects that track multiple requests and responses between the web server and a client br Servlets can maintain state in session variables across many server transactions by using HTTP cookies or URL mapping There are several ways of creating a servlet and using URL mapping with a servlet Before servlet specification Tomcat configuring the web xml to map a servlet to a URL was the only option For applications using the servlet specification or later the WebServlet annotation can be used to map any servlet to one or more URL patterns br Servlets may be packaged in a WAR file as a web application br A web container is required for deploying and running a servlet A web container also known as a servlet container is essentially the component of a web server that interacts with the servlets The web container is responsible for managing the lifecycle of servlets mapping a URL to a particular servlet and ensuring that the URL requester has the correct access rights br Servlets can be generated automatically from Jakarta Server Pages JSP by the Jakarta Server Pages compiler The difference between servlets and JSP is that servlets typically embed HTML inside Java code while JSPs embed Java code in HTML In general when using JSPs embedding Java code in JSP is considered bad practice Instead a better approach would be to move the back end logic from the JSP to the Java code in the Servlet This ensures that the Servlet is only responsible for processing and the JSP is only responsible for presenting the HTML allowing for a clear separation of concerns and conformance to the single responsibility principle br While the direct usage of servlets to generate HTML as shown in the example below has become rare the higher level MVC web framework in Jakarta EE Faces still explicitly uses the servlet technology for the low level request response handling via the FacesServlet br A somewhat older usage is to use servlets in conjunction with JSPs in a pattern called Model which is a flavor of the model view controller br br br History br The Java Servlet API was first publicly announced at the inaugural JavaOne conference in May About two months after the announcements at the conference the first public implementation was made available on the JavaSoft website This was the first alpha of the Java Web Server JWS then known by its codename Jeeves which would eventually be shipped as a product on June br In his blog on java net Sun veteran and GlassFish lead Jim Driscoll details the history of servlet technology James Gosling first thought of servlets in the early days of Java but the concept did not become a product until December when Sun shipped JWS This was before what is now the Jakarta EE was made into a specification br The Servlet specification was created by Pavni Diwanji while she worked at Sun Microsystems with version finalized in June Starting with version the specification was developed under the Java Community Process br br br Life cycle of a servlet br Three methods are central to the life cycle of a servlet These are init service and destroy br They are implemented by every servlet and are invoked at specific times by the server br br During initialization stage of the servlet life cycle the web container initializes the servlet instance by calling the init method passing an object implementing the javax servlet ServletConfig interface This configuration object allows the servlet to access name value initialization parameters from the web application br After initialization the servlet instance can service client requests Each request is serviced in its own separate thread The web container calls the service method of the servlet for every request The service method determines the kind of request being made and dispatches it to an appropriate method to handle the request The developer of the servlet must provide an implementation for these methods If a request is made for a method that is not implemented by the servlet the method of the parent class is called typically resulting in an error being returned to the requester br Finally the web container calls the destroy method that takes the servlet out of service The destroy method like init is called only once in the lifecycle of a servlet br The following is a typical user scenario of these methods br br Assume that a user requests to visit a URL br The browser then generates an HTTP request for this URL br This request is then sent to the appropriate server br The HTTP request is received by the web server and forwarded to the servlet container br The container maps this request to a particular servlet br The servlet is dynamically retrieved and loaded into the address space of the container br The container invokes the init method of the servlet br This method is invoked only when the servlet is first loaded into memory br It is possible to pass initialization parameters to the servlet so that it may configure itself br The container invokes the service method of the servlet br This method is called to process the HTTP request br The servlet may read data that has been provided in the HTTP request br The servlet may also formulate an HTTP response for the client br The servlet remains in the container s address space and is available to process any other HTTP requests received from clients br The service method is called for each HTTP request br The container may at some point decide to unload the servlet from its memory br The algorithms by which this decision is made are specific to each container br The container calls the servlet s destroy method to relinquish any resources such as file handles that are allocated for the servlet important data may be saved to a persistent store br The memory allocated for the servlet and its objects can then be garbage collected br br br Example br The following example servlet prints how many times its service method was called br Note that HttpServlet is a subclass of GenericServlet an implementation of the Servlet interface br The service method of HttpServlet class dispatches requests to the methods doGet doPost doPut doDelete and so on according to the HTTP request In the example below service is overridden and does not distinguish which HTTP request method it serves br br br Container servers br The specification for Servlet technology has been implemented in many products See a list of implementations on the web container page br There are also other types of servlet containers such as those for SIP servlets e g SailFin br br br See also br Apache JServ Protocol AJP br br br Citations br br br br Murach Joel Urban Michael Murach s Java Servlets and JSP ISBN br br br External links br Official website br Servlets com