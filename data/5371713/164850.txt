title: Factory method pattern
id: 164850
In object oriented programming the factory method pattern is a design pattern that uses factory methods to deal with the problem of creating objects without having to specify their exact class Rather than by calling a constructor this is done by calling a factory method to create an object Factory methods can either be specified in an interface and implemented by child classes or implemented in a base class and optionally overridden by derived classes It is one of the classic design patterns described in the book Design Patterns often referred to as the Gang of Four or simply GoF and is sub categorized as a creational pattern br br br Overview br The Factory Method design pattern solves problems like br br How can an object be created so that subclasses can redefine its subsequent and distinct implementation br How can an object s instantiation be deferred to a subclass br The Factory Method design pattern describes how to solve such problems br br Define a factory method within the superclass that defers the object s creation to a subclass s factory method br Create an object by calling a factory method instead of directly calling a constructor br This enables the writing of subclasses that can change the way an object is created e g by redefining which class to instantiate br See also the UML class diagram below br br br Definition br Define an interface for creating an object but let subclasses decide which class to instantiate The Factory method lets a class defer instantiation it uses to subclasses Gang Of Four br Creating an object often requires complex processes not appropriate to include within a composing object The object s creation may lead to a significant duplication of code may require information not accessible to the composing object may not provide a sufficient level of abstraction or may otherwise not be part of the composing object s concerns The factory method design pattern handles these problems by defining a separate method for creating the objects which subclasses can then override to specify the derived type of product that will be created br The factory method pattern relies on inheritance as object creation is delegated to subclasses that implement the factory method to create objects br As shown in the C example below the factory method pattern can also rely on an Interface in this case IPerson to be implemented br br br Structure br br br UML class diagram br br In the above UML class diagram br the Creator class that requires a Product object does not instantiate the Product class directly br Instead the Creator refers to a separate factoryMethod to create a product object br which makes the Creator independent of which concrete class is instantiated br Subclasses of Creator can redefine which class to instantiate In this example the Creator subclass implements the abstract factoryMethod by instantiating the Product class br br br Examples br This C implementation is based on the pre C implementation in the book br br The program output is like br br A maze game may be played in two modes one with regular rooms that are only connected with adjacent rooms and one with magic rooms that allow players to be transported at random br br br Structure br br Room is the base class for a final product MagicRoom or OrdinaryRoom MazeGame declares the abstract factory method to produce such a base product MagicRoom and OrdinaryRoom are subclasses of the base product implementing the final product MagicMazeGame and OrdinaryMazeGame are subclasses of MazeGame implementing the factory method producing the final products Thus factory methods decouple callers MazeGame from the implementation of the concrete classes This makes the new Operator redundant allows adherence to the Open closed principle and makes the final product more flexible in the event of change br br br Example implementations br br br C br br In the above code you can see the creation of one interface called IPerson and two implementations called Villager and CityPerson Based on the type passed into the PersonFactory object we are returning the original concrete object as the interface IPerson br A factory method is just an addition to PersonFactory class It creates the object of the class through interfaces but on the other hand it also lets the subclass decide which class is instantiated br br You can see we have used MakeProduct in concreteFactory As a result you can easily call MakeProduct from it to get the IProduct You might also write your custom logic after getting the object in the concrete Factory Method The GetObject is made abstract in the Factory interface br br br Java br This Java example is similar to one in the book Design Patterns br br The MazeGame uses Rooms but it puts the responsibility of creating Rooms to its subclasses which create the concrete classes The regular game mode could use this template method br br In the above snippet the MazeGame constructor is a template method that makes some common logic It refers to the makeRoom factory method that encapsulates the creation of rooms such that other rooms can be used in a subclass To implement the other game mode that has magic rooms it suffices to override the makeRoom method br br br PHP br Another example in PHP follows this time using interface implementations as opposed to subclassing however the same can be achieved through subclassing It is important to note that the factory method can also be defined as public and called directly by the client code in contrast with the Java example above br br br Python br Same as Java example br br br Uses br In ADO NET IDbCommand CreateParameter is an example of the use of factory method to connect parallel class hierarchies br In Qt QMainWindow createPopupMenu Archived at the Wayback Machine is a factory method declared in a framework that can be overridden in application code br In Java several factories are used in the javax xml parsers package e g javax xml parsers DocumentBuilderFactory or javax xml parsers SAXParserFactory br In the HTML DOM API the Document interface contains a createElement factory method for creating specific elements of the HTMLElement interface br br br See also br Design Patterns the highly influential book br Design pattern overview of design patterns in general br Abstract factory pattern a pattern often implemented using factory methods br Builder pattern another creational pattern br Template method pattern which may call factory methods br Joshua Bloch s idea of a static factory method which he says has no direct equivalent in Design Patterns br br br Notes br br br br Martin Fowler Kent Beck John Brant William Opdyke Don Roberts June Refactoring Improving the Design of Existing Code Addison Wesley ISBN br Gamma Erich Helm Richard Johnson Ralph Vlissides John Design Patterns Elements of Reusable Object Oriented Software Addison Wesley ISBN br Cox Brad J Object oriented programming an evolutionary approach Addison Wesley ISBN br Cohen Tal Gil Joseph Better Construction with Factories PDF Journal of Object Technology Bertrand Meyer doi jot a Retrieved br br br External links br br Factory Design Pattern Archived at the Wayback Machine Implementation in Java br Factory method in UML and in LePUS a Design Description Language br Consider static factory methods by Joshua Bloch