title: Java Data Objects
id: 147249
Java Data Objects JDO is a specification of Java object persistence One of its features is a transparency of the persistence services to the domain model JDO persistent objects are ordinary Java programming language classes POJOs there is no requirement for them to implement certain interfaces or extend from special classes JDO was developed under the Java Community Process as JSR JDO was developed under JSR and was released on May JDO was completed in Feb developed by the Apache JDO project JDO was released in October JDO was released in April br Object persistence is defined in the external XML metafiles which may have vendor specific extensions JDO vendors provide developers with enhancers which modify compiled Java class files so they can be transparently persisted Note that byte code enhancement is not mandated by the JDO specification although it is the commonly used mechanism for implementing the JDO specification s requirements Currently JDO vendors offer several options for persistence e g to RDBMS to OODB or to files br JDO enhanced classes are portable across different vendors implementation Once enhanced a Java class can be used with any vendor s JDO product br JDO is integrated with Java EE in several ways First of all the vendor implementation may be provided as a JEE Connector Secondly JDO may work in the context of JEE transaction services br br br JDO vs EJB vs JPA br Enterprise JavaBeans EJB specification also covered persistence as had EJB v with Entity Beans There have been standards conflicts between the two standards bodies in terms of pre eminence JDO has several commercial implementations br In the end persistence has been broken out of EJB Core and a new standard formed the Java Persistence API JPA JPA uses the javax persistence package and was first specified in a separate document within the EJB spec JSR but was later moved to its own spec JSR Significantly javax persistence will not require an EJB container and thus will work within a Java SE environment as well as JDO always has JPA however is an object relational mapping ORM standard while JDO is both an object relational mapping standard and a transparent object persistence standard JDO from an API point of view is agnostic to the technology of the underlying datastore whereas JPA is targeted to RDBMS datastores although there are several JPA providers that support access to non relational datastores through the JPA API such as DataNucleus and ObjectDB br Leading JDO commercial implementations and open source projects also offer a JPA API implementation as an alternative access to their underlying persistence engines formerly exposed solely via JDO in the original products There are many open source implementations of JDO br br br New Features in JDO Version Not Found In Version br Disconnected object graphs concept br Standardized ORM mapping descriptors for ORM based JDO implementations br JDOQL Enhancements Single String Form more String Map Math methods support mandated br Get e g a Connection from javax jdo PersistenceManager br More Named Queries pm newNamedQuery FetchPlan Sequence Delete by Query multiple User Objects on PM br br br JDO Reference Implementations br JDO FOStore br JDO JPOX br JDO JPOX br JDO DataNucleus AccessPlatform br JDO DataNucleus AccessPlatform br JDO DataNucleus AccessPlatform br JDO DataNucleus AccessPlatform br br br See also br Object relational mapping br Object database br Java Persistence API JPA br DataNucleus br ObjectDB br ActiveJPA br br br Bibliography br br br External links br JDO specification br JDO specification br JDO specification br JDO specification br JDO specification