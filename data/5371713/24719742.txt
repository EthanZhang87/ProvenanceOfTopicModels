title: Spring Roo
id: 24719742
Spring Roo is an open source software tool that uses convention over configuration principles to provide rapid application development of Java based enterprise software The resulting applications use common Java technologies such as Spring Framework Java Persistence API Thymeleaf Apache Maven and AspectJ Spring Roo is a member of the Spring portfolio of projects br br br Motivation and history br Spring Roo s mission statement is to fundamentally improve Java developer productivity without compromising engineering integrity or flexibility br The technology was first demonstrated during the opening keynote at the SpringOne Europe developer conference on April with an initial alpha release concurrently being published During the keynote an application was built live on stage that would be used by conference attendees to vote on the preferred name for the project which at that time was codenamed Roo within SpringSource Ultimately the name Spring Roo was preferred over alternatives including Spring Boost Spring Spark Spring HyperDrive and Spring Dart br Several releases followed with the Roo RELEASE general availability released in December In October Spring Roo RELEASE was released The release moved to an OSGi foundation with associated add on discovery model plus added support for incremental database reverse engineering Spring MVC page complexity reduction Google Web Toolkit Google App Engine Apache Solr JSON and smaller features like serializable automation The current Roo project engineers are employed by SpringSource and as such Roo releases typically support the latest available releases of other Spring portfolio projects br In DISID takes over the leadership of the open source framework Spring Roo after the partnership agreement with Pivotal br They collaborate on further development of the Spring Roo project Roo will continue in its goal of providing a code gen style of RAD framework br The Spring Roo project will remain as an open source project under Spring maintaining the same current licensing policy Both Pivotal and DISID are calling on the Spring and Java communities for anyone who would like to collaborate in the project br br br Standards and technology compatibility br Roo s default installation facilitates the creation of applications that comply with the following standards and major technologies br br Apache ActiveMQ as an embedded JMS implementation br Apache Maven version or above br Apache Tomcat embedded execution support br AspectJ used for AOP plus mixins to achieve separation of concerns br AspectJ Development Tools Eclipse plugin br Bootstrap version or above br Cloud computing via SpringSource Cloud Foundry Google App Engine and VMforce br Eclipse IDE concurrent execution and project metadata creation br EclipseLink as a JPA implementation br Hibernate as a JPA implementation br Java Bean Validation JSR including Hibernate Validator br Java API for XML Web Services both services and clients br Java Message Service both message producers and consumers br Java Persistence API multiple implementations br Java Transaction API via Spring transaction abstraction br Java version or Java is supported since Roo br JQuery version or above br JSON REST support br JUnit automated tests for user projects br Log J installation and configuration br OSGi the Roo tool is built on OSGi br Representational State Transfer REST br Spring Boot version or above br Spring Data JPA version or above br Spring Framework version or above br Spring Security version or above br Spring Web Flow installation and flow definition br SpringSource Tool Suite STS has an embedded Roo shell and Roo command helpers br Thymeleaf version or above br The above list can be augmented through additional Roo add ons which provide Roo s method of extensibility br br br User interface br Spring Roo s main user interface is a command line shell The shell provides both a command line interface and also a mechanism to host plug ins which are called add ons in Roo One key design goal of Roo is to ensure a user can continue to work in a natural way which typically means using their preferred integrated development environment IDE or text editor for most tasks As such Roo is often loaded in a separate window to the IDE or text editor and will monitor the file system for changes made by the user outside of Roo A startup time scan of a user s project is also performed to determine any changes that may have been made while Roo was not running br The user interface shell supports extensive usability features including command line completion i e press TAB online help hinting a form of context sensitive help and contextual awareness which provides automatic inference of likely intentions based on recent activity This allows a user to create a new software project via the Roo shell or use Roo on an existing project The following is an example of the commands used by Roo to create a new application plus the Spring Boot Maven plugin run goal to compile and run the application using an embedded HTTP server br br The above commands did not need to be typed in full but rather were completed using TAB Additionally the hint command could have been used to acquire help at any time br br br Architecture br While there are many ways that software can automatically generate code Roo operates by generating AspectJ inter type declarations otherwise known as mixins or introductions This achieves separation of concerns as the code maintained by Roo is in a different compilation unit from the code a user writes This means Roo can incrementally modify the AspectJ inter type declarations that it needs to and leave all other files intact br Spring Roo uses add ons to provide all the functionality within and on top of an OSGi runtime system based on Apache Felix br br br Base add ons br There are numerous commands available in Roo depending on which base add ons those which ship with Roo and third party add ons those that do not ship with Roo have been installed The base add ons shipping with Roo x include br br Add On Creator enables easy creation of third party Roo add ons br Backup enables backups to be made to a ZIP file by typing backup br Bean Info exposes JavaBean property accessor and mutator metadata primarily used by other add ons br Configurable introduces Spring Framework s Configurable annotation primarily used by other add ons br Database reverse engineering allows incremental reverse engineering of relational databases br Data on Demand provides seed data that is compliant with JSR JavaBean Validation annotations present in entities br DTO extensive support for automatically maintaining Data Transfer Objects br Email simplifies setup of SMTP based emails and mail sender support via Javamail br Entity extensive support for automatically maintaining Java Persistence API Entity classes br Java Bean automatically maintains JavaBean getters setters for classes with an RooJavaBean annotation br JDBC encapsulates OSGi compliant access to JDBC drivers shipped in different bundles primarily used by other add ons br JMS simplifies connecting to a JMS provider or embedding ActiveMQ and sending receiving JMS messages br JPA installs a specified JPA provider and sets up JDBC accordingly br JSON adds JSON related serialization and deserialization methods to POJOs br Logging sets up Log j including command based log level configuration br Pluralization provides pluralization of nouns primarily used by other add ons br Property Editor manages property editors as required by Spring MVC br Property File manages Java properties files and provides shell commands to read set and remove property values br Security sets up Spring Security including login pages filters and dependencies br Test produces JUnit integration tests for project classes br ToString produces a valid toString method for any class with the RooToString annotation br Web Flow installs the Spring Web Flow and creates a default flow br Web MVC maintains the view layer based on Spring MVC plus Thymeleaf templates and the RESTful API br WS produces SOAP services and SOAP clients br br br Roo core modules br Roo also includes a core set of modules that provide a hosted execution environment for different add ons These major modules include br br Support used by core modules and add ons for common utility class support services br Metadata provides a metadata service provider interface and implementation that includes dependency registration and caching br File monitor publishes events following detected file system changes the default implementation uses auto scaled disk polling br File undo provides a file undo facility for use by the process manager br Project abstracts typical end user project build systems like Apache Maven and Apache Ant br Process manager offers an ACID like file system abstraction that includes disk rollback and process synchronization br Classpath performs abstract syntax tree parsing and type binding of Java and AspectJ compilation units br Felix integrates with Apache Felix such as providing osgi commands in the Roo shell br OBR adds Apache Felix OSGi Bundle Repository capabilities br URL Stream encapsulates access to downloads in different host environments Roo shell IDE embedding and enforces the Pretty Good Privacy based httppgp protocol handler br br br Differentiation br Spring Roo differentiates from other convention over configuration rapid application development tools in the following major ways br br Java platform productivity Roo provides a productivity solution for Java developers It does not require the user to program in any language other than Java It also uses mainstream Java enterprise application standards and technologies as listed above to maximize reuse of existing developer knowledge skills and experience br Usability Roo s shell is designed to provide a discoverable easy to use environment that minimizes training requirements Roo annotations all start with Roo to facilitate code assist command line completion in IDEs Users can use their IDE for all operations and do not need to be aware of Roo running Roo also supports users editing their files when Roo is not running br No runtime Roo does not provide a runtime API or require specific runtime components This ensures there is no Roo related CPU memory and disk storage resource consumption at runtime Roo code is optimized for small footprint cloud deployment and high scalability use cases br Avoids lock in Roo can be rapidly removed from a user project which is useful to protect against vendor lock in This is possible because there is no runtime component to remove Roo annotations are source retention only ensuring they are not preserved in compiled class files and Roo s AspectJ inter type declarations can be pushed in to standard java compilation units br Extensibility Roo s separation of core infrastructure and base add ons intends to allow third parties to easily extend Roo br br br See also br br Grails framework br Griffon framework A Desktop framework inspired by Grails br Play Framework br br br br br br External links br Official website