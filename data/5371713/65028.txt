title: Facade pattern
id: 65028
The facade pattern also spelled fa ade is a software design pattern commonly used in object oriented programming Analogous to a fa ade in architecture it is an object that serves as a front facing interface masking more complex underlying or structural code A facade can br br improve the readability and usability of a software library by masking interaction with more complex components behind a single and often simplified application programming interface API br provide a context specific interface to more generic functionality complete with context specific input validation br serve as a launching point for a broader refactor of monolithic or tightly coupled systems in favor of more loosely coupled code br Developers often use the facade design pattern when a system is very complex or difficult to understand because the system has many interdependent classes or because its source code is unavailable This pattern hides the complexities of the larger system and provides a simpler interface to the client It typically involves a single wrapper class that contains a set of members required by the client These members access the system on behalf of the facade client and hide the implementation details br br br Overview br The Facade br br design pattern is one of the twenty three well known br GoF design patterns br that describe how to solve recurring design problems to design flexible and reusable object oriented software that is objects that are easier to implement change test and reuse br What problems can the Facade design pattern solve br br To make a complex subsystem easier to use a simple interface should be provided for a set of interfaces in the subsystem br The dependencies on a subsystem should be minimized br Clients that access a complex subsystem directly refer to depend on many different objects having different interfaces tight coupling which makes the clients hard to implement change test and reuse br What solution does the Facade design pattern describe br Define a Facade object that br br implements a simple interface in terms of by delegating to the interfaces in the subsystem and br may perform additional functionality before after forwarding a request br This enables to work through a Facade object to minimize the dependencies on a subsystem br br See also the UML class and sequence diagram below br br br Usage br A Facade is used when an easier or simpler interface to an underlying object is desired Alternatively an adapter can be used when the wrapper must respect a particular interface and must support polymorphic behavior A decorator makes it possible to add or alter behavior of an interface at run time br br The facade pattern is typically used when br br a simple interface is required to access a complex system br a system is very complex or difficult to understand br an entry point is needed to each level of layered software or br the abstractions and implementations of a subsystem are tightly coupled br br br Structure br br br UML class and sequence diagram br br In this UML class diagram br the Client class doesn t access the subsystem classes directly br Instead the Client works through a Facade class that implements a simple interface in terms of by delegating to the subsystem classes Class Class and Class br The Client depends only on the simple Facade interface br and is independent of the complex subsystem br The sequence diagram br shows the run time interactions The Client object br works through a Facade object that delegates the request to br the Class Class and Class br instances that perform the request br br br UML class diagram br br Facade br The facade class abstracts Packages and from the rest of the application br Clients br The objects are using the Facade Pattern to access resources from the Packages br br br Example br This is an abstract example of how a client you interacts with a facade the computer to a complex system internal computer parts like CPU and HardDrive br br br C br br br See also br Encapsulation computer programming br br br br br br External links br br Description from the Portland Pattern Repository