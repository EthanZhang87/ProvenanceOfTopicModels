title: Property (programming)
id: 5999262
A property in some object oriented programming languages is a special sort of class member intermediate in functionality between a field or data member and a method The syntax for reading and writing of properties is like for fields but property reads and writes are usually translated to getter and setter method calls The field like syntax is easier to read and write than many method calls yet the interposition of method calls under the hood allows for data validation active updating e g of GUI elements or implementation of what may be called read only fields br br br Support in languages br Programming languages that support properties include ActionScript C D Delphi Free Pascal eC F Kotlin JavaScript Objective C Python Scala Swift Lua and Visual Basic br Some object oriented languages such as Java and C do not support properties requiring the programmer to define a pair of accessor and mutator methods instead br Oberon provides an alternative mechanism using object variable visibility flags br Other languages designed for the Java Virtual Machine such as Groovy natively support properties br While C does not have first class properties they can be emulated with operator overloading br Also note that some C compilers support first class properties as language extensions br br In Microsoft Visual Studio GCC and llvm clang the declspec property creates properties similar to C br Borland C and Borland CodeGear Embarcadero C Builder use the property keyword br In many object oriented languages properties are implemented as a pair of accessor mutator methods but accessed using the same syntax as for public fields Omitting a method from the pair yields a read only or an uncommon write only property br In some languages with no built in support for properties a similar construct can be implemented as a single method that either returns or changes the underlying data depending on the context of its invocation Such techniques are used e g in Perl br Some languages Ruby Smalltalk achieve property like syntax using normal methods sometimes with a limited amount of syntactic sugar br br br Syntax variants br Some languages follow well established syntax conventions for formally specifying and utilizing properties and methods br Among these conventions br br Dot notation br Bracket notation br br br Dot notation br The following example demonstrates dot notation in JavaScript br br br Bracket notation br The following example demonstrates bracket notation in JavaScript br br br Example syntax br br br C br br Recent C versions also allow auto implemented properties where the backing field for the property is generated by the compiler during compilation This means that the property must have a setter However it can be private br br br C br br C does not have first class properties but there exist several ways to emulate properties to a limited degree Two of which follow br br br Using Standard C br br Also see Stack Overflow for a more detailed example br br br C Microsoft GCC LLVM clang and C Builder specific br An example taken from the MSDN documentation page br br br D br br In D version each property accessor or mutator must be marked with property br br br Delphi Free Pascal br br br eC br br br F br br br JavaScript br br br ActionScript br br br Objective C br br The above example could be used in an arbitrary method like this br br br PHP br br br Python br Properties only work correctly for new style classes classes that have object as a superclass and are only available in Python and newer see the relevant section of the tutorial Unifying types and classes in Python Python added a new syntax involving decorators for defining properties br br br Ruby br br Ruby also provides automatic getter setter synthesizers defined as instance methods of Class br br br Visual Basic br br br Visual Basic NET br br br Visual Basic only NET br br br Visual Basic br br br See also br Attribute computing br Bound property br Field computer science br Indexer programming br Method computer programming br Mutator method br Uniform access principle br br br 