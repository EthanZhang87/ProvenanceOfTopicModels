title: Jakarta Persistence
id: 7811267
Jakarta Persistence also known as JPA abbreviated from formerly name Java Persistence API is a Jakarta EE application programming interface specification that describes the management of relational data in enterprise Java applications br Persistence in this context covers three areas br br The API itself defined in the jakarta persistence package javax persistence for Jakarta EE and below br The Jakarta Persistence Query Language JPQL formerly Java Persistence Query Language br Object relational metadata br The reference implementation for JPA is EclipseLink br br br History br The final release date of the JPA specification was May as part of Java Community Process JSR The JPA specification was released December the Java EE platform requires JPA The JPA specification was released April the Java EE platform requires JPA The JPA specification was released in the summer of The JPA specification the latest version was released in the spring of as part of Jakarta EE br br br Entities br A persistence entity is a lightweight Java class with its state typically persisted to a table in a relational database Instances of such an entity correspond to individual rows in the table Entities typically have relationships with other entities and these relationships are expressed through object relational mapping ORM metadata This metadata may be specified directly in the entity class file by using annotations or in a separate XML descriptor file distributed with the application br br br Example br An example entity class with ORM metadata declared using annotations import statements and setters getters are omitted for simplicity br br The Entity annotation declares that the class represents an entity Id declares the attribute which acts as the primary key of the entity Additional annotations may be used to declare additional metadata for example changing the default table name in the Table annotation or to create associations between entities br br br Query Language br br The Jakarta Persistence Query Language JPQL formerly Java Persistence Query Language makes queries against entities stored in a relational database Queries resemble SQL queries in syntax but operate against entity objects rather than directly with database tables br br br Motivation br Prior to the introduction of EJB specification many enterprise Java developers used lightweight persistent objects provided by either persistence frameworks such as Hibernate or data access objects DAO instead of by using entity beans This is because entity beans in previous EJB specifications called for much complicated code and imposed a heavy resource footprint and they could be used only on Java EE application servers because of interconnections and dependencies in the source code between beans and DAO objects or persistence frameworks Thus many of the features originally presented in third party persistence frameworks were incorporated into the Java Persistence API and projects such as Hibernate and TopLink Essentials have become implementations of the Java Persistence API specification br br br Related technologies br br br Enterprise Beans br The EJB specification itself part of the Java EE platform included a definition of the Java Persistence API However developers do not need an EJB container or a Java EE application server to run applications that use this persistence API Future versions of the Java Persistence API will be defined in a separate JSR and specification rather than in the EJB JSR specification br The Java Persistence API replaces the persistence solution of EJB CMP Container Managed Persistence br br br Java Data Objects API br br The Java Persistence API was developed in part to unify the Java Data Objects API and the EJB Container Managed Persistence CMP API Most products supporting each of the two APIs support the Java Persistence API br The Java Persistence API specifies persistence only for relational database management systems by focusing on object relational mapping ORM Some JPA providers support other database models though this is outside the scope of JPA s design The introduction section of the JPA specification states The technical objective of this work is to provide an object relational mapping facility for the Java application developer using a Java domain model to manage a relational database br The Java Data Objects specification supports ORM as well as persistence to other types of database models for example flat file databases and NoSQL databases including document databases graph databases any many other datastores br br br Service Data Object API br br The designers of the Java Persistence API aimed to provide for relational persistence with many of the key areas taken from object relational mapping tools such as Hibernate and TopLink Java Persistence API improved on and replaced EJB evidenced by its inclusion in EJB The Service Data Objects SDO API JSR has a very different objective to that of the Java Persistence API and is considered complementary The SDO API is designed for service oriented architectures multiple data formats rather than only relational data and multiple programming languages The Java Community Process manages the Java version of the SDO API the C version of the SDO API is managed via OASIS br br br Hibernate br br Hibernate founded by Gavin King provides an open source object relational mapping framework for Java Versions and later provide an implementation for the Java Persistence API King represented JBoss on JSR the JCP expert group charged with developing JPA This led to ongoing controversy and speculation surrounding the relationship between JPA and Hibernate Sun Microsystems stated that ideas came from several frameworks including Hibernate and Java Data Objects br br br Spring Data JPA br The Spring Data JPA is an implementation of the repository abstraction that is a key building block of domain driven design based on the Java application framework Spring It transparently supports all available JPA implementations and supports CRUD operations as well as the convenient execution of database queries br br br Version history br br br JPA br Development of a new version of JPA was started in July in the Java Community Process as JSR JPA was approved as final on December The focus of JPA was to address features that were present in some of the popular ORM vendors but could not gain consensus approval for JPA br Main features included were br br Expanded object relational mapping functionality br Support for collections of embedded objects linked in the ORM with a many to one relationship br Ordered lists br Combinations of access types br A criteria query API br Standardization of SQL Hints br Standardization of additional metadata to support DDL generation br Support for validation br Shared object cache support br Vendors supporting JPA br br Batoo JPA br DataNucleus formerly JPOX br EclipseLink formerly Oracle TopLink br IBM for WebSphere Application Server br JBoss with Hibernate br ObjectDB br OpenJPA br OrientDB br Versant Corporation JPA object database br br br JPA br Development of JPA version began in July as JSR JPA was approved as final on May br Main features included were br br Converters which allow custom code conversions between database and object types br Criteria update delete to allow bulk updates and deletes through the Criteria API br Entity graphs for partial or specified fetching or merging of objects br JPQL Criteria enhancements such as arithmetic subqueries generic database functions join ON clause and the TREAT option br Schema generation br Support for stored procedures br Vendors supporting JPA br br DataNucleus br EclipseLink br Hibernate br OpenJPA from version br br br JPA br Development of JPA a maintenance release began in under JSR The maintenance review was approved on June br Main features included were br br The addition of Repeatable to all relevant annotations br Support for JPA annotations to be used in metaannotations br Streaming for query results br The ability for AttributeConverters to be CDI injectable br Support for Java date and time types br Vendors supporting JPA br br DataNucleus from version br EclipseLink from version br Hibernate from version br OpenJPA from version br br br Jakarta Persistence br The JPA was renamed as Jakarta Persistence in and version was released in This included the renaming of packages and properties from javax persistence to jakarta persistence br Vendors supporting Jakarta Persistence br br DataNucleus from version br EclipseLink from version br Hibernate from version br br br Jakarta Persistence br Version was released in It is part of Jakarta EE and thus requires at least Java to run It adds better UUID handling various new JPQL functions for math and date time handling and other small changes br Vendors supporting Jakarta Persistence br br DataNucleus from version br EclipseLink from version br Hibernate from version br br br See also br NET Persistence API NPA br JDBC br br br br br br Further reading br Deinum Marten Rubio Daniel Long Josh Mak Gary September Spring Recipes A Problem Solution Approach Second ed Apress ISBN br br br External links br br br General info br Official website br Documentation for the final version of the EJB spec called JSR br GlassFish s Persistence page br JCP Persistence page br br br Tutorials br Java EE Persistence API Javadoc br Java EE Persistence API tutorial br Java EE Persistence API Javadoc br Java EE Persistence API tutorial br Persistence in the Java EE tutorial