title: WebSocket
id: 25553718
WebSocket is a computer communications protocol providing a simultaneous two way communication channel over a single Transmission Control Protocol TCP connection The WebSocket protocol was standardized by the IETF as RFC in The current specification allowing web applications to use this protocol is known as WebSockets It is a living standard maintained by the WHATWG and a successor to The WebSocket API from the W C br WebSocket is distinct from HTTP used to serve most webpages Although they are different RFC states that WebSocket is designed to work over HTTP ports and as well as to support HTTP proxies and intermediaries thus making it compatible with HTTP To achieve compatibility the WebSocket handshake uses the HTTP Upgrade header to change from the HTTP protocol to the WebSocket protocol br The WebSocket protocol enables full duplex interaction between a web browser or other client application and a web server with lower overhead than half duplex alternatives such as HTTP polling facilitating real time data transfer from and to the server This is made possible by providing a standardized way for the server to send content to the client without being first requested by the client and allowing messages to be passed back and forth while keeping the connection open In this way a two way ongoing conversation can take place between the client and the server The communications are usually done over TCP port number or in the case of unsecured connections which is beneficial for environments that block non web Internet connections using a firewall Additionally WebSocket enables streams of messages on top of TCP TCP alone deals with streams of bytes with no inherent concept of a message Similar two way browser server communications have been achieved in non standardized ways using stopgap technologies such as Comet or Adobe Flash Player br Most browsers support the protocol including Google Chrome Firefox Microsoft Edge Internet Explorer Safari and Opera br The WebSocket protocol specification defines ws WebSocket and wss WebSocket Secure as two new uniform resource identifier URI schemes that are used for unencrypted and encrypted connections respectively Apart from the scheme name and fragment i e is not supported the rest of the URI components are defined to use URI generic syntax br br br History br WebSocket was first referenced as TCPConnection in the HTML specification as a placeholder for a TCP based socket API In June a series of discussions were led by Michael Carter that resulted in the first version of the protocol known as WebSocket br Before WebSocket port full duplex communication was attainable using Comet channels however Comet implementation is nontrivial and due to the TCP handshake and HTTP header overhead it is inefficient for small messages The WebSocket protocol aims to solve these problems without compromising the security assumptions of the web br The name WebSocket was coined by Ian Hickson and Michael Carter shortly thereafter through collaboration on the whatwg IRC chat room and subsequently authored for inclusion in the HTML specification by Ian Hickson In December Google Chrome was the first browser to ship full support for the standard with WebSocket enabled by default Development of the WebSocket protocol was subsequently moved from the W C and WHATWG group to the IETF in February and authored for two revisions under Ian Hickson br After the protocol was shipped and enabled by default in multiple browsers the RFC was finalized under Ian Fette in December br RFC introduced compression extension to WebSocket using the DEFLATE algorithm on a per message basis br br br Client example br br br Server example br br br Web API br A web application e g web browser may use the WebSocket interface to connect to a WebSocket server br br br Protocol br Steps br br Opening handshake HTTP request HTTP response to establish a connection br Data messages to transfer application data br Closing handshake two Close frames to close the connection br br br Opening handshake br The client sends an HTTP request method GET version and the server returns an HTTP response with status code Switching Protocols on success This means a WebSocket server can use the same port as HTTP and HTTPS because the handshake is compatible with HTTP br br Example request br Example response br br In HTTP each line ends in r n and the last line is empty Once the connection is established communication switches to a binary frame based protocol which does not conform to the HTTP protocol br Sec WebSocket Key and Sec WebSocket Accept are intended to prevent a caching proxy from re sending a previous WebSocket conversation and does not provide any authentication privacy or integrity br Though some servers accept a short Sec WebSocket Key many modern servers will reject the request with error invalid Sec WebSocket Key header br br br Frame based message br After the opening handshake the client and server can at any time send messages to each other such as data messages text or binary and control messages close ping pong A message is composed of one or more frames br Fragmentation allows a message to be split into two or more frames It enables sending messages with initial data available but complete length unknown Without fragmentation the whole message must be sent in one frame so the complete length is needed before the first byte can be sent which requires a buffer It also enables multiplexing several streams simultaneously e g to avoid monopolizing a socket for a single large payload br br An unfragmented message consists of a single frame with FIN and opcode br A fragmented message consists of a single frame with FIN and opcode followed by zero or more frames with FIN and opcode and terminated by a single frame with FIN and opcode br br br Frame structure br br br Opcodes br br br Status codes br br br Browser support br A secure version of the WebSocket protocol is implemented in Firefox Safari Google Chrome Opera and Internet Explorer A detailed protocol test suite report lists the conformance of those browsers to specific protocol aspects br An older less secure version of the protocol was implemented in Opera and Safari as well as the mobile version of Safari in iOS The BlackBerry Browser in OS implements WebSockets Because of vulnerabilities it was disabled in Firefox and and Opera br Using browser developer tools developers can inspect the WebSocket handshake as well as the WebSocket frames br br br Server implementations br Nginx has supported WebSockets since implemented in version including acting as a reverse proxy and load balancer of WebSocket applications br Apache HTTP Server has supported WebSockets since July implemented in version br Internet Information Services added support for WebSockets in version which was released with Windows Server br lighttpd has supported WebSockets since implemented in lighttpd lighttpd mod proxy can act as a reverse proxy and load balancer of WebSocket applications lighttpd mod wstunnel can act as a WebSocket endpoint to transmit arbitrary data including in JSON format to a backend application lighttpd supports WebSockets over HTTP since implemented in lighttpd br br br Security considerations br Unlike regular cross domain HTTP requests WebSocket requests are not restricted by the same origin policy Therefore WebSocket servers must validate the Origin header against the expected origins during connection establishment to avoid cross site WebSocket hijacking attacks similar to cross site request forgery which might be possible when the connection is authenticated with cookies or HTTP authentication It is better to use tokens or similar protection mechanisms to authenticate the WebSocket connection when sensitive private data is being transferred over the WebSocket A live example of vulnerability was seen in in the form of Cable Haunt br br br Proxy traversal br WebSocket protocol client implementations try to detect whether the user agent is configured to use a proxy when connecting to destination host and port and if it is uses HTTP CONNECT method to set up a persistent tunnel br While the WebSocket protocol itself is unaware of proxy servers and firewalls it features an HTTP compatible handshake thus allowing HTTP servers to share their default HTTP and HTTPS ports and respectively with a WebSocket gateway or server The WebSocket protocol defines a ws and wss prefix to indicate a WebSocket and a WebSocket Secure connection respectively Both schemes use an HTTP upgrade mechanism to upgrade to the WebSocket protocol Some proxy servers are transparent and work fine with WebSocket others will prevent WebSocket from working correctly causing the connection to fail In some cases additional proxy server configuration may be required and certain proxy servers may need to be upgraded to support WebSocket br If unencrypted WebSocket traffic flows through an explicit or a transparent proxy server without WebSockets support the connection will likely fail br If an encrypted WebSocket connection is used then the use of Transport Layer Security TLS in the WebSocket Secure connection ensures that an HTTP CONNECT command is issued when the browser is configured to use an explicit proxy server This sets up a tunnel which provides low level end to end TCP communication through the HTTP proxy between the WebSocket Secure client and the WebSocket server In the case of transparent proxy servers the browser is unaware of the proxy server so no HTTP CONNECT is sent However since the wire traffic is encrypted intermediate transparent proxy servers may simply allow the encrypted traffic through so there is a much better chance that the WebSocket connection will succeed if WebSocket Secure is used Using encryption is not free of resource cost but often provides the highest success rate since it would be travelling through a secure tunnel br A mid draft version hixie broke compatibility with reverse proxies and gateways by including eight bytes of key data after the headers but not advertising that data in a Content Length header This data was not forwarded by all intermediates which could lead to protocol failure More recent drafts e g hybi put the key data in a Sec WebSocket Key header solving this problem br br br See also br br br Notes br br br br br br External links br IETF Hypertext Bidirectional HyBi working group br RFC The WebSocket protocol Proposed Standard published by the IETF HyBi Working Group br The WebSocket protocol Internet Draft published by the IETF HyBi Working Group br The WebSocket protocol Original protocol proposal by Ian Hickson br The WebSocket API Archived at the Wayback Machine W C Working Draft specification of the API br The WebSocket API W C Candidate Recommendation specification of the API br WebSocket org Archived at the Wayback Machine WebSocket demos loopback tests general information and community