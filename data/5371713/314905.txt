title: Reflective programming
id: 314905
In computer science reflective programming or reflection is the ability of a process to examine introspect and modify its own structure and behavior br br br Historical background br The earliest computers were programmed in their native assembly languages which were inherently reflective as these original architectures could be programmed by defining instructions as data and using self modifying code As the bulk of programming moved to higher level compiled languages such as Algol Cobol Fortran Pascal and C this reflective ability largely disappeared until new programming languages with reflection built into their type systems appeared br Brian Cantwell Smith s doctoral dissertation introduced the notion of computational reflection in procedural programming languages and the notion of the meta circular interpreter as a component of Lisp br br br Uses br Reflection helps programmers make generic software libraries to display data process different formats of data perform serialization and deserialization of data for communication or do bundling and unbundling of data for containers or bursts of communication br Effective use of reflection almost always requires a plan A design framework encoding description object library a map of a database or entity relations br Reflection makes a language more suited to network oriented code For example it assists languages such as Java to operate well in networks by enabling libraries for serialization bundling and varying data formats Languages without reflection such as C are required to use auxiliary compilers for tasks like Abstract Syntax Notation to produce code for serialization and bundling br Reflection can be used for observing and modifying program execution at runtime A reflection oriented program component can monitor the execution of an enclosure of code and can modify itself according to a desired goal of that enclosure This is typically accomplished by dynamically assigning program code at runtime br In object oriented programming languages such as Java reflection allows inspection of classes interfaces fields and methods at runtime without knowing the names of the interfaces fields methods at compile time It also allows instantiation of new objects and invocation of methods br Reflection is often used as part of software testing such as for the runtime creation instantiation of mock objects br Reflection is also a key strategy for metaprogramming br In some object oriented programming languages such as C and Java reflection can be used to bypass member accessibility rules For C properties this can be achieved by writing directly onto the usually invisible backing field of a non public property It is also possible to find non public methods of classes and types and manually invoke them This works for project internal files as well as external libraries such as NET s assemblies and Java s archives br br br Implementation br br A language supporting reflection provides a number of features available at runtime that would otherwise be difficult to accomplish in a lower level language Some of these features are the abilities to br br Discover and modify source code constructions such as code blocks classes methods protocols etc as first class objects at runtime br Convert a string matching the symbolic name of a class or function into a reference to or invocation of that class or function br Evaluate a string as if it were a source code statement at runtime br Create a new interpreter for the language s bytecode to give a new meaning or purpose for a programming construct br These features can be implemented in different ways In MOO reflection forms a natural part of everyday programming idiom When verbs methods are called various variables such as verb the name of the verb being called and this the object on which the verb is called are populated to give the context of the call Security is typically managed by accessing the caller stack programmatically Since callers is a list of the methods by which the current verb was eventually called performing tests on callers the command invoked by the original user allows the verb to protect itself against unauthorised use br Compiled languages rely on their runtime system to provide information about the source code A compiled Objective C executable for example records the names of all methods in a block of the executable providing a table to correspond these with the underlying methods or selectors for these methods compiled into the program In a compiled language that supports runtime creation of functions such as Common Lisp the runtime environment must include a compiler or an interpreter br Reflection can be implemented for languages without built in reflection by using a program transformation system to define automated source code changes br br br Security considerations br Reflection may allow a user to create unexpected control flow paths through an application potentially bypassing security measures This may be exploited by attackers Historical vulnerabilities in Java caused by unsafe reflection allowed code retrieved from potentially untrusted remote machines to break out of the Java sandbox security mechanism A large scale study of Java vulnerabilities in concluded that unsafe reflection is the most common vulnerability in Java though not the most exploited br br br Examples br The following code snippets create an instance foo of class Foo and invoke its method PrintHello For each programming language normal and reflection based call sequences are shown br br br Common Lisp br The following is an example in Common Lisp using the Common Lisp Object System br br br C br The following is an example in C br br br Delphi Object Pascal br This Delphi and Object Pascal example assumes that a TFoo class has been declared in a unit called Unit br br br eC br The following is an example in eC br br br Go br The following is an example in Go br br br Java br The following is an example in Java br br br JavaScript br The following is an example in JavaScript br br br Julia br The following is an example in Julia br br br Objective C br The following is an example in Objective C implying either the OpenStep or Foundation Kit framework is used br br br Perl br The following is an example in Perl br br br PHP br The following is an example in PHP br br br Python br The following is an example in Python br br br R br The following is an example in R br br br Ruby br The following is an example in Ruby br br br Xojo br The following is an example using Xojo br br br See also br List of reflective programming languages and platforms br Mirror programming br Programming paradigms br Self hosting compilers br Self modifying code br Type introspection br typeof br br br br br br Citations br br br Sources br br br Further reading br Ira R Forman and Nate Forman Java Reflection in Action ISBN br Ira R Forman and Scott Danforth Putting Metaclasses to Work ISBN br br br External links br Reflection in logic functional and object oriented programming a short comparative study br An Introduction to Reflection Oriented Programming br Brian Foote s pages on Reflection in Smalltalk br Java Reflection API Tutorial from Oracle