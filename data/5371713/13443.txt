title: HTTP
id: 13443
HTTP Hypertext Transfer Protocol is an application layer protocol in the Internet protocol suite model for distributed collaborative hypermedia information systems HTTP is the foundation of data communication for the World Wide Web where hypertext documents include hyperlinks to other resources that the user can easily access for example by a mouse click or by tapping the screen in a web browser br Development of HTTP was initiated by Tim Berners Lee at CERN in and summarized in a simple document describing the behavior of a client and a server using the first HTTP version named That version was subsequently developed eventually becoming the public br Development of early HTTP Requests for Comments RFCs started a few years later in a coordinated effort by the Internet Engineering Task Force IETF and the World Wide Web Consortium W C with work later moving to the IETF br HTTP was finalized and fully documented as version in It evolved as version in and then its specifications were updated in and br Its secure variant named HTTPS is used by more than of websites br HTTP published in provides a more efficient expression of HTTP s semantics on the wire As of January it is used by of websites and supported by almost all web browsers over of users It is also supported by major web servers over Transport Layer Security TLS using an Application Layer Protocol Negotiation ALPN extension where TLS or newer is required br HTTP the successor to HTTP was published in As of February it is now used on of websites and is supported by most web browsers i e at least partially supported by of users HTTP uses QUIC instead of TCP for the underlying transport protocol Like HTTP it does not obsolesce previous major versions of the protocol Support for HTTP was added to Cloudflare and Google Chrome first and is also enabled in Firefox HTTP has lower latency for real world web pages if enabled on the server and loads faster than with HTTP in some cases over three times faster than HTTP which is still commonly only enabled br br br Technical overview br HTTP functions as a request response protocol in the client server model A web browser for example may be the client whereas a process named web server running on a computer hosting one or more websites may be the server The client submits an HTTP request message to the server The server which provides resources such as HTML files and other content or performs other functions on behalf of the client returns a response message to the client The response contains completion status information about the request and may also contain requested content in its message body br A web browser is an example of a user agent UA Other types of user agent include the indexing software used by search providers web crawlers voice browsers mobile apps and other software that accesses consumes or displays web content br HTTP is designed to permit intermediate network elements to improve or enable communications between clients and servers High traffic websites often benefit from web cache servers that deliver content on behalf of upstream servers to improve response time Web browsers cache previously accessed web resources and reuse them whenever possible to reduce network traffic HTTP proxy servers at private network boundaries can facilitate communication for clients without a globally routable address by relaying messages with external servers br To allow intermediate HTTP nodes proxy servers web caches etc to accomplish their functions some of the HTTP headers found in HTTP requests responses are managed hop by hop whereas other HTTP headers are managed end to end managed only by the source client and by the target web server br HTTP is an application layer protocol designed within the framework of the Internet protocol suite Its definition presumes an underlying and reliable transport layer protocol In the latest version HTTP the Transmission Control Protocol TCP is no longer used but the older versions are still more used and they most commonly use TCP They have also been adapted to use unreliable protocols such as the User Datagram Protocol UDP which HTTP also indirectly always builds on for example in HTTPU and Simple Service Discovery Protocol SSDP br HTTP resources are identified and located on the network by Uniform Resource Locators URLs using the Uniform Resource Identifiers URI s schemes http and https As defined in RFC URIs are encoded as hyperlinks in HTML documents so as to form interlinked hypertext documents br In HTTP a separate TCP connection to the same server is made for every resource request br In HTTP instead a TCP connection can be reused to make multiple resource requests i e of HTML pages frames images scripts stylesheets etc br HTTP communications therefore experience less latency as the establishment of TCP connections presents considerable overhead especially under high traffic conditions br HTTP is a revision of previous HTTP in order to maintain the same client server model and the same protocol methods but with these differences in order br br to use a compressed binary representation of metadata HTTP headers instead of a textual one so that headers require much less space br to use a single TCP IP usually encrypted connection per accessed server domain instead of to TCP IP connections br to use one or more bidirectional streams per TCP IP connection in which HTTP requests and responses are broken down and transmitted in small packets to almost solve the problem of the HOLB head of line blocking br to add a push capability to allow server application to send data to clients whenever new data is available without forcing clients to request periodically new data to server by using polling methods br HTTP communications therefore experience much less latency and in most cases even higher speeds than HTTP communications br HTTP is a revision of previous HTTP in order to use QUIC UDP transport protocols instead of TCP Before that version TCP IP connections were used but now only the IP layer is used which UDP like TCP builds on This slightly improves the average speed of communications and to avoid the occasional very rare problem of TCP connection congestion that can temporarily block or slow down the data flow of all its streams another form of head of line blocking br br br History br br The term hypertext was coined by Ted Nelson in in the Xanadu Project which was in turn inspired by Vannevar Bush s s vision of the microfilm based information retrieval and management memex system described in his essay As We May Think Tim Berners Lee and his team at CERN are credited with inventing the original HTTP along with HTML and the associated technology for a web server and a client user interface called web browser Berners Lee designed HTTP in order to help with the adoption of his other idea the WorldWideWeb project which was first proposed in now known as the World Wide Web br The first web server went live in The protocol used had only one method namely GET which would request a page from a server The response from the server was always an HTML page br br br Summary of HTTP milestone versions br br HTTP br In the first documented official version of HTTP was written as a plain document less than words long and this version was named HTTP which supported only GET method allowing clients to only retrieve HTML documents from the server but not supporting any other file formats or information upload br HTTP draft br Since a new document was written to specify the evolution of the basic protocol towards its next full version It supported both the simple request method of the version and the full GET request that included the client HTTP version This was the first of the many unofficial HTTP drafts that preceded the final work on HTTP br W C HTTP Working Group br After having decided that new features of HTTP protocol were required and that they had to be fully documented as official RFCs in early the HTTP Working Group HTTP WG led by Dave Raggett was constituted with the aim to standardize and expand the protocol with extended operations extended negotiation richer meta information tied with a security protocol which became more efficient by adding additional methods and header fields br The HTTP WG planned to revise and publish new versions of the protocol as HTTP and HTTP within but because of the many revisions that timeline lasted much more than one year br The HTTP WG planned also to specify a far future version of HTTP called HTTP NG HTTP Next Generation that would have solved all remaining problems of previous versions related to performances low latency responses etc but this work started only a few years later and it was never completed br HTTP br In May RFC was published as a final HTTP revision of what had been used in previous years as a pre standard HTTP draft which was already used by many web browsers and web servers br In early developers started to even include unofficial extensions of the HTTP protocol i e keep alive connections etc into their products by using drafts of the upcoming HTTP specifications br HTTP br Since early major web browsers and web server developers also started to implement new features specified by pre standard HTTP drafts specifications End user adoption of the new versions of browsers and servers was rapid In March one web hosting company reported that over of browsers in use on the Internet used the new HTTP header Host to enable virtual hosting and that by June of all browsers accessing their servers were pre standard HTTP compliant br In January RFC was officially released as HTTP specifications br In June RFC was released to include all improvements and updates based on previous obsolete HTTP specifications br W C HTTP NG Working Group br Resuming the old plan of previous HTTP Working Group in an HTTP NG Working Group was formed to develop a new HTTP protocol named HTTP NG HTTP New Generation A few proposals drafts were produced for the new protocol to use multiplexing of HTTP transactions inside a single TCP IP connection but in the group stopped its activity passing the technical problems to IETF br IETF HTTP Working Group restarted br In the IETF HTTP Working Group HTTP WG bis or HTTPbis was restarted firstly to revise and clarify previous HTTP specifications and secondly to write and refine future HTTP specifications named httpbis br SPDY an unofficial HTTP protocol developed by Google br In Google a private company announced that it had developed and tested a new HTTP binary protocol named SPDY The implicit aim was to greatly speed up web traffic specially between future web browsers and its servers br SPDY was indeed much faster than HTTP in many tests and so it was quickly adopted by Chromium and then by other major web browsers br Some of the ideas about multiplexing HTTP streams over a single TCP IP connection were taken from various sources including the work of W C HTTP NG Working Group br HTTP br In January March HTTP Working Group HTTPbis announced the need to start to focus on a new HTTP protocol while finishing the revision of HTTP specifications maybe taking in consideration ideas and work done for SPDY br After a few months about what to do to develop a new version of HTTP it was decided to derive it from SPDY br In May HTTP was published as RFC and quickly adopted by all web browsers already supporting SPDY and more slowly by web servers br updates to HTTP br In June the HTTP Working Group released an updated six part HTTP specification obsoleting RFC br RFC HTTP Message Syntax and Routing br RFC HTTP Semantics and Content br RFC HTTP Conditional Requests br RFC HTTP Range Requests br RFC HTTP Caching br RFC HTTP Authentication br HTTP Deprecation br In RFC Appendix A HTTP was deprecated for servers supporting HTTP version and higher Since HTTP did not support header fields in a request there is no mechanism for it to support name based virtual hosts selection of resource by inspection of the Host header field Any server that implements name based virtual hosts ought to disable support for HTTP Most requests that appear to be HTTP are in fact badly constructed HTTP x requests caused by a client failing to properly encode the request target br Since many product managers and developers of user agents browsers etc and web servers have begun planning to gradually deprecate and dismiss support for HTTP protocol mainly for the following reasons br it is so simple that an RFC document was never written there is only the original document br it has no HTTP headers and lacks many other features that nowadays are required for minimal security reasons br it has not been widespread since because of HTTP and HTTP and is commonly used only by some very old network hardware i e routers etc br br HTTP br In the first drafts HTTP were published and major web browsers and web servers started to adopt it br On June IETF standardized HTTP as RFC br Updates and refactoring in br In June a batch of RFCs was published deprecating many of the previous documents and introducing a few minor changes and a refactoring of HTTP semantics description into a separate document br RFC HTTP Semantics br RFC HTTP Caching br RFC HTTP br RFC HTTP br RFC HTTP see also the section above br RFC QPACK Field Compression for HTTP br RFC Extensible Prioritization Scheme for HTTP br br br HTTP data exchange br HTTP is a stateless application level protocol and it requires a reliable network transport connection to exchange data between client and server In HTTP implementations TCP IP connections are used using well known ports typically port if the connection is unencrypted or port if the connection is encrypted see also List of TCP and UDP port numbers In HTTP a TCP IP connection plus multiple protocol channels are used In HTTP the application transport protocol QUIC over UDP is used br br br Request and response messages through connections br Data is exchanged through a sequence of request response messages which are exchanged by a session layer transport connection An HTTP client initially tries to connect to a server establishing a connection real or virtual An HTTP S server listening on that port accepts the connection and then waits for a client s request message The client sends its HTTP request message Upon receiving the request the server sends back an HTTP response message which includes header s plus a body if it is required The body of this response message is typically the requested resource although an error message or other information may also be returned At any time for many reasons client or server can close the connection Closing a connection is usually advertised in advance by using one or more HTTP headers in the last request response message sent to server or client br br br Persistent connections br br In HTTP the TCP IP connection is always closed after server response has been sent so it is never persistent br In HTTP as stated in RFC the TCP IP connection should always be closed by server after a response has been sent br In HTTP a keep alive mechanism was officially introduced so that a connection could be reused for more than one request response Such persistent connections reduce request latency perceptibly because the client does not need to re negotiate the TCP Way Handshake connection after the first request has been sent Another positive side effect is that in general the connection becomes faster with time due to TCP s slow start mechanism br HTTP added also HTTP pipelining in order to further reduce lag time when using persistent connections by allowing clients to send multiple requests before waiting for each response This optimization was never considered really safe because a few web servers and many proxy servers specially transparent proxy servers placed in Internet Intranets between clients and servers did not handle pipelined requests properly they served only the first request discarding the others they closed the connection because they saw more data after the first request or some proxies even returned responses out of order etc Because of this only HEAD and some GET requests i e limited to real file requests and so with URLs without query string used as a command etc could be pipelined in a safe and idempotent mode After many years of struggling with the problems introduced by enabling pipelining this feature was first disabled and then removed from most browsers also because of the announced adoption of HTTP br HTTP extended the usage of persistent connections by multiplexing many concurrent requests responses through a single TCP IP connection br HTTP does not use TCP IP connections but QUIC UDP see also technical overview br br br Content retrieval optimizations br HTTP br A requested resource was always sent in its entirety br HTTP br HTTP added headers to manage resources cached by client in order to allow conditional GET requests in practice a server has to return the entire content of the requested resource only if its last modified time is not known by client or if it changed since last full response to GET request One of these headers Content Encoding was added to specify whether the returned content of a resource was or was not compressed br If the total length of the content of a resource was not known in advance i e because it was dynamically generated etc then the header Content Length number was not present in HTTP headers and the client assumed that when server closed the connection the content had been sent in its entirety This mechanism could not distinguish between a resource transfer successfully completed and an interrupted one because of a server network error or something else br HTTP br HTTP introduced br new headers to better manage the conditional retrieval of cached resources br chunked transfer encoding to allow content to be streamed in chunks in order to reliably send it even when the server does not know its length in advance i e because it is dynamically generated etc br byte range serving where a client can request only one or more portions ranges of bytes of a resource i e the first part a part in the middle or in the end of the entire content etc and the server usually sends only the requested part s This is useful to resume an interrupted download when a file is very large when only a part of a content has to be shown or dynamically added to the already visible part by a browser i e only the first or the following n comments of a web page in order to spare time bandwidth and system resources etc br HTTP HTTP br Both HTTP and HTTP have kept the above mentioned features of HTTP br br br HTTP authentication br HTTP provides multiple authentication schemes such as basic access authentication and digest access authentication which operate via a challenge response mechanism whereby the server identifies and issues a challenge before serving the requested content br HTTP provides a general framework for access control and authentication via an extensible set of challenge response authentication schemes which can be used by a server to challenge a client request and by a client to provide authentication information br The authentication mechanisms described above belong to the HTTP protocol and are managed by client and server HTTP software if configured to require authentication before allowing client access to one or more web resources and not by the web applications using a web application session br br br Authentication realms br The HTTP Authentication specification also provides an arbitrary implementation specific construct for further dividing resources common to a given root URI The realm value string if present is combined with the canonical root URI to form the protection space component of the challenge This in effect allows the server to define separate authentication scopes under one root URI br br br HTTP application session br HTTP is a stateless protocol A stateless protocol does not require the web server to retain information or status about each user for the duration of multiple requests br Some web applications need to manage user sessions so they implement states or server side sessions using for instance HTTP cookies or hidden variables within web forms br To start an application user session an interactive authentication via web application login must be performed To stop a user session a logout operation must be requested by user These kind of operations do not use HTTP authentication but a custom managed web application authentication br br br HTTP request messages br Request messages are sent by a client to a target server br br br Request syntax br A client sends request messages to the server which consist of br br a request line consisting of the case sensitive request method a space the requested URL another space the protocol version a carriage return and a line feed e g br br zero or more request header fields at least or more headers in case of HTTP each consisting of the case insensitive field name a colon optional leading whitespace the field value an optional trailing whitespace and ending with a carriage return and a line feed e g br Host www example com br Accept Language en br br an empty line consisting of a carriage return and a line feed br an optional message body br In the HTTP protocol all header fields except Host hostname are optional br A request line containing only the path name is accepted by servers to maintain compatibility with HTTP clients before the HTTP specification in RFC br br br Request methods br br HTTP defines methods sometimes referred to as verbs but nowhere in the specification does it mention verb to indicate the desired action to be performed on the identified resource What this resource represents whether pre existing data or data that is generated dynamically depends on the implementation of the server Often the resource corresponds to a file or the output of an executable residing on the server The HTTP specification defined the GET HEAD and POST methods as well as listing the PUT DELETE LINK and UNLINK methods under additional methods However the HTTP specification formally defined and added five new methods PUT DELETE CONNECT OPTIONS and TRACE Any client can use any method and the server can be configured to support any combination of methods If a method is unknown to an intermediate it will be treated as an unsafe and non idempotent method There is no limit to the number of methods that can be defined which allows for future methods to be specified without breaking existing infrastructure For example WebDAV defined seven new methods and RFC specified the PATCH method br Method names are case sensitive This is in contrast to HTTP header field names which are case insensitive br br GET br The GET method requests that the target resource transfer a representation of its state GET requests should only retrieve data and should have no other effect This is also true of some other HTTP methods For retrieving resources without making changes GET is preferred over POST as they can be addressed through a URL This enables bookmarking and sharing and makes GET responses eligible for caching which can save bandwidth The W C has published guidance principles on this distinction saying Web application design should be informed by the above principles but also by the relevant limitations See safe methods below br br HEAD br The HEAD method requests that the target resource transfer a representation of its state as for a GET request but without the representation data enclosed in the response body This is useful for retrieving the representation metadata in the response header without having to transfer the entire representation Uses include checking whether a page is available through the status code and quickly finding the size of a file Content Length br br POST br The POST method requests that the target resource process the representation enclosed in the request according to the semantics of the target resource For example it is used for posting a message to an Internet forum subscribing to a mailing list or completing an online shopping transaction br br PUT br The PUT method requests that the target resource create or update its state with the state defined by the representation enclosed in the request A distinction from POST is that the client specifies the target location on the server br br DELETE br The DELETE method requests that the target resource delete its state br br CONNECT br The CONNECT method requests that the intermediary establish a TCP IP tunnel to the origin server identified by the request target It is often used to secure connections through one or more HTTP proxies with TLS See HTTP CONNECT method br br OPTIONS br The OPTIONS method requests that the target resource transfer the HTTP methods that it supports This can be used to check the functionality of a web server by requesting instead of a specific resource br br TRACE br The TRACE method requests that the target resource transfer the received request in the response body That way a client can see what if any changes or additions have been made by intermediaries br br PATCH br The PATCH method requests that the target resource modify its state according to the partial update defined in the representation enclosed in the request This can save bandwidth by updating a part of a file or document without having to transfer it entirely br All general purpose web servers are required to implement at least the GET and HEAD methods and all other methods are considered optional by the specification br br br Safe methods br A request method is safe if a request with that method has no intended effect on the server The methods GET HEAD OPTIONS and TRACE are defined as safe In other words safe methods are intended to be read only They do not exclude side effects though such as appending request information to a log file or charging an advertising account since they are not requested by the client by definition br In contrast the methods POST PUT DELETE CONNECT and PATCH are not safe They may modify the state of the server or have other effects such as sending an email Such methods are therefore not usually used by conforming web robots or web crawlers some that do not conform tend to make requests without regard to context or consequences br Despite the prescribed safety of GET requests in practice their handling by the server is not technically limited in any way Careless or deliberately irregular programming can allow GET requests to cause non trivial changes on the server This is discouraged because of the problems which can occur when web caching search engines and other automated agents make unintended changes on the server For example a website might allow deletion of a resource through a URL such as https example com article delete which if arbitrarily fetched even using GET would simply delete the article A properly coded website would require a DELETE or POST method for this action which non malicious bots would not make br One example of this occurring in practice was during the short lived Google Web Accelerator beta which prefetched arbitrary URLs on the page a user was viewing causing records to be automatically altered or deleted en masse The beta was suspended only weeks after its first release following widespread criticism br br br Idempotent methods br br A request method is idempotent if multiple identical requests with that method have the same effect as a single such request The methods PUT and DELETE and safe methods are defined as idempotent Safe methods are trivially idempotent since they are intended to have no effect on the server whatsoever the PUT and DELETE methods meanwhile are idempotent since successive identical requests will be ignored A website might for instance set up a PUT endpoint to modify a user s recorded email address If this endpoint is configured correctly any requests which ask to change a user s email address to the same email address which is already recorded e g duplicate requests following a successful request will have no effect Similarly a request to DELETE a certain user will have no effect if that user has already been deleted br In contrast the methods POST CONNECT and PATCH are not necessarily idempotent and therefore sending an identical POST request multiple times may further modify the state of the server or have further effects such as sending multiple emails In some cases this is the desired effect but in other cases it may occur accidentally A user might for example inadvertently send multiple POST requests by clicking a button again if they were not given clear feedback that the first click was being processed While web browsers may show alert dialog boxes to warn users in some cases where reloading a page may re submit a POST request it is generally up to the web application to handle cases where a POST request should not be submitted more than once br Note that whether or not a method is idempotent is not enforced by the protocol or web server It is perfectly possible to write a web application in which for example a database insert or other non idempotent action is triggered by a GET or other request To do so against recommendations however may result in undesirable consequences if a user agent assumes that repeating the same request is safe when it is not br br br Cacheable methods br br A request method is cacheable if responses to requests with that method may be stored for future reuse The methods GET HEAD and POST are defined as cacheable br In contrast the methods PUT DELETE CONNECT OPTIONS TRACE and PATCH are not cacheable br br br Request header fields br br Request header fields allow the client to pass additional information beyond the request line acting as request modifiers similarly to the parameters of a procedure They give information about the client about the target resource or about the expected handling of the request br br br HTTP response messages br A response message is sent by a server to a client as a reply to its former request message br br br Response syntax br A server sends response messages to the client which consist of br br a status line consisting of the protocol version a space the response status code another space a possibly empty reason phrase a carriage return and a line feed e g br br zero or more response header fields each consisting of the case insensitive field name a colon optional leading whitespace the field value an optional trailing whitespace and ending with a carriage return and a line feed e g br br an empty line consisting of a carriage return and a line feed br an optional message body br br br Response status codes br br In HTTP and since the first line of the HTTP response is called the status line and includes a numeric status code such as and a textual reason phrase such as Not Found The response status code is a three digit integer code representing the result of the server s attempt to understand and satisfy the client s corresponding request The way the client handles the response depends primarily on the status code and secondarily on the other response header fields Clients may not understand all registered status codes but they must understand their class given by the first digit of the status code and treat an unrecognized status code as being equivalent to the x status code of that class br The standard reason phrases are only recommendations and can be replaced with local equivalents at the web developer s discretion If the status code indicated a problem the user agent might display the reason phrase to the user to provide further information about the nature of the problem The standard also allows the user agent to attempt to interpret the reason phrase though this might be unwise since the standard explicitly specifies that status codes are machine readable and reason phrases are human readable br The first digit of the status code defines its class br br XX informational br The request was received continuing process br XX successful br The request was successfully received understood and accepted br XX redirection br Further action needs to be taken in order to complete the request br XX client error br The request contains bad syntax or cannot be fulfilled br XX server error br The server failed to fulfill an apparently valid request br br br Response header fields br br The response header fields allow the server to pass additional information beyond the status line acting as response modifiers They give information about the server or about further access to the target resource or related resources br Each response header field has a defined meaning which can be further refined by the semantics of the request method or response status code br br br HTTP example of request response transaction br Below is a sample HTTP transaction between an HTTP client and an HTTP server running on www example com port br br br Client request br br A client request consisting in this case of the request line and a few headers that can be reduced to only the Host hostname header is followed by a blank line so that the request ends with a double end of line each in the form of a carriage return followed by a line feed The Host hostname header value distinguishes between various DNS names sharing a single IP address allowing name based virtual hosting While optional in HTTP it is mandatory in HTTP A slash will usually fetch a index html file if there is one br br br Server response br br The ETag entity tag header field is used to determine if a cached version of the requested resource is identical to the current version of the resource on the server Content Type specifies the Internet media type of the data conveyed by the HTTP message while Content Length indicates its length in bytes The HTTP webserver publishes its ability to respond to requests for certain byte ranges of the document by setting the field Accept Ranges bytes This is useful if the client needs to have only certain portions of a resource sent by the server which is called byte serving When Connection close is sent it means that the web server will close the TCP connection immediately after the end of the transfer of this response br Most of the header lines are optional but some are mandatory When header Content Length number is missing in a response with an entity body then this should be considered an error in HTTP but it may not be an error in HTTP if header Transfer Encoding chunked is present Chunked transfer encoding uses a chunk size of to mark the end of the content Some old implementations of HTTP omitted the header Content Length when the length of the body entity was not known at the beginning of the response and so the transfer of data to client continued until server closed the socket br A Content Encoding gzip can be used to inform the client that the body entity part of the transmitted data is compressed by gzip algorithm br br br Encrypted connections br The most popular way of establishing an encrypted HTTP connection is HTTPS Two other methods for establishing an encrypted HTTP connection also exist Secure Hypertext Transfer Protocol and using the HTTP Upgrade header to specify an upgrade to TLS Browser support for these two is however nearly non existent br br br Similar protocols br The Gopher protocol is a content delivery protocol that was displaced by HTTP in the early s br The SPDY protocol is an alternative to HTTP developed at Google superseded by HTTP br The Gemini protocol is a Gopher inspired protocol which mandates privacy related features br br br See also br br InterPlanetary File System can replace HTTP br Comparison of file transfer protocols br Constrained Application Protocol a semantically similar protocol to HTTP but used UDP or UDP like messages targeted for devices with limited processing capability re uses HTTP and other internet concepts like Internet media type and web linking RFC br Content negotiation br Digest access authentication br HTTP compression br HTTP developed by the IETF s Hypertext Transfer Protocol httpbis working group br List of HTTP header fields br List of HTTP status codes br Representational state transfer REST br Variant object br Wireless Application Protocol br Web cache br WebSocket br br br Notes br br br br br br External links br br Official website br IETF HTTP Working Group on GitHub br Change History for HTTP W org Retrieved A detailed technical history of HTTP br Design Issues for HTTP W org Retrieved Design Issues by Berners Lee when he was designing the protocol 