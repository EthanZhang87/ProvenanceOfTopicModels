title: FTPS
id: 1259153
FTPS also known as FTP SSL and FTP Secure is an extension to the commonly used File Transfer Protocol FTP that adds support for the Transport Layer Security TLS and formerly the Secure Sockets Layer SSL which is now prohibited by RFC cryptographic protocols br FTPS should not be confused with the SSH File Transfer Protocol SFTP a secure file transfer subsystem for the Secure Shell SSH protocol with which it is not compatible It is also different from FTP over SSH which is the practice of tunneling FTP through an SSH connection br br br Background br The File Transfer Protocol was drafted in for use with the scientific and research network ARPANET Access to the ARPANET during this time was limited to a small number of military sites and universities and a narrow community of users who could operate without data security and privacy requirements within the protocol br As the ARPANET gave way to the NSFNET and then the Internet a broader population potentially had access to the data as it traversed increasingly longer paths from client to server The opportunity for unauthorized third parties to eavesdrop on data transmissions increased proportionally br In the Internet browser company Netscape developed and released the application layer wrapper Secure Sockets Layer This protocol enabled applications to communicate across a network in a private and secure fashion discouraging eavesdropping tampering and message forgery While it could add security to any protocol that uses reliable connections such as TCP it was most commonly used by Netscape with HTTP to form HTTPS br The SSL protocol was eventually applied to FTP with a draft Request for Comments RFC published in late An official IANA port was registered shortly thereafter However the RFC was not finalized until br br br Methods of invoking security br Two separate methods were developed to invoke client security for use with FTP clients Implicit and Explicit While the implicit method requires that a Transport Layer Security is established from the beginning of the connection which in turn breaks the compatibility with non FTPS aware clients and servers the explicit method uses standard FTP protocol commands and replies in order to upgrade a plain text connection to an encrypted one allowing a single control port to be used for serving both FTPS aware and non FTPS aware clients br br br Implicit br Negotiation is not supported with implicit FTPS configurations A client is immediately expected to challenge the FTPS server with a TLS ClientHello message If such a message is not received by the FTPS server the server should drop the connection br In order to maintain compatibility with existing non FTPS aware clients implicit FTPS was expected to listen on the IANA well known port TCP for the FTPS control channel and port TCP for the FTPS data channel This allowed administrators to retain legacy compatible services on the original TCP FTP control channel br Note that implicit negotiation was not defined in RFC As such it is considered an earlier deprecated method of negotiating TLS SSL for FTP br br br Explicit br In explicit mode also known as FTPES an FTPS client must explicitly request security from an FTPS server and then step up to a mutually agreed encryption method If a client does not request security the FTPS server can either allow the client to continue in insecure mode or refuse the connection br The mechanism for negotiating authentication and security with FTP was added under RFC which included the new FTP command AUTH While this RFC does not explicitly define any required security mechanisms e g SSL or TLS it does require the FTPS client to challenge the FTPS server with a mutually known mechanism If the FTPS client challenges the FTPS server with an unknown security mechanism the FTPS server will respond to the AUTH command with error code not supported Clients may determine which mechanisms are supported by querying the FTPS server with the FEAT command although servers are not necessarily required to be honest in disclosing what levels of security they support Common methods of invoking FTPS security included AUTH TLS and AUTH SSL br The explicit method is defined in RFC In the later versions of the document FTPS compliance required that clients always negotiate using the AUTH TLS method br br br Transport Layer Security TLS Secure Socket Layer SSL br br br General support br FTPS includes full support for the TLS and SSL cryptographic protocols including the use of server side public key authentication certificates and client side authorization certificates It also supports compatible ciphers including AES RC RC Triple DES and DES It further supports hash functions SHA MD MD and MD br br br Scope of use br In implicit mode the entire FTPS session is encrypted Explicit mode differs in that the client has full control over what areas of the connection are to be encrypted Enabling and disabling of encryption for the FTPS control channel and FTPS data channel can occur at any time The only restriction comes from the FTPS server which has the ability to deny commands based on server encryption policy br br br Secure command channel br The secure command channel mode can be entered through the issue of either the AUTH TLS or AUTH SSL commands After such time all command control between the FTPS client and server are assumed to be encrypted It is generally advised to enter such a state prior to user authentication and authorization in order to avoid the eavesdropping of user name and password data by third parties br br br Secure data channel br The secure data channel can be entered through the issue of the PROT command It is not enabled by default when the AUTH TLS command is issued After such time all data channel communication between the FTPS client and server is assumed to be encrypted br The FTPS client may exit the secure data channel mode at any time by issuing a CDC clear data channel command br br br Reasons to disable encryption br It may not be advantageous to use data channel encryption when performing transfers under the following scenarios br br Files being transferred are of a non sensitive nature making encryption unnecessary br Files being transferred are already encrypted at the file level or are passing over an encrypted VPN making encryption redundant br Available TLS or SSL encryption modes do not meet desired level of encryption This is common with older FTPS clients or servers that may have been limited to bit SSL due to previous United States high encryption export laws br It may not be advantageous to use control channel encryption under the following scenarios br br Use of FTPS when the client or server reside behind a network firewall or network address translation NAT device See Firewall Incompatibilities below br Repeated use of AUTH and CCC CDC commands by anonymous FTP clients within the same session Such behavior can be used as a resource based denial of service attack as the TLS SSL session must be regenerated each time using server processor time br br br SSL certificates br Much like HTTPS FTPS servers must provide a public key certificate These certificates can be requested and created using tools such as OpenSSL br When these certificates are signed by a trusted certificate authority this provides assurance that the client is connected to the requested server avoiding a man in the middle attack If the certificate is not signed by a trusted CA a self signed certificate the FTPS client may generate a warning stating that the certificate is not valid The client can choose to accept the certificate or reject the connection br This is in contrast to the SSH File Transfer Protocol SFTP which does not present signed certificates but instead relies on Out of band authentication of public keys br br br Firewall incompatibilities br Because FTP uses a dynamic secondary port for data channels many firewalls were designed to snoop FTP protocol control messages in order to determine which secondary data connections they need to allow However if the FTP control connection is encrypted using TLS SSL the firewall cannot determine the TCP port number of a data connection negotiated between the client and FTP server Therefore in many firewalled networks an FTPS deployment will fail when an unencrypted FTP deployment will work This problem can be solved with the use of a limited range of ports for data and configuring the firewall to open these ports br br br See also br br br Notes br br br External links br Overview of FTPS and lists of clients servers br Curl loader an open source FTPS loading testing tool