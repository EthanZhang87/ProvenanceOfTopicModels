title: GraalVM
id: 40331748
GraalVM is a Java Development Kit JDK written in Java The open source distribution of GraalVM is based on OpenJDK and the enterprise distribution is based on Oracle JDK As well as just in time JIT compilation GraalVM can compile a Java application ahead of time This allows for faster initialization greater runtime performance and decreased resource consumption but the resulting executable can only run on the platform it was compiled for br It provides additional programming languages and execution modes The first production ready release GraalVM was distributed in May The most recent release is GraalVM for JDK made available in March br Major differentiators of GraalVM compared to the base JDK include br br Graal Compiler a just in time JIT compiler br GraalVM Native Image is a technology to compile Java applications ahead of time br Truffle Language Implementation Framework and GraalVM SDK a Java based framework and a collection of APIs for developing high performance language runtimes br GraalVM Polyglot API an API to embed guest language code in a Java based host application br JavaScript Runtime an ECMAScript compliant JavaScript runtime as well as Node js br LLVM Runtime is a runtime to execute languages that can be transformed into LLVM bitcode br br br Goals br To improve the performance of Java virtual machine JVM based languages to match native languages br To reduce the startup time of JVM based applications by compiling them ahead of time br To enable GraalVM integration into the Oracle Database OpenJDK Android iOS and similar custom embeddings br To enable embedding guest language code in a JVM based host application br To enable mixing of code from any programming language in a single application billed as a polyglot application br br br History br GraalVM has its roots in the Maxine Virtual Machine project at Sun Microsystems Laboratories now Oracle Labs The project s goal was to write a Java virtual machine in Java itself to avoid the problems of developing in C particularly manual memory management and benefit from meta circular optimizations The project changed its focus to the compiler and to hook it into the HotSpot runtime as much as possible The GraalVM compiler Graal was started by manually converting the code of the HotSpot client compiler named C into Java replacing the previous Maxine compiler br Graal was included in HotSpot based JDK releases such as OpenJDK from Java SE through to provide experimental ahead of time compilation TheUseJVMCICompiler option also enabled the use of Graal as a replacement for the server compiler named C The option was removed in Java SE to eliminate the duplicate effort of maintaining a version in the JDK and a standalone GraalVM release A similar function to create a native executable from a Java application is provided by the native image tool of standalone GraalVM releases The tool processes a Java application s classes and other metadata to create a binary for a specific operating system and architecture It can be used to build a native executable or a native shared library br br br Releases br GraalVM is available as Oracle GraalVM under the GraalVM Free Terms and Conditions GFTC license as Oracle GraalVM Enterprise Edition accessible by accepting the OTN License Agreement Oracle GraalVM Enterprise Edition Including License for Early Adopter Versions or as a Community Edition with an open source license Oracle Corporation announced the release of Oracle GraalVM Enterprise Edition on May and Oracle GraalVM on June introducing a new GraalVM Free Terms and Conditions GFTC license GraalVM can substitute for a default JDK on Linux and macOS platforms on x and AArch CPUs and on a Windows x platform The release schedule is at the Oracle Help Center and the GraalVM website br br br Components br The GraalVM compiler Graal is shipped with the components of a normal Java virtual machine OpenJDK Additional components are included in GraalVM to enable new execution modes GraalVM Native Image or programming languages LLVM runtime GraalVM JavaScript as a potential replacement to the deprecated Nashorn engine TRegex as a regular expression engine br br br GraalVM Compiler br The GraalVM compiler Graal is a modern Java JIT compiler It complements or replaces the existing compilers C C in HotSpot In contrast to those existing compilers Graal is written in a modular maintainable and extendable fashion in Java itself It is released under GPL version with the classpath exception br br br GraalVM Native Image br GraalVM Native Image is an ahead of time compilation technology that produces executable binaries of class files It is released as an early adopter technology which means it is production ready but may include backport incompatible updates in future releases br This functionality supports JVM based languages but can optionally run dynamic languages developed on top of GraalVM with the Truffle framework The executable file does not run on a JVM and uses necessary runtime components such as thread scheduling or GC from a minimal bespoke virtual machine called Substrate VM Since the resulting native binary includes application classes JDK dependencies and libraries already the startup and execution time are reduced significantly br GraalVM Native Image is officially supported by the Fn Gluon Helidon Micronaut Picocli Quarkus Vert x and Spring Boot Java frameworks br In September Oracle detailed plans to add ahead of time compilation to the OpenJDK using the GraalVM compiler for Java SE This proposal tracked by JEP Ahead of Time Compilation was included in Java SE The experimental use of GraalVM as a just in time compiler was added for the Linux x platform for Java SE br In Java SE versions to the jaotc command creates an executable The experimental XX EnableJVMCIProduct flag enables the use of Graal JIT compiler The functionality is since available in the Native Image component of standalone GraalVM releases br br br Truffle Language Implementation Framework br In association with GraalVM Oracle Labs developed a language abstract syntax tree AST interpreter called Truffle which would enable it to implement languages on top of GraalVM Many languages have been implemented in Truffle including a C interpreter claiming to be about as fast as GCC and Clang br The Truffle framework and its dependent part GraalVM SDK are released under the Universal Permissive License version to encourage the use of the framework for projects that do not want to be bound by the copyright or other parent rights br br br Instrumentation Based Tool Support br A major advantage of the GraalVM ecosystem is language agnostic fully dynamic instrumentation support directly built into the VM runtime Execution events can be captured by API clients with overhead that is extremely low in fully optimized code br The core GraalVM installation provides a language agnostic debugger profiler heap viewer and others based on instrumentation and other VM support GraalVM also includes a backend implementation of the Chrome Inspector remote debugging protocol Although designed originally for JavaScript debugging it can be used to debug all GraalVM languages from a browser br br br Embedding languages br Another advantage of GraalVM is the possibility to embed code from a guest language in Java and write polyglot applications A developer can integrate JavaScript Python or other supported languages inside Java source code granting them the characteristic advantages of those languages A host Java application and a guest language pass data back and forth in the same memory space It is possible thanks to the Truffle Language Implementation Framework and the GraalVM Polyglot API Below is the example how to call a function defined in Python from Java The Python function increments of a unit the value provided and then returns it to the host language From Java for security purposes we ask first if the variable function can be executed via the canExecute call and then we invoke the function with the execute call Find more examples in the Embedding Languages reference documentation br br br Language and runtime support br GraalVM is written in and for the Java ecosystem It can run applications written in all languages that compile to the Java bytecode format for example Java Scala Kotlin and more br Based on the Truffle Language Implementation Framework the following additional languages are designed for use with GraalVM br br GraalJS An ECMAScript compliant JavaScript runtime with support for Node js br GraalPy A Python language implementation br GraalVM LLVM Runtime Sulong An LLVM bitcode interpreter implementation br GraalWasm A WebAssembly implementation br TruffleRuby A Ruby language implementation with preliminary support for Ruby on Rails br FastR An R language implementation br Support for additional languages can be implemented by users of GraalVM Some notable third party language implementations are grCuda SOMns TruffleSqueak and Yona br br br Adoption br GraalVM is used in various industrial scenarios br br Disney utilizes Native Image technology to reduce the cold start time of some of its AWS microservices br Facebook uses GraalVM to speed up Apache Spark workloads reducing the memory footprint and the utilization of the CPU br Twitter accelerates some of the microservices of the platform br Goldman Sachs the international investment bank rewrote its internal programming language Slang via the Truffle framework br br br br br br External links br Official website