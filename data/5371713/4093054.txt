title: Java annotation
id: 4093054
In the Java computer programming language an annotation is a form of syntactic metadata that can be added to Java source code Classes methods variables parameters and Java packages may be annotated Like Javadoc tags Java annotations can be read from source files Unlike Javadoc tags Java annotations can also be embedded in and read from Java class files generated by the Java compiler This allows annotations to be retained by the Java virtual machine at run time and read via reflection It is possible to create meta annotations out of the existing ones in Java br br br History br The Java platform has various ad hoc annotation mechanisms for example the transient modifier or the Deprecated javadoc tag The Java Specification Request JSR introduced the general purpose annotation also known as metadata facility to the Java Community Process in it gained approval in September br Annotations became available in the language itself beginning with version of the Java Development Kit JDK The apt tool provided a provisional interface for compile time annotation processing in JDK version JSR formalized this and it became integrated into the javac compiler in version br br br Built in annotations br Java defines a set of annotations that are built into the language Of the seven standard annotations three are part of java lang and the remaining four are imported from java lang annotation br Annotations applied to Java code br br Override Checks that the method is an override Causes a compilation error if the method is not found in one of the parent classes or implemented interfaces br Deprecated Marks the method as obsolete Causes a compile warning if the method is used br SuppressWarnings Instructs the compiler to suppress the compile time warnings specified in the annotation parameters br Annotations applied to other annotations also known as Meta Annotations br br Retention Specifies how the marked annotation is stored whether in code only compiled into the class or available at runtime through reflection br Documented Marks another annotation for inclusion in the documentation br Target Marks another annotation to restrict what kind of Java elements the annotation may be applied to br Inherited Marks another annotation to be inherited to subclasses of annotated class by default annotations are not inherited by subclasses br Since Java three additional annotations have been added to the language br br SafeVarargs Suppress warnings for all callers of a method or constructor with a generics varargs parameter since Java br FunctionalInterface Specifies that the type declaration is intended to be a functional interface since Java br Repeatable Specifies that the annotation can be applied more than once to the same declaration since Java br br br Example br br br Built in annotations br This example demonstrates the use of the Override annotation It instructs the compiler to check parent classes for matching methods In this case an error is generated because the gettype method of class Cat doesn t in fact override getType of class Animal like is desired because of the mismatching case If the Override annotation were absent a new method of name gettype would be created in class Cat br br br Custom annotations br Annotation type declarations are similar to normal interface declarations An at sign precedes the keyword interface br br Annotations may include a set of key value pairs which are modeled as methods of the annotation type Each method declaration defines an element of the annotation type Method declarations must not have any parameters or a throws clause Return types are restricted to primitives String Class enums annotations and arrays of the preceding types Methods can have default values br br Annotations themselves may be annotated to indicate where and when they can be used br br The compiler reserves a set of special annotations including Deprecated Override and SuppressWarnings for syntactic purposes br Annotations are often used by frameworks as a way of conveniently applying behaviours to user defined classes and methods that must otherwise be declared in an external source such as an XML configuration file or programmatically with API calls The following for example is an annotated JPA data class br br The annotations are not method calls and will not by themselves do anything Rather the class object is passed to the JPA implementation at run time which then extracts the annotations to generate an object relational mapping br A complete example is given below br br br Processing br When Java source code is compiled annotations can be processed by compiler plug ins called annotation processors Processors can produce informational messages or create additional Java source files or resources which in turn may be compiled and processed However annotation processors cannot modify the annotated code itself Code modifications may be implemented using methods beyond the Java Language Specification The Java compiler conditionally stores annotation metadata in the class files if the annotation has a RetentionPolicy of CLASS or RUNTIME Later the JVM or other programs can look for the metadata to determine how to interact with the program elements or change their behavior br In addition to processing an annotation using an annotation processor a Java programmer can write their own code that uses reflection to process the annotation Java SE supports a new interface that is defined in the java lang reflect package This package contains the interface called AnnotatedElement that is implemented by the Java reflection classes including Class Constructor Field Method and Package The implementations of this interface are used to represent an annotated element of the program currently running in the Java Virtual Machine This interface allows annotations to be read reflectively br The AnnotatedElement interface provides access to annotations having RUNTIME retention This access is provided by the getAnnotation getAnnotations and isAnnotationPresent methods Because annotation types are compiled and stored in byte code files just like classes the annotations returned by these methods can be queried just like any regular Java object A complete example of processing an annotation is provided below br br br See also br Jakarta Annotations br CLI Attributes br Java br Java virtual machine br Model driven architecture br Python decorators inspired by Java annotations which have a similar syntax br br br br br br External links br Introduction to Java Annotations at Sun Developer Network Site br An Introduction to Java Annotations by M M Islam Chisty br Srinivasan Krishna August Annotations in Java JavaBeat Archived from the original on May br Hunt John Feb Of Java Annotations The Register br How to create and implement custom annotations in Java So Many Word February Archived from the original on Feb br Java Annotations Tutorial with examples TutorialsDesk October br Thakor Vicky October Understanding Annotations in Java Java by examples 