title: Dependency injection
id: 1484696
In software engineering dependency injection is a programming technique in which an object or function receives other objects or functions that it requires as opposed to creating them internally Dependency injection aims to separate the concerns of constructing objects and using them leading to loosely coupled programs The pattern ensures that an object or function that wants to use a given service should not have to know how to construct those services Instead the receiving client object or function is provided with its dependencies by external code an injector which it is not aware of Dependency injection makes implicit dependencies explicit and helps solve the following problems br br How can a class be independent from the creation of the objects it depends on br How can an application and the objects it uses support different configurations br Dependency injection is often used to keep code in line with the dependency inversion principle br In statically typed languages using dependency injection means a client only needs to declare the interfaces of the services it uses rather than their concrete implementations making it easier to change which services are used at runtime without recompiling br Application frameworks often combine dependency injection with inversion of control Under inversion of control the framework first constructs an object such as a controller and then passes control flow to it With dependency injection the framework also instantiates the dependencies declared by the application object often in the constructor method s parameters and passes the dependencies into the object br Dependency injection implements the idea of inverting control over the implementations of dependencies which is why certain Java frameworks generically name the concept inversion of control not to be confused with inversion of control flow br br br Roles br br Dependency injection involves four roles services clients interfaces and injectors br br br Services and clients br A service is any class which contains useful functionality In turn a client is any class which uses services The services that a client requires are the client s dependencies br Any object can be a service or a client the names relate only to the role the objects play in an injection The same object may even be both a client it uses injected services and a service it is injected into other objects Upon injection the service is made part of the client s state available for use br br br Interfaces br Clients should not know how their dependencies are implemented only their names and API A service which retrieves emails for instance may use the IMAP or POP protocols behind the scenes but this detail is likely irrelevant to calling code that merely wants an email retrieved By ignoring implementation details clients do not need to change when their dependencies do br br br Injectors br The injector sometimes also called an assembler container provider or factory introduces services to the client br The role of injectors is to construct and connect complex object graphs where objects may be both clients and services The injector itself may be many objects working together but must not be the client as this would create a circular dependency br Because dependency injection separates how objects are constructed from how they are used it often diminishes the importance of the new keyword found in most object oriented languages Because the framework handles creating services the programmer tends to only directly construct value objects which represents entities in the program s domain such as an Employee object in a business app or an Order object in a shopping app br br br Analogy br As an analogy cars can be thought of as services which perform the useful work of transporting people from one place to another Car engines can require gas diesel or electricity but this detail is unimportant to the client a driver who only cares if it can get them to their destination br Cars present a uniform interface through their pedals steering wheels and other controls As such which engine they were injected with on the factory line ceases to matter and drivers can switch between any kind of car as needed br br br Advantages and disadvantages br br br Advantages br A basic benefit of dependency injection is decreased coupling between classes and their dependencies br By removing a client s knowledge of how its dependencies are implemented programs become more reusable testable and maintainable br This also results in increased flexibility a client may act on anything that supports the intrinsic interface the client expects br More generally dependency injection reduces boilerplate code since all dependency creation is handled by a singular component br Finally dependency injection allows concurrent development Two developers can independently develop classes that use each other while only needing to know the interface the classes will communicate through Plugins are often developed by third parties that never even talk to developers of the original product br br br Testing br Many of dependency injection s benefits are particularly relevant to unit testing br For example dependency injection can be used to externalize a system s configuration details into configuration files allowing the system to be reconfigured without recompilation Separate configurations can be written for different situations that require different implementations of components br Similarly because dependency injection does not require any change in code behavior it can be applied to legacy code as a refactoring This makes clients more independent and are easier to unit test in isolation using stubs or mock objects that simulate other objects not under test br This ease of testing is often the first benefit noticed when using dependency injection br br br Disadvantages br Critics of dependency injection argue that it br br Creates clients that demand configuration details which can be onerous when obvious defaults are available br Makes code difficult to trace because it separates behavior from construction br Is typically implemented with reflection or dynamic programming hindering IDE automation br Typically requires more upfront development effort br Encourages dependence on a framework br br br Types of dependency injection br There are three main ways in which a client can receive injected services br br Constructor injection where dependencies are provided through a client s class constructor br Setter injection where the client exposes a setter method which accepts the dependency br Interface injection where the dependency s interface provides an injector method that will inject the dependency into any client passed to it br In some frameworks clients do not need to actively accept dependency injection at all In Java for example reflection can make private attributes public when testing and inject services directly br br br Without dependency injection br In the following Java example the Client class contains a Service member variable initialized in the constructor The client directly constructs and controls which service it uses creating a hard coded dependency br br br Constructor injection br The most common form of dependency injection is for a class to request its dependencies through its constructor This ensures the client is always in a valid state since it cannot be instantiated without its necessary dependencies br br br Setter injection br By accepting dependencies through a setter method rather than a constructor clients can allow injectors to manipulate their dependencies at any time This offers flexibility but makes it difficult to ensure that all dependencies are injected and valid before the client is used br br br Interface injection br With interface injection dependencies are completely ignorant of their clients yet still send and receive references to new clients br In this way the dependencies become injectors The key is that the injecting method is provided through an interface br An assembler is still needed to introduce the client and its dependencies The assembler takes a reference to the client casts it to the setter interface that sets that dependency and passes it to that dependency object which in turn passes a reference to itself back to the client br For interface injection to have value the dependency must do something in addition to simply passing back a reference to itself This could be acting as a factory or sub assembler to resolve other dependencies thus abstracting some details from the main assembler It could be reference counting so that the dependency knows how many clients are using it If the dependency maintains a collection of clients it could later inject them all with a different instance of itself br br br Assembly br The simplest way of implementing dependency injection is to manually arrange services and clients typically done at the program s root where execution begins br br Manual construction may be more complex and involve builders factories or other construction patterns br br br Frameworks br br Manual dependency injection is often tedious and error prone for larger projects promoting the use of frameworks which automate the process Manual dependency injection becomes a dependency injection framework once the constructing code is no longer custom to the application and is instead universal While useful these tools are not required in order to perform dependency injection br Some frameworks like Spring can use external configuration files to plan program composition br br Even with a potentially long and complex object graph the only class mentioned in code is the entry point in this case Client Client has not undergone any changes to work with Spring and remains a POJO By keeping Spring specific annotations and calls from spreading out among many classes the system stays only loosely dependent on Spring br br br Examples br br br AngularJS br The following example shows an AngularJS component receiving a greeting service through dependency injection br br Each AngularJS application contains a service locator responsible for the construction and look up of dependencies br br We can then create a new injector that provides components defined in the myModule module including the greeter service br br To avoid the service locator antipattern AngularJS allows declarative notation in HTML templates which delegates creating components to the injector br br The ng controller directive triggers the injector to create an instance of the controller and its dependencies br br br C br This sample provides an example of constructor injection in C br br br Go br Go does not support classes and usually dependency injection is either abstracted by a dedicated library that utilizes reflection or generics the latter being supported since Go A simpler example without using dependency injection libraries is illustrated by the following example of an MVC web application br First pass the necessary dependencies to a router and then from the router to the controllers br br Then you can access the private fields of the struct in any method that is it s pointer receiver without violating encapsulation br br Finally you can use the database connection initialized in your main function at the data access layer br br br See also br Architecture description language br Factory pattern br Inversion of control br Plug in computing br Strategy pattern br AngularJS br Service locator pattern br Parameter computer programming br Quaject br br br br br br External links br br Composition Root by Mark Seemann br A beginners guide to Dependency Injection br Dependency Injection Testable Objects Designing loosely coupled and testable objects Jeremy Weiskotten Dr Dobb s Journal May br Design Patterns Dependency Injection MSDN Magazine September br Martin Fowler s original article that introduced the term Dependency Injection br P of EAA Plugin br The Rich Engineering Heritage Behind Dependency Injection Archived at the Wayback Machine Andrew McVeigh A detailed history of dependency injection br What is Dependency Injection An alternative explanation Jakob Jenkov br Writing More Testable Code with Dependency Injection Developer com October Archived at the Wayback Machine br Managed Extensibility Framework Overview MSDN br Old fashioned description of the Dependency Mechanism by Hunt br Refactor Your Way to a Dependency Injection Container br Understanding DI in PHP br You Don t Need a Dependency Injection Container