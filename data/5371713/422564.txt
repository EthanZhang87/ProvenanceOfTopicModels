title: Jakarta Faces
id: 422564
Jakarta Faces formerly Jakarta Server Faces and JavaServer Faces JSF is a Java specification for building component based user interfaces for web applications It was formalized as a standard through the Java Community Process as part of the Java Platform Enterprise Edition It is an MVC web framework that simplifies the construction of user interfaces UI for server based applications by using reusable UI components in a page br JSF x uses Facelets as its default templating system Users of the software may also use XUL or Java JSF x uses JavaServer Pages JSP as its default templating system br br br History br br In the original Java Specification Request JSR for the technology that ultimately became JavaServer Faces proposed developing a package with the name javax servlet ui br In June JavaWorld would report on Amy Fowler s team s design of the JavaServer Faces API also known as Moonwalk as an application framework for creating Web based user interfaces br br br Developments br Facelets which was designed specifically for Java Server Faces was adopted as the official view technology for JSF This eliminates the life cycle conflicts that existed with JSP forcing workarounds by Java developers br The new JSF developments also provide wide accessibility to Java annotations such as ManagedBean ManagedProperty and FacesComponent that removes the need for faces config xml in all cases except framework extension Navigation is also simplified removing the need for faces config xml navigation cases Page transitions can be invoked simply by passing the name of the desired View or Facelet br The addition of Partial State Saving and Document Object Model DOM updates are part of the built in standardized AJAX support br The latest JSF release has built in support for handling resources like images CSS and Javascript allowing artifacts to be included with component libraries separated into JAR files or simply co located into a consistent place within the Web application This includes logical naming and versioning of resources br JSF also includes a number of other changes like adding support for events separate development staging and production modes similar to RAILS ENV in Ruby on Rails and significantly expanding the standard set of components br br br Update history br JSF Major features Deleted some deprecated things native managed beans native EL references no extended view by default added ClientWindowScoped br JSF Package name changed from Javax to Jakarta br JSF The first release of the Jakarta Server Pages API for Jakarta EE Neither the API nor the behavior has changed br JSF Major features search Expressions extensionless URLs bean validation for complete classes push communication using WebSocket enhanced integration with CDI br JSF Introduced new concepts like stateless views page flow and the ability to create portable resource contracts br JSF Maintenance release of JSF Only a very minor number of specification changes br JSF Major release for ease of use enhanced functionality and performance Coincides with Java EE br JSF Many improvements to core systems and APIs Coincides with Java EE Initial adoption into Java EE br JSF Bug fix release No specification changes br JSF Initial specification released br br br How it works br Based on a component driven UI design model JavaServer Faces uses XML files called view templates or Facelets views The FacesServlet processes requests loads the appropriate view template builds a component tree processes events and renders the response typically in the HTML language to the client The state of UI components and other objects of scope interest is saved at the end of each request in a process called stateSaving note transient true and restored upon next creation of that view Either the client or the server side can save objects and states br br br JSF and AJAX br br JSF is often used together with AJAX a Rich Internet application development technique AJAX is a combination of web development techniques and technologies that make it possible to create rich user interfaces The user interface components in Mojarra the JSF reference implementation and Apache MyFaces were originally developed for HTML only and AJAX had to be added via JavaScript This has changed however br Because JSF supports multiple output formats AJAX enabled components can easily be added to improve user interfaces created with JSF The JSF specification provides built in support for AJAX by standardizing the AJAX request lifecycle and providing simple development interfaces to AJAX events The specification allows an event triggered by the client to go through validation conversion and method invocation before returning the result to the browser via an XML DOM update br JSF includes support for graceful degradation when JavaScript is disabled in the browser br br br AJAX enabled components and frameworks br The following companies and projects offer AJAX based JSF frameworks or component libraries br br Apache MyFaces The Apache Foundation JSF implementation with AJAX components br Backbase Enterprise AJAX JSF Edition AJAX framework br BootsFaces Open source JSF Framework based on Bootstrap br IBM Notes XPages br ICEfaces open source Java JSF extension framework and rich components AJAX without JavaScript br JBoss RichFaces derived from and replaces AJAX jsf AJAX enabled JSF components for layout file upload forms inputs and many other features It reached its end of life in June br OmniFaces open source JSF utility library br OpenFaces AJAX framework with JSF components br Oracle ADF Faces Rich Client Oracle Application Development Framework br PrimeFaces AJAX framework with JSF components br Sun Java BluePrints AJAX components br ZK AJAX framework with JSF components br br br Criticisms br br br ThoughtWorks br In their January Technology Radar publication ThoughtWorks wrote br br We continue to see teams run into trouble using JSF JavaServer Faces and are recommending you avoid this technology Teams seem to choose JSF because it is a JEE standard without really evaluating whether the programming model suits them We think JSF is flawed because it tries to abstract away HTML CSS and HTTP exactly the reverse of what modern web frameworks do JSF like ASP NET webforms attempts to create statefulness on top of the stateless protocol HTTP and ends up causing a whole host of problems involving shared server side state We are aware of the improvements in JSF but think the model is fundamentally broken We recommend teams use simple frameworks and embrace and understand web technologies including HTTP HTML and CSS br br br Rebuttal br In February a atay ivici PrimeFaces Lead responded to ThoughtWorks criticisms in a post titled JSF is not what you ve been told anymore ivici argues that improvements in JSF over the years offer many features that embrace modern web development providing the option to write your own JavaScript HTML and CSS Also regarding state ivici wrote br br JSF is a stateful framework by nature and state makes web applications easy to develop with With improved state management techniques introduced in JSF e g stateless mode partial state saving JSF can scale as well br br br DZone br In the article published November in the DZone website titled Why You Should Avoid JSF Jens Schauder wrote Facelets the preferred presentation technology of JSF looks at first sight like an ordinary templating technology like the good old JSP or Thymeleaf But if you look closer the horror becomes obvious In the same place where you structure your HTML you also place the logic what parts of the UI should get updated on an action A clear violation of the separation of concerns principle in my book Even better is the immediate attribute which changes the server side life cycle And if this isn t enough it does it in different ways depending on what tag you use it on You can t make stuff like this up br br br TheServerSide br In February the enterprise Java community website TheServerSide published an article recommending against the use of JSF whose use could compromise the quality of the final product The article ellaborated on five reasons br br Simple tasks become difficult br JSF lacks flexibility br The learning curve is steep br Incompatibility with standard Java technologies and br Primitive AJAX support br br br br br br External links br br Official website