title: JavaBeans
id: 1173053
In computing based on the Java Platform JavaBeans is a technology developed by Sun Microsystems and released in as part of JDK br The beans of JavaBeans are classes that encapsulate one or more objects into a single standardized object the bean This standardization allows the beans to be handled in a more generic fashion allowing easier code reuse and introspection This in turn allows the beans to be treated as software components and to be manipulated visually by editors and IDEs without needing any initial configuration or to know any internal implementation details br As part of the standardization all beans must be serializable have a zero argument constructor and allow access to properties using getter and setter methods br br br Features br Introspection br Introspection is a process of analyzing a Bean to determine its capabilities This is an essential feature of the Java Beans specification because it allows another application such as a design tool to obtain information about a component br Properties br A property is a subset of a Bean s state The values assigned to the properties determine the behaviour and appearance of that component They are set through a setter method and can be obtained by a getter method br Customization br A customizer can provide a step by step guide that the process must follow to use the component in a specific context br Events br Beans may interact with the EventObject EventListener model br Persistence br Persistence is the ability to save the current state of a Bean including the values of a Bean s properties and instance variables to nonvolatile storage and to retrieve them at a later time br Methods br A Bean should use accessor methods to encapsulate the properties A Bean can provide other methods for business logic not related to the access to the properties br br br Advantages br The properties events and methods of a bean can be exposed to another application br A bean may register to receive events from other objects and can generate events that are sent to those other objects br Auxiliary software can be provided to help configure a bean br The configuration settings of a bean can be saved to persistent storage and restored br br br Disadvantages br A class with a zero argument constructor is subject to being instantiated in an invalid state If such a class is instantiated manually by a developer rather than automatically by some kind of framework the developer might not realize that the class has been improperly instantiated The compiler cannot detect such a problem and even if it is documented there is no guarantee that the developer will see the documentation br JavaBeans are inherently mutable and so lack the advantages offered by immutable objects br Having to create getters for every property and setters for many most or all of them can lead to an immense quantity of boilerplate code br br br JavaBeans API br The JavaBeans functionality is provided by a set of classes and interfaces in the java beans package br br br JavaBean conventions br In order to function as a JavaBean class an object class must obey certain conventions about method naming construction and behaviour These conventions make it possible to have tools that can use reuse replace and connect Java Beans br The required conventions are as follows br br The class must have a public default constructor with no arguments This allows easy instantiation within editing and activation frameworks br The class properties must be accessible using get set is can be used for boolean properties instead of get to and other methods so called accessor methods and mutator methods according to a standard naming convention This allows easy automated inspection and updating of bean state within frameworks many of which include custom editors for various types of properties Setters can have one or more arguments br The class should be serializable This allows applications and frameworks to reliably save store and restore the bean s state in a manner independent of the VM and of the platform br br br Code example br br TestPersonBean java br br br See also br Software packaging br br br br br br External links br Oracle s JavaBeans tutorials br JavaBeans specification