title: Kotlin (programming language)
id: 41819039
Kotlin is a cross platform statically typed general purpose high level programming language with type inference Kotlin is designed to interoperate fully with Java and the JVM version of Kotlin s standard library depends on the Java Class Library br but type inference allows its syntax to be more concise Kotlin mainly targets the JVM but also compiles to JavaScript e g for frontend web applications using React or native code via LLVM e g for native iOS apps sharing business logic with Android apps Language development costs are borne by JetBrains while the Kotlin Foundation protects the Kotlin trademark br On May Google announced that the Kotlin programming language was now its preferred language for Android app developers Since the release of Android Studio in October Kotlin has been included as an alternative to the standard Java compiler The Android Kotlin compiler produces Java bytecode by default which runs in any later JVM but lets the programmer choose to target Java up to for optimization or allows for more features has bidirectional record class interoperability support for JVM introduced in Java considered stable as of Kotlin br Kotlin has support for the web with Kotlin JS either through a classic interpreter based backend which has been declared stable since version or an intermediate representation based backend which has been declared stable since version Kotlin Native for e g Apple silicon support is considered beta since version br br br History br br br Name br The name is derived from Kotlin Island a Russian island in the Gulf of Finland near St Petersburg Andrey Breslav Kotlin s former lead designer mentioned that the team decided to name it after an island just like the programming language Java was named after the Indonesian island of Java though the language s name is said to have been inspired by java the American slang term for coffee which itself is derived from the island name br br br Development br In July JetBrains unveiled Project Kotlin a new language for the JVM which had been under development for a year JetBrains lead Dmitry Jemerov said that most languages did not have the features they were looking for with the exception of Scala However he cited the slow compilation time of Scala as a deficiency One of the stated goals of Kotlin is to compile as quickly as Java In February JetBrains open sourced the project under the Apache license br JetBrains hoped that the new language would drive IntelliJ IDEA sales br The first commit to the Kotlin Git repository was on November br Kotlin was released on February This is considered to be the first officially stable release and JetBrains has committed to long term backwards compatibility starting with this version br At Google I O Google announced first class support for Kotlin on Android br Kotlin was released on November Sharing code between JVM and JavaScript platforms feature was newly added to this release multiplatform programming is by now a beta feature upgraded from experimental A full stack demo has been made with the new Kotlin JS Gradle Plugin br Kotlin was released on October adding support for coroutines for use with asynchronous programming br On May Google announced that the Kotlin programming language is now its preferred language for Android app developers br Kotlin was released in August with e g some slight changes to the support for Apple s platforms i e to the Objective C Swift interop br Kotlin was released in May br Kotlin was released in November br Kotlin was released in June including the alpha version of the new Kotlin K compiler br Kotlin was released in December was released on January br Kotlin was released in July was released on July br Kotlin was released in May was released on May br br br Design br Development lead Andrey Breslav has said that Kotlin is designed to be an industrial strength object oriented language and a better language than Java but still be fully interoperable with Java code allowing companies to make a gradual migration from Java to Kotlin br Borrowing from Scala semicolons are optional as a statement terminator in most cases a newline is sufficient for the compiler to deduce that the statement has ended br Borrowing from Scala Kotlin variable declarations and parameter lists have the data type come after the variable name and with a colon separator similar to Ada BASIC Pascal TypeScript and Rust This according to an article from Roman Elizarov current project lead results in alignment of variable names and is more pleasing to eyes especially when there are a few variable declarations in succession and one or more of the types is too complex for type inference or needs to be declared explicitly for human readers to understand br Borrowing from Scala variables in Kotlin can be read only declared with the val keyword or mutable declared with the var keyword br Borrowing from Scala class members are public by default and classes themselves are final by default meaning that creating a derived class is disabled unless the base class is declared with the open keyword br In addition to the classes and member functions which are equivalent to methods of object oriented programming Kotlin also supports procedural programming with the use of functions br Kotlin functions and constructors support default arguments variable length argument lists named arguments and overloading by unique signature Class member functions are virtual i e dispatched based on the runtime type of the object they are called on br Kotlin added support for contracts which are stable for the standard library declarations but still experimental for user defined declarations Contracts are inspired by Eiffel s design by contract programming paradigm br Following ScalaJS Kotlin code may be transpiled to JavaScript allowing for interoperability between code written in the two languages This can be used either to write full web applications in Kotlin or to share code between a Kotlin backend and a JavaScript frontend br br br Syntax br br br Procedural programming style br Kotlin relaxes Java s restriction of allowing static methods and variables to exist only within a class body Static objects and functions can be defined at the top level of the package without needing a redundant class level For compatibility with Java Kotlin provides a JvmName annotation which specifies a class name used when the package is viewed from a Java project For example file JvmName JavaClassName br br br Main entry point br br As in C C C Java and Go the entry point to a Kotlin program is a function named main which may be passed an array containing any command line arguments This is optional since Kotlin Perl PHP and Unix shell style string interpolation is supported Type inference is also supported br br br Extension functions br Similar to C Kotlin allows adding an extension function to any class without the formalities of creating a derived class with new functions An extension function has access to all the public interface of a class which it can use to create a new function interface to a target class An extension function will appear exactly like a function of the class and will be shown in code completion inspection of class functions For example br br By placing the preceding code in the top level of a package the String class is extended to include a lastChar function that was not included in the original definition of the String class br br br Unpack arguments with spread operator br Similar to Python the spread operator asterisk unpacks an array s contents as individual arguments to a function e g br br br Destructuring declarations br br Destructuring declarations decompose an object into multiple variables at once e g a D coordinate object might be destructured into two integers x and y br For example the Map Entry object supports destructuring to simplify access to its key and value fields br br br Nested functions br Kotlin allows local functions to be declared inside of other functions or methods br br br Classes are final by default br In Kotlin to derive a new class from a base class type the base class needs to be explicitly marked as open This is in contrast to most object oriented languages such as Java where classes are open by default br Example of a base class that is open to deriving a new subclass from it br br br Abstract classes are open by default br br Abstract classes define abstract or pure virtual placeholder functions that will be defined in a derived class Abstract classes are open by default br br br Classes are public by default br Kotlin provides the following keywords to restrict visibility for top level declaration such as classes and for class members public internal protected and private br When applied to a class member br br When applied to a top level declaration br br Example br br br Primary constructor vs secondary constructors br Kotlin supports the specification of a primary constructor as part of the class definition itself consisting of an argument list following the class name This argument list supports an expanded syntax on Kotlin s standard function argument lists that enables declaration of class properties in the primary constructor including visibility extensibility and mutability attributes Additionally when defining a subclass properties in super interfaces and super classes can be overridden in the primary constructor br br However in cases where more than one constructor is needed for a class a more general constructor can be defined using secondary constructor syntax which closely resembles the constructor syntax used in most object oriented languages like C C and Java br br br Sealed classes br Sealed classes and interfaces restrict subclass hierarchies meaning more control over the inheritance hierarchy br Declaration of sealed interface and class br br All the subclasses of the sealed class are defined at compile time br No new subclasses can be added to it after the compilation of the module having the sealed class br For example a sealed class in a compiled jar file cannot be subclassed br br br Data classes br Kotlin s data class construct defines classes whose primary purpose is storing data similar Java s record types Like Java s record types the construct is similar to normal classes except that the key methods equals hashCode and toString are automatically generated from the class properties unlike records data classes are open for inheritance br br br Background br In Java classes are expected to provide implementations for certain standard methods so that they function properly with methods and classes provided by the standard library Java s default implementation which every class inherits from the base of the class hierarchy Object implements these methods only with regard to the identity of the object instance usually its address in virtual memory This is a problem since it is extremely important to br a have information about the object s state in its String representation toString and br b detect whether two objects are similar equals and hashCode The latter two s implementations should also agree with each other and therefore be implemented together meaning when one is changed the other should also be changed to match Implementing this functionality also increases the efficiency of standard algorithms which rely on its correct behavior Conversely incorrect implementations can even cause errors br Since implementing these methods manually or with external tools is cumbersome and often leads to repeated or boilerplate code automatic generation of them as a language feature speeds up development and reduces the potential for errors br br br Kotlin interactive shell br br br Kotlin as a scripting language br Kotlin can also be used as a scripting language A script is a Kotlin source file using the kts filename extension with executable source code at the top level scope br br Scripts can be run by passing the script option and the corresponding script file to the compiler br br br Null safety br Kotlin makes a distinction between nullable and non nullable data types All nullable objects must be declared with a postfix after the type name Operations on nullable objects need special care from developers a null check must be performed before using the value either explicitly or with the aid of Kotlin s null safe operators br br the safe navigation operator can be used to safely access a method or property of a possibly null object If the object is null the method will not be called and the expression evaluates to null Example br br the null coalescing operator is a binary operator that returns the first operand if non null else the second operand It is often referred to as the Elvis operator due to its resemblance to an emoticon representation of Elvis Presley br br br Lambdas br Kotlin provides support for higher order functions and anonymous functions or lambdas br br Lambdas are declared using braces If a lambda takes parameters they are declared within the braces and followed by the operator br br br Hello world example br Taken from and explained at https kotlinlang org docs kotlin tour hello world html br br br Tools br Android Studio based on IntelliJ IDEA has official support for Kotlin starting from Android Studio br Integration with common Java build tools is supported including Apache Maven Apache Ant and Gradle br Emacs has a Kotlin Mode in its MELPA package repository br JetBrains also provides a plugin for Eclipse br IntelliJ IDEA has plug in support for Kotlin IntelliJ IDEA was the first version to bundle the Kotlin plugin in the IntelliJ Installer and to provide Kotlin support out of the box br Gradle Kotlin has seamless integration with Gradle which is a popular build automation tool Gradle allows you to build automate and manage the lifecycle of your Kotlin projects efficiently br br br Applications br When Kotlin was announced as an official Android development language at Google I O in May it became the third language fully supported for Android after Java and C As of Kotlin is the most widely used language on Android with Google estimating that of the top apps on the Play Store are written in Kotlin Google itself has apps written in Kotlin including Maps and Drive Many Android apps such as Google Home are in the process of being migrated to Kotlin and therefore use both Kotlin and Java Kotlin on Android is seen as beneficial for its null pointer safety as well as for its features that make for shorter more readable code br In addition to its prominent use on Android Kotlin is gaining traction in server side development The Spring Framework officially added Kotlin support with version on January To further support Kotlin Spring has translated all its documentation to Kotlin and added built in support for many Kotlin specific features such as coroutines In addition to Spring JetBrains has produced a Kotlin first framework called Ktor for building web applications br In JetBrains found in a survey of developers who use Kotlin that were using Kotlin for mobile apps while were using it for a web back end Just over a third of all Kotlin developers said that they were migrating to Kotlin from another language Most Kotlin users were targeting Android or otherwise on the JVM with only using Kotlin Native br br br Adoption br In Kotlin was the fastest growing language on GitHub with times more developers compared to It is the fourth most loved programming language according to the Stack Overflow Developer Survey br Kotlin was also awarded the O Reilly Open Source Software Conference Breakout Award for br Many companies organizations have used Kotlin for backend development br br Allegro br Amazon br Atlassian br Cash App br Flux br Google br Gradle br JetBrains br Meshcloud br Norwegian Tax Administration br OLX br Pivotal br Rocket Travel br Shazam br Zalando br Some companies organizations have used Kotlin for web development br br Barclay s Bank br Data viz br Fritz br JetBrains br A number of companies have publicly stated they were using Kotlin br br Basecamp br Corda a distributed ledger developed by a consortium of well known banks such as Goldman Sachs Wells Fargo J P Morgan Deutsche Bank UBS HSBC BNP Paribas and Soci t G n rale has over Kotlin code in its codebase br Coursera br DripStat br Duolingo br Netflix br Pinterest br Trello br Uber br br br See also br br Comparison of programming languages br br br br This article contains quotations from Kotlin tutorials which are released under an Apache license br br br External links br Official website