title: JRuby
id: 1948859
JRuby is an implementation of the Ruby programming language atop the Java Virtual Machine written largely in Java It is free software released under a three way EPL GPL LGPL license JRuby is tightly integrated with Java to allow the embedding of the interpreter into any Java application with full two way access between the Java and the Ruby code similar to Jython for the Python language br JRuby s lead developers are Charles Oliver Nutter and Thomas Enebo with many current and past contributors including Ola Bini and Nick Sieger In September Sun Microsystems hired Enebo and Nutter to work on JRuby full time In June ThoughtWorks hired Ola Bini to work on Ruby and JRuby br In July the JRuby developers left Sun to continue JRuby development at Engine Yard In May Nutter and Enebo left Engine Yard to work on JRuby at Red Hat br br br History br JRuby was originally created by Jan Arne Petersen in At that time and for several years following the code was a direct port of the Ruby C code With the release of Ruby an effort began to update JRuby to features and semantics Since several contributors have assisted the project leading to the current core team of around six members br JRuby added Just in time compilation and Ahead of time compilation modes to JRuby and was already faster in most cases than the then current Ruby reference implementation br JRuby packages are available for most platforms Fedora was among the first to include it as a standard package at JRuby br In July the core JRuby developers at Sun Microsystems Charles Oliver Nutter Thomas Enebo and Nick Sieger joined Engine Yard to continue JRuby development In May Nutter and Enebo left Engine Yard to work on JRuby at Red Hat br JRuby has supported compatibility with Ruby MRI versions through JRuby supported Ruby with JRuby updating that compatibility to Ruby JRuby added simultaneous support for Ruby with JRuby making Ruby the default execution mode Ruby compatibility is available via a command line flag JRuby added support for Ruby br The current version of JRuby targets Ruby though some features are still in work br br br Ruby on Rails br JRuby has been able to run the Ruby on Rails web framework since version May with the ability to execute RubyGems and WEBrick Since the hiring of the two lead developers by Sun Rails compatibility and speed have improved greatly JRuby version successfully passed nearly all of Rails s own test cases Since then developers have begun to use JRuby for Rails applications in production environments br br br Multiple virtual machine collaboration br On February Sun Microsystems and the University of Tokyo announced a joint research project to implement a virtual machine capable of executing more than one Ruby or JRuby application on one interpreter br br br Dynamic invocation on Java Virtual Machines br JSR Supporting Dynamically Typed Languages on the JavaTM Platform proposes br br adding a new invokedynamic instruction at the JVM level allowing method invocation using dynamic type checking br dynamically changing classes and methods at runtime br The Sun Open source project Multi Language Virtual Machine aims to prototype this JSR The first working prototype developed as a patch on OpenJDK was announced and made available on end of August br The JRuby team has implemented dynamic invocation into their codebase Dynamic invocation initially shipped with the release in a primitive form Version enabled it by default on Java builds br br br Release history br This table presents only releases that present significant steps in JRuby history aside from versions that mainly fixed bugs and improved performance Performance improvements are also not shown in the table below as every release has usually brought such improvements br br br Design br Since early the current JRuby core team has endeavored to move JRuby beyond being a simple C port to support better performance and to aid eventual compilation to Java bytecode To support this end the team set an ambitious goal to be able to run Ruby on Rails unmodified using JRuby In the process of achieving this goal the JRuby test suite expanded to such extent that the team gained confidence in the correctness of JRuby As a result toward the end of and in the beginning of they began to commit much more complicated redesigns and refactorings of JRuby s core subsystems br JRuby is designed to work as a mixed mode virtual machine for Ruby where code can be either interpreted directly just in time compiled at runtime to Java bytecode or ahead of time compiled to Java bytecode before execution Until October only the interpreted mode supported all Ruby s constructs but a full AOT JIT compiler is available since version The compiler design allows for interpreted and compiled code to run side by side as well as decompilation to reoptimize and outputting generated bytecode as Java class files br br br Frameworks support br JRuby has built in support for Rails RSpec Rake and RubyGems It embeds an FFI subsystem to allow the use of C libraries bundled as gems It also allows launching the Interactive Ruby Shell irb as Ruby MRI does br The Netbeans Ruby Pack available in NetBeans allows IDE development with Ruby and JRuby as well as Ruby on Rails for the two implementations of Ruby br It is no longer included in NetBeans and later br br br Programming br br br Ruby meets Java br JRuby is similar to the standard Ruby interpreter except written in Java JRuby features some of the same concepts including object oriented programming and dynamic typing as Ruby The key difference is that JRuby is tightly integrated with Java and can be called directly from Java programs Java has significant footing in the development of web applications br br br JRuby calling Java br One powerful feature of JRuby is its ability to invoke the classes of the Java Platform To do this one must first load JRuby s Java support by calling require java The following example creates a Java JFrame with a JLabel br br JRuby also allows the user to call Java code using the more Ruby like underscore method naming and to refer to JavaBean properties as attributes br br br Calling JRuby from Java br JRuby can just as easily be called from Java using either the JSR Scripting for Java or the Apache Bean Scripting framework br br br Performance br According to some benchmarks JRuby is faster than alternatives Since implementations vary in how much code is loaded before execution different methods of measuring speed can lead to biased interpretations of performance advantages The time it takes for a Java Virtual Machine itself to load is often excluded from execution times when calculating benchmarks br JRuby has the significant architectural advantage to be able to leverage JVM threads without being constrained by a global interpreter lock similarly to Rubinius therefore achieving full parallelism within a process which Ruby MRI cannot achieve despite leveraging OS threads br In a real Mongrel web server application tested in JRuby performance is better than Ruby MRI after the Java Virtual Machine had been instantiated br In a benchmark of Ruby implementations JRuby was faster than Ruby MRI in some tests but YARV outperformed both of them br As of April in The Computer Language Benchmarks Game JRuby typically has the same performance as Ruby MRI but uses more memory br br br See also br br GraalVM br List of Java scripting languages br ZK framework an Ajax framework supporting JRuby br br br br br br Further reading br br br External links br Official website