title: REST
id: 907222
REST representational state transfer is a software architectural style that was created to guide the design and development of the architecture for the World Wide Web REST defines a set of constraints for how the architecture of a distributed Internet scale hypermedia system such as the Web should behave The REST architectural style emphasises uniform interfaces independent deployment of components the scalability of interactions between them and creating a layered architecture to promote caching to reduce user perceived latency enforce security and encapsulate legacy systems br REST has been employed throughout the software industry to create stateless reliable web based applications An application that adheres to the REST architectural constraints may be informally described as RESTful although this term is more commonly associated with the design of HTTP based APIs and what are widely considered best practices regarding the verbs HTTP methods a resource responds to while having little to do with REST as originally formulated and is often even at odds with the concept br br br Principle br The term representational state transfer was introduced and defined in by computer scientist Roy Fielding in his doctoral dissertation It means that a server will respond with the representation of a resource today it will most often be an HTML XML or JSON document and that resource will contain hypermedia links that can be followed to make the state of the system change Any such request will in turn receive the representation of a resource and so on br An important consequence is that the only identifier that needs to be known is the identifier of the first resource requested and all other identifiers will be discovered This means that those identifiers can change without the need to inform the client beforehand and that there can be only loose coupling between client and server br br br History br br The Web began to enter everyday use in when websites for general use started to become available At the time there was only a fragmented description of the Web s architecture and there was pressure in the industry to agree on some standard for the Web interface protocols For instance several experimental extensions had been added to the communication protocol HTTP to support proxies and more extensions were being proposed but there was a need for a formal Web architecture with which to evaluate the impact of these changes br The W C and IETF working groups together started work on creating formal descriptions of the Web s three primary standards URI HTTP and HTML Roy Fielding was involved in the creation of these standards specifically HTTP and and URI and during the next six years he created the REST architectural style testing its constraints on the Web s protocol standards and using it as a means to define architectural improvements and to identify architectural mismatches Fielding defined REST in his PhD dissertation Architectural Styles and the Design of Network based Software Architectures at UC Irvine br To create the REST architectural style Fielding identified the requirements that apply when creating a world wide network based application such as the need for a low entry barrier to enable global adoption He also surveyed many existing architectural styles for network based applications identifying which features are shared with other styles such as caching and client server features and those which are unique to REST such as the concept of resources Fielding was trying to both categorise the existing architecture of the current implementation and identify which aspects should be considered central to the behavioural and performance requirements of the Web br By their nature architectural styles are independent of any specific implementation and while REST was created as part of the development of the Web standards the implementation of the Web does not obey every constraint in the REST architectural style Mismatches can occur due to ignorance or oversight but the existence of the REST architectural style means that they can be identified before they become standardised For example Fielding identified the embedding of session information in URIs as a violation of the constraints of REST which can negatively affect shared caching and server scalability HTTP cookies also violated REST constraints because they can become out of sync with the browser s application state making them unreliable they also contain opaque data that can be a concern for privacy and security br br br Architectural properties br The REST architectural style is designed for network based applications specifically client server applications But more than that it is designed for Internet scale usage so the coupling between the user agent client and the origin server must be as loose as possible to facilitate large scale adoption br The strong decoupling of client and server together with the text based transfer of information using a uniform addressing protocol provided the basis for meeting the requirements of the Web extensibility anarchic scalability and independent deployment of components large grain data transfer and a low entry barrier for content readers content authors and developers alike br br The constraints of the REST architectural style affect the following architectural properties br br Performance in component interactions which can be the dominant factor in user perceived performance and network efficiency br Scalability allowing the support of large numbers of components and interactions among components br Simplicity of a uniform interface br Modifiability of components to meet changing needs even while the application is running br Visibility of communication between components by service agents br Portability of components by moving program code with the data br Reliability in the resistance to failure at the system level in the presence of failures within components connectors or data br br br Architectural constraints br The REST architectural style defines six guiding constraints When these constraints are applied to the system architecture it gains desirable non functional properties such as performance scalability simplicity modifiability visibility portability and reliability br The formal REST constraints are as follows br br Client Server Client are separated from servers by a well defined interface br Stateless A specific client does not consume server storage when it is at rest br Cache Responses indicate their own cacheability br Uniform Interface br Layered System A client cannot ordinarily tell whether it is connected directly to the end server or to an intermediary along the way br Code on Demand optional Servers are able to temporarily extend or customize the functionality of a client by transferring logic to the client that can be executed within a standard virtual machine br br br Uniform interface br The uniform interface constraint is fundamental to the design of any RESTful system It simplifies and decouples the architecture which enables each part to evolve independently The four constraints for this uniform interface are br br Resource identification in requests Individual resources are identified in requests using URIs The resources themselves are conceptually separate from the representations that are returned to the client For example the server could send data from its database as HTML XML or as JSON none of which are the server s internal representation br Resource manipulation through representations When a client holds a representation of a resource including any metadata attached it has enough information to modify or delete the resource s state br Self descriptive messages Each message includes enough information to describe how to process the message For example which parser to invoke can be specified by a media type br Hypermedia as the engine of application state HATEOAS Having accessed an initial URI for the REST application analogous to a human Web user accessing the home page of a website a REST client should then be able to use server provided links dynamically to discover all the available resources it needs As access proceeds the server responds with text that includes hyperlinks to other resources that are currently available There is no need for the client to be hard coded with information regarding the structure of the server br br br Classification models br Several models have been developed to help classify REST APIs according to their adherence to various principles of REST design such as br br the Richardson Maturity Model br the Classification of HTTP based APIs br the W S maturity model br br br See also br Clean URL URL intended to improve the usability of a website br Content delivery network Layer in the internet ecosystem addressing bottlenecks br Domain Application Protocol DAP br List of URI schemes Namespace identifier assigned by IANA br Microservices Collection of loosely coupled services used to build computer applications br Overview of RESTful API Description Languages descriptions of computer network interfacesPages displaying wikidata descriptions as a fallback br Resource oriented architecture Architectural pattern in software design br Resource oriented computing Architectural pattern in software design br Service oriented architecture Architectural pattern in software design br Web oriented architecture Architectural pattern in software design br Web services Service offered between electronic devices via the internetPages displaying short descriptions of redirect targets br br br br br br Further reading br Pautasso Cesare Wilde Erik Alarcon Rosa REST Advanced Research Topics and Practical Applications Springer ISBN br Pautasso Cesare Zimmermann Olaf Leymann Frank April Restful web services vs big web services Proceedings of the th international conference on World Wide Web pp doi ISBN S CID br Ferreira Otavio Nov Semantic Web Services A RESTful Approach IADIS ISBN br Fowler Martin Richardson Maturity Model steps towards the glory of REST martinfowler com Retrieved 