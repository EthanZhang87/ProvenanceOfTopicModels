title: EncFS
id: 4387118
EncFS is a Free LGPL FUSE based cryptographic filesystem It transparently encrypts files using an arbitrary directory as storage for the encrypted files br Two directories are involved in mounting an EncFS filesystem the source directory and the mountpoint Each file in the mountpoint has a specific file in the source directory that corresponds to it The file in the mountpoint provides the unencrypted view of the one in the source directory Filenames are encrypted in the source directory br Files are encrypted using a volume key which is stored either within or outside the encrypted source directory A password is used to decrypt this key br br br Common uses br In Linux allows encryption of home folders as an alternative to eCryptfs br Allows encryption of files and folders saved to cloud storage Dropbox Google Drive OneDrive etc br Allows portable encryption of file folders on removable disks br Available as a cross platform folder encryption mechanism br Increases storage security by adding two factor authentication FA When the EncFS volume key is stored outside the encrypted source directory and into a physically separated location from the actual encrypted data it significantly increases security by adding a two factor authentication FA For example EncFS is able to store each unique volume key anywhere else than the actual encrypted data such as on a USB flash drive network mount optical disc or cloud In addition to that a password could be required to decrypt this volume key br br br Advantages br EncFS offers several advantages over other disk encryption software simply because each file is stored individually as an encrypted file elsewhere in the host s directory tree br br br Cross platform br EncFS is available on multiple platforms whereas eCryptfs is tied to the Linux kernel br br br Bitrot detection br EncFS implements bitrot detection on top of any underlying filesystem br br br Scalable storage br EncFS has no volumes that occupy a fixed size encrypted directories grow and shrink as more files are added to or removed from the mountpoint br br br Normal file server br EncFS s encrypted directory can be located on a normal file server via NFS SSHFS etc and can be mirrored and backed up efficiently with normal file system tools such as Rsync br br br Different physical devices br It is possible for some directories on the mountpoint to exist on different physical devices if a filesystem is mounted over one of the sub directories in the source directory br br br Faster backup br Backup utilities can back up only the files that have changed in the source directory file synchronisation cloud storage br br br Reduced corruption br Corruption of data is more isolated Corruption of filedata is local to a single file and data corruption of the filesystem can be corrected with a reliable filesystem repair utility like fsck Some whole disk encryption systems lack one or both of these attributes br br br Optimizations br Since file modifications shine through to the underlying file system various optimizations by the operating system are still possible unlike with full disk encryption For example passing information about released space TRIM can improve performance of SSD drives But this is also supported with dm crypt br br br Random file access br Files can be accessed at random You can for example skip to the middle of a very large encrypted video without decrypting the whole file br br br Disadvantages br There are some drawbacks to using EncFS br br br Compatibility br Mounted EncFS directories share the same features and restrictions as the filesystem containing the source directory br br br No support for very long filenames br Due to encryption the filenames for encrypted files produced by EncFS are longer than the original filenames Therefore filenames whose length is close to the maximum supported by the filesystem cannot be stored by EncFS since they will exceed the length limit after encryption Most filesystems limit filenames to bytes in that case EncFS only supports filenames up to bytes br br br General security concerns br Anyone having access to the source directory is able to see how many files are in the encrypted filesystem what permissions they have their approximate size and the last time they were accessed or modified though the file names and file data are encrypted br br br EncFS security concerns br A paid security audit was conducted in February which revealed several potential vulnerabilities It concludes br br EncFS is probably safe as long as the adversary only gets one copy of the ciphertext and nothing more EncFS is not safe if the adversary has the opportunity to see two or more snapshots of the ciphertext at different times EncFS attempts to protect files from malicious modification but there are serious problems with this feature br br br EncFS security concerns br The announcement of EncFS included several underlying design changes acknowledging the security concerns raised in the previous audit However certain concerns still remain regarding those vulnerabilities br br br Filesystem options br When creating a new EncFS volume several different options are available to customize the filesystem to suit various needs br br br Cipher algorithm br EncFS uses whatever ciphers it is able to locate in various encryption libraries on the system Blowfish and AES are typically available br The cipher key length keySize can be selected for ciphers that support variable key lengths br br br Block size br Each file is encrypted in blocks and this option controls what size those blocks are Each time a single byte is read the entire block it is contained in must be decrypted Likewise for each write the block must be decrypted altered and re encrypted br The default block size of is sufficient for most purposes br br br Filename encoding br Filenames in the source directory can be plain or encrypted in block or stream mode Block mode obscures the filename length somewhat while stream mode keeps them as short as possible which might save space on the source directory s filesystem depending on how that filesystem manages the directory tree br br br Filename IV chaining br When enabled the initialization vector for filename encryption is derived from the file s parent directories causing two files with the same name but in different directories to have different encrypted filenames br If a directory is renamed all files and directories contained therein will need to have their encrypted filenames re encrypted which can be an expensive operation This option should be disabled if heavily populated directories will be renamed often br br br Per file IV initialization vector br When enabled each file is encrypted with a random byte initialization vector which is stored within the encrypted file in the source directory If this option is disabled each file is encrypted with the same initialization vector which can make the volume key easier to break br Enabling this option makes the filesystem more secure at the cost of an additional bytes per file br br br External IV chaining br Causes the file data initialization vector to be derived from the filename s initialization vector chain The same data will be encrypted differently given a different filename or directory br Consequently renaming a file when this mode is enabled requires that either the file s random initialization vector be offset by the change in the filename initialization vector chain or the data be re encoded The authors of EncFS have chosen the former route as it is considerably faster especially for large files br br br Filename to IV header chaining br Makes encoding depend on the full pathname So renaming or moving means reencoding Hardlinks are not supported br br br Block MAC headers br Stores a checksum with each encrypted block causing corruption or modification of the encrypted files to be detected by EncFS The checksum blockMACBytes is bytes and optionally up to additional bytes of random data blockMACRandBytes can be added to each block to prevent two blocks with the same unencrypted data from having the same checksum This option creates a large amount of CPU overhead as each block s checksum must be calculated when data is read to verify integrity or written to update the checksum br br br See also br br Disk encryption br Filesystem level encryption br List of cryptographic file systems br List of file systems br br br br br br External links br Encfs manpage br Safe another per file implementation for Windows and Mac OS X with no kernel mode driver slower but fully open source br Boxcryptor Proprietary software based on EncFS for Windows Android and iOS Archived at the Wayback Machine br EncFSMP Implementation that runs on Windows and Mac OS X