title: OpenSSH
id: 25490426
OpenSSH also known as OpenBSD Secure Shell is a suite of secure networking utilities based on the Secure Shell SSH protocol which provides a secure channel over an unsecured network in a client server architecture br OpenSSH started as a fork of the free SSH program developed by Tatu Yl nen later versions of Yl nen s SSH were proprietary software offered by SSH Communications Security OpenSSH was first released in and is currently developed as part of the OpenBSD operating system br OpenSSH is not a single computer program but rather a suite of programs that serve as alternatives to unencrypted protocols like Telnet and FTP OpenSSH is integrated into several operating systems namely Microsoft Windows macOS and most Linux operating systems while the portable version is available as a package in other systems br br br History br OpenBSD Secure Shell was created by OpenBSD developers as an alternative to the original SSH software by Tatu Yl nen which is now proprietary software Although source code is available for the original SSH various restrictions are imposed on its use and distribution OpenSSH was created as a fork of Bj rn Gr nvall s OSSH that itself was a fork of Tatu Yl nen s original free SSH release which was the last one having a license suitable for forking The OpenSSH developers claim that their application is more secure than the original due to their policy of producing clean and audited code and because it is released under the BSD license the open source license to which the word open in the name refers br OpenSSH first appeared in OpenBSD The first portable release was made in October Developments since then have included the addition of ciphers e g ChaCha Poly in of January cutting the dependency on OpenSSL October and an extension to facilitate public key discovery and rotation for trusted hosts for transition from DSA to Ed public host keys version of March br On October Microsoft announced that OpenSSH will be natively supported on Microsoft Windows and accessible through PowerShell releasing an early implementation and making the code publicly available OpenSSH based client and server programs have been included in Windows since version The SSH client and key agent are enabled and available by default and the SSH server is an optional Feature on Demand br In October protection for private keys at rest in RAM against speculation and memory side channel attacks were added in OpenSSH br br br Development br br OpenSSH is developed as part of the OpenBSD operating system Rather than including changes for other operating systems directly into OpenSSH a separate portability infrastructure is maintained by the OpenSSH Portability Team and portable releases are made periodically This infrastructure is substantial partly because OpenSSH is required to perform authentication a capability that has many varying implementations This model is also used for other OpenBSD projects such as OpenNTPD br The OpenSSH suite includes the following command line utilities and daemons br br scp a replacement for rcp br sftp a replacement for ftp to copy files between computers br ssh a replacement for rlogin rsh and telnet to allow shell access to a remote machine br ssh add and ssh agent utilities to ease authentication by holding keys ready and avoid the need to enter passphrases every time they are used br ssh keygen a tool to inspect and generate the RSA DSA and elliptic curve keys that are used for user and host authentication br ssh keyscan which scans a list of hosts and collects their public keys br sshd the SSH server daemon br The OpenSSH server can authenticate users using the standard methods supported by the SSH protocol with a password public key authentication using per user keys host based authentication which is a secure version of rlogin s host trust relationships using public keys keyboard interactive a generic challenge response mechanism which is often used for simple password authentication but which can also make use of stronger authenticators such as tokens and Kerberos GSSAPI The server makes use of authentication methods native to the host operating system this can include using the BSD Authentication system or pluggable authentication modules PAM to enable additional authentication through methods such as one time passwords However this occasionally has side effects when using PAM with OpenSSH it must be run as root as root privileges are typically required to operate PAM OpenSSH versions after September allow PAM to be disabled at run time so regular users can run sshd instances br On OpenBSD OpenSSH uses a dedicated sshd user by default to drop privileges and perform privilege separation in accordance with the principle of least privilege applied throughout the operating system including the Xenocara X server br br br Features br OpenSSH includes the ability to set up a secured channel through which data sent to local client side Unix domain sockets or local client side TCP ports may be forwarded sent across the secured channel for routing on the server side when this forwarding is set up the server is instructed to send that forwarded data to some socket or TCP host port the host could be the server itself localhost or the host may be some other computer so that it appears to the other computer that the server is the originator of the data The forwarding of data is bidirectional meaning that any return communication is itself forwarded back to the client side in the same manner this is known as an SSH tunnel and it can be used to multiplex additional TCP connections over a single SSH connection since to conceal connections to encrypt protocols that are otherwise unsecured and to circumvent firewalls by sending receiving all manner of data through one port that is allowed by the firewall For example an X Window System tunnel may be created automatically when using OpenSSH to connect to a remote host and other protocols such as HTTP and VNC may be forwarded easily br Tunneling a TCP encapsulating payload such as PPP over a TCP based connection such as SSH s port forwarding is known as TCP over TCP and doing so can induce a dramatic loss in transmission performance a problem known as TCP meltdown which is why virtual private network software may instead use for the tunnel connection a protocol simpler than TCP However this is often not a problem when using OpenSSH s port forwarding because many use cases do not entail TCP over TCP tunneling the meltdown is avoided because the OpenSSH client processes the local client side TCP connection in order to get to the actual payload that is being sent and then sends that payload directly through the tunnel s own TCP connection to the server side where the OpenSSH server similarly unwraps the payload in order to wrap it up again for routing to its final destination br In addition some third party software includes support for tunnelling over SSH These include DistCC CVS rsync and Fetchmail On some operating systems remote file systems can be mounted over SSH using tools such as sshfs using FUSE br An ad hoc SOCKS proxy server may be created using OpenSSH This allows more flexible proxying than is possible with ordinary port forwarding br Beginning with version OpenSSH implements an OSI layer tun based VPN This is the most flexible of OpenSSH s tunnelling capabilities allowing applications to transparently access remote network resources without modifications to make use of SOCKS br br br Supported public key types br OpenSSH supports the following public key types br br ssh dss disabled at run time since OpenSSH released in br ssh rsa disabled at run time since OpenSSH released in br ecdsa sha nistp since OpenSSH released in br ecdsa sha nistp since OpenSSH br ecdsa sha nistp since OpenSSH br ssh ed since OpenSSH released in br rsa sha since OpenSSH released in br rsa sha since OpenSSH br ecdsa sk since OpenSSH released in br ed sk since OpenSSH br NTRU Prime x since OpenSSH released in br br br Vulnerabilities br br Before version of OpenSSH it was possible for an attacker to recover up to bits of plaintext with a success probability of The vulnerability was related to the CBC encryption mode The AES CTR mode and arcfour ciphers are not vulnerable to this attack br A local privilege escalation vulnerability existed in OpenSSH to CVE due to world writable TTY devices which was believed to be a denial of service vulnerability With the use of the TIOCSTI ioctl it was possible for authenticated users to inject characters into other users terminals and execute arbitrary commands on Linux br Malicious or compromised OpenSSH servers could read sensitive information on the client such as private login keys for other systems using a vulnerability that relies on the undocumented connection resuming feature of the OpenSSH client which is called roaming enabled by default on the client but not supported on the OpenSSH server This applies to versions released on March to of the OpenSSH client and was fixed in OpenSSH p released on January CVE numbers associated to this vulnerability are CVE information leak and CVE buffer overflow br On March a serious supply chain attack on XZ Utils has been reported targeting indirectly the OpenSSH server sshd running on Linux The OpenSSH code is not directly concerned the backdoor is caused by the dependencies on liblzma via libsystemd applied by a tierce patch applied by various Linux distributions br On July the RegreSSHion security vulnerability was disclosed which could enable an remote attacker to cause OpenSSH to execute arbitrary code and gain full root access It was inadvertently introduced in prior OpenSSH version p in October and was patched following version p br br br Trademark br In February Tatu Yl nen chairman and CTO of SSH Communications Security informed the OpenSSH development mailing list that the company intended to assert its ownership of the SSH and Secure Shell trademarks and sought to change references to the protocol to SecSH or secsh in order to maintain control of the SSH name He proposed that OpenSSH change its name in order to avoid a lawsuit a suggestion that developers resisted OpenSSH developer Damien Miller replied urging Yl nen to reconsider arguing that SSH had long since been a generic trademark br At the time SSH Secure Shell and ssh had appeared in documents proposing the protocol as an open standard Without marking these within the proposal as registered trademarks Yl nen ran the risk of relinquishing all exclusive rights to the name as a means of describing the protocol Improper use of a trademark or allowing others to use a trademark incorrectly results in the trademark becoming a generic term like Kleenex or Aspirin which opens the mark to use by others After study of the USPTO trademark database many online pundits opined that the term ssh was not trademarked merely the logo using the lower case letters ssh In addition the six years between the company s creation and the time when it began to defend its trademark and that only OpenSSH was receiving threats of legal repercussions weighed against the trademark s validity br Both developers of OpenSSH and Yl nen himself were members of the IETF working group developing the new standard after several meetings this group denied Yl nen s request to rename the protocol citing concerns that it would set a bad precedent for other trademark claims against the IETF The participants argued that both Secure Shell and SSH were generic terms and could not be trademarks br br br See also br br Comparison of SSH clients br Comparison of SSH servers br SSH File Transfer Protocol SFTP br br br Notes br br br br br br External links br br Official website br ssh OpenBSD General Commands Manual br sshd OpenBSD System Manager s Manual br OpenSSH at the Super User s BSD Cross Reference BXR SU OpenGrok br SSH OpenSSH Windows CMD SS com