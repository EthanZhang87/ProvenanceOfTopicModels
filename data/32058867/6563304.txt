title: Linux Unified Key Setup
id: 6563304
The Linux Unified Key Setup LUKS is a disk encryption specification created by Clemens Fruhwirth in and originally intended for Linux br LUKS implements a platform independent standard on disk format for use in various tools This facilitates compatibility and interoperability among different programs and operating systems and assures that they all implement password management in a secure and documented manner br br br Description br LUKS is used to encrypt a block device The contents of the encrypted device are arbitrary and therefore any filesystem can be encrypted including swap partitions There is an unencrypted header at the beginning of an encrypted volume which allows up to LUKS or LUKS encryption keys to be stored along with encryption parameters such as cipher type and key size br The presence of this header is a major difference between LUKS and dm crypt since the header allows multiple different passphrases to be used with the ability to change and remove them If the header is lost or corrupted the device will no longer be decryptable br Encryption is done with a multi layer approach First the block device is encrypted using a master key This master key is encrypted with each active user key User keys are derived from passphrases FIDO security keys TPMs or smart cards The multi layer approach allows users to change their passphrase without re encrypting the whole block device Key slots can contain information to verify user passphrases or other types of keys br There are two versions of LUKS with LUKS featuring resilience to header corruption and using the Argon key derivation function by default whereas LUKS uses PBKDF Conversion between both versions of LUKS is possible in certain situations but some features may not be available with LUKS such as Argon LUKS uses JSON as a metadata format br Available cryptographic algorithms depend on individual kernel support of the host Libgcrypt can be used as a backend for hashing which supports all of its algorithms It is up to the operating system vendor to choose the default algorithm LUKS makes use of an anti forensics technique called AFsplitter allowing for secure data erasure and protection br br br LUKS with LVM br Logical Volume Management can be used alongside LUKS br br LVM on LUKS br When LVM is used on an unlocked LUKS container all underlying partitions which are LVM logical volumes can be encrypted with a single key This is akin to splitting a LUKS container into multiple partitions The LVM structure is not visible until the disk is decrypted br LUKS on LVM br When LUKS is used to encrypt LVM logical volumes an encrypted volume can span multiple devices The underlying LVM volume group is visible without decrypting the encrypted volumes br br br Full disk encryption br br A common usage of LUKS is to provide full disk encryption which involves encrypting the root partition of an operating system installation which protects the operating system files from being tampered with or read by unauthorized parties br On a Linux system the boot partition boot may be encrypted if the bootloader itself supports LUKS e g GRUB This is undertaken to prevent tampering with the Linux kernel However the first stage bootloader or an EFI system partition cannot be encrypted see Full disk encryption The boot key problem br On mobile Linux systems postmarketOS has developed osk sdl to allow a full disk encrypted system to be unlocked using a touch screen br For systems running systemd the systemd homed component can be used to encrypt individual home directories br br br Operating system support br The reference implementation for LUKS operates on Linux and is based on an enhanced version of cryptsetup using dm crypt as the disk encryption backend Under Microsoft Windows LUKS encrypted disks can be used via the Windows Subsystem for Linux Formerly this was possible with LibreCrypt which currently has fundamental security holes and which succeeded FreeOTFE formerly DoxBox br DragonFly BSD supports LUKS br br br Installer support br Several Linux distributions allow the root device to be encrypted upon OS installation These installers include Calamares Ubiquity Debian Installer and more br br br On disk format br LUKS headers are backward compatible newer versions of LUKS are able to read headers of previous versions br br br LUKS br br br LUKS br LUKS devices begin with a binary header intended to allow recognition and fast detection by blkid which also contains information such as checksums All strings used in a LUKS header are null terminated strings Directly after the binary header comes the JSON area containing the objects config configuration keyslots digests segments describes encrypted areas on the disk and tokens containing extra metadata br The binary format for regular luks keyslots are mostly similar to their predecessor with the addition of different per keyslot algorithms Another type of key exists to allow redundancy in the case that a re encryption process is interrupted br br br Examples br Cryptsetup is the reference implementation of the LUKS frontend br To encrypt a device with the path dev sda br br To unlock an encrypted device where name is the mapped device name br br br Re encrypting br Re encrypting a LUKS container can be done either with the cryptsetup tool itself or with a legacy tool called cryptsetup reencrypt These tools can also be used to add encryption to an existing unencrypted filesystem or remove encryption from a block device br Both methods have similar syntax br br br See also br Comparison of disk encryption software br br br br br br External links br Official website br Frequently Asked Questions FAQ br LibreCrypt Implementation for Windows br LUKS Specification br LUKS Specification