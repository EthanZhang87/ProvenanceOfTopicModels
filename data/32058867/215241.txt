title: Base64
id: 215241
In computer programming Base is a group of binary to text encoding schemes that transforms binary data into a sequence of printable characters limited to a set of unique characters More specifically the source binary data is taken bits at a time then this group of bits is mapped to one of unique characters br As with all binary to text encoding schemes Base is designed to carry data stored in binary formats across channels that only reliably support text content Base is particularly prevalent on the World Wide Web where one of its uses is the ability to embed image files or other binary assets inside textual assets such as HTML and CSS files br Base is also widely used for sending e mail attachments because SMTP in its original form was designed to transport bit ASCII characters only Encoding an attachment as Base before sending and then decoding when received assures older SMTP servers will not interfere with the attachment br Base encoding causes an overhead of relative to the size of the original binary data by the encoding itself up to more by the inserted line breaks br br br Design br The particular set of characters chosen to represent the digit values for the base varies between implementations The general strategy is to choose characters that are common to most encodings and that are also printable This combination leaves the data unlikely to be modified in transit through information systems such as email that were traditionally not bit clean For example MIME s Base implementation uses A Z a z and for the first values Other variations share this property but differ in the symbols chosen for the last two values an example is UTF br The earliest instances of this type of encoding were created for dial up communication between systems running the same OS for example uuencode for UNIX and BinHex for the TRS later adapted for the Macintosh and could therefore make more assumptions about what characters were safe to use For instance uuencode uses uppercase letters digits and many punctuation characters but no lowercase br br br Base table from RFC br This is the Base alphabet defined in RFC See also Variants summary table br br br Examples br The example below uses ASCII text for simplicity but this is not a typical use case as it can already be safely transferred across all systems that can handle Base The more typical use is to encode binary data such as an image the resulting Base data will only contain different ASCII characters all of which can reliably be transferred across systems that may corrupt the raw source bytes br Here is a well known idiom from distributed computing br br When the quote without trailing whitespace is encoded into Base it is represented as a byte sequence of bit padded ASCII characters encoded in MIME s Base scheme as follows newlines and white spaces may be present anywhere but are to be ignored on decoding br br In the above quote the encoded value of Man is TWFu Encoded in ASCII the characters M a and n are stored as the byte values and which are the bit binary values and These three values are joined together into a bit string producing Groups of bits bits have a maximum of different binary values are converted into individual numbers from start to end in this case there are four numbers in a bit string which are then converted into their corresponding Base character values br As this example illustrates Base encoding converts three octets into four encoded characters br br padding characters might be added to make the last encoded block contain four Base characters br Hexadecimal to octal transformation is useful to convert between binary and Base Such conversion is available for both advanced calculators and programming languages For example the hexadecimal representation of the bits above is D E The octal representation is Those octal digits can be split into pairs and each pair is converted to decimal to yield Using those four decimal numbers as indices for the Base alphabet the corresponding ASCII characters are TWFu br If there are only two significant input octets e g Ma or when the last input group contains only two octets all bits will be captured in the first three Base digits bits the two least significant bits of the last content bearing bit block will turn out to be zero and discarded on decoding along with the succeeding padding character br br If there is only one significant input octet e g M or when the last input group contains only one octet all bits will be captured in the first two Base digits bits the four least significant bits of the last content bearing bit block will turn out to be zero and discarded on decoding along with the succeeding two padding characters br br There are also interactive tools for visualizing the encoding step by step from plain text to base br br br Output padding br Because Base is a six bit encoding and because the decoded values are divided into bit octets every four characters of Base encoded text sextets bits represents three octets of unencoded text or data octets bits This means that when the length of the unencoded input is not a multiple of three the encoded output must have padding added so that its length is a multiple of four The padding character is which indicates that no further bits are needed to fully encode the input This is different from A which means that the remaining bits are all zeros The example below illustrates how truncating the input of the above quote changes the output padding br br The padding character is not essential for decoding since the number of missing bytes can be inferred from the length of the encoded text In some implementations the padding character is mandatory while for others it is not used An exception in which padding characters are required is when multiple Base encoded files have been concatenated br br br Decoding Base with padding br When decoding Base text four characters are typically converted back to three bytes The only exceptions are when padding characters exist A single indicates that the four characters will decode to only two bytes while indicates that the four characters will decode to only a single byte For example br br Another way to interpret the padding character is to consider it as an instruction to discard trailing bits from the bit string each time a is encountered For example when bGlnaHQgdw is decoded we convert each character except the trailing occurrences of into their corresponding bit representation and then discard trailing bits for the first and another trailing bits for the other In this instance we would get bits from the d and another bits from the w for a bit string of length but since we remove bits for each for a total of bits the dw ends up producing bits byte when decoded br br br Decoding Base without padding br Without padding after normal decoding of four characters to three bytes over and over again fewer than four encoded characters may remain In this situation only two or three characters can remain A single remaining encoded character is not possible because a single Base character only contains bits and bits are required to create a byte so a minimum of two Base characters are required The first character contributes bits and the second character contributes its first bits For example br br Decoding without padding is not performed consistently among decoders In addition allowing padless decoding by definition allows multiple strings to decode into the same set of bytes which can be a security risk br br br Implementations and history br br br Variants summary table br Implementations may have some constraints on the alphabet used for representing some bit patterns This notably concerns the last two characters used in the alphabet at positions and and the character used for padding which may be mandatory in some protocols or removed in others The table below summarizes these known variants and provides links to the subsections below br br br Privacy enhanced mail br The first known standardized use of the encoding now called MIME Base was in the Privacy enhanced Electronic Mail PEM protocol proposed by RFC in PEM defines a printable encoding scheme that uses Base encoding to transform an arbitrary sequence of octets to a format that can be expressed in short lines of bit characters as required by transfer protocols such as SMTP br The current version of PEM specified in RFC uses a character alphabet consisting of upper and lower case Roman letters A Z a z the numerals and the and symbols The symbol is also used as a padding suffix The original specification RFC additionally used the symbol to delimit encoded but unencrypted data within the output stream br To convert data to PEM printable encoding the first byte is placed in the most significant eight bits of a bit buffer the next in the middle eight and the third in the least significant eight bits If there are fewer than three bytes left to encode or in total the remaining buffer bits will be zero The buffer is then used six bits at a time most significant first as indices into the string ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz and the indicated character is output br The process is repeated on the remaining data until fewer than four octets remain If three octets remain they are processed normally If fewer than three octets bits are remaining to encode the input data is right padded with zero bits to form an integral multiple of six bits br After encoding the non padded data if two octets of the bit buffer are padded zeros two characters are appended to the output if one octet of the bit buffer is filled with padded zeros one character is appended This signals the decoder that the zero bits added due to padding should be excluded from the reconstructed data This also guarantees that the encoded output length is a multiple of bytes br PEM requires that all encoded lines consist of exactly printable characters with the exception of the last line which may contain fewer printable characters Lines are delimited by whitespace characters according to local platform specific conventions br br br MIME br br The MIME Multipurpose Internet Mail Extensions specification lists Base as one of two binary to text encoding schemes the other being quoted printable MIME s Base encoding is based on that of the RFC version of PEM it uses the same character alphabet and encoding mechanism as PEM and uses the symbol for output padding in the same way as described at RFC br MIME does not specify a fixed length for Base encoded lines but it does specify a maximum line length of characters Additionally it specifies that any character outside the standard set of encoding characters For example CRLF sequences must be ignored by a compliant decoder although most implementations use a CR LF newline pair to delimit encoded lines br Thus the actual length of MIME compliant Base encoded binary data is usually about of the original data length though for very short messages the overhead can be much higher due to the overhead of the headers Very roughly the final size of Base encoded binary data is equal to times the original data size bytes for headers The size of the decoded data can be approximated with this formula br br bytes string length encoded string br br br UTF br br UTF described first in RFC which was later superseded by RFC introduced a system called modified Base This data encoding scheme is used to encode UTF as ASCII characters for use in bit transports such as SMTP It is a variant of the Base encoding used in MIME br The Modified Base alphabet consists of the MIME Base alphabet but does not use the padding character UTF is intended for use in mail headers defined in RFC and the character is reserved in that context as the escape character for quoted printable encoding Modified Base simply omits the padding and ends immediately after the last Base digit containing useful bits leaving up to three unused bits in the last Base digit br br br OpenPGP br br OpenPGP described in RFC describes Radix encoding also known as ASCII armor Radix is identical to the Base encoding described by MIME with the addition of an optional bit CRC The checksum is calculated on the input data before encoding the checksum is then encoded with the same Base algorithm and prefixed by the symbol as the separator appended to the encoded output data br br br RFC br RFC entitled The Base Base and Base Data Encodings is an informational non normative memo that attempts to unify the RFC and RFC specifications of Base encodings alternative alphabet encodings and the Base which is seldom used and Base encodings br Unless implementations are written to a specification that refers to RFC and specifically requires otherwise RFC forbids implementations from generating messages containing characters outside the encoding alphabet or without padding and it also declares that decoder implementations must reject data that contain characters outside the encoding alphabet br br br RFC br RFC obsoletes RFC and focuses on Base br br This document describes the commonly used Base Base and Base encoding schemes It also discusses the use of line feeds in encoded data the use of padding in encoded data the use of non alphabet characters in encoded data use of different encoding alphabets and canonical encodings br br br URL applications br Base encoding can be helpful when fairly lengthy identifying information is used in an HTTP environment For example a database persistence framework for Java objects might use Base encoding to encode a relatively large unique id generally bit UUIDs into a string for use as an HTTP parameter in HTTP forms or HTTP GET URLs Also many applications need to encode binary data in a way that is convenient for inclusion in URLs including in hidden web form fields and Base is a convenient encoding to render them in a compact way br Using standard Base in URL requires encoding of and characters into special percent encoded hexadecimal sequences becomes B becomes F and becomes D which makes the string unnecessarily longer br For this reason modified Base for URL variants exist such as base url in RFC where the and characters of standard Base are respectively replaced by and so that using URL encoders decoders is no longer necessary and has no effect on the length of the encoded value leaving the same encoded form intact for use in relational databases web forms and object identifiers in general A popular site to make use of such is YouTube Some variants allow or require omitting the padding signs to avoid them being confused with field separators or require that any such padding be percent encoded Some libraries will encode to potentially exposing applications to relative path attacks when a folder name is encoded from user data br br br Javascript DOM Web API br The atob and btoa JavaScript methods defined in the HTML draft specification provide Base encoding and decoding functionality to web pages The btoa method outputs padding characters but these are optional in the input of the atob method br br br Other applications br br Base can be used in a variety of contexts br br Base can be used to transmit and store text that might otherwise cause delimiter collision br Base is used to encode character strings in LDAP Data Interchange Format files br Base is often used to embed binary data in an XML file using a syntax similar to data encoding base data e g favicons in Firefox s exported bookmarks html br Base is used to encode binary files such as images within scripts to avoid depending on external files br Base can be used to embed PDF files in HTML pages br The data URI scheme can use Base to represent file contents For instance background images and fonts can be specified in a CSS stylesheet file as data URIs instead of being supplied in separate files br Although not part of the official specification for the SVG format some viewers can interpret Base when used for embedded elements such as raster images inside SVG files br Base can be used to store transmit relatively small amounts of binary data via a computer s text clipboard functionality especially in cases where the information doesn t warrant being permanently saved or when information must be quickly sent between a wide variety of different potentially incompatible programs An example is the representation of the public keys of cryptocurrency recipients as Base encoded text strings which can be easily copied and pasted into users wallet software br Binary data that must be quickly verified by humans as a safety mechanism such as file checksums or key fingerprints is often represented in Base for easy checking sometimes with additional formattings such as separating each group of four characters in the representation of a PGP key fingerprint with a space br QR codes which contain binary data will sometimes store it encoded in Base rather than simply storing the raw binary data as there is a stronger guarantee that all QR code readers will accurately decode text as well as the fact that some devices will more readily save text from a QR code than potentially malicious binary data br br br Applications not compatible with RFC Base br Some applications use a Base alphabet that is significantly different from the alphabets used in the most common Base variants see Variants summary table above br br The Uuencoding alphabet includes no lowercase characters instead using ASCII codes space through consecutively Uuencoding uses the alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZ Avoiding all lower case letters was helpful because many older printers only printed uppercase Using consecutive ASCII characters saved computing power because it was only necessary to add without requiring a lookup table Its use of most punctuation characters and the space character may limit its usefulness in some applications such as those that use these characters as syntax br BinHex HQX which was used within the classic Mac OS excludes some visually confusable characters like O g and o Its alphabet includes additional punctuation characters It uses the alphabet ABCDEFGHIJKLMNPQRSTUVXYZ abcdefhijklmpqr br A UTF environment can use non synchronized continuation bytes as base b xxxxxx See UTF Self synchronization br Several other applications use alphabets similar to the common variations but in a different order br Unix stores password hashes computed with crypt in the etc passwd file using an encoding called B crypt s alphabet puts the punctuation and before the alphanumeric characters crypt uses the alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz Padding is not used br The GEDCOM standard for genealogical data interchange encodes multimedia files in its text line hierarchical file format GEDCOM uses the same alphabet as crypt which is ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz br bcrypt hashes are designed to be used in the same way as traditional crypt hashes but bcrypt s alphabet is in a different order than crypt s bcrypt uses the alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz br Xxencoding uses a mostly alphanumeric character set similar to crypt but using and rather than and Xxencoding uses the alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz br PACK used with some terminal node controllers uses an alphabet from x to x f br Bash supports numeric literals in Base Bash uses the alphabet abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ br One issue with the RFC alphabet is that when a sorted list of ASCII encoded strings is Base transformed and sorted again the order of elements changes This is because the padding character and the characters in the substitution alphabet are not ordered by ASCII character value which can be seen by using the following sample table s sort buttons Alphabets like unpadded B address this br br br See also br BITMIME br Ascii also called Base br Base br Base br Base br Base br Binary to text encoding for a comparison of various encoding algorithms br Binary number br URL br br br 