title: React (JavaScript library)
id: 44926137
React also known as React js or ReactJS is a free and open source front end JavaScript library for building user interfaces based on components by Facebook Inc It is maintained by Meta formerly Facebook and a community of individual developers and companies br React can be used to develop single page mobile or server rendered applications with frameworks like Next js Because React is only concerned with the user interface and rendering components to the DOM React applications often rely on libraries for routing and other client side functionality A key advantage of React is that it only rerenders those parts of the page that have changed avoiding unnecessary rerendering of unchanged DOM elements br br br Notable features br br br Declarative br React adheres to the declarative programming paradigm Developers design views for each state of an application and React updates and renders components when data changes This is in contrast with imperative programming br br br Components br React code is made of entities called components These components are modular and reusable React applications typically consist of many layers of components The components are rendered to a root element in the DOM using the React DOM library When rendering a component values are passed between components through props short for properties Values internal to a component are called its state br The two primary ways of declaring components in React are through function components and class components br br br Function components br Function components are declared with a function using JavaScript function syntax or an arrow function expression that accepts a single props argument and returns JSX From React v onwards function components can use state with the useState Hook br br br React Hooks br On February React was released to the public introducing React Hooks Hooks are functions that let developers hook into React state and lifecycle features from function components Notably Hooks do not work inside classes they let developers use more features of React without classes br React provides several built in hooks such as useState useContext useReducer useMemo and useEffect Others are documented in the Hooks API Reference useState and useEffect which are the most commonly used are for controlling state and side effects respectively br br br Rules of hooks br There are two rules of hooks which describe the characteristic code patterns that hooks rely on br br Only call hooks at the top level don t call hooks from inside loops conditions or nested statements so that the hooks are called in the same order each render br Only call hooks from React functions don t call hooks from plain JavaScript functions so that stateful logic stays with the component br Although these rules can t be enforced at runtime code analysis tools such as linters can be configured to detect many mistakes during development The rules apply to both usage of Hooks and the implementation of custom Hooks which may call other Hooks br br br Server components br React server components or RSC s are function components that run exclusively on the server The concept was first introduced in the talk Data Fetching with Server Components Though a similar concept to Server Side Rendering RSCs do not send corresponding JavaScript to the client as no hydration occurs As a result they have no access to hooks However they may be asynchronous function allowing them to directly perform asynchronous operations br br Currently server components are most readily usable with Next js br br br Class components br Class components are declared using ES classes They behave the same way that function components do but instead of using Hooks to manage state and lifecycle events they use the lifecycle methods on the React Component base class br br The introduction of React Hooks with React in February allowed developers to manage state and lifecycle behaviors within functional components reducing the reliance on class components br This trend aligns with the broader industry movement towards functional programming and modular design As React continues to evolve it s essential for developers to consider the benefits of functional components and React Hooks when building new applications or refactoring existing ones br br br Routing br React itself does not come with built in support for routing React is primarily a library for building user interfaces and it doesn t include a full fledged routing solution out of the box Third party libraries can be used to handle routing in React applications It allows the developer to define routes manage navigation and handle URL changes in a React friendly way br br br Virtual DOM br Another notable feature is the use of a virtual Document Object Model or Virtual DOM React creates an in memory data structure cache computes the resulting differences and then updates the browser s displayed DOM efficiently This process is called reconciliation This allows the programmer to write code as if the entire page is rendered on each change while React only renders the components that actually change This selective rendering provides a major performance boost br br br Updates br When ReactDOM render is called again for the same component and target React represents the new UI state in the Virtual DOM and determines which parts if any of the living DOM needs to change br br br Lifecycle methods br Lifecycle methods for class based components use a form of hooking that allows the execution of code at set points during a component s lifetime br br ShouldComponentUpdate allows the developer to prevent unnecessary re rendering of a component by returning false if a render is not required br componentDidMount is called once the component has mounted the component has been created in the user interface often by associating it with a DOM node This is commonly used to trigger data loading from a remote source via an API br componentDidUpdate is invoked immediately after updating occurs br componentWillUnmount is called immediately before the component is torn down or unmounted This is commonly used to clear resource demanding dependencies to the component that will not simply be removed with the unmounting of the component e g removing any setInterval instances that are related to the component or an eventListener set on the document because of the presence of the component br render is the most important lifecycle method and the only required one in any component It is usually called every time the component s state is updated which should be reflected in the user interface br br br JSX br br JSX or JavaScript XML is an extension to the JavaScript language syntax Similar in appearance to HTML JSX provides a way to structure component rendering using syntax familiar to many developers React components are typically written using JSX although they do not have to be components may also be written in pure JavaScript JSX is similar to another extension syntax created by Facebook for PHP called XHP br An example of JSX code br br br Architecture beyond HTML br The basic architecture of React applies beyond rendering HTML in the browser For example Facebook has dynamic charts that render to canvas tags and Netflix and PayPal use universal loading to render identical HTML on both the server and client br br br Server side rendering br br Server side rendering SSR refers to the process of rendering a client side JavaScript application on the server rather than in the browser This can improve the performance of the application especially for users on slower connections or devices br With SSR the initial HTML that is sent to the client includes the fully rendered UI of the application This allows the client s browser to display the UI immediately rather than having to wait for the JavaScript to download and execute before rendering the UI br React supports SSR which allows developers to render React components on the server and send the resulting HTML to the client This can be useful for improving the performance of the application as well as for search engine optimization purposes br br br Common idioms br React does not attempt to provide a complete application library It is designed specifically for building user interfaces and therefore does not include many of the tools some developers might consider necessary to build an application This allows the choice of whichever libraries the developer prefers to accomplish tasks such as performing network access or local data storage Common patterns of usage have emerged as the library matures br br br Unidirectional data flow br To support React s concept of unidirectional data flow which might be contrasted with AngularJS s bidirectional flow the Flux architecture was developed as an alternative to the popular model view controller architecture Flux features actions which are sent through a central dispatcher to a store and changes to the store are propagated back to the view When used with React this propagation is accomplished through component properties Since its conception Flux has been superseded by libraries such as Redux and MobX br Flux can be considered a variant of the observer pattern br A React component under the Flux architecture should not directly modify any props passed to it but should be passed callback functions that create actions which are sent by the dispatcher to modify the store The action is an object whose responsibility is to describe what has taken place for example an action describing one user following another might contain a user id a target user id and the type USER FOLLOWED ANOTHER USER The stores which can be thought of as models can alter themselves in response to actions received from the dispatcher br This pattern is sometimes expressed as properties flow down actions flow up Many implementations of Flux have been created since its inception perhaps the most well known being Redux which features a single store often called a single source of truth br In February useReducer was introduced as a React hook in the release It provides an API that is consistent with Redux enabling developers to create Redux like stores that are local to component states br br br Future development br Project status can be tracked via the core team discussion forum However major changes to React go through the Future of React repository issues and pull requests This enables the React community to provide feedback on new potential features experimental APIs and JavaScript syntax improvements br br br History br React was created by Jordan Walke a software engineer at Meta who initially developed a prototype called F Bolt before later renaming it to FaxJS This early version is documented in Jordan Walke s GitHub repository Influences for the project included XHP an HTML component library for PHP br React was first deployed on Facebook s News Feed in and subsequently integrated into Instagram in In May at JSConf US the project was officially open sourced marking a significant turning point in its adoption and growth br React Native which enables native Android iOS and UWP development with React was announced at Facebook s React Conf in February and open sourced in March br On April Facebook announced React Fiber a new set of internal algorithms for rendering as opposed to React s old rendering algorithm Stack React Fiber was to become the foundation of any future improvements and feature development of the React library The actual syntax for programming with React does not change only the way that the syntax is executed has changed React s old rendering system Stack was developed at a time when the focus of the system on dynamic change was not understood Stack was slow to draw complex animation for example trying to accomplish all of it in one chunk Fiber breaks down animation into segments that can be spread out over multiple frames Likewise the structure of a page can be broken into segments that may be maintained and updated separately JavaScript functions and virtual DOM objects are called fibers and each can be operated and updated separately allowing for smoother on screen rendering br On September React was released to the public br On August the React team announced the first release candidate for React v notable as the first major release without major changes to the React developer facing API br On March React was released which introduced a new concurrent renderer automatic batching and support for server side rendering with Suspense br br br Licensing br The initial public release of React in May used the Apache License In October React replaced this with the clause BSD license and added a separate PATENTS text file that permits usage of any Facebook patents related to the software The license granted hereunder will terminate automatically and without notice for anyone that makes any claim including by filing any lawsuit assertion or other action alleging a direct indirect or contributory infringement or inducement to infringe any patent i by Facebook or any of its subsidiaries or affiliates whether or not such claim is related to the Software ii by any party if such claim arises in whole or in part from any software product or service of Facebook or any of its subsidiaries or affiliates whether or not such claim is related to the Software or iii by any party relating to the Software or b that any right in any patent claim of Facebook is invalid or unenforceable This unconventional clause caused some controversy and debate in the React user community because it could be interpreted to empower Facebook to revoke the license in many scenarios for example if Facebook sues the licensee prompting them to take other action by publishing the action on a blog or elsewhere Many expressed concerns that Facebook could unfairly exploit the termination clause or that integrating React into a product might complicate a startup company s future acquisition br Based on community feedback Facebook updated the patent grant in April to be less ambiguous and more permissive br br The license granted hereunder will terminate automatically and without notice if you or any of your subsidiaries corporate affiliates or agents initiate directly or indirectly or take a direct financial interest in any Patent Assertion i against Facebook or any of its subsidiaries or corporate affiliates ii against any party if such Patent Assertion arises in whole or in part from any software technology product or service of Facebook or any of its subsidiaries or corporate affiliates or iii against any party relating to the Software A Patent Assertion is any lawsuit or other action alleging direct indirect or contributory infringement or inducement to infringe any patent including a cross claim or counterclaim br The Apache Software Foundation considered this licensing arrangement to be incompatible with its licensing policies as it passes along risk to downstream consumers of our software imbalanced in favor of the licensor not the licensee thereby violating our Apache legal policy of being a universal donor and are not a subset of those found in the Apache License and they cannot be sublicensed as Apache License In August Facebook dismissed the Apache Foundation s downstream concerns and refused to reconsider their license The following month WordPress decided to switch its Gutenberg and Calypso projects away from React br On September Facebook announced that the following week it would re license Flow Jest React and Immutable js under a standard MIT License the company stated that React was the foundation of a broad ecosystem of open source software for the web and that they did not want to hold back forward progress for nontechnical reasons br On September React was released with the MIT license The MIT license change has also been backported to the x release line with React br br br See also br br Angular web framework br Backbone js br Ember js br Gatsby JavaScript framework br Next js br TypeScript br Svelte br Vue js br Comparison of JavaScript based web frameworks br Web Components br br br br br br Bibliography br br br External links br Official website br Github