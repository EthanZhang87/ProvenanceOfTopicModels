title: Erlang (programming language)
id: 9646
Erlang UR lang is a general purpose concurrent functional high level programming language and a garbage collected runtime system The term Erlang is used interchangeably with Erlang OTP or Open Telecom Platform OTP which consists of the Erlang runtime system several ready to use components OTP mainly written in Erlang and a set of design principles for Erlang programs br The Erlang runtime system is designed for systems with these traits br br Distributed br Fault tolerant br Soft real time br Highly available non stop applications br Hot swapping where code can be changed without stopping a system br The Erlang programming language has immutable data pattern matching and functional programming The sequential subset of the Erlang language supports eager evaluation single assignment and dynamic typing br A normal Erlang application is built out of hundreds of small Erlang processes br It was originally proprietary software within Ericsson developed by Joe Armstrong Robert Virding and Mike Williams in but was released as free and open source software in Erlang OTP is supported and maintained by the Open Telecom Platform OTP product unit at Ericsson br br br History br The name Erlang attributed to Bjarne D cker has been presumed by those working on the telephony switches for whom the language was designed to be a reference to Danish mathematician and engineer Agner Krarup Erlang and a syllabic abbreviation of Ericsson Language Erlang was designed with the aim of improving the development of telephony applications The initial version of Erlang was implemented in Prolog and was influenced by the programming language PLEX used in earlier Ericsson exchanges By Erlang had proven that it was suitable for prototyping telephone exchanges but the Prolog interpreter was far too slow One group within Ericsson estimated that it would need to be times faster to be suitable for production use In work began on the BEAM virtual machine VM which compiles Erlang to C using a mix of natively compiled code and threaded code to strike a balance between performance and disk space According to co inventor Joe Armstrong the language went from lab product to real applications following the collapse of the next generation AXE telephone exchange named AXE N in As a result Erlang was chosen for the next Asynchronous Transfer Mode ATM exchange AXD br br In February Ericsson Radio Systems banned the in house use of Erlang for new products citing a preference for non proprietary languages The ban caused Armstrong and others to make plans to leave Ericsson In March Ericsson announced the AXD switch containing over a million lines of Erlang and reported to achieve a high availability of nine s In December the implementation of Erlang was open sourced and most of the Erlang team resigned to form a new company Bluetail AB Ericsson eventually relaxed the ban and re hired Armstrong in br In native symmetric multiprocessing support was added to the runtime system and VM br br br Processes br Erlang applications are built of very lightweight Erlang processes in the Erlang runtime system Erlang processes can be seen as living objects object oriented programming with data encapsulation and message passing but capable of changing behavior during runtime The Erlang runtime system provides strict process isolation between Erlang processes this includes data and garbage collection separated individually by each Erlang process and transparent communication between processes see Location transparency on different Erlang nodes on different hosts br Joe Armstrong co inventor of Erlang summarized the principles of processes in his PhD thesis br br Everything is a process br Processes are strongly isolated br Process creation and destruction is a lightweight operation br Message passing is the only way for processes to interact br Processes have unique names br If you know the name of a process you can send it a message br Processes share no resources br Error handling is non local br Processes do what they are supposed to do or fail br Joe Armstrong remarked in an interview with Rackspace in If Java is write once run anywhere then Erlang is write once run forever br br br Usage br In Ericsson reported Erlang was being used in its support nodes and in GPRS G and LTE mobile networks worldwide and also by Nortel and T Mobile br Erlang is used in RabbitMQ As Tim Bray director of Web Technologies at Sun Microsystems expressed in his keynote at O Reilly Open Source Convention OSCON in July br br If somebody came to me and wanted to pay me a lot of money to build a large scale message handling system that really had to be up all the time could never afford to go down for years at a time I would unhesitatingly choose Erlang to build it in br Erlang is the programming language used to code WhatsApp br It is also the language of choice for Ejabberd an XMPP messaging server br Elixir is a programming language that compiles into BEAM byte code via Erlang Abstract Format br Since being released as open source Erlang has been spreading beyond telecoms establishing itself in other vertical markets such as FinTech gaming healthcare automotive internet of things and blockchain Apart from WhatsApp there are other companies listed as Erlang s success stories Vocalink a MasterCard company Goldman Sachs Nintendo AdRoll Grindr BT Mobile Samsung OpenX and SITA br br br Functional programming examples br br br Factorial br A factorial algorithm implemented in Erlang br br br Fibonacci sequence br A tail recursive algorithm that produces the Fibonacci sequence br br Omitting the comments gives a much shorter program br br br Quicksort br Quicksort in Erlang using list comprehension br br The above example recursively invokes the function qsort until nothing remains to be sorted The expression Front Front Rest Front Pivot is a list comprehension meaning Construct a list of elements Front such that Front is a member of Rest and Front is less than Pivot is the list concatenation operator br A comparison function can be used for more complicated structures for the sake of readability br The following code would sort lists according to length br br A Pivot is taken from the first parameter given to qsort and the rest of Lists is named Rest Note that the expression br br is no different in form from br br in the previous example except for the use of a comparison function in the last part saying Construct a list of elements X such that X is a member of Rest and Smaller is true with Smaller being defined earlier as br br The anonymous function is named Smaller in the parameter list of the second definition of qsort so that it can be referenced by that name within that function It is not named in the first definition of qsort which deals with the base case of an empty list and thus has no need of this function let alone a name for it br br br Data types br Erlang has eight primitive data types br br Integers br Integers are written as sequences of decimal digits for example and are integers Integer arithmetic is exact and only limited by available memory on the machine This is called arbitrary precision arithmetic br Atoms br Atoms are used within a program to denote distinguished values They are written as strings of consecutive alphanumeric characters the first character being lowercase Atoms can contain any character if they are enclosed within single quotes and an escape convention exists which allows any character to be used within an atom Atoms are never garbage collected and should be used with caution especially if using dynamic atom generation br Floats br Floating point numbers use the IEEE bit representation br References br References are globally unique symbols whose only property is that they can be compared for equality They are created by evaluating the Erlang primitive make ref br Binaries br A binary is a sequence of bytes Binaries provide a space efficient way of storing binary data Erlang primitives exist for composing and decomposing binaries and for efficient input output of binaries br Pids br Pid is short for process identifier a Pid is created by the Erlang primitive spawn Pids are references to Erlang processes br Ports br Ports are used to communicate with the external world Ports are created with the built in function open port Messages can be sent to and received from ports but these messages must obey the so called port protocol br Funs br Funs are function closures Funs are created by expressions of the form fun end br And three compound data types br br Tuples br Tuples are containers for a fixed number of Erlang data types The syntax D D Dn denotes a tuple whose arguments are D D Dn The arguments can be primitive data types or compound data types Any element of a tuple can be accessed in constant time br Lists br Lists are containers for a variable number of Erlang data types The syntax Dh Dt denotes a list whose first element is Dh and whose remaining elements are the list Dt The syntax denotes an empty list The syntax D D Dn is short for D D Dn The first element of a list can be accessed in constant time The first element of a list is called the head of the list The remainder of a list when its head has been removed is called the tail of the list br Maps br Maps contain a variable number of key value associations The syntax is Key Value KeyN ValueN br Two forms of syntactic sugar are provided br br Strings br Strings are written as doubly quoted lists of characters This is syntactic sugar for a list of the integer Unicode code points for the characters in the string Thus for example the string cat is shorthand for br Records br Records provide a convenient way for associating a tag with each of the elements in a tuple This allows one to refer to an element of a tuple by name and not by position A pre compiler takes the record definition and replaces it with the appropriate tuple reference br Erlang has no method to define classes although there are external libraries available br br br Let it crash coding style br Erlang is designed with a mechanism that makes it easy for external processes to monitor for crashes or hardware failures rather than an in process mechanism like exception handling used in many other programming languages Crashes are reported like other messages which is the only way processes can communicate with each other and subprocesses can be spawned cheaply see below The let it crash philosophy prefers that a process be completely restarted rather than trying to recover from a serious failure Though it still requires handling of errors this philosophy results in less code devoted to defensive programming where error handling code is highly contextual and specific br br br Supervisor trees br A typical Erlang application is written in the form of a supervisor tree This architecture is based on a hierarchy of processes in which the top level process is known as a supervisor The supervisor then spawns multiple child processes that act either as workers or more lower level supervisors Such hierarchies can exist to arbitrary depths and have proven to provide a highly scalable and fault tolerant environment within which application functionality can be implemented br Within a supervisor tree all supervisor processes are responsible for managing the lifecycle of their child processes and this includes handling situations in which those child processes crash Any process can become a supervisor by first spawning a child process then calling erlang monitor on that process If the monitored process then crashes the supervisor will receive a message containing a tuple whose first member is the atom DOWN The supervisor is responsible firstly for listening for such messages and secondly for taking the appropriate action to correct the error condition br br br Concurrency and distribution orientation br Erlang s main strength is support for concurrency It has a small but powerful set of primitives to create processes and communicate among them Erlang is conceptually similar to the language occam though it recasts the ideas of communicating sequential processes CSP in a functional framework and uses asynchronous message passing Processes are the primary means to structure an Erlang application They are neither operating system processes nor threads but lightweight processes that are scheduled by BEAM Like operating system processes but unlike operating system threads they share no state with each other The estimated minimal overhead for each is words Thus many processes can be created without degrading performance In a benchmark with million processes was successfully performed with bit Erlang on a machine with GB random access memory RAM total bytes process Erlang has supported symmetric multiprocessing since release R B of May br While threads need external library support in most languages Erlang provides language level features to create and manage processes with the goal of simplifying concurrent programming Though all concurrency is explicit in Erlang processes communicate using message passing instead of shared variables which removes the need for explicit locks a locking scheme is still used internally by the VM br Inter process communication works via a shared nothing asynchronous message passing system every process has a mailbox a queue of messages that have been sent by other processes and not yet consumed A process uses the receive primitive to retrieve messages that match desired patterns A message handling routine tests messages in turn against each pattern until one of them matches When the message is consumed and removed from the mailbox the process resumes execution A message may comprise any Erlang structure including primitives integers floats characters atoms tuples lists and functions br The code example below shows the built in support for distributed processes br br As the example shows processes may be created on remote nodes and communication with them is transparent in the sense that communication with remote processes works exactly as communication with local processes br Concurrency supports the primary method of error handling in Erlang When a process crashes it neatly exits and sends a message to the controlling process which can then take action such as starting a new process that takes over the old process s task br br br Implementation br The official reference implementation of Erlang uses BEAM BEAM is included in the official distribution of Erlang called Erlang OTP BEAM executes bytecode which is converted to threaded code at load time It also includes a native code compiler on most platforms developed by the High Performance Erlang Project HiPE at Uppsala University Since October the HiPE system is fully integrated in Ericsson s Open Source Erlang OTP system It also supports interpreting directly from source code via abstract syntax tree via script as of R B release of Erlang br br br Hot code loading and modules br Erlang supports language level Dynamic Software Updating To implement this code is loaded and managed as module units the module is a compilation unit The system can keep two versions of a module in memory at the same time and processes can concurrently run code from each The versions are referred to as the new and the old version A process will not move into the new version until it makes an external call to its module br An example of the mechanism of hot code loading br br For the second version we add the possibility to reset the count to zero br br Only when receiving a message consisting of the atom code switch will the loop execute an external call to codeswitch MODULE is a preprocessor macro for the current module If there is a new version of the counter module in memory then its codeswitch function will be called The practice of having a specific entry point into a new version allows the programmer to transform state to what is needed in the newer version In the example the state is kept as an integer br In practice systems are built up using design principles from the Open Telecom Platform which leads to more code upgradable designs Successful hot code loading is exacting Code must be written with care to make use of Erlang s facilities br br br Distribution br In Ericsson released Erlang as free and open source software to ensure its independence from a single vendor and to increase awareness of the language Erlang together with libraries and the real time distributed database Mnesia forms the OTP collection of libraries Ericsson and a few other companies support Erlang commercially br Since the open source release Erlang has been used by several firms worldwide including Nortel and T Mobile Although Erlang was designed to fill a niche and has remained an obscure language for most of its existence its popularity is growing due to demand for concurrent services br Erlang has found some use in fielding massively multiplayer online role playing game MMORPG servers br br br See also br Elixir a functional concurrent general purpose programming language that runs on BEAM br Luerl Lua on the BEAM designed and implemented by one of the creators of Erlang br Lisp Flavored Erlang LFE a Lisp based programming language that runs on BEAM br Mix build tool br Phoenix web framework br Gleam programming language br br br br br br Further reading br br br External links br br Erlang The Movie br Official website