title: MD5
id: 18826
The MD message digest algorithm is a widely used hash function producing a bit hash value MD was designed by Ronald Rivest in to replace an earlier hash function MD and was specified in as RFC br MD can be used as a checksum to verify data integrity against unintentional corruption Historically it was widely used as a cryptographic hash function however it has been found to suffer from extensive vulnerabilities It remains suitable for other non cryptographic purposes for example for determining the partition for a particular key in a partitioned database and may be preferred due to lower computational requirements than more recent Secure Hash Algorithms br br br History and cryptanalysis br MD is one in a series of message digest algorithms designed by Professor Ronald Rivest of MIT Rivest When analytic work indicated that MD s predecessor MD was likely to be insecure Rivest designed MD in as a secure replacement Hans Dobbertin did indeed later find weaknesses in MD br In Den Boer and Bosselaers gave an early although limited result of finding a pseudo collision of the MD compression function that is two different initialization vectors that produce an identical digest br In Dobbertin announced a collision of the compression function of MD Dobbertin While this was not an attack on the full MD hash function it was close enough for cryptographers to recommend switching to a replacement such as SHA also compromised since or RIPEMD br The size of the hash value bits is small enough to contemplate a birthday attack MD CRK was a distributed project started in March to demonstrate that MD is practically insecure by finding a collision using a birthday attack br MD CRK ended shortly after August when collisions for the full MD were announced by Xiaoyun Wang Dengguo Feng Xuejia Lai and Hongbo Yu Their analytical attack was reported to take only one hour on an IBM p cluster br On March Arjen Lenstra Xiaoyun Wang and Benne de Weger demonstrated construction of two X certificates with different public keys and the same MD hash value a demonstrably practical collision The construction included private keys for both public keys A few days later Vlastimil Klima described an improved algorithm able to construct MD collisions in a few hours on a single notebook computer On March Klima published an algorithm that could find a collision within one minute on a single notebook computer using a method he calls tunneling br Various MD related RFC errata have been published br In the United States Cyber Command used an MD hash value of their mission statement as a part of their official emblem br On December Tao Xie and Dengguo Feng announced the first published single block bit MD collision Previous collision discoveries had relied on multi block attacks For security reasons Xie and Feng did not disclose the new attack method They issued a challenge to the cryptographic community offering a US reward to the first finder of a different byte collision before January Marc Stevens responded to the challenge and published colliding single block messages as well as the construction algorithm and sources br In an informational RFC was approved to update the security considerations in MD and HMAC MD br br br Security br One basic requirement of any cryptographic hash function is that it should be computationally infeasible to find two distinct messages that hash to the same value MD fails this requirement catastrophically On December the CMU Software Engineering Institute concluded that MD was essentially cryptographically broken and unsuitable for further use The weaknesses of MD have been exploited in the field most infamously by the Flame malware in As of MD continues to be widely used despite its well documented weaknesses and deprecation by security experts br A collision attack exists that can find collisions within seconds on a computer with a GHz Pentium processor complexity of Further there is also a chosen prefix collision attack that can produce a collision for two inputs with specified prefixes within seconds using off the shelf computing hardware complexity br The ability to find collisions has been greatly aided by the use of off the shelf GPUs On an NVIDIA GeForce GS graphics processor million hashes per second can be computed An NVIDIA GeForce Ultra can calculate more than million hashes per second br These hash and collision attacks have been demonstrated in the public in various situations including colliding document files and digital certificates As of MD was demonstrated to be still quite widely used most notably by security research and antivirus companies br As of one quarter of widely used content management systems were reported to still use MD for password hashing br br br Overview of security issues br In a flaw was found in the design of MD While it was not deemed a fatal weakness at the time cryptographers began recommending the use of other algorithms such as SHA which has since been found to be vulnerable as well br In it was shown that MD is not collision resistant As such MD is not suitable for applications like SSL certificates or digital signatures that rely on this property for digital security Researchers additionally discovered more serious flaws in MD and described a feasible collision attack a method to create a pair of inputs for which MD produces identical checksums Further advances were made in breaking MD in and In December a group of researchers used this technique to fake SSL certificate validity br As of the CMU Software Engineering Institute considers MD cryptographically broken and unsuitable for further use and most U S government applications now require the SHA family of hash functions In the Flame malware exploited the weaknesses in MD to fake a Microsoft digital signature br br br Collision vulnerabilities br br In collisions were found in the compression function of MD and Hans Dobbertin wrote in the RSA Laboratories technical newsletter The presented attack does not yet threaten practical applications of MD but it comes rather close in the future MD should no longer be implemented where a collision resistant hash function is required br In researchers were able to create pairs of PostScript documents and X certificates with the same hash Later that year MD s designer Ron Rivest wrote that md and sha are both clearly broken in terms of collision resistance br On December a group of researchers announced at the th Chaos Communication Congress how they had used MD collisions to create an intermediate certificate authority certificate that appeared to be legitimate when checked by its MD hash The researchers used a PS cluster at the EPFL in Lausanne Switzerland to change a normal SSL certificate issued by RapidSSL into a working CA certificate for that issuer which could then be used to create other certificates that would appear to be legitimate and issued by RapidSSL VeriSign the issuers of RapidSSL certificates said they stopped issuing new certificates using MD as their checksum algorithm for RapidSSL once the vulnerability was announced Although Verisign declined to revoke existing certificates signed using MD their response was considered adequate by the authors of the exploit Alexander Sotirov Marc Stevens Jacob Appelbaum Arjen Lenstra David Molnar Dag Arne Osvik and Benne de Weger Bruce Schneier wrote of the attack that we already knew that MD is a broken hash function and that no one should be using MD anymore The SSL researchers wrote Our desired impact is that Certification Authorities will stop using MD in issuing new certificates We also hope that use of MD in other applications will be reconsidered as well br In according to Microsoft the authors of the Flame malware used an MD collision to forge a Windows code signing certificate br MD uses the Merkle Damg rd construction so if two prefixes with the same hash can be constructed a common suffix can be added to both to make the collision more likely to be accepted as valid data by the application using it Furthermore current collision finding techniques allow specifying an arbitrary prefix an attacker can create two colliding files that both begin with the same content All the attacker needs to generate two colliding files is a template file with a byte block of data aligned on a byte boundary that can be changed freely by the collision finding algorithm An example MD collision with the two messages differing in bits is br br d dd c e eec d a aff c fcab eab eb fb f br ad f b e a e f cdc f d dbdf c b br d e f b ae dacd c c dd e b da fd d cda br e f f ee ce b a d e c bcb a f b ff a br br d dd c e eec d a aff c fcab eab eb fb f br ad f b e f a e f cdc f d dbd c b br d e f b ae dacd c c dd e da fd d cda br e f f ee ce b d e c bcb a f ab ff a br br Both produce the MD hash fb a e bc aef eb br The difference between the two samples is that the leading bit in each nibble has been flipped For example the th byte offset x in the top sample x is in binary The leading bit in the byte also the leading bit in the first nibble is flipped to make which is x as shown in the lower sample br Later it was also found to be possible to construct collisions between two files with separately chosen prefixes This technique was used in the creation of the rogue CA certificate in A new variant of parallelized collision searching using MPI was proposed by Anton Kuznetsov in which allowed finding a collision in hours on a computing cluster br br br Preimage vulnerability br In April an attack against MD was published that breaks MD s preimage resistance This attack is only theoretical with a computational complexity of for full preimage br br br Applications br MD digests have been widely used in the software world to provide some assurance that a transferred file has arrived intact For example file servers often provide a pre computed MD known as md sum checksum for the files so that a user can compare the checksum of the downloaded file to it Most unix based operating systems include MD sum utilities in their distribution packages Windows users may use the included PowerShell function Get FileHash the included command line function certutil hashfile filename md install a Microsoft utility or use third party applications Android ROMs also use this type of checksum br br As it is easy to generate MD collisions it is possible for the person who created the file to create a second file with the same checksum so this technique cannot protect against some forms of malicious tampering In some cases the checksum cannot be trusted for example if it was obtained over the same channel as the downloaded file in which case MD can only provide error checking functionality it will recognize a corrupt or incomplete download which becomes more likely when downloading larger files br Historically MD has been used to store a one way hash of a password often with key stretching NIST does not include MD in their list of recommended hashes for password storage br MD is also used in the field of electronic discovery to provide a unique identifier for each document that is exchanged during the legal discovery process This method can be used to replace the Bates stamp numbering system that has been used for decades during the exchange of paper documents As above this usage should be discouraged due to the ease of collision attacks br br br Algorithm br br MD processes a variable length message into a fixed length output of bits The input message is broken up into chunks of bit blocks sixteen bit words the message is padded so that its length is divisible by The padding works as follows first a single bit is appended to the end of the message This is followed by as many zeros as are required to bring the length of the message up to bits fewer than a multiple of The remaining bits are filled up with bits representing the length of the original message modulo br The main MD algorithm operates on a bit state divided into four bit words denoted A B C and D These are initialized to certain fixed constants The main algorithm then uses each bit message block in turn to modify the state The processing of a message block consists of four similar stages termed rounds each round is composed of similar operations based on a non linear function F modular addition and left rotation Figure illustrates one operation within a round There are four possible functions a different one is used in each round br br br br br br br br br F br br B br br C br br D br br br br br br br B br br br C br br br br br br br B br br br br D br br br br br br br G br br B br br C br br D br br br br br br br B br br br D br br br br br C br br br br D br br br br br br br H br br B br br C br br D br br br br br br B br br C br br D br br br br br I br br B br br C br br D br br br br br br C br br br B br br br br D br br br br br br br br br displaystyle begin aligned F B C D B wedge C vee neg B wedge D G B C D B wedge D vee C wedge neg D H B C D B oplus C oplus D I B C D C oplus B vee neg D end aligned br br br br br br br br br br br br br br br displaystyle oplus wedge vee neg br br denote the XOR AND OR and NOT operations respectively br br br Pseudocode br The MD hash is calculated according to this algorithm All values are in little endian br br All variables are unsigned bit and wrap modulo when calculating br var int s K br var int i br br s specifies the per round shift amounts br s br s br s br s br br Use binary integer part of the sines of integers Radians as constants br for i from to do br K i floor abs sin i br end for br Or just use the following precomputed table br K xd aa xe c b x db xc bdceee br K xf c faf x c a xa xfd br K x d x b f af xffff bb x cd be br K x b xfd xa e x b br K xf e xc b x e a xe b c aa br K xd f d x xd a e xe d fbc br K x e cde xc d xf d d x a ed br K xa e e xfcefa f x f d x d a c a br K xfffa x f x d d xfde c br K xa beea x bdecfa xf bb b xbebfbc br K x b ec xeaa fa xd ef x d br K xd d d xe db e x fa cf xc ac br K xf x aff xab a xfc a br K x b c x f ccc xffeff d x dd br K x fa e f xfe ce e xa x e a br K xf e xbd af x ad d bb xeb d br br Initialize variables br var int a x A br var int b xefcdab B br var int c x badcfe C br var int d x D br br Pre processing adding a single bit br append bit to message br Notice the input bytes are considered as bit strings br where the first bit is the most significant bit of the byte br br Pre processing padding with zeros br append bit until message length in bits mod br br Notice the two padding steps above are implemented in a simpler way br in implementations that only work with complete bytes append x br and pad with x bytes so that the message length in bytes mod br br append original length in bits mod to message br br Process the message in successive bit chunks br for each bit chunk of padded message do br break chunk into sixteen bit words M j j br Initialize hash value for this chunk br var int A a br var int B b br var int C c br var int D d br Main loop br for i from to do br var int F g br if i then br F B and C or not B and D br g i br else if i then br F D and B or not D and C br g i mod br else if i then br F B xor C xor D br g i mod br else if i then br F C xor B or not D br g i mod br Be wary of the below definitions of a b c d br F F A K i M g M g must be a bit block br A D br D C br C B br B B leftrotate F s i br end for br Add this chunk s hash to result so far br a a A br b b B br c c C br d d D br end for br br var char digest a append b append c append d Output is in little endian br br Instead of the formulation from the original RFC shown the following may be used for improved efficiency useful if assembly language is being used otherwise the compiler will generally optimize the above code Since each computation is dependent on another in these formulations this is often slower than the above method where the nand and can be parallelised br br i F D xor B and C xor D br i F C xor D and B xor C br br br MD hashes br The bit byte MD hashes also termed message digests are typically represented as a sequence of hexadecimal digits The following demonstrates a byte ASCII input and the corresponding MD hash br br MD The quick brown fox jumps over the lazy dog br e d d bb bd d a d br br Even a small change in the message will with overwhelming probability result in a mostly different hash due to the avalanche effect For example adding a period to the end of the sentence br br MD The quick brown fox jumps over the lazy dog br e d c d fb ca ffaddf cbd br br The hash of the zero length string is br br MD br d d cd f b e ecf e br br The MD algorithm is specified for messages consisting of any number of bits it is not limited to multiples of eight bits octets bytes Some MD implementations such as md sum might be limited to octets or they might not support streaming for messages of an initially undetermined length br br br Implementations br Below is a list of cryptography libraries that support MD br br Botan br Bouncy Castle br cryptlib br Crypto br Libgcrypt br Nettle br OpenSSL br wolfSSL br br br See also br Comparison of cryptographic hash functions br Hash function security summary br HashClash br MD Crypt br md deep br md sum br MD br SHA br SHA br br br br br br Further reading br Berson Thomas A Differential Cryptanalysis Mod with Applications to MD EUROCRYPT pp ISBN br Bert den Boer Antoon Bosselaers Collisions for the Compression Function of MD Advances in Cryptology EUROCRYPT EUROCRYPT Berlin London Springer pp ISBN br Hans Dobbertin Cryptanalysis of MD compress Announcement on Internet May CiteSeerX Citeseer ist psu edu Archived from the original on June Retrieved August br Dobbertin Hans The Status of MD After a Recent Attack CryptoBytes br Xiaoyun Wang Hongbo Yu How to Break MD and Other Hash Functions PDF EUROCRYPT ISBN Archived from the original PDF on May Retrieved March br br br External links br W C recommendation on MD Archived December at the Wayback Machine br MD Calculator Archived November at the Wayback Machine