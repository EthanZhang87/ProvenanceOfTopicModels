title: Tox (protocol)
id: 41981099
Tox is a peer to peer instant messaging and video calling protocol that offers end to end encryption The stated goal of the project is to provide secure yet easily accessible communication for everyone A reference implementation of the protocol is published as free and open source software under the terms of the GNU GPL or later br br br History br br br Inception br An idea of developing a secure peer to peer messenger which would later turn into Tox sparked on the anonymous imageboard chan amidst the allegations that Skype provided the NSA with access to their infrastructure and encryption just before they were bought by Microsoft br The initial commit to GitHub was pushed on June by a user named irungentoo Unofficial community builds became available as early as on August with the first official builds made available in October On July Tox entered an alpha stage in development and a redesigned download page was created for the occasion br br br Tox Foundation controversy br During the first two years of its life the project s business and monetary side was handled by Tox Foundation a California registered corporation On July an issue was open on the project s GitHub where a third party stated that Tox Foundation s sole board member Sean Qureshi used an amount of money in the thousands of US dollars to pay for their college tuition with those funds coming from Tox Foundation s participation in Google Summer of Code When asked for additional clarification irungentoo on behalf of the project s team confirmed the allegations On July the project s infrastructure and repositories were moved to a new locations due to the fact that Qureshi controlled the original project s domains and servers In the project s blog the development team has announced their disassociation with Tox Foundation and Qureshi in particular and further addressed the issue This situation caused many prominent contributors to cease Tox related activity br br br Project s fork and Rust implementation br Sometime during the original reference implementation saw a steady decline in development activity with the last known commit currently dated Oct This caused the project to split with those interested in continuing the development creating a new fork of Tox core called c toxcore around the end of September br Currently c toxcore is being developed by a collective known as the TokTok Project They describe their mission as to promote universal freedom of expression and to preserve unrestricted information exchange Their current goals are to continue slow iterative development of the existing core implementation along with in parallel development of a new reference implementation in Rust br Initially the Rust implementation of the protocol library was split in two halves one handling most of the grunt work of communication with the network and another one responsible specifically for bootstrap node operation In December those were merged with developers stating that code was now mature enough to support basic communication and bootstrap node operations using TCP connections As of June the development is still ongoing but no client implementations using Rust core library is available yet br br br Security audit and related concerns br Although the original core library implementation and its forks have been available for the general public for almost a decade none of them have been reviewed by a competent third party security researcher br In WireGuard s author Jason A Donenfeld opened an issue on the project s GitHub page where he stated that c toxcore is vulnerable to key compromise impersonation KCI attacks Donenfeld attributed his find to the fact that Tox is relying on homebrew crypto developed by non experts to facilitate handshakes He also criticized some other design choices used by Tox developers as well like using raw ECDH values as encryption keys br This report has caused developers to put an additional disclaimer on the project s GitHub page stating that Tox is an experimental cryptographic network library that has not been formally audited by an independent third party that specializes in cryptography or cryptanalysis with a separate disclaimer that users may use it on their own risk br In March a post on the project s blog stated that one of the community members is working to redesign the cryptographic mechanism used by Tox to perform handshakes using the AKE mechanisms used in the Noise Protocol Framework This post also contains a detailed explanation of the original vulnerability br br br Features br br br Encryption of traffic br Users are assigned a public and private key and they connect to each other directly in a fully distributed peer to peer network Users have the ability to message friends join chat rooms with friends or strangers voice video chat and send each other files All traffic over Tox is end to end encrypted using the NaCl library which provides authenticated encryption and perfect forward secrecy br br br Additional messaging features br Tox clients aim to provide support for various secure and anonymised communication features while every client supports messaging additional features like group messaging voice and video calling voice and video conferencing typing indicators message read receipts file sharing profile encryption and desktop streaming are supported to various degrees by mobile and desktop clients Additional features can be implemented by any client as long as they are supported by the core protocol Features that are not related to the core networking system are left up to the client Client developers are strongly encouraged to adhere to the Tox Client Standard in order to maintain cross client compatibility and uphold best security practices br br br Usability as an instant messenger br Though several apps that use the Tox protocol seem similar in function to regular instant messaging apps the lack of central servers similar to XMPP or Matrix currently has the consequence that both parties of the chat need to be online for the message to be sent and received The Tox enabled messengers deal with this in separate ways some prevent the user from sending the message if the other party has disconnected while others show the message as being sent when in reality it is stored in the sender s phone waiting to be delivered when the receiving party reconnects to the network br br br Reception br Tox received some significant publicity in its early conceptual stage catching the attention of global online tech news sites On August Tox was number five on GitHub s top trending list Concerns about metadata leaks were raised and developers responded by implementing Onion routing for the friend finding process Tox was accepted into the Google Summer of Code as a Mentoring Organization in and br br br See also br br Comparison of instant messaging clients br Comparison of instant messaging protocols br Comparison of VoIP software br List of free and open source software packages br br br br br br External links br Official website