title: Singularity (operating system)
id: 2049655
Singularity is an experimental operating system developed by Microsoft Research between July and February It was designed as a high dependability OS in which the kernel device drivers and application software were all written in managed code Internal security uses type safety instead of hardware memory protection br br br Operation br The lowest level x interrupt dispatch code is written in assembly language and C Once this code has done its job it invokes the kernel which runtime system and garbage collector are written in Sing an extended version of Spec itself an extension of C and runs in unprotected mode The hardware abstraction layer is written in C and runs in protected mode There is also some C code to handle debugging The computer s basic input output system BIOS is invoked during the bit real mode bootstrap stage once in bit mode Singularity never invokes the BIOS again but invokes device drivers written in Sing During installation Common Intermediate Language CIL opcodes are compiled into x opcodes using the Bartok compiler br br br Security design br Singularity is a microkernel operating system Unlike most historic microkernels its components execute in the same address space process which contains software isolated processes SIPs Each SIP has its own data and code layout and is independent from other SIPs These SIPs behave like normal processes but avoid the cost of task switches br Protection in this system is provided by a set of rules called invariants that are verified by static program analysis For example in the memory invariant states there must be no cross references or memory pointers between two SIPs communication between SIPs occurs via higher order communication channels managed by the operating system Invariants are checked during installation of the application In Singularity installation is managed by the operating system br Most of the invariants rely on the use of safer memory managed languages such as Sing which have a garbage collector allow no arbitrary pointers and allow code to be verified to meet a given computer security policy br br br Project status br The first Singularity Research Development Kit RDK RDK was initially released on March being released under a shared source license allowing academic non commercial use and available from CodePlex RDK was later released on November br br br Similar projects br Inferno first created in based on Plan from Bell Labs programs are run in a virtual machine and written in Limbo instead of C with CIL open source software br JavaOS a legacy OS based on the same concept as Singularity br JNode an OS similar in concept to Singularity but with Java instead of C with CIL br JX a Java OS that like Singularity uses type safety instead of computer hardware memory protection br Phantom OS a managed OS br SharpOS a former effort to write an operating system using C open source software br MOSA a NET Framework compiler and operating system using C br Cosmos a building blocks toolkit for developing an OS using C open source software br TempleOS a ring operating system with JIT compiler open source software br br br See also br Language based system general kernel design using language based protection instead of hardware protection br Midori a Microsoft developed microkernel based operating system Based on and related to Singularity br br br br br br External links br Official website br Singularity Design Motivation and an overview of the Singularity Project br Singularity source code on CodePlex br Singularity A research OS written in C an interview of the Channel team to Jim Larus and Galen Hunt video thread br Singularity III Revenge of the SIP an interview of the Channel team to researchers of the Singularity Project Team video thread br Singularity IV Return of the UI a demo of Singularity actually running video thread br Singularity Revisited an interview of the Channel team to researchers of the Singularity Project Team video thread 