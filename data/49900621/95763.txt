title: L4 microkernel family
id: 95763
L is a family of second generation microkernels used to implement a variety of types of operating systems OS though mostly for Unix like Portable Operating System Interface POSIX compliant types br L like its predecessor microkernel L was created by German computer scientist Jochen Liedtke as a response to the poor performance of earlier microkernel based OSes Liedtke felt that a system designed from the start for high performance rather than other goals could produce a microkernel of practical use His original implementation in hand coded Intel i specific assembly language code in created attention by being times faster than Mach br The follow up publication two years later was considered so influential that it won the ACM SIGOPS Hall of Fame Award br Since its introduction L has been developed to be cross platform and to improve security isolation and robustness br There have been various re implementations of the original L kernel application binary interface ABI and its successors including L Ka Pistachio implemented by Liedtke and his students at Karlsruhe Institute of Technology L MIPS University of New South Wales UNSW Fiasco Dresden University of Technology TU Dresden For this reason the name L has been generalized and no longer refers to only Liedtke s original implementation It now applies to the whole microkernel family including the L kernel interface and its different versions br L is widely deployed One variant OKL from Open Kernel Labs shipped in billions of mobile devices br br br Design paradigm br Specifying the general idea of a microkernel Liedtke states br br A concept is tolerated inside the microkernel only if moving it outside the kernel i e permitting competing implementations would prevent the implementation of the system s required functionality br In this spirit the L microkernel provides few basic mechanisms address spaces abstracting page tables and providing memory protection threads and scheduling abstracting execution and providing temporal protection and inter process communication for controlled communication across isolation boundaries br An operating system based on a microkernel like L provides services as servers in user space that monolithic kernels like Linux or older generation microkernels include internally For example to implement a secure Unix like system servers must provide the rights management that Mach included inside the kernel br br br History br The poor performance of first generation microkernels such as Mach led a number of developers to re examine the entire microkernel concept in the mid s The asynchronous in kernel buffering process communication concept used in Mach turned out to be one of the main reasons for its poor performance This induced developers of Mach based operating systems to move some time critical components like file systems or drivers back inside the kernel While this somewhat ameliorated the performance issues it plainly violates the minimality concept of a true microkernel and squanders their major advantages br Detailed analysis of the Mach bottleneck indicated that among other things its working set is too large the IPC code expresses poor spatial locality that is it results in too many cache misses of which most are in kernel This analysis gave rise to the principle that an efficient microkernel should be small enough that the majority of performance critical code fits into the first level cache preferably a small fraction of said cache br br br L br Jochen Liedtke set out to prove that a well designed thinner inter process communication IPC layer with careful attention to performance and machine specific in contrast to cross platform software design could yield large real world performance improvements Instead of Mach s complex IPC system his L microkernel simply passed the message with no added overhead Defining and implementing the required security policies were considered to be duties of the user space servers The role of the kernel was only to provide the needed mechanism to enable the user level servers to enforce the policies L developed in proved itself a safe and robust operating system used for many years for example by Technischer berwachungsverein Technical Inspection Association br br br L br After some experience using L Liedtke came to the conclusion that several other Mach concepts were also misplaced By simplifying the microkernel concepts even further he developed the first L kernel which was primarily designed for high performance To maximise performance the whole kernel was written in assembly language and its IPC was times faster than Mach s Such dramatic performance increases are a rare event in operating systems and Liedtke s work triggered new L implementations and work on L based systems at a number of universities and research institutes including IBM where Liedtke started to work in TU Dresden and UNSW At IBM s Thomas J Watson Research Center Liedtke and his colleagues continued research on L and microkernel based systems in general especially the Sawmill OS br br br L Ka Hazelnut br In Liedtke took over the Systems Architecture Group at the University of Karlsruhe where he continued the research into microkernel systems As a proof of concept that a high performance microkernel could also be constructed in a higher level language the group developed L Ka Hazelnut a C version of the kernel that ran on IA and ARM based machines The effort was a success performance was still acceptable and with its release the pure assembly language versions of the kernels were effectively discontinued br br br L Fiasco br In parallel to the development of L Ka Hazelnut in the Operating Systems Group TUD OS of the TU Dresden started to develop their own C implementation of the L kernel interface named L Fiasco In contrast to L Ka Hazelnut which allows no concurrency in the kernel and its successor L Ka Pistachio which allows interrupts in the kernel only at specific preemption points L Fiasco was fully preemptible with the exception of extremely short atomic operations to achieve a low interrupt latency This was considered necessary because L Fiasco is used as the basis of DROPS a hard real time computing capable operating system also developed at the TU Dresden However the complexities of a fully preemptible design prompted later versions of Fiasco to return to the traditional L approach of running the kernel with interrupts disabled except for a limited number of preemption points br br br Cross platform br br br L Ka Pistachio br Up until the release of L Ka Pistachio and newer versions of Fiasco all L microkernels had been inherently tied close to the underlying CPU architecture The next big shift in L development was the development of a cross platform platform independent application programming interface API that still retained the high performance characteristics despite its higher level of portability Although the underlying concepts of the kernel were the same the new API provided many significant changes relative to prior L versions including better support for multi processor systems looser ties between threads and address spaces and the introduction of user level thread control blocks UTCBs and virtual registers After releasing the new L API version X a k a version in early the System Architecture Group at the University of Karlsruhe implemented a new kernel L Ka Pistachio completely from scratch now with focus on both high performance and portability It was released under the two clause BSD license br br br Newer Fiasco versions br The L Fiasco microkernel has also been extensively improved over the years It now supports several hardware platforms ranging from x through AMD to several ARM platforms Notably a version of Fiasco Fiasco UX can run as a user level application on Linux br L Fiasco implements several extensions to the L v API Exception IPC enables the kernel to send CPU exceptions to user level handler applications With the help of alien threads it is possible to perform fine grained control over system calls X style UTCBs have been added Also Fiasco contains mechanisms for controlling communication rights and kernel level resource use On Fiasco a collection of basic user level services are developed named L Env that among others are used to para virtualise the current Linux version as of May named L Linux br br br University of New South Wales and NICTA br Development also occurred at the University of New South Wales UNSW where developers implemented L on several bit platforms Their work resulted in L MIPS and L Alpha resulting in Liedtke s original version being retrospectively named L x Like Liedtke s original kernels the UNSW kernels written in a mix of assembly and C were unportable and each implemented from scratch With the release of the highly portable L Ka Pistachio the UNSW group abandoned their own kernels in favor of producing highly tuned ports of L Ka Pistachio including the fastest ever reported implementation of message passing cycles on the Itanium architecture The group has also demonstrated that device drivers can perform equally well at user level as in kernel and developed Wombat a highly portable version of Linux on L that runs on x ARM and MIPS processors On XScale processors Wombat context switching costs are up to times lower than in native Linux br Later the UNSW group at their new home at NICTA formerly National ICT Australia Ltd forked L Ka Pistachio into a new L version named NICTA L embedded As the name implies it was for use in commercial embedded systems and consequently the implementation trade offs favored small memory size and reduced complexity The API was modified to keep almost all system calls short enough that they need no preemption points to ensure high real time responsiveness br br br Commercial deployment br In November NICTA announced that Qualcomm was deploying NICTA s L version on their Mobile Station Modem chipsets This led to the use of L in mobile phone handsets on sale from late In August ERTOS leader and UNSW professor Gernot Heiser spun out a company named Open Kernel Labs OK Labs to support commercial L users and further develop L for commercial use under the brand name OKL in close collaboration with NICTA OKL Kernel Version released in April was the first generally available version of L which featured capability based security OKL Kernel released in October was the last open source version of OKL Kernel More recent versions are closed source and based on a rewrite to support a native hypervisor variant named the OKL Microvisor OK Labs also distributed a paravirtualized Linux named OK Linux a descendant of Wombat and paravirtualized versions of SymbianOS and Android OK Labs also acquired the rights to seL from NICTA br OKL shipments exceeded billion in early mostly on Qualcomm wireless modem chips Other deployments include automotive infotainment systems br Apple A series processors beginning with the A contain a Secure Enclave coprocessor running an L operating system called sepOS Secure Enclave Processor OS br based on the L embedded kernel developed at NICTA in br As a result L ships on all modern Apple devices including Macs with Apple silicon In alone total shipments of iPhone was estimated at million br br br High assurance seL br In the NICTA group commenced a from scratch design of a third generation microkernel named seL with the aim of providing a basis for highly secure and reliable systems suitable for satisfying security requirements such as those of Common Criteria and beyond From the beginning development aimed for formal verification of the kernel To ease meeting the sometimes conflicting requirements of performance and verification the team used a middle out software process starting from an executable specification written in the language Haskell br seL uses capability based security access control to enable formal reasoning about object accessibility br A formal proof of functional correctness was completed in br The proof provides a guarantee that the kernel s implementation is correct against its specification and implies that it is free of implementation bugs such as deadlocks livelocks buffer overflows arithmetic exceptions or use of uninitialised variables seL is claimed to be the first ever general purpose operating system kernel that has been verified The work on seL won the ACM SIGOPS Hall of Fame Award br seL takes a novel approach to kernel resource management exporting the management of kernel resources to user level and subjects them to the same capability based access control as user resources This model which was also adopted by Barrelfish simplifies reasoning about isolation properties and was an enabler for later proofs that seL enforces the core security properties of integrity and confidentiality The NICTA team also proved correctness of the translation from the programming language C to executable machine code taking the compiler out of the trusted computing base of seL br This implies that the high level security proofs hold for the kernel executable seL is also the first published protected mode OS kernel with a complete and sound worst case execution time WCET analysis a prerequisite for its use in hard real time computing br On July NICTA and General Dynamics C Systems announced that seL with end to end proofs was now released under open source licenses br The kernel source code and proofs are licensed under GNU General Public License version GPLv and most libraries and tools are under the BSD clause In April it was announced that the seL Foundation was created under the umbrella of the Linux Foundation to accelerate development and deployment of seL br The researchers state that the cost of formal software verification is lower than the cost of engineering traditional high assurance software despite providing much more reliable results Specifically the cost of one line of code during the development of seL was estimated at around US compared to US for traditional high assurance systems br Under the Defense Advanced Research Projects Agency DARPA High Assurance Cyber Military Systems HACMS program NICTA together with project partners Rockwell Collins Galois Inc the University of Minnesota and Boeing developed a high assurance drone using seL along with other assurance tools and software with planned technology transfer onto the optionally piloted autonomous Boeing AH Unmanned Little Bird helicopter being developed by Boeing Final demonstration of the HACMS technology took place in Sterling VA in April DARPA also funded several Small Business Innovative Research SBIR contracts related to seL under a program started by Dr John Launchbury Small businesses receiving an seL related SBIR included DornerWorks Techshot Wearable Inc Real Time Innovations and Critical Technologies br In October Nio Inc announced that their seL based SkyOS operating systems will be in mass produced electric cars from br In seL won the ACM Software System Award br br br Other research and development br Osker an OS written in Haskell targeted the L specification although this project focused mainly on the use of a functional programming language for OS development not on microkernel research br RedoxOS is a Rust based operating system that is also inspired by seL and uses a micro kernel design br CodeZero is an L microkernel for embedded systems with a focus on virtualization and implementation of native OS services There is a GPL licensed version and a version that was relicensed by B Labs Ltd acquired by Nvidia as closed source and forked in br F microkernel a BSD licensed L implementation is dedicated to ARM Cortex M processors for deeply embedded devices with memory protection br The NOVA OS Virtualization Architecture is a research project with focus on constructing a secure and efficient virtualization environment br with a small trusted computing base NOVA consists of a microhypervisor a user level hypervisor virtual machine monitor and an unprivileged componentised multi server user environment running on it named NUL NOVA runs on ARMv A and x based multi core systems br WrmOS is a real time operating system based on L microkernel It has own implementations of kernel standard libraries and network stack supporting ARM SPARC x and x architectures There is the paravirtualized Linux kernel w linux working on WrmOS br Helios is a microkernel inspired by seL It is part of the Ares operating system supports x and aarch and is still under active development as of February br br br See also br PikeOS br br br br br br Further reading br Liedtke Jochen Bartling Ulrich Beyer Uwe Heinrichs Dietmar Ruland Rudolf Szalay Gyula April Two years of experience with a Kernel based OS ACM SIGOPS Operating Systems Review doi S CID br Liedtke Jochen Haeberlen Andreas Park Yoonho Reuther Lars Uhlig Volkmar October Stub Code Performance is Becoming Important Proceedings of the st Workshop on Industrial Experiences with Systems Software WIESS San Diego CA October Archived from the original PDF on September Retrieved September on L kernel and compiler br Cheng Guanghui McGuire Nicholas L Fiasco L Linux Kickstart PDF Distributed Embedded Systems Lab Report Lanzhou University Archived from the original PDF on March br Elphinstone Kevin Heiser Gernot November From L to seL What Have We Learnt in Years of L Microkernels PDF th ACM SIGOPS Symposium on Operating Systems Principles Farmington PA USA pp CiteSeerX doi ISBN Evolution of L design and implementation approaches br br br External links br L Hq L headquarters community site for L projects Archived at the Wayback Machine br The L Kernel Family overview of L implementations documentation projects br Official TUD OS Wiki br L Ka Implementations L Ka Pistachio and L Ka Hazelnut br Official website seL br UNSW Implementations for DEC Alpha and MIPS architecture br OKL Archived at the Wayback Machine Commercial L version from Open Kernel Labs Archived at the Wayback Machine br NICTA L Research Overview and Publications Archived at the Wayback Machine br Trustworthy Systems Group at CSIRO s Data Present home of the former NICTA group that developed seL br Genode Operating System Framework An offspring of the L community