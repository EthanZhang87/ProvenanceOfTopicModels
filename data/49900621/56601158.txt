title: Genode
id: 56601158
Genode is a free and open source software operating system OS framework consisting of a microkernel abstraction layer and a set of user space components The framework is notable as one of the few open source operating systems not derived from a proprietary OS such as Unix The characteristic design philosophy is that a small trusted computing base is of primary concern in a security oriented OS br Genode can be used as a basis for a desktop computer or tablet OS or as a virtual machine monitor for guest operating systems The framework has been used as a trusted component of secure virtualization systems for both x and ARM br The small codebase of Genode makes it a flexible alternative to more complex Unix derived operating systems For this reason the framework has been used as a base system for research in such fields as virtualization inter process communication IP stack isolation monitoring and software development br br br History br Genode was first conceived as the Bastei OS Architecture research report at the Technical University of Dresden TU Dresden The focus of the report was to determine the practicality of a component based OS using capability based security This report was motivated in part by research into L microhypervisors conducted during the same time Following the success of an early prototype the authors of the report founded the company Genode Labs to develop Bastei as the Genode OS Framework br br br Releases br The project is developed publicly as an open source project released under the terms of the GNU Affero General Public License with a commercial entity offering alternative licensing Releases are scheduled at three month intervals to make changes to the system application binary interface ABI application programming interface API and issue documentation The OS framework is available in source code form and following the release a general purpose derivative named Sculpt is provided with on target binary deployment br br br Architectural features br Genode builds on the general philosophy of microkernels the smaller and simpler the code the easier it is to verify for trustworthiness and correctness Genode extends this philosophy to user space by composing complex applications from small components Each component exists in a strict hierarchy of parent child relationships Any component acting as a parent may apply resource and inter process communication IPC access policies to its children This hierarchical system layout yields intuitive partitioning and privilege deescalation as specialized subsystems are nested within more general subsystems mitigating the confused deputy problem endemic to centralized or superuser system policy br The framework is designed to be hosted by microkernels however the features of any given microkernel fall mostly within a common set and monolithic kernels implement a superset of those features Abstracting these features allows Genode to act as user space for a variety of L microkernels and Linux br br br Criticism br br br C br Genode is often criticized for the choice of its implementation language C a few other operating systems implemented in C include BeOS Fuchsia Ghost Haiku IncludeOS Managarm OSv Palm OS ReactOS SerenityOS Syllable and Symbian This critique usually asserts that C is a poor choice for implementing system libraries and APIs because of the inherent complexity of C and the difficulty in analyzing code for correct behavior While Genode does make use of multiple inheritance and templates in its system library the use of the C Standard Library is not allowed and language features that rely on implicit global state such as thread local storage and the global allocator have been removed from the language runtime Comprehensive static analysis of C is not possible However the Genode project publishes unit tests for empirical analysis br br br XML br Genode components consume and publish state using structured data serialized in XML in contrast to the plain text model of Unix derivatives The Genode framework makes use of XML in effectively all of its components because XML is easily parsed and generated programmatically while still being possible to understand and edit manually br br br Local namespacing br Genode lacks any practical global namespace there is no global file system or registry of processes or IPC endpoints This is in contrast to systems such as Unix which feature a ubiquitous file system and allow a superuser context to arbitrarily manage any process within the system Explicitly declaring the permissions and routing of components may be perceived as labor intensive relative to Unix However compartmentalizing administration allows subsystems to be managed by mutually untrusted system administrators on the same machine without resorting to virtualizing a common isolation method br br br Sculpt br The Genode project publishes a desktop operating system named Sculpt that targets contemporary consumer laptops Sculpt is a small base system with automatic device detection and configuration some GUI control interfaces and frontends to the Genode package manager The system does not feature a full desktop environment but requires users to deploy virtual machines hosting traditional OSes for a fully featured desktop Sculpt is distinguished from the Genode operating system framework in that it relies heavily on dynamic reconfiguration using privileged control components in contrast to specialized systems with static policies br br br See also br HelenOS a desktop microkernel based operating system br QNX a proprietary Unix like operating system hosted by a microkernel br Qubes OS a desktop operating system that provides security through virtualization br Capability based security br Secure by default br br br br br br External links br br Official websites br Official website br Genodelabs on GitHub br Research projects br KV Cache A Scalable High Performance Web Object Cache for Manycore br TrApps Secure Compartments in the Evil Cloud br Development of an Embedded Platform for Secure CPS Services br Secure OS project of IIT Madras br Kernel isolation of a Capability based security Operating System br Mobile Device Security with ARM TrustZone