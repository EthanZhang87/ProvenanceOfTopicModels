title: EROS (microkernel)
id: 353077
Extremely Reliable Operating System EROS is an operating system developed starting in at the University of Pennsylvania and then Johns Hopkins University and The EROS Group LLC Features include automatic data and process persistence some preliminary real time support and capability based security EROS is purely a research operating system and was never deployed in real world use As of development stopped in favor of a successor system CapROS br br br Key concepts br The overriding goal of the EROS system and its relatives is to provide strong support at the operating system level for the efficient restructuring of critical applications into small communicating components Each component can communicate with the others only through protected interfaces and is isolated from the rest of the system A protected interface in this context is one that is enforced by the lowest level part of the operating system the kernel That is the only part of the system that can move information from one process to another It also has complete control of the machine and if properly constructed cannot be bypassed In EROS the kernel provided mechanism by which one component names and invokes the services of another is a capability using inter process communication IPC By enforcing capability protected interfaces the kernel ensures that all communications to a process arrive via an intentionally exported interface It also ensures that no invocation is possible unless the invoking component holds a valid capability to the invoked component Protection in capability systems is achieved by restricting the propagation of capabilities from one component to another often through a security policy termed confinement br Capability systems naturally promote component based software structure This organizational approach is similar to the programming language concept of object oriented programming but occurs at larger granularity and does not include the concept of inheritance When software is restructured in this way several benefits emerge br br The individual components are most naturally structured as event loops Examples of systems that are commonly structured this way include aircraft flight control systems see also DO B Software Considerations in Airborne Systems and Equipment Certification and telephone switching systems see ESS switch Event driven programming is chosen for these systems mainly because of simplicity and robustness which are essential attributes in life critical and mission critical systems br Components become smaller and individually testable which helps to more readily isolate and identify flaws and bugs br The isolation of each component from the others limits the scope of any damage that may occur when something goes wrong or the software misbehaves br Collectively these benefits lead to measurably more robust and secure systems The Plessey System was a system originally designed for use in telephony switches which capability based design was chosen specifically for reasons of robustness br In contrast to many earlier systems capabilities are the only mechanism for naming and using resources in EROS making it what is sometimes referred to as a pure capability system In contrast IBM i is an example of a commercially successful capability system but it is not a pure capability system br Pure capability architectures are supported by well tested and mature mathematical security models These have been used to formally demonstrate that capability based systems can be made secure if implemented correctly The so called safety property has been shown to be decidable for pure capability systems see Lipton Confinement which is the fundamental building block of isolation has been formally verified to be enforceable by pure capability systems and is reduced to practical implementation by the EROS constructor and the KeyKOS factory No comparable verification exists for any other primitive protection mechanism There is a fundamental result in the literature showing that safety is mathematically undecidable in the general case see HRU but note that it is of course provable for an unbounded set of restricted cases Of greater practical importance safety has been shown to be false for all of the primitive protection mechanisms shipping in current commodity operating systems Safety is a necessary precondition to successful enforcement of any security policy In practical terms this result means that it is not possible in principle to secure current commodity systems but it is potentially possible to secure capability based systems provided they are implemented with sufficient care Neither EROS nor KeyKOS has ever been successfully penetrated and their isolation mechanisms have never been successfully defeated by any inside attacker but it is not known whether the two implementations were careful enough One goal of the Coyotos project was to demonstrate that component isolation and security has been definitively achieved by applying software verification techniques br The L sec system which is a successor to the L microkernel family is a capability based system and has been significantly influenced by the results of the EROS project The influence is mutual since the EROS work on high performance invocation was motivated strongly by Jochen Liedtke s successes with the L microkernel family br br br History br The primary developer of EROS was Jonathan S Shapiro He was also the driving force behind Coyotos which was an evolutionary step beyond the EROS operating system br The EROS project started in as a clean room reconstruction of an earlier operating system KeyKOS KeyKOS was developed by Key Logic Inc and was a direct continuation of work on the earlier Great New Operating System In the Sky GNOSIS system created by Tymshare Inc The circumstances surrounding Key Logic s demise in made licensing KeyKOS impractical Since KeyKOS did not run on popular commodity processors in any case the decision was made to reconstruct it from the publicly available documentation br By late it had become clear that processor architecture had changed significantly since the introduction of the capability idea and it was no longer obvious that component structured systems were practical Microkernel based systems which similarly favor large numbers of processes and IPC were facing severe performance challenges and it was uncertain if these could be successfully resolved The x architecture was clearly emerging as the dominant architecture but the expensive user supervisor transition latency on the and presented serious challenges for process based isolation The EROS project was turning into a research effort and moved to the University of Pennsylvania to become the focus of Shapiro s dissertation research By a high performance implementation for the Pentium processor had been demonstrated that was directly performance competitive with the L microkernel family which is known for its exceptional speed in IPC The EROS confinement mechanism had been formally verified in the process creating a general formal model for secure capability systems br In Shapiro joined the faculty of Computer Science at Johns Hopkins University At Hopkins the goal was to show how to use the facilities provided by the EROS kernel to construct secure and defensible servers at application level Funded by the Defense Advanced Research Projects Agency and the Air Force Research Laboratory EROS was used as the basis for a trusted window system a high performance defensible network stack and the beginnings of a secure web browser It was also used to explore the effectiveness of lightweight static checking In some very challenging security issues were discovered that are intrinsic to any system architecture based on synchronous IPC primitives notably including EROS and L Work on EROS halted in favor of Coyotos which resolved these issues br As of EROS and its successors are the only widely available capability systems that run on commodity hardware br br br Status br Work on EROS and Coyotos by the original group has halted but there is a successor system The CapROS system is building directly from the EROS code base CapROS is expected to be released in various commercial deployments br br br See also br Nanokernel br br br br br br Journals br Lipton R J Snyder L July A Linear Time Algorithm for Deciding Subject Security Journal of the ACM doi S CID br Harrison Michael A Ruzzo W L Ullman Jeffrey D August Protection in Operating Systems Communications of the ACM doi S CID br br br External links br EROS home page at the Wayback Machine archived March 