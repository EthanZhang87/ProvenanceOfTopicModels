title: X86-64
id: 244374
x also known as x x AMD and Intel is a bit version of the x instruction set first announced in It introduced two new modes of operation bit mode and compatibility mode along with a new level paging mode br With bit mode and the new paging mode it supports vastly larger amounts of virtual memory and physical memory than was possible on its bit predecessors allowing programs to store larger amounts of data in memory x also expands general purpose registers to bit and expands the number of them from some of which had limited or fixed functionality e g for stack management to fully general and provides numerous other enhancements Floating point arithmetic is supported via mandatory SSE like instructions and x MMX style registers are generally not used but still available even in bit mode instead a set of vector registers bits each is used Each register can store one or two double precision numbers or one to four single precision numbers or various integer formats In bit mode instructions are modified to support bit operands and bit addressing mode br The compatibility mode defined in the architecture allows bit and bit user applications to run unmodified coexisting with bit applications if the bit operating system supports them As the full x bit and bit instruction sets remain implemented in hardware without any intervening emulation these older executables can run with little or no performance penalty while newer or modified applications can take advantage of new features of the processor design to achieve performance improvements Also a processor supporting x still powers on in real mode for full backward compatibility with the as x processors supporting protected mode have done since the br The original specification created by AMD and released in has been implemented by AMD Intel and VIA The AMD K microarchitecture in the Opteron and Athlon processors was the first to implement it This was the first significant addition to the x architecture designed by a company other than Intel Intel was forced to follow suit and introduced a modified NetBurst family which was software compatible with AMD s specification VIA Technologies introduced x in their VIA Isaiah architecture with the VIA Nano br The x architecture was quickly adopted for desktop and laptop personal computers and servers which were commonly configured for GiB gibibytes of memory or more It has effectively replaced the discontinued Intel Itanium architecture formerly IA which was originally intended to replace the x architecture x and Itanium are not compatible on the native instruction set level and operating systems and applications compiled for one architecture cannot be run on the other natively br br br AMD br br br History br AMD also variously referred to by AMD in their literature and documentation as AMD bit Technology and AMD x Architecture was created as an alternative to the radically different IA architecture designed by Intel and Hewlett Packard which was backward incompatible with IA the bit version of the x architecture AMD originally announced AMD in with a full specification available in August As AMD was never invited to be a contributing party for the IA architecture and any kind of licensing seemed unlikely the AMD architecture was positioned by AMD from the beginning as an evolutionary way to add bit computing capabilities to the existing x architecture while supporting legacy bit x code as opposed to Intel s approach of creating an entirely new completely x incompatible bit architecture with IA br The first AMD based processor the Opteron was released in April br br br Implementations br AMD s processors implementing the AMD architecture include Opteron Athlon Athlon X Athlon FX Athlon II followed by X X or X to indicate the number of cores and XLT models Turion Turion X Sempron Palermo E stepping and all Manila models Phenom followed by X or X to indicate the number of cores Phenom II followed by X X X or X to indicate the number of cores FX Fusion APU and Ryzen Epyc br br br Architectural features br The primary defining characteristic of AMD is the availability of bit general purpose processor registers for example rax bit integer arithmetic and logical operations and bit virtual addresses The designers took the opportunity to make other improvements as well br Notable changes in the bit extensions include br br bit integer capability br All general purpose registers GPRs are expanded from bits to bits and all arithmetic and logical operations memory to register and register to memory operations etc can operate directly on bit integers Pushes and pops on the stack default to byte strides and pointers are bytes wide br Additional registers br In addition to increasing the size of the general purpose registers the number of named general purpose registers is increased from eight i e eax ecx edx ebx esp ebp esi edi in x to i e rax rcx rdx rbx rsp rbp rsi rdi r r r r r r r r It is therefore possible to keep more local variables in registers rather than on the stack and to let registers hold frequently accessed constants arguments for small and fast subroutines may also be passed in registers to a greater extent br AMD still has fewer registers than many RISC instruction sets e g Power ISA has GPRs bit ARM RISC V I SPARC Alpha MIPS and PA RISC have or VLIW like machines such as the IA which has registers However an AMD implementation may have far more internal registers than the number of architectural registers exposed by the instruction set see register renaming For example AMD Zen cores have bit integer and bit vector floating point physical internal registers br Additional XMM SSE registers br Similarly the number of bit XMM registers used for Streaming SIMD instructions is also increased from to br The traditional x FPU register stack is not included in the register file size extension in bit mode compared with the XMM registers used by SSE which did get extended The x register stack is not a simple register file although it does allow direct access to individual registers by low cost exchange operations br Larger virtual address space br The AMD architecture defines a bit virtual address format of which the low order bits are used in current implementations This allows up to TiB bytes of virtual address space The architecture definition allows this limit to be raised in future implementations to the full bits extending the virtual address space to EiB bytes This is compared to just GiB bytes for the x br This means that very large files can be operated on by mapping the entire file into the process s address space which is often much faster than working with file read write calls rather than having to map regions of the file into and out of the address space br Larger physical address space br The original implementation of the AMD architecture implemented bit physical addresses and so could address up to TiB bytes of RAM Current implementations of the AMD architecture starting from AMD h microarchitecture extend this to bit physical addresses and therefore can address up to TiB bytes of RAM The architecture permits extending this to bits in the future limited by the page table entry format this would allow addressing of up to PiB of RAM For comparison bit x processors are limited to GiB of RAM in Physical Address Extension PAE mode or GiB of RAM without PAE mode br Larger physical address space in legacy mode br When operating in legacy mode the AMD architecture supports Physical Address Extension PAE mode as do most current x processors but AMD extends PAE from bits to an architectural limit of bits of physical address Any implementation therefore allows the same physical address limit as under long mode br Instruction pointer relative data access br Instructions can now reference data relative to the instruction pointer RIP register This makes position independent code as is often used in shared libraries and code loaded at run time more efficient br SSE instructions br The original AMD architecture adopted Intel s SSE and SSE as core instructions These instruction sets provide a vector supplement to the scalar x FPU for the single precision and double precision data types SSE also offers integer vector operations for data types ranging from bit to bit precision This makes the vector capabilities of the architecture on par with those of the most advanced x processors of its time These instructions can also be used in bit mode The proliferation of bit processors has made these vector capabilities ubiquitous in home computers allowing the improvement of the standards of bit applications The bit edition of Windows for example requires the presence of SSE instructions SSE instructions and later Streaming SIMD Extensions instruction sets are not standard features of the architecture br No Execute bit br The No Execute bit or NX bit bit of the page table entry allows the operating system to specify which pages of virtual address space can contain executable code and which cannot An attempt to execute code from a page tagged no execute will result in a memory access violation similar to an attempt to write to a read only page This should make it more difficult for malicious code to take control of the system via buffer overrun or unchecked buffer attacks A similar feature has been available on x processors since the as an attribute of segment descriptors however this works only on an entire segment at a time br Segmented addressing has long been considered an obsolete mode of operation and all current PC operating systems in effect bypass it setting all segments to a base address of zero and in their bit implementation a size of GiB AMD was the first x family vendor to implement no execute in linear addressing mode The feature is also available in legacy mode on AMD processors and recent Intel x processors when PAE is used br Removal of older features br A few system programming features of the x architecture were either unused or underused in modern operating systems and are either not available on AMD in long bit and compatibility mode or exist only in limited form These include segmented addressing although the FS and GS segments are retained in vestigial form for use as extra base pointers to operating system structures the task state switch mechanism and virtual mode These features remain fully implemented in legacy mode allowing these processors to run bit and bit operating systems without modifications Some instructions that proved to be rarely useful are not supported in bit mode including saving restoring of segment registers on the stack saving restoring of all registers PUSHA POPA decimal arithmetic BOUND and INTO instructions and far jumps and calls with immediate operands br br br Virtual address space details br br br Canonical form addresses br br Although virtual addresses are bits wide in bit mode current implementations and all chips that are known to be in the planning stages do not allow the entire virtual address space of bytes EiB to be used This would be approximately four billion times the size of the virtual address space on bit machines Most operating systems and applications will not need such a large address space for the foreseeable future so implementing such wide virtual addresses would simply increase the complexity and cost of address translation with no real benefit AMD therefore decided that in the first implementations of the architecture only the least significant bits of a virtual address would actually be used in address translation page table lookup br In addition the AMD specification requires that the most significant bits of any virtual address bits through must be copies of bit in a manner akin to sign extension If this requirement is not met the processor will raise an exception Addresses complying with this rule are referred to as canonical form Canonical form addresses run from through FFF FFFFFFFF and from FFFF through FFFFFFFF FFFFFFFF for a total of TiB of usable virtual address space This is still times larger than the virtual GiB address space of bit machines br This feature eases later scalability to true bit addressing Many operating systems including but not limited to the Windows NT family take the higher addressed half of the address space named kernel space for themselves and leave the lower addressed half user space for application code user mode stacks heaps and other data regions The canonical address design ensures that every AMD compliant implementation has in effect two memory halves the lower half starts at and grows upwards as more virtual address bits become available while the higher half is docked to the top of the address space and grows downwards Also enforcing the canonical form of addresses by checking the unused address bits prevents their use by the operating system in tagged pointers as flags privilege markers etc as such use could become problematic when the architecture is extended to implement more virtual address bits br The first versions of Windows for x did not even use the full TiB they were restricted to just TiB of user space and TiB of kernel space Windows did not support the entire bit address space until Windows which was released in October br br br Page table structure br br The bit addressing mode long mode is a superset of Physical Address Extensions PAE because of this page sizes may be KiB bytes or MiB bytes Long mode also supports page sizes of GiB bytes Rather than the three level page table system used by systems in PAE mode systems running in long mode use four levels of page table PAE s Page Directory Pointer Table is extended from four entries to and an additional Page Map Level PML Table is added containing entries in bit implementations A full mapping hierarchy of KiB pages for the whole bit space would take a bit more than GiB of memory about of the TiB virtual space br br Intel has implemented a scheme with a level page table which allows Intel processors to support a bit virtual address space Further extensions may allow full bit virtual address space and physical memory with bit page table descriptors and or bit memory offsets for KiB and MiB page allocation sizes the page table entry would be expanded to bits to support additional hardware flags for page size and virtual address space size br br br Operating system limits br The operating system can also limit the virtual address space Details where applicable are given in the Operating system compatibility and characteristics section br br br Physical address space details br Current AMD processors support a physical address space of up to bytes of RAM or TiB However as of there were no known x motherboards that support TiB of RAM The operating system may place additional limits on the amount of RAM that is usable or supported Details on this point are given in the Operating system compatibility and characteristics section of this article br br br Operating modes br The architecture has two primary modes of operation long mode and legacy mode br br br Long mode br br Long mode is the architecture s intended primary mode of operation it is a combination of the processor s native bit mode and a combined bit and bit compatibility mode It is used by bit operating systems Under a bit operating system bit programs run under bit mode and bit and bit protected mode applications that do not need to use either real mode or virtual mode in order to execute at any time run under compatibility mode Real mode programs and programs that use virtual mode at any time cannot be run in long mode unless those modes are emulated in software However such programs may be started from an operating system running in long mode on processors supporting VT x or AMD V by creating a virtual processor running in the desired mode br Since the basic instruction set is the same there is almost no performance penalty for executing protected mode x code This is unlike Intel s IA where differences in the underlying instruction set mean that running bit code must be done either in emulation of x making the process slower or with a dedicated x coprocessor However on the x platform many x applications could benefit from a bit recompile due to the additional registers in bit code and guaranteed SSE based FPU support which a compiler can use for optimization However applications that regularly handle integers wider than bits such as cryptographic algorithms will need a rewrite of the code handling the huge integers in order to take advantage of the bit registers br br br Legacy mode br Legacy mode is the mode that the processor is in when it is not in long mode In this mode the processor acts like an older x processor and only bit and bit code can be executed Legacy mode allows for a maximum of bit virtual addressing which limits the virtual address space to GiB bit programs cannot be run from legacy mode br br br Protected mode br Protected mode is made into a submode of legacy mode It is the submode that bit operating systems and bit protected mode operating systems operate in when running on an x CPU br br br Real mode br Real mode is the initial mode of operation when the processor is initialized and is a submode of legacy mode It is backwards compatible with the original Intel and Intel processors Real mode is primarily used today by operating system bootloaders which are required by the architecture to configure virtual memory details before transitioning to higher modes This mode is also used by any operating system that needs to communicate with the system firmware with a traditional BIOS style interface br br br Intel br Intel is Intel s implementation of x used and implemented in various processors made by Intel br br br History br Historically AMD has developed and produced processors with instruction sets patterned after Intel s original designs but with x roles were reversed Intel found itself in the position of adopting the ISA that AMD created as an extension to Intel s own x processor line br Intel s project was originally codenamed Yamhill after the Yamhill River in Oregon s Willamette Valley After several years of denying its existence Intel announced at the February IDF that the project was indeed underway Intel s chairman at the time Craig Barrett admitted that this was one of their worst kept secrets br Intel s name for this instruction set has changed several times The name used at the IDF was CT presumably for Clackamas Technology another codename from an Oregon river within weeks they began referring to it as IA e for IA extensions and in March unveiled the official name EM T Extended Memory Technology In late Intel began instead using the name Intel for its implementation paralleling AMD s use of the name AMD br The first processor to implement Intel was the multi socket processor Xeon code named Nocona in June In contrast the initial Prescott chips February did not enable this feature Intel subsequently began selling Intel enabled Pentium s using the E revision of the Prescott core being sold on the OEM market as the Pentium model F The E revision also adds eXecute Disable XD Intel s name for the NX bit to Intel and has been included in then current Xeon code named Irwindale Intel s official launch of Intel under the name EM T at that time in mainstream desktop processors was the N stepping Prescott M br The first Intel mobile processor implementing Intel is the Merom version of the Core processor which was released on July None of Intel s earlier notebook CPUs Core Duo Pentium M Celeron M Mobile Pentium implement Intel br br br Implementations br Intel s processors implementing the Intel architecture include the Pentium F series x series and Celeron D models x x and and all later Celerons all models of Xeon since Nocona all models of Pentium Dual Core processors since Merom M the Atom D D D D N N N N N N N and N all versions of the Pentium D Pentium Extreme Edition Core Core i Core i Core i and Core i processors and the Xeon Phi series processors br br br X S br X S is a simplification of x proposed by Intel in May for their Intel products The new architecture would remove support for bit and bit operating systems while bit programs will still run under a bit OS A CPU would no longer have legacy mode and start directly in bit long mode There will be a way to switch to level paging without going through the unpaged mode Specific removed features include br br Intel believes the change follows logically after the removal of the A gate in and the removal of bit and bit OS support in Intel firmware in Support for legacy operating systems would be accomplished via hardware accelerated virtualization and or ring emulation br br br VIA s x implementation br VIA Technologies introduced their first implementation of the x architecture in after five years of development by its CPU division Centaur Technology br Codenamed Isaiah the bit architecture was unveiled on January and launched on May under the VIA Nano brand name br The processor supports a number of VIA specific x extensions designed to boost efficiency in low power appliances br It is expected that the Isaiah architecture will be twice as fast in integer performance and four times as fast in floating point performance as the previous generation VIA Esther at an equivalent clock speed Power consumption is also expected to be on par with the previous generation VIA CPUs with thermal design power ranging from W to W br Being a completely new design the Isaiah architecture was built with support for features like the x instruction set and x virtualization which were unavailable on its predecessors the VIA C line while retaining their encryption extensions br br br Microarchitecture levels br In through a collaboration between AMD Intel Red Hat and SUSE three microarchitecture levels or feature levels on top of the x baseline were defined x v x v and x v These levels define specific features that can be targeted by programmers to provide compile time optimizations The features exposed by each level are as follows br br All levels include features found in the previous levels Instruction set extensions not concerned with general purpose computation including AES NI and RDRAND are excluded from the level requirements br br br Differences between AMD and Intel br Although nearly identical there are some differences between the two instruction sets in the semantics of a few seldom used machine instructions or situations which are mainly used for system programming Compilers generally produce executables i e machine code that avoid any differences at least for ordinary application programs This is therefore of interest mainly to developers of compilers operating systems and similar which must deal with individual and special system instructions br br br Recent implementations br Intel s BSF and BSR instructions act differently than AMD s when the source is zero and the operand size is bits The processor sets the zero flag and leaves the upper bits of the destination undefined Note that Intel documents that the destination register has an undefined value in this case but in practice in silicon implements the same behaviour as AMD destination unmodified The separate claim about maybe not preserving bits in the upper has not been verified but has only been ruled out for Core and Skylake not all Intel microarchitectures like bit Pentium or low power Atom br AMD requires a different microcode update format and control MSRs model specific registers while Intel implements microcode update unchanged from their bit only processors br Intel lacks some MSRs that are considered architectural in AMD These include SYSCFG TOP MEM and TOP MEM br Intel allows SYSCALL SYSRET only in bit mode not in compatibility mode and allows SYSENTER SYSEXIT in both modes AMD lacks SYSENTER SYSEXIT in both sub modes of long mode br In bit mode near branches with the H operand size override prefix behave differently Intel ignores this prefix the instruction has a bit sign extended offset and instruction pointer is not truncated AMD uses a bit offset field in the instruction and clears the top bits of instruction pointer br On Intel but not AMD the REX W prefix can be used with the far pointer instructions LFS LGS LSS JMP FAR CALL FAR to increase the size of their far pointer argument to bits bit offset bit segment br Intel lacks the ability to save and restore a reduced and thus faster version of the floating point state involving the FXSAVE and FXRSTOR instructions br AMD processors ever since Opteron Rev E and Athlon Rev D have reintroduced limited support for segmentation via the Long Mode Segment Limit Enable LMSLE bit to ease virtualization of bit guests LMLSE support was removed in the Zen processor br When returning to a non canonical address using SYSRET AMD processors execute the general protection fault handler in privilege level while on Intel processors it is executed in privilege level br The ordering guarantees provided by some memory ordering instructions such as LFENCE and MFENCE differ between Intel and AMD br LFENCE is dispatch serializing enabling it to be used as a speculation fence on Intel but is not architecturally guaranteed to be dispatch serializing on AMD br MFENCE is a fully serializing instruction including instruction fetch serialization on AMD but not Intel br br br Older implementations br br The AMD processors prior to Revision F distinguished by the switch from DDR to DDR memory and new sockets AM F and S of lacked the CMPXCHG B instruction which is an extension of the CMPXCHG B instruction present on most post processors Similar to CMPXCHG B CMPXCHG B allows for atomic operations on octa words bit values This is useful for parallel algorithms that use compare and swap on data larger than the size of a pointer common in lock free and wait free algorithms Without CMPXCHG B one must use workarounds such as a critical section or alternative lock free approaches Its absence also prevents bit Windows prior to Windows from having a user mode address space larger than TiB The bit version of Windows requires the instruction br Early AMD and Intel CPUs lacked LAHF and SAHF instructions in bit mode AMD introduced these instructions also in bit mode with their nm revision D processors starting with Athlon in October Intel introduced the instructions in October with the F h and later revisions of NetBurst The bit version of Windows requires this feature br Early Intel CPUs with Intel also lack the NX bit of the AMD architecture It was added in the stepping E F h Pentium in October This feature is required by all versions of Windows br Early Intel implementations had a bit GiB physical addressing of memory while original AMD implementations had a bit TiB physical addressing Intel used the bit physical addressing first on Xeon MP Potomac launched on March The difference is not a difference of the user visible ISAs In AMD h based Opteron was the first to provide a bit TiB physical address space Intel s physical addressing was extended to bits TiB in Nehalem EX in and to bits TiB in Sandy Bridge E in With the Ice Lake rd gen Xeon Scalable processors Intel increased the virtual addressing to bits PiB and physical to bits PiB in necessitating a level paging The following year AMD added the same in th generation EPYC Genoa Non server CPUs retain smaller address spaces for longer br br br Adoption br br In supercomputers tracked by TOP the appearance of bit extensions for the x architecture enabled bit x processors by AMD and Intel to replace most RISC processor architectures previously used in such systems including PA RISC SPARC Alpha and others as well as bit x even though Intel itself initially tried unsuccessfully to replace x with a new incompatible bit architecture in the Itanium processor br As of a HPE EPYC based supercomputer called Frontier is number one The first ARM based supercomputer appeared on the list in and in recent years non CPU architecture co processors GPGPU have also played a big role in performance Intel s Xeon Phi Knights Corner coprocessors which implement a subset of x with some vector extensions are also used along with x processors in the Tianhe supercomputer br br br Operating system compatibility and characteristics br The following operating systems and releases support the x architecture in long mode br br br BSD br br br DragonFly BSD br Preliminary infrastructure work was started in February for a x port This development later stalled Development started again during July br and continued during Google Summer of Code and SoC The first official release to contain x support was version br br br FreeBSD br FreeBSD first added x support under the name amd as an experimental architecture in RELEASE in June It was included as a standard distribution architecture as of RELEASE in January Since then FreeBSD has designated it as a Tier platform The RELEASE version cleaned up some quirks with running x executables under amd and most drivers work just as they do on the x architecture Work is currently being done to integrate more fully the x application binary interface ABI in the same manner as the Linux bit ABI compatibility currently works br br br NetBSD br x architecture support was first committed to the NetBSD source tree on June As of NetBSD released on December NetBSD amd is a fully integrated and supported port br bit code is still supported in bit mode with a netbsd kernel compatibility layer for bit syscalls The NX bit is used to provide non executable stack and heap with per page granularity segment granularity being used on bit x br br br OpenBSD br OpenBSD has supported AMD since OpenBSD released on May Complete in tree implementation of AMD support was achieved prior to the hardware s initial release because AMD had loaned several machines for the project s hackathon that year OpenBSD developers have taken to the platform because of its support for the NX bit which allowed for an easy implementation of the W X feature br The code for the AMD port of OpenBSD also runs on Intel processors which contains cloned use of the AMD extensions but since Intel left out the page table NX bit in early Intel processors there is no W X capability on those Intel CPUs later Intel processors added the NX bit under the name XD bit Symmetric multiprocessing SMP works on OpenBSD s AMD port starting with release on November br br br DOS br br It is possible to enter long mode under DOS without a DOS extender but the user must return to real mode in order to call BIOS or DOS interrupts br It may also be possible to enter long mode with a DOS extender similar to DOS GW but more complex since x lacks virtual mode DOS itself is not aware of that and no benefits should be expected unless running DOS in an emulation with an adequate virtualization driver backend for example the mass storage interface br br br Linux br br Linux was the first operating system kernel to run the x architecture in long mode starting with the version in preceding the hardware s availability Linux also provides backward compatibility for running bit executables This permits programs to be recompiled into long mode while retaining the use of bit programs Current Linux distributions ship with x native kernels and userlands Some such as Arch Linux SUSE Mandriva and Debian allow users to install a set of bit components and libraries when installing off a bit distribution medium thus allowing most existing bit applications to run alongside the bit OS br x ABI Application Binary Interface introduced in Linux allows programs compiled for the x ABI to run in the bit mode of x while only using bit pointers and data fields br Though this limits the program to a virtual address space of GiB it also decreases the memory footprint of the program and in some cases can allow it to run faster br bit Linux allows up to TiB of virtual address space for individual processes and can address approximately TiB of physical memory subject to processor and system limitations or up to PiB virtual and PiB physical with level paging enabled br br br macOS br Mac OS X and higher versions of Mac OS X run bit command line tools using the POSIX and math libraries on bit Intel based machines just as all versions of Mac OS X and run them on bit PowerPC machines No other libraries or frameworks work with bit applications in Mac OS X br The kernel and all kernel extensions are bit only br Mac OS X supports bit GUI applications using Cocoa Quartz OpenGL and X on bit Intel based machines as well as on bit PowerPC machines br All non GUI libraries and frameworks also support bit applications on those platforms The kernel and all kernel extensions are bit only br Mac OS X is the first version of macOS that supports a bit kernel However not all bit computers can run the bit kernel and not all bit computers that can run the bit kernel will do so by default br The bit kernel like the bit kernel supports bit applications both kernels also support bit applications bit applications have a virtual address space limit of GiB under either kernel The bit kernel does not support bit kernel extensions and the bit kernel does not support bit kernel extensions br OS X includes only the bit kernel but continues to support bit applications it does not support bit kernel extensions however br macOS includes only the bit kernel and no longer supports bit applications This removal of support has presented a problem for WineHQ and the commercial version CrossOver as it needs to still be able to run bit Windows applications The solution termed wine on was to add thunks that bring the CPU in and out of bit compatibility mode in the nominally bit application br macOS uses the universal binary format to package and bit versions of application and library code into a single file the most appropriate version is automatically selected at load time In Mac OS X the universal binary format is also used for the kernel and for those kernel extensions that support both bit and bit kernels br br br Solaris br br Solaris and later releases support the x architecture br For Solaris just as with the SPARC architecture there is only one operating system image which contains a bit kernel and a bit kernel this is labeled as the x x DVD ROM image The default behavior is to boot a bit kernel allowing both bit and existing or new bit executables to be run A bit kernel can also be manually selected in which case only bit executables will run The isainfo command can be used to determine if a system is running a bit kernel br For Solaris only the bit kernel is provided However the bit kernel supports both and bit executables libraries and system calls br br br Windows br x editions of Microsoft Windows client and server Windows XP Professional x Edition and Windows Server x Edition were released in March Internally they are actually the same build SP as they share the same source base and operating system binaries so even system updates are released in unified packages much in the manner as Windows Professional and Server editions for x Windows Vista which also has many different editions was released in January Windows was released in July Windows Server R was sold in only x and Itanium editions later versions of Windows Server only offer an x edition br Versions of Windows for x prior to Windows and Windows Server R offer the following br br TiB of virtual address space per process accessible from both user mode and kernel mode referred to as the user mode address space An x program can use all of this subject to backing store limits on the system and provided it is linked with the large address aware option which is present by default This is a fold increase over the default GiB user mode virtual address space offered by bit Windows br TiB of kernel mode virtual address space for the operating system As with the user mode address space this is a fold increase over bit Windows versions The increased space primarily benefits the file system cache and kernel mode heaps non paged pool and paged pool Windows only uses a total of TiB out of the TiB implemented by the processors because early AMD processors lacked a CMPXCHG B instruction br Under Windows and Windows Server R both user mode and kernel mode virtual address spaces have been extended to TiB These versions of Windows will not install on processors that lack the CMPXCHG B instruction br The following additional characteristics apply to all x versions of Windows br br Ability to run existing bit applications exe programs and dynamic link libraries dlls using WoW if WoW is supported on that version Furthermore a bit program if it was linked with the large address aware option can use up to GiB of virtual address space in bit Windows instead of the default GiB optional GiB with GiB boot option and large address aware link option offered by bit Windows Unlike the use of the GiB boot option on x this does not reduce the kernel mode virtual address space available to the operating system bit applications can therefore benefit from running on x Windows even if they are not recompiled for x br Both and bit applications if not linked with large address aware are limited to GiB of virtual address space br Ability to use up to GiB Windows XP Vista GiB Windows GiB Windows TiB Windows Server TiB Windows Server Windows TiB Windows Server or TiB Windows Server of physical random access memory RAM br LLP data model in C C int and long types are bits wide long long is bits while pointers and types derived from pointers are bits wide br Kernel mode device drivers must be bit versions there is no way to run bit kernel mode executables within the bit operating system User mode device drivers can be either bit or bit br bit Windows Win and DOS applications will not run on x versions of Windows due to the removal of the virtual DOS machine subsystem NTVDM which relied upon the ability to use virtual mode Virtual mode cannot be entered while running in long mode br Full implementation of the NX No Execute page protection feature This is also implemented on recent bit versions of Windows when they are started in PAE mode br Instead of FS segment descriptor on x versions of the Windows NT family GS segment descriptor is used to point to two operating system defined structures Thread Information Block NT TIB in user mode and Processor Control Region KPCR in kernel mode Thus for example in user mode GS is the address of the first member of the Thread Information Block Maintaining this convention made the x port easier but required AMD to retain the function of the FS and GS segments in long mode even though segmented addressing per se is not really used by any modern operating system br Early reports claimed that the operating system scheduler would not save and restore the x FPU machine state across thread context switches Observed behavior shows that this is not the case the x state is saved and restored except for kernel mode only threads a limitation that exists in the bit version as well The most recent documentation available from Microsoft states that the x MMX DNow instructions may be used in long mode but that they are deprecated and may cause compatibility problems in the future DNow is no longer available on AMD processors with the exception of the PREFETCH and PREFETCHW instructions which are also supported on Intel processors as of Broadwell br Some components like Jet Database Engine and Data Access Objects will not be ported to bit architectures such as x and IA br Microsoft Visual Studio can compile native applications to target either the x architecture which can run only on bit Microsoft Windows or the IA architecture which can run as a bit application on bit Microsoft Windows or bit Microsoft Windows in WoW emulation mode Managed applications can be compiled either in IA x or AnyCPU modes Software created in the first two modes behave like their IA or x native code counterparts respectively When using the AnyCPU mode however applications in bit versions of Microsoft Windows run as bit applications while they run as a bit application in bit editions of Microsoft Windows br br br Video game consoles br Both the PlayStation and Xbox One and all variants of those consoles incorporate AMD x processors based on the Jaguar microarchitecture Firmware and games are written in x code no legacy x code is involved br The current generation the PlayStation and the Xbox Series X and Series S respectively also incorporate AMD x processors based on the Zen microarchitecture br Although considered a PC the Steam Deck uses a custom AMD x accelerated processing unit APU based on the Zen microarchitecture br br br Industry naming conventions br Since AMD and Intel are substantially similar many software and hardware products use one vendor neutral term to indicate their compatibility with both implementations AMD s original designation for this processor architecture x is still used for this purpose as is the variant x Other companies such as Microsoft and Sun Microsystems Oracle Corporation use the contraction x in marketing material br The term IA refers to the Itanium processor and should not be confused with x as it is a completely different instruction set br Many operating systems and products especially those that introduced x support prior to Intel s entry into the market use the term AMD or amd to refer to both AMD and Intel br br amd br Most BSD systems such as FreeBSD MidnightBSD NetBSD and OpenBSD refer to both AMD and Intel under the architecture name amd br Some Linux distributions such as Debian Ubuntu Gentoo Linux refer to both AMD and Intel under the architecture name amd br Microsoft Windows s x versions use the AMD moniker internally to designate various components which use or are compatible with this architecture For example the environment variable PROCESSOR ARCHITECTURE is assigned the value AMD as opposed to x in bit versions and the system directory on a Windows x Edition installation CD ROM is named AMD in contrast to i in bit versions br Sun s Solaris s isalist command identifies both AMD and Intel based systems as amd br Java Development Kit JDK the name amd is used in directory names containing x files br x br The Linux kernel and the GNU Compiler Collection refers to bit architecture as x br Some Linux distributions such as Fedora openSUSE Arch Linux Gentoo Linux refer to this bit architecture as x br Apple macOS refers to bit architecture as x or x as seen in the Terminal command arch and in their developer documentation br Breaking with most other BSD systems DragonFly BSD refers to bit architecture as x br Haiku refers to bit architecture as x br br br Licensing br x AMD was solely developed by AMD AMD holds patents on techniques used in AMD those patents must be licensed from AMD in order to implement AMD Intel entered into a cross licensing agreement with AMD licensing to AMD their patents on existing x techniques and licensing from AMD their patents on techniques used in x In AMD and Intel settled several lawsuits and cross licensing disagreements extending their cross licensing agreements br br br See also br AMD Generic Encapsulated Software Architecture AGESA br Transient execution CPU vulnerability br br br Notes br br br br br br External links br AMD Developer Guides Manuals ISA Documents br x Extending the x architecture to bits technical talk by the architect of AMD video archive and second talk by the same speaker video archive br AMD s Enhanced Virus Protection br Intel tweaks EM T for full AMD compatibility br Analyst Intel Reverse Engineered AMD br Early report of differences between Intel IA e and AMD br Porting to bit GNU Linux Systems by Andreas Jaeger from GCC Summit An excellent paper explaining almost all practical aspects for a transition from bit to bit br Intel Architecture br Intel Software Network bits br TurboIRC COM tutorials including examples of how to of enter protected and long mode the raw way from DOS br Seven Steps of Migrating a Program to a bit System br Memory Limits for Windows Releases