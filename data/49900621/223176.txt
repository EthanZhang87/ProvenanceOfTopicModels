title: Unix philosophy
id: 223176
The Unix philosophy originated by Ken Thompson is a set of cultural norms and philosophical approaches to minimalist modular software development It is based on the experience of leading developers of the Unix operating system Early Unix developers were important in bringing the concepts of modularity and reusability into software engineering practice spawning a software tools movement Over time the leading developers of Unix and programs that ran on it established a set of cultural norms for developing software these norms became as important and influential as the technology of Unix itself and have been termed the Unix philosophy br The Unix philosophy emphasizes building simple compact clear modular and extensible code that can be easily maintained and repurposed by developers other than its creators The Unix philosophy favors composability as opposed to monolithic design br br br Origin br The Unix philosophy is documented by Doug McIlroy in the Bell System Technical Journal from br br Make each program do one thing well To do a new job build afresh rather than complicate old programs by adding new features br Expect the output of every program to become the input to another as yet unknown program Don t clutter output with extraneous information Avoid stringently columnar or binary input formats Don t insist on interactive input br Design and build software even operating systems to be tried early ideally within weeks Don t hesitate to throw away the clumsy parts and rebuild them br Use tools in preference to unskilled help to lighten a programming task even if you have to detour to build the tools and expect to throw some of them out after you ve finished using them br It was later summarized by Peter H Salus in A Quarter Century of Unix br br Write programs that do one thing and do it well br Write programs to work together br Write programs to handle text streams because that is a universal interface br In their Unix paper of Ritchie and Thompson quote the following design considerations br br Make it easy to write test and run programs br Interactive use instead of batch processing br Economy and elegance of design due to size constraints salvation through suffering br Self supporting system all Unix software is maintained under Unix br br br Parts br br br The UNIX Programming Environment br In their preface to the book The UNIX Programming Environment Brian Kernighan and Rob Pike both from Bell Labs give a brief description of the Unix design and the Unix philosophy br br Even though the UNIX system introduces a number of innovative programs and techniques no single program or idea makes it work well Instead what makes it effective is the approach to programming a philosophy of using the computer Although that philosophy can t be written down in a single sentence at its heart is the idea that the power of a system comes more from the relationships among programs than from the programs themselves Many UNIX programs do quite trivial things in isolation but combined with other programs become general and useful tools br The authors further write that their goal for this book is to communicate the UNIX programming philosophy br br br Program Design in the UNIX Environment br br In October Brian Kernighan and Rob Pike published a paper called Program Design in the UNIX Environment In this paper they criticize the accretion of program options and features found in some newer Unix systems such as BSD and System V and explain the Unix philosophy of software tools each performing one general function br br Much of the power of the UNIX operating system comes from a style of program design that makes programs easy to use and more important easy to combine with other programs This style has been called the use of software tools and depends more on how the programs fit into the programming environment and how they can be used with other programs than on how they are designed internally This style was based on the use of tools using programs separately or in combination to get a job done rather than doing it by hand by monolithic self sufficient subsystems or by special purpose one time programs br The authors contrast Unix tools such as cat with larger program suites used by other systems br br The design of cat is typical of most UNIX programs it implements one simple but general function that can be used in many different applications including many not envisioned by the original author Other commands are used for other functions For example there are separate commands for file system tasks like renaming files deleting them or telling how big they are Other systems instead lump these into a single file system command with an internal structure and command language of its own The PIP file copy program found on operating systems like CP M or RSX is an example That approach is not necessarily worse or better but it is certainly against the UNIX philosophy br br br Doug McIlroy on Unix programming br br McIlroy then head of the Bell Labs Computing Sciences Research Center and inventor of the Unix pipe summarized the Unix philosophy as follows br br This is the Unix philosophy Write programs that do one thing and do it well Write programs to work together Write programs to handle text streams because that is a universal interface br Beyond these statements he has also emphasized simplicity and minimalism in Unix programming br br The notion of intricate and beautiful complexities is almost an oxymoron Unix programmers vie with each other for simple and beautiful honors a point that s implicit in these rules but is well worth making overt br Conversely McIlroy has criticized modern Linux as having software bloat remarking that adoring admirers have fed Linux goodies to a disheartening state of obesity He contrasts this with the earlier approach taken at Bell Labs when developing and revising Research Unix br br Everything was small and my heart sinks for Linux when I see the size of it The manual page which really used to be a manual page is now a small volume with a thousand options We used to sit around in the Unix Room saying What can we throw out Why is there this option It s often because there is some deficiency in the basic design you didn t really hit the right design point Instead of adding an option think about what was forcing you to add that option br br br Do One Thing and Do It Well br As stated by McIlroy and generally accepted throughout the Unix community Unix programs have always been expected to follow the concept of DOTADIW or Do One Thing And Do It Well There are limited sources for the acronym DOTADIW on the Internet but it is discussed at length during the development and packaging of new operating systems especially in the Linux community br Patrick Volkerding the project lead of Slackware Linux invoked this design principle in a criticism of the systemd architecture stating that attempting to control services sockets devices mounts etc all within one daemon flies in the face of the Unix concept of doing one thing and doing it well br br br Eric Raymond s Unix Rules br In his book The Art of Unix Programming that was first published in Eric S Raymond open source advocate and programmer summarizes the Unix philosophy as KISS Principle of Keep it Simple Stupid He provides a series of design rules br br Build modular programs br Write readable programs br Use composition br Separate mechanisms from policy br Write simple programs br Write small programs br Write transparent programs br Write robust programs br Make data complicated when required not the program br Build on potential users expected knowledge br Avoid unnecessary output br Write programs which fail in a way that is easy to diagnose br Value developer time over machine time br Write abstract programs that generate code instead of writing code by hand br Prototype software before polishing it br Write flexible and open programs br Make the program and protocols extensible br br br Mike Gancarz The UNIX Philosophy br In Mike Gancarz a member of Digital Equipment Corporation s Unix Engineering Group UEG published The UNIX Philosophy based on his own Unix Ultrix port development at DEC in the s and discussions with colleagues He is also a member of the X Window System development team and author of Ultrix Window Manager uwm br The book focuses on porting UNIX to different computers during the Unix wars of the s and describes his philosophy that portability should be more important than the efficiency of using non standard interfaces for hardware and graphics devices br The nine basic tenets he claims to be important are br br Small is beautiful br Make each program do one thing well br Build a prototype as soon as possible br Choose portability over efficiency br Store data in flat text files br Use software leverage to your advantage br Use shell scripts to increase leverage and portability br Avoid captive user interfaces br Make every program a filter br br br Worse is better br br Richard P Gabriel suggests that a key advantage of Unix was that it embodied a design philosophy he termed worse is better in which simplicity of both the interface and the implementation are more important than any other attributes of the system including correctness consistency and completeness Gabriel argues that this design style has key evolutionary advantages though he questions the quality of some results br For example in the early days Unix used a monolithic kernel which means that user processes carried out kernel system calls all on the user stack If a signal was delivered to a process while it was blocked on a long term I O in the kernel the handling of the situation was unclear The signal handler could not be executed when the process was in kernel mode with sensitive kernel data on the stack br br br Criticism br In a article entitled The truth about Unix The user interface is horrid published in Datamation Don Norman criticized the design philosophy of Unix for its lack of concern for the user interface Writing from his background in cognitive science and from the perspective of the then current philosophy of cognitive engineering he focused on how end users comprehend and form a personal cognitive model of systems or in the case of Unix fail to understand with the result that disastrous mistakes such as losing an hour s worth of work are all too easy br In the podcast On the Metal Jonathan Blow criticised UNIX philosophy as being outdated He argued that tying together modular tools results in very inefficient programs He says that UNIX philosophy suffers from similar problems to microservices without overall supervision big architectures end up ineffective and inefficient br br br See also br Cognitive engineering br Unix architecture br Minimalism computing br Software engineering br KISS principle br Hacker ethic br List of software development philosophies br Everything is a file br Worse is better br br br Notes br br br br The Unix Programming Environment Archived at the Wayback Machine by Brian Kernighan and Rob Pike br Program Design in the UNIX Environment The paper by Pike and Kernighan that preceded the book br Notes on Programming in C Rob Pike September br A Quarter Century of Unix Peter H Salus Addison Wesley May ISBN br Philosophy Archived at the Wayback Machine from The Art of Unix Programming Eric S Raymond Addison Wesley September ISBN br Final Report of the Multics Kernel Design Project by M D Schroeder D D Clark J H Saltzer and D H Wells br The UNIX Philosophy Mike Gancarz ISBN br br br External links br Basics of the Unix Philosophy by Catb org br The Unix Philosophy A Brief Introduction by The Linux Information Project LINFO br Why the Unix Philosophy still matters