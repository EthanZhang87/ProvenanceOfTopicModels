title: Capability-based security
id: 539717
Capability based security is a concept in the design of secure computing systems one of the existing security models A capability known in some systems as a key is a communicable unforgeable token of authority It refers to a value that references an object along with an associated set of access rights A user program on a capability based operating system must use a capability to access an object Capability based security refers to the principle of designing user programs such that they directly share capabilities with each other according to the principle of least privilege and to the operating system infrastructure necessary to make such transactions efficient and secure Capability based security is to be contrasted with an approach that uses traditional UNIX permissions and Access Control Lists br Although most operating systems implement a facility which resembles capabilities they typically do not provide enough support to allow for the exchange of capabilities among possibly mutually untrusting entities to be the primary means of granting and distributing access rights throughout the system A capability based system in contrast is designed with that goal in mind br br br Introduction br Capabilities achieve their objective of improving system security by being used in place of forgeable references A forgeable reference for example a path name identifies an object but does not specify which access rights are appropriate for that object and the user program which holds that reference Consequently any attempt to access the referenced object must be validated by the operating system based on the ambient authority of the requesting program typically via the use of an access control list ACL Instead in a system with capabilities the mere fact that a user program possesses that capability entitles it to use the referenced object in accordance with the rights that are specified by that capability In theory a system with capabilities removes the need for any access control list or similar mechanism by giving all entities all and only the capabilities they will actually need br A capability is typically implemented as a privileged data structure that consists of a section that specifies access rights and a section that uniquely identifies the object to be accessed The user does not access the data structure or object directly but instead via a handle In practice it is used much like a file descriptor in a traditional operating system a traditional handle but to access every object on the system Capabilities are typically stored by the operating system in a list with some mechanism in place to prevent the program from directly modifying the contents of the capability so as to forge access rights or change the object it points to Some systems have also been based on capability based addressing hardware support for capabilities such as Plessey System br Programs possessing capabilities can perform functions on them such as passing them on to other programs converting them to a less privileged version or deleting them The operating system must ensure that only specific operations can occur to the capabilities in the system in order to maintain the integrity of the security policy br Capabilities as discussed in this article should not be confused with Portable Operating System Interface POSIX e c Capabilities The latter are coarse grained privileges that cannot be transferred between processes br br br Examples br A capability is defined to be a protected object reference which by virtue of its possession by a user process grants that process the capability hence the name to interact with an object in certain ways Those ways might include reading data associated with an object modifying the object executing the data in the object as a process and other conceivable access rights The capability logically consists of a reference that uniquely identifies a particular object and a set of one or more of these rights br Suppose that in a user process s memory space there exists the following string br br etc passwd br br Although this identifies a unique object on the system it does not specify access rights and hence is not a capability Suppose there is instead the following pair of values br br etc passwd br O RDWR br br This pair identifies an object along with a set of access rights The pair however is still not a capability because the user process s possession of these values says nothing about whether that access would actually be legitimate br Now suppose that the user program successfully executes the following statement br br The variable fd now contains the index of a file descriptor in the process s file descriptor table This file descriptor is a capability Its existence in the process s file descriptor table is sufficient to show that the process does indeed have legitimate access to the object A key feature of this arrangement is that the file descriptor table is in kernel memory and cannot be directly manipulated by the user program br br br Sharing between processes br In traditional operating systems programs often communicate with each other and with storage using references like those in the first two examples Path names are often passed as command line parameters sent via sockets and stored on disk These references are not capabilities and must be validated before they can be used In these systems a central question is on whose authority is a given reference to be evaluated This becomes a critical issue especially for processes which must act on behalf of two different authority bearing entities They become susceptible to a programming error known as the confused deputy problem very frequently resulting in a security hole br In a capability based system the capabilities themselves are passed between processes and storage using a mechanism that is known by the operating system to maintain the integrity of those capabilities br One novel approach to solving this problem involves the use of an orthogonally persistent operating system In such a system there is no need for entities to be discarded and their capabilities be invalidated and hence require an ACL like mechanism to restore those capabilities at a later time The operating system maintains the integrity and security of the capabilities contained within all storage both volatile and nonvolatile at all times in part by performing all serialization tasks by itself rather than requiring user programs to do so as is the case in most operating systems Because user programs are relieved of this responsibility there is no need to trust them to reproduce only legal capabilities nor to validate requests for access using an access control mechanism An example implementation is the Flex machine from the early s br br br POSIX capabilities br Portable Operating System Interface POSIX draft e specifies a concept of permissions called capabilities However POSIX capabilities differ from capabilities in this article A POSIX capability is not associated with any object a process having CAP NET BIND SERVICE capability can listen on any TCP port under This system is found in Linux br In contrast Capsicum Unix hybridizes a true capability system model with a Unix design and POSIX API Capsicum capabilities are a refined form of file descriptor a delegable right between processes and additional object types beyond classic POSIX such as processes can be referenced via capabilities In Capsicum capability mode processes are unable to utilize global namespaces such as the filesystem namespace to look up objects and must instead inherit or be delegated them This system is found natively in FreeBSD but patches are available to other systems br br br Implementations br Notable research and commercial systems employing capability based security include the following br br Tahoe LAFS an open source capability based filesystem br GNOSIS an operating system developed at Tymshare br KeyKOS successor to GNOSIS br EROS The Extremely Reliable Operating System successor to KeyKOS br CapROS a project to further develop the EROS code base for commercial use br Cambridge CAP computer br Hydra operating system part of the C mmp project at Carnegie Mellon University br StarOS part of the CM project at Carnegie Mellon University br IBM System and AS br Intel iAPX br Plessey System br Flex br L microkernel family br OKL from Open Kernel Labs br seL from NICTA br Fiasco OC and NOVA from TU Dresden br Amoeba distributed operating system br FreeBSD Capsicum br Genode br Google Fuchsia br HarmonyOS OpenHarmony br Phantom OS br WebAssembly System Interface WASI br br br br br Levy Henry M Capability Based Computer Systems Digital Equipment Corporation ISBN An electronic version is available here br The EROS Project br E a programming language based around capability security ERights org br Mark S Miller Ka Ping Yee Jonathan Shapiro Capability Myths Demolished Technical Report SRL Systems Research Laboratory Johns Hopkins University Available online br The Cambridge CAP Computer Levy br br br Further reading br Capability based addressing Theodore A Linden December Operating System Structures to Support Security and Reliable Software ACM Computing Surveys doi hdl mdp ISSN S CID br Li Gong A Secure Identity Based Capability System sp p IEEE Symposium on Security and Privacy br Capability based addressing br A hardware implementation of capability based addressing br An implementation of capabilities on the PDP br IBM System support for capability based addressing br EROS a fast capability system br POSIX capabilities in Linux br br POSIX Capabilities Files br POSIX file capabilities Parceling the power of root br Making Root Unprivileged br Security issues and new risks linked to POSIX file capabilities br Linux manual page for capabilities br Working with Linux capabilities br br br External links br What is a Capability br Reviews of Capability Myths Demolished br Capability Theory by Sound Bytes