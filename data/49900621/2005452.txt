title: RC 4000 multiprogramming system
id: 2005452
The RC Multiprogramming System also termed Monitor or RC depending on reference is a discontinued operating system developed for the RC minicomputer in For clarity this article mostly uses the term Monitor br br br Overview br The RC Multiprogramming System is historically notable for being the first attempt to break down an operating system into a group of interacting programs communicating via a message passing kernel RC was not widely used but was highly influential sparking the microkernel concept that dominated operating system research through the s and s br Monitor was created largely by one programmer Per Brinch Hansen who worked at Regnecentralen where the RC was being designed Leif Svalgaard participated in implementing and testing Monitor Brinch Hansen found that no existing operating system was suited to the new machine and was tired of having to adapt existing systems He felt that a better solution was to build an underlying kernel which he referred to as the nucleus that could be used to build up an operating system from interacting programs Unix for instance uses small interacting programs for many tasks transferring data through a system called pipelines or pipes However a large amount of fundamental code is integrated into the kernel notably things like file systems and program control Monitor would relocate such code also making almost the entire system a set of interacting programs reducing the kernel nucleus to a communications and support system only br Monitor used a pipe like system of shared memory as the basis of its inter process communication IPC Data to be sent from one process to another was copied into an empty memory data buffer and when the receiving program was ready back out again The buffer was then returned to the pool Programs had a very simple application programming interface API for passing data using an asynchronous set of four methods Client applications send data with send message and could optionally block using wait answer Servers used a mirroring set of calls wait message and send answer Note that messages had an implicit return path for every message sent making the semantics more like a remote procedure call than Mach s completely input output I O based system br Monitor divided the application space in two internal processes were the execution of traditional programs started on request while external processes were effectively device drivers External processes were handled outside of user space by the nucleus although they could be started and stopped just like any other program Internal processes were started in the context of the parent that launched them so each user could effectively build up their own operating system by starting and stopping programs in their own context br Scheduling was left entirely to the programs if required at all in the s computer multitasking was a feature of debatable value One user could start a session in a pre emptive multitasking environment while another might start in a single user mode to run batch processing at higher speed Real time scheduling could be supported by sending messages to a timer process that would only return at the appropriate time br These two areas have seen the vast majority of development since Monitor s release driving newer designs to use hardware to support messaging and supporting threads within applications to reduce launch times For instance Mach required a memory management unit to improve messaging by using the copy on write protocol and mapping instead of copying data from process to process Mach also used threading extensively allowing the external programs or servers in more modern terms to easily start up new handlers for incoming requests Still Mach IPC was too slow to make the microkernel approach practically useful This only changed when Jochen Liedtke s L microkernel demonstrated IPC overheads reduced by an order of magnitude br br br See also br THE multiprogramming system br Timeline of operating systems br br br br br Hansen Per Brinch The Nucleus of a Multiprogramming Operating System PDF Communications of the ACM Association for Computing Machinery CiteSeerX doi S CID br RC Software Multiprogramming System br RC Reference Manual at bitsavers org