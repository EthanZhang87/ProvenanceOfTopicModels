title: Rust (programming language)
id: 29414838
Rust is a general purpose programming language emphasizing performance type safety and concurrency It enforces memory safety meaning that all references point to valid memory without a garbage collector To simultaneously enforce memory safety and prevent data races its borrow checker tracks the object lifetime of all references in a program during compiling br Rust was influenced by ideas from functional programming including immutability higher order functions and algebraic data types It is popular for systems programming Rust does not enforce a programming paradigm but supports object oriented programming via structs enums traits and methods and supports functional programming via immutability pure functions higher order functions and pattern matching br Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in Mozilla officially sponsored the project in In the years following the first stable release in May Rust was adopted by companies including Amazon Discord Dropbox Google Alphabet Meta and Microsoft In December it became the first language other than C and assembly to be supported in the development of the Linux kernel br Rust has been noted for its rapid adoption and has been studied in programming language theory research br br br History br br br Origins br Rust began as a personal project in by Mozilla Research employee Graydon Hoare named after the group of fungi that are over engineered for survival Mozilla began sponsoring the project in and would employ a dozen engineers to work on it full time over the next ten years br Around work shifted from the initial compiler written in OCaml to a self hosting compiler based on LLVM written in Rust The new Rust compiler successfully compiled itself in In the fall of the Rust logo was developed based on a bicycle chainring br br br Evolution br Rust s type system underwent significant changes between versions and In version which was released in March classes were introduced for the first time Four months later version added destructors and polymorphism through the use of interfaces In October version was released which added traits as a means of inheritance Interfaces were combined with traits and removed as a separate feature and classes were replaced by a combination of implementations and structured types br Through the early s memory management through the ownership system was gradually consolidated to prevent memory bugs By Rust s garbage collector was removed with the ownership rules in place br In January the editor in chief of Dr Dobb s Journal Andrew Binstock commented on Rust s chances of becoming a competitor to C along with D Go and Nim then Nimrod According to Binstock while Rust was widely viewed as a remarkably elegant language adoption slowed because it radically changed from version to version The first stable release Rust was released on May br The development of the Servo browser engine continued alongside Rust s own growth In September Firefox was released as the first version that incorporated components from Servo in a project named Firefox Quantum br br br Mozilla layoffs and Rust Foundation present br In August Mozilla laid off of its employees worldwide as part of a corporate restructuring caused by the COVID pandemic The team behind Servo was disbanded The event raised concerns about the future of Rust as some members of the team were active contributors to Rust In the following week the Rust Core Team acknowledged the severe impact of the layoffs and announced that plans for a Rust foundation were underway The first goal of the foundation would be to take ownership of all trademarks and domain names and take financial responsibility for their costs br On February the formation of the Rust Foundation was announced by its five founding companies AWS Huawei Google Microsoft and Mozilla In a blog post published on April Google announced support for Rust within the Android Open Source Project as an alternative to C C br On November the Moderation Team which was responsible for enforcing community standards and the Code of Conduct announced their resignation in protest of the Core Team placing themselves unaccountable to anyone but themselves In May the Rust Core Team other lead programmers and certain members of the Rust Foundation board implemented governance reforms in response to the incident br The Rust Foundation posted a draft for a new trademark policy on April revising its rules on how the Rust logo and name can be used which resulted in negative reactions from Rust users and contributors br br br Syntax and features br Rust s syntax is similar to that of C and C although many of its features were influenced by functional programming languages such as OCaml Hoare described Rust as targeted at frustrated C developers and emphasized features such as safety control of memory layout and concurrency Safety in Rust includes the guarantees of memory safety type safety and lack of data races br br br Hello World program br Below is a Hello World program in Rust The fn keyword denotes a function and the println macro prints the message to standard output Statements in Rust are separated by semicolons br br br Variables br Variables in Rust are defined through the let keyword The example below assigns a value to the variable with name foo br br Variables are immutable by default and adding the mut keyword allows the variable to be mutated The following example uses which denotes the start of a comment br br Multiple let expressions can define multiple variables with the same name known as variable shadowing Variable shadowing allows transforming variables without having to name the variables differently The example below declares a new variable with the same name that is double the original value br br Variable shadowing is also possible for values of different types going from a string to its length br br br Keywords and control flow br In Rust blocks of code are delimited by curly brackets br An if conditional expression executes code based on whether the given value is true else can be used for when the value evaluates to false and else if can be used for combining multiple expressions br br The loop keyword allows repeating a portion of code until a break occurs break may optionally exit the loop with a value Labels denoted with label name can be used to break an outer loop when loops are nested br br while can be used to repeat a block of code while a condition is met for is used for looping over elements of a collection br br br for loops and Iterators br For loops in Rust work in a functional style as operations over an iterator type For example in the loop br br is a value of type Range which implements the Iterator trait the code applies the function f to each element returned by the iterator Iterators can be combined with functions over iterators like map filter and sum For example the following adds up all numbers between and that are multiples of br br br Expressions br Rust is expression oriented with nearly every part of a function body being an expression including control flow operators The ordinary if expression is used instead of C s ternary conditional With returns being implicit a function does not need to end with a return expression if the semicolon is omitted the value of the last expression in the function is used as the return value as seen in the following recursive implementation of the factorial function br br The following iterative implementation uses the operator to create an inclusive range br br br Pattern matching br The match and if let expressions can be used for pattern matching For example match can be used to double an optional integer value if present and return zero otherwise br br Equivalently this can be written with if let and else br br br Types br Rust is strongly typed and statically typed The types of all variables must be known at compilation time assigning a value of a particular type to a differently typed variable causes a compilation error Type inference is used to determine the type of variables if unspecified br The default integer type is i and the default floating point type is f If the type of a literal number is not explicitly provided either it is inferred from the context or the default type is used br br br Primitive types br br br User defined types br User defined types are created with the struct or enum keywords The struct keyword is used to denote a record type that groups multiple related values enums can take on different variants at runtime with its capabilities similar to algebraic data types found in functional programming languages Both structs and enums can contain fields with different types Alternative names for the same type can be defined with the type keyword br The impl keyword can define methods for a user defined type Data and functions are defined separately Implementations fulfill a role similar to that of classes within other languages br br br Standard library br br Option values are handled using syntactic sugar such as the if let construction to access the inner value in this case a string br br br Pointers br br Rust does not use null pointers to indicate a lack of data as doing so can lead to null dereferencing Accordingly the basic and mut references are guaranteed to not be null Rust instead uses Option for this purpose Some T indicates that a value is present and None is analogous to the null pointer Option implements a null pointer optimization avoiding any spatial overhead for types that cannot have a null value references or the NonZero types for example br Unlike references the raw pointer types const and mut may be null however it is impossible to dereference them unless the code is explicitly declared unsafe through the use of an unsafe block Unlike dereferencing the creation of raw pointers is allowed inside of safe Rust code br br br Type conversion br br br Ownership and lifetimes br Rust s ownership system consists of rules that ensure memory safety without using a garbage collector At compile time each value must be attached to a variable called the owner of that value and every value must have exactly one owner Values are moved between different owners through assignment or passing a value as a function parameter Values can also be borrowed meaning they are temporarily passed to a different function before being returned to the owner With these rules Rust can prevent the creation and use of dangling pointers br br Because of these ownership rules Rust types are known as linear or affine types meaning each value can be used exactly once This enforces a form of software fault isolation as the owner of a value is solely responsible for its correctness and deallocation br When a value goes out of scope it is dropped by running its destructor The destructor may be programmatically defined through implementing the Drop trait This helps manage resources such as file handles network sockets and locks since when objects are dropped the resources associated with them are closed or released automatically br Lifetimes are usually an implicit part of all reference types in Rust Each lifetime encompasses a set of locations in the code for which a variable is valid For example a reference to a local variable has a lifetime corresponding to the block it is defined in br br The borrow checker in the Rust compiler uses lifetimes to ensure that the values a reference points to remain valid In the example above storing a reference to variable x to r is valid as variable x has a longer lifetime a than variable r b However when x has a shorter lifetime the borrow checker would reject the program br br Since the lifetime of the referenced variable b is shorter than the lifetime of the variable holding the reference a the borrow checker errors preventing x from being used from outside its scope br Lifetime parameters make the lifetimes of references explicit for example by specifying the source of an output br br With information regarding how lifetimes of the output value of the function related to its inputs the compiler is able to prevent memory safety issues such as dangling pointers br When user defined types hold references to data they also need to use lifetime parameters The example below parses some configuration options from a string and creates a struct containing the options The function parse config also showcases lifetime elision which reduces the need for explicitly defining lifetime parameters br br br Polymorphism br br br Generics br Rust s more advanced features include the use of generic functions A generic function is given generic parameters which allow the same function to be applied to different variable types This capability reduces duplicate code and is known as parametric polymorphism br The following program calculates the sum of two things for which addition is implemented using a generic function br br At compile time polymorphic functions like sum are instantiated with the specific types the code requires in this case sum of integers and sum of floats br Generics can be used in functions to allow implementing a behavior for different types without repeating the same code Generic functions can be written in relation to other generics without knowing the actual type br br br Traits br Rust s type system supports a mechanism called traits inspired by type classes in the Haskell language to define shared behavior between different types For example the Add trait can be implemented for floats and integers which can be added and the Display or Debug traits can be implemented for any type that can be converted to a string Traits can be used to provide a set of common behavior for different types without knowing the actual type This facility is known as ad hoc polymorphism br Generic functions can constrain the generic type to implement a particular trait or traits for example an add one function might require the type to implement Add This means that a generic function can be type checked as soon as it is defined The implementation of generics is similar to the typical implementation of C templates a separate copy of the code is generated for each instantiation This is called monomorphization and contrasts with the type erasure scheme typically used in Java and Haskell Type erasure is also available via the keyword dyn short for dynamic Because monomorphization duplicates the code for each type used it can result in more optimized code for specific use cases but compile time and size of the output binary are also increased br In addition to defining methods for a user defined type the impl keyword can be used to implement a trait for a type Traits can provide additional derived methods when implemented For example the trait Iterator requires that the next method be defined for the type Once the next method is defined the trait can provide common functional helper methods over the iterator such as map or filter br br br Trait objects br Rust traits are implemented using static dispatch meaning that the type of all values is known at compile time however Rust also uses a feature known as trait objects to accomplish dynamic dispatch also known as duck typing Dynamically dispatched trait objects are declared using the syntax dyn Tr where Tr is a trait Trait objects are dynamically sized therefore they must be put behind a pointer such as Box The following example creates a list of objects where each object can be printed out using the Display trait br br If an element in the list does not implement the Display trait it will cause a compile time error br br br Memory safety br Rust is designed to be memory safe It does not permit null pointers dangling pointers or data races Data values can be initialized only through a fixed set of forms all of which require their inputs to be already initialized br Unsafe code can subvert some of these restrictions using the unsafe keyword Unsafe code may also be used for low level functionality such as volatile memory access architecture specific intrinsics type punning and inline assembly br br br Memory management br Rust does not use garbage collection Memory and other resources are instead managed through the resource acquisition is initialization convention with optional reference counting Rust provides deterministic management of resources with very low overhead Values are allocated on the stack by default and all dynamic allocations must be explicit br The built in reference types using the symbol do not involve run time reference counting The safety and validity of the underlying pointers is verified at compile time preventing dangling pointers and other forms of undefined behavior Rust s type system separates shared immutable references of the form T from unique mutable references of the form mut T A mutable reference can be coerced to an immutable reference but not vice versa br br br Closures br br br Macros br It is possible to extend the Rust language using macros br br br Declarative macros br A declarative macro also called a macro by example is a macro that uses pattern matching to determine its expansion br br br Procedural macros br Procedural macros are Rust functions that run and modify the compiler s input token stream before any other components are compiled They are generally more flexible than declarative macros but are more difficult to maintain due to their complexity br Procedural macros come in three flavors br br Function like macros custom br Derive macros derive CustomDerive br Attribute macros custom attribute br The println macro is an example of a function like macro Theserde derive macro provides a commonly used library for generating code br for reading and writing data in many formats such as JSON Attribute macros are commonly used for language bindings such as the extendr library for Rust bindings to R br The following code shows the use of the Serialize Deserialize and Debug derived procedural macros br to implement JSON reading and writing as well as the ability to format a structure for debugging br br br Variadic macros br br br Interface with C and C br Rust has a foreign function interface FFI that can be used both to call code written in languages such as C from Rust and to call Rust code from those languages As of an external library called CXX exists for calling to or from C Rust and C differ in how they lay out structs in memory so Rust structs may be given a repr C attribute forcing the same layout as the equivalent C struct br br br Ecosystem br br The Rust ecosystem includes its compiler its standard library and additional components for software development Component installation is typically managed by rustup a Rust toolchain installer developed by the Rust project br br br Compiler br The Rust compiler is named rustc and translates Rust code into a low level language called LLVM intermediate representation LLVM IR LLVM is then invoked as a subcomponent to translate IR code into machine code A linker is then used to combine multiple crates together as a single executable or binary file br Other than LLVM the compiler also supports using alternative backends such as GCC and Cranelift for code generation The intention of those alternative backends is to increase platform coverage of Rust or to improve compilation times br br br Standard library br The Rust standard library defines and implements many widely used custom data types including core data structures such as Vec Option and HashMap as well as smart pointer types Rust also provides a way to exclude most of the standard library using the attribute no std this enables applications such as embedded devices which want to remove dependency code or provide their own core data structures Internally the standard library is divided into three parts core alloc and std where std and alloc are excluded by no std br br br Cargo br Cargo is Rust s build system and package manager It downloads compiles distributes and uploads packages called crates that are maintained in an official registry It also acts as a front end for Clippy and other Rust components br By default Cargo sources its dependencies from the user contributed registry crates io but Git repositories and crates in the local filesystem and other external sources can also be specified as dependencies br br br Rustfmt br Rustfmt is a code formatter for Rust It formats whitespace and indentation to produce code in accordance with a common style unless otherwise specified It can be invoked as a standalone program or from a Rust project through Cargo br br br Clippy br Clippy is Rust s built in linting tool to improve the correctness performance and readability of Rust code As of it has more than rules br br br Versioning system br Following Rust new features are developed in nightly versions which are released daily During each six week release cycle changes to nightly versions are released to beta while changes from the previous beta version are released to a new stable version br Every two or three years a new edition is produced Editions are released to allow making limited breaking changes such as promoting await to a keyword to support async await features Crates targeting different editions can interoperate with each other so a crate can upgrade to a new edition even if its callers or its dependencies still target older editions Migration to a new edition can be assisted with automated tooling br br br IDE support br rust analyzer is a collection of utilities that provides Integrated development environments IDEs and text editors with information about a Rust project through the Language Server Protocol This enables features including autocompletion and the display of compilation errors while editing br br br Performance br In general Rust s memory safety guarantees do not impose a runtime overhead A notable exception is array indexing which is checked at runtime though this often does not impact performance Since it does not perform garbage collection Rust is often faster than other memory safe languages br Rust provides two modes safe and unsafe Safe mode is the normal one in which most Rust is written In unsafe mode the developer is responsible for the code s memory safety which is used by developers for cases where the compiler is too restrictive br Many of Rust s features are so called zero cost abstractions meaning they are optimized away at compile time and incur no runtime penalty The ownership and borrowing system permits zero copy implementations for some performance sensitive tasks such as parsing Static dispatch is used by default to eliminate method calls with the exception of methods called on dynamic trait objects The compiler also uses inline expansion to eliminate function calls and statically dispatched method invocations br Since Rust utilizes LLVM any performance improvements in LLVM also carry over to Rust Unlike C and C Rust allows for reordering struct and enum elements to reduce the sizes of structures in memory for better memory alignment and to improve cache access efficiency br br br Adoption br br Rust has been used in software across different domains Rust was initially funded by Mozilla as part of developing Servo an experimental parallel browser engine in collaboration with Samsung Components from the Servo engine were later incorporated in the Gecko browser engine underlying Firefox In January Google Alphabet announced support for using third party Rust libraries in Chromium br Rust is used in several backend software projects of large web services OpenDNS a DNS resolution service owned by Cisco uses Rust internally Amazon Web Services uses Rust in performance sensitive components of its several services In AWS has open sourced Firecracker a virtualization solution primarily written in Rust Microsoft Azure IoT Edge a platform used to run Azure services on IoT devices has components implemented in Rust Microsoft also uses Rust to run containerized modules with WebAssembly and Kubernetes Cloudflare a company providing content delivery network services used Rust to build a new web proxy named Pingora for increased performance and efficiency br In operating systems Rust support has been added to Linux and Android Microsoft is rewriting parts of Windows in Rust The r project aims to re implement Plan from Bell Labs in Rust Rust has been used in the development of new operating systems such as Redox a Unix like operating system and microkernel Theseus an experimental operating system with modular state management and most of Fuchsia Rust is also used for command line tools and operating system components including stratisd a file system manager and COSMIC a desktop environment by System br br In web development the npm package manager started using Rust in production in Deno a secure runtime for JavaScript and TypeScript is built on top of V using Rust and Tokio Other notable adoptions in this space include Ruffle an open source SWF emulator and Polkadot an open source blockchain and cryptocurrency platform br Discord an instant messaging software company has rewritten parts of its system in Rust for increased performance in In the same year Dropbox announced that its file synchronization had been rewritten in Rust Facebook Meta has also used Rust to redesign its system that manages source code for internal projects br In the Stack Overflow Developer Survey of respondents had recently done extensive development in Rust The survey also named Rust the most loved programming language every year from to inclusive based on the number of developers interested in continuing to work in the same language In Rust was the th most wanted technology with of developers not currently working in Rust expressing an interest in doing so br br br In academic research br Rust has been studied in academic research both for properties of the language itself as well as the utility the language provides for writing software used for research Its features around safety and performance have been examined br In a journal article published to Proceedings of the International Astronomical Union astrophysicists Blanco Cuaresma and Bolmont re implemented programs responsible for simulating multi planet systems in Rust and found it to be a competitive programming language for its speed and accuracy Likewise an article published on Nature shared several stories of bioinformaticians using Rust for its performance and safety However both articles have cited Rust s unique concepts including its ownership system being difficult to learn as one of the main drawbacks to adopting Rust br br br Community br br Rust has been noted as having an inclusive community and particularly welcomed people from the queer community partly due to its code of conduct which outlined a set of expectations for Rust community members to follow One MIT Technology Review article described the Rust community as unusually friendly to newcomers br br br Rust Foundation br br The Rust Foundation is a non profit membership organization incorporated in United States with the primary purposes of backing the technical project as a legal entity and helping to manage the trademark and infrastructure assets br It was established on February with five founding corporate members Amazon Web Services Huawei Google Microsoft and Mozilla The foundation s board is chaired by Shane Miller Starting in late its Executive Director and CEO is Rebecca Rumbul Prior to this Ashley Williams was interim executive director br br br Governance teams br The Rust project is composed of teams that are responsible for different subareas of the development The compiler team develops manages and optimizes compiler internals and the language team designs new language features and helps implement them The Rust project website lists top level teams as of July Representatives among teams form the Leadership council which oversees the Rust project as a whole br br br See also br Comparison of programming languages br History of programming languages br List of programming languages br List of programming languages by type br br br Notes br br br br br br Book sources br br br Others br br br Further reading br Blandy Jim Orendorff Jason Tindall Leonora F S Programming Rust Fast Safe Systems Development O Reilly Media ISBN br br br External links br br Official website