title: Package manager
id: 47017
A package manager or package management system is a collection of software tools that automates the process of installing upgrading configuring and removing computer programs for a computer in a consistent manner br A package manager deals with packages distributions of software and data in archive files Packages contain metadata such as the software s name description of its purpose version number vendor checksum preferably a cryptographic hash function and a list of dependencies necessary for the software to run properly Upon installation metadata is stored in a local package database Package managers typically maintain a database of software dependencies and version information to prevent software mismatches and missing prerequisites They work closely with software repositories binary repository managers and app stores br Package managers are designed to eliminate the need for manual installs and updates This can be particularly useful for large enterprises whose operating systems typically consist of hundreds or even tens of thousands of distinct software packages br br br History br An early package manager was SMIT and its backend installp from IBM AIX SMIT was introduced with AIX in br Early package managers from around had no automatic dependency resolution but could already drastically simplify the process of adding and removing software from a running system br By around beginning with CPAN package managers began doing the work of downloading packages from a repository automatically resolving its dependencies and installing them as needed making it much easier to install uninstall and update software from a system br br br Functions br br A software package is an archive file containing a computer program as well as necessary metadata for its deployment The computer program can be in source code that has to be compiled and built first Package metadata include package description package version and dependencies other packages that need to be installed beforehand br Package managers are charged with the task of finding installing maintaining or uninstalling software packages upon the user s command Typical functions of a package management system include br br Working with file archivers to extract package archives br Ensuring the integrity and authenticity of the package by verifying their checksums and digital certificates respectively br Looking up downloading installing or updating existing software from a software repository or app store br Grouping packages by function to reduce user confusion br Managing dependencies to ensure a package is installed with all packages it requires thus avoiding dependency hell br br br Challenges with shared libraries br Computer systems that rely on dynamic library linking instead of static library linking share executable libraries of machine instructions across packages and applications In these systems conflicting relationships between different packages requiring different versions of libraries results in a challenge colloquially known as dependency hell On Microsoft Windows systems this is also called DLL hell when working with dynamically linked libraries br Modern package managers have mostly solved these problems by allowing parallel installation of multiple versions of a library e g OPENSTEP s Framework system a dependency of any kind e g slots in Gentoo Portage and even of packages compiled with different compiler versions e g dynamic libraries built by the Glasgow Haskell Compiler where a stable ABI does not exist in order to enable other packages to specify which version they were linked or even installed against br br br Front ends for locally compiled packages br System administrators may install and maintain software using tools other than package management software For example a local administrator may download unpackaged source code compile it and install it This may cause the state of the local system to fall out of synchronization with the state of the package manager s database The local administrator will be required to take additional measures such as manually managing some dependencies or integrating the changes into the package manager br There are tools available to ensure that locally compiled packages are integrated with the package management For distributions based on deb and rpm files as well as Slackware Linux there is CheckInstall and for recipe based systems such as Gentoo Linux and hybrid systems such as Arch Linux it is possible to write a recipe first which then ensures that the package fits into the local package database br br br Maintenance of configuration br Particularly troublesome with software upgrades are upgrades of configuration files Since package managers at least on Unix systems originated as extensions of file archiving utilities they can usually only either overwrite or retain configuration files rather than applying rules to them There are exceptions to this that usually apply to kernel configuration which if broken will render the computer unusable after a restart Problems can be caused if the format of configuration files changes for instance if the old configuration file does not explicitly disable new options that should be disabled Some package managers such as Debian s dpkg allow configuration during installation In other situations it is desirable to install packages with the default configuration and then overwrite this configuration for instance in headless installations to a large number of computers This kind of pre configured installation is also supported by dpkg br br br Repositories br To give users more control over the kinds of software that they are allowing to be installed on their system and sometimes due to legal or convenience reasons on the distributors side software is often downloaded from a number of software repositories br br br Upgrade suppression br When a user interacts with the package management software to bring about an upgrade it is customary to present the user with the list of actions to be executed usually the list of packages to be upgraded and possibly giving the old and new version numbers and allow the user to either accept the upgrade in bulk or select individual packages for upgrades Many package managers can be configured to never upgrade certain packages or to upgrade them only when critical vulnerabilities or instabilities are found in the previous version as defined by the packager of the software This process is sometimes called version pinning br For instance br br yum supports this with the syntax exclude openoffice br pacman with IgnorePkg openoffice to suppress upgrading openoffice in both cases br dpkg and dselect support this partially through the hold flag in package selections br APT extends the hold flag through the complex pinning mechanism Users can also blacklist a package br aptitude has hold and forbid flags br portage supports this through the package mask configuration file br br br Cascading package removal br Some of the more advanced package management features offer cascading package removal in which all packages that depend on the target package and all packages that only the target package depends on are also removed br br br Comparison of commands br Although the commands are specific for every particular package manager they are to a large extent translatable as most package managers offer similar functions br br The Arch Linux Pacman Rosetta wiki offers an extensive overview br br br Prevalence br Package managers like dpkg have existed as early as br Linux distributions oriented to binary packages rely heavily on package management systems as their primary means of managing and maintaining software Mobile operating systems such as Android Linux based iOS Unix based and Windows Phone rely almost exclusively on their respective vendors app stores and thus use their own dedicated package management systems br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br Comparison with installers br A package manager is often called an install manager which can lead to a confusion between package managers and installers The differences include br br br Comparison with build automation utility br Most software configuration management systems treat building software and deploying software as separate independent steps br A build automation utility typically takes human readable source code files already on a computer and automates the process of converting them into a binary executable package on the same or remote computer br Later a package manager typically running on some other computer downloads those pre built binary executable packages over the internet and installs them br However both kinds of tools have many commonalities br br For example the dependency graph topological sorting used in a package manager to handle dependencies between binary components is also used in a build manager to handle the dependency between source components br For example many makefiles support not only building executables but also installing them with make install br For example every package manager for a source based distribution Portage Sorcery Homebrew etc supports converting human readable source code to binary executables and installing it br A few tools such as Maak and A A P are designed to handle both building and deployment and can be used as either a build automation utility or as a package manager or both br br br Comparison with app stores br App stores can also be considered application level package managers without the ability to install all levels of programs Unlike traditional package managers app stores are designed to enable payment for the software itself instead of for software development and may only offer monolithic packages with no dependencies or dependency resolution They are usually extremely limited in their management functionality due to a strong focus on simplification over power or emergence and common in commercial operating systems and locked down smart devices br Package managers also often have only human reviewed code Many app stores such and Google Play and Apple s App Store screen apps mostly using automated tools only malware with defeat devices can pass these tests by detecting when the software is being automatically tested and delaying malicious activity There are however exceptions the npm package database for instance relies entirely on post publication review of its code while the Debian package database has an extensive human review process before any package goes into the main stable database The XZ Utils backdoor used years of trust building to insert a backdoor which was nontheless caught while in the testing database br br br Common package managers and formats br br br Universal package manager br Also known as binary repository manager it is a software tool designed to optimize the download and storage of binary files artifacts and packages used and produced in the software development process These package managers aim to standardize the way enterprises treat all package types They give users the ability to apply security and compliance metrics across all artifact types Universal package managers have been referred to as being at the center of a DevOps toolchain br br br Package formats br br Each package manager relies on the format and metadata of the packages it can manage That is package managers need groups of files to be bundled for the specific package manager along with appropriate metadata such as dependencies Often a core set of utilities manages the basic installation from these packages and multiple package managers use these utilities to provide additional functionality br For example yum relies on rpm as a backend Yum extends the functionality of the backend by adding features such as simple configuration for maintaining a network of systems As another example the Synaptic Package Manager provides a graphical user interface by using the Advanced Packaging Tool apt library which in turn relies on dpkg for core functionality br Alien is a program that converts between different Linux package formats supporting conversion between Linux Standard Base LSB compliant rpm packages deb Stampede slp Solaris pkg and Slackware tgz txz tbz tlz packages br In mobile operating systems Google Play consumes Android application package APK package format while Microsoft Store uses APPX and XAP formats Both Google Play and Microsoft Store have eponymous package managers br br br Free and open source software systems br By the nature of free and open source software packages under similar and compatible licenses are available for use on a number of operating systems These packages can be combined and distributed using configurable and internally complex packaging systems to handle many permutations of software and manage version specific dependencies and conflicts Some packaging systems of free and open source software are also themselves released as free and open source software One typical difference between package management in proprietary operating systems such as Mac OS X and Windows and those in free and open source software such as Linux is that free and open source software systems permit third party packages to also be installed and upgraded through the same mechanism whereas the package managers of Mac OS X and Windows will only upgrade software provided by Apple and Microsoft respectively with the exception of some third party drivers in Windows The ability to continuously upgrade third party software is typically added by adding the URL of the corresponding repository to the package management s configuration file br br br Application level package managers br br Beside the system level application managers there are some add on package managers for operating systems with limited capabilities and for programming languages in which developers need the latest libraries br Unlike system level package managers application level package managers focus on a small part of the software system They typically reside within a directory tree that is not maintained by the system level package manager such as c cygwin or opt sw However this might not be the case for the package managers that deal with programming libraries leading to a possible conflict as both package managers may claim to own a file and might break upgrades br br br Data Dependency Management br In Edgard Marx a computer scientist from Leipzig University coined the term Data Dependency Management to refer to the systems that deal with the management of data br Data Dependency Management systems are designed to facilitate the deployment and management of data on the cloud personal computers or smart devices edge Data Dependency Management frameworks can be used to describe how the data was conceived licensing as well as its dependencies The concept of data dependency management comes from software package dependency management tools such as npm for JavaScript gem for Ruby and NuGet for NET Their rationale is to allow users to manage the software dependency on data such as machine learning models for data driven applications They are useful to publish locate and install data packages A typical example of a data dependency management frameworks are Hugging Face KBox among others br br br Impact br Ian Murdock had commented that package management is the single biggest advancement Linux has brought to the industry that it blurs the boundaries between operating system and applications and that it makes it easier to push new innovations into the marketplace and evolve the OS br There is also a conference for package manager developers known as PackagingCon It was established in with the aim to understand different approaches to package management br br br See also br Application strings manager br Dependency hell br Installation computer programs br List of software package management systems br Manifest file br Package format br br br br br br External links br Package Management Cheatsheet from Distrowatch br ArchLinux Rosetta Stone Command Line Comparison for Package Managers br upkg universal package manager a wrapper that provides same syntax for all flavors of Linux