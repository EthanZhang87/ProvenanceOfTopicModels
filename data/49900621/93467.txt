title: User space and kernel space
id: 93467
A modern computer operating system usually uses virtual memory to provide separate address spaces or separate regions of a single address space called user space and kernel space Primarily this separation serves to provide memory protection and hardware protection from malicious or errant software behaviour br br Kernel space is strictly reserved for running a privileged operating system kernel kernel extensions and most device drivers In contrast user space is the memory area where application software and some drivers execute typically one address space per process br br br Overview br The term user space or userland refers to all code that runs outside the operating system s kernel User space usually refers to the various programs and libraries that the operating system uses to interact with the kernel software that performs input output manipulates file system objects application software etc br Each user space process normally runs in its own virtual memory space and unless explicitly allowed cannot access the memory of other processes This is the basis for memory protection in today s mainstream operating systems and a building block for privilege separation A separate user mode can also be used to build efficient virtual machines see Popek and Goldberg virtualization requirements With enough privileges processes can request the kernel to map part of another process s memory space to its own as is the case for debuggers Programs can also request shared memory regions with other processes although other techniques are also available to allow inter process communication br br br Implementation br The most common way of implementing a user mode separate from kernel mode involves operating system protection rings br Protection rings in turn are implemented using CPU modes br Typically kernel space programs run in kernel mode also called supervisor mode br normal applications in user space run in user mode br Some operating systems are single address space operating systems they have a single address space for all user mode code The kernel mode code may be in the same address space or it may be in a second address space br Other operating systems have a per process address space with a separate address space for each and every user mode process br Another approach taken in experimental operating systems is to have a single address space for all software and rely on a programming language s semantics to make sure that arbitrary memory cannot be accessed applications simply cannot acquire any references to the objects that they are not allowed to access This approach has been implemented in JXOS Unununium as well as Microsoft s Singularity research project br br br See also br BIOS br CPU modes br Early user space br Memory protection br OS level virtualization br br br Notes br br br br br br External links br Linux Kernel Space Definition br Entering User Mode at the Wayback Machine archived March 