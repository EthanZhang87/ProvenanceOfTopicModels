title: EKA2
id: 4424760
EKA EPOC Kernel Architecture is the second generation Symbian platform real time operating system kernel which originated in the earlier operating system EPOC br EKA began with a proprietary software license In October it was released as free and open source software under an Eclipse Public License In April it was reverted to a proprietary license br Like its predecessor EKA it has preemptive multithreading and full memory protection The main differences are br br Real time guarantees each application programming interface API call is fast but more importantly time bound br Multiple threads inside the kernel and outside br Pluggable memory models allowing better support for later generations of ARM instruction set architecture br A nanokernel which provides the most basic OS facilities upon which other personality layers can be built br The user interface of EKA is almost fully compatible with EKA EKA was not used after Symbian OS version and was superseded in br The main advantage of EKA was its ability to run full telephone signalling protocol stacks Previously on Symbian phones these had to run on a separate central processing unit CPU Such signalling stacks are very complex and rewriting them to work natively on Symbian OS is typically not an option EKA thus allows personality layers to emulate the basic primitives of other operating systems thus allowing existing signalling stacks to run largely unchanged br Real time guarantees are a prerequisite of signalling stacks and also help with multimedia tasks However as with any RTOS a full analysis of all threads is needed before any real time guarantees can be offered to anything except the highest priority thread because higher priority threads may prevent lower priority threads from running Any multimedia task is likely to involve graphics storage and or networking activity all of which are more likely to disrupt the stream than the kernel is br Inside the kernel EKA only allowed one thread plus a null idle thread EKA allows many threads This makes it much easier to write device drivers that involve complex finite state machines such as those for SD card memory sticks or USB flash drives Interrupts are handled with an interrupt service routine which may request an immediate deferred function call called as soon as the interrupts are processed or a deferred function call which is queued to run on a kernel thread Either may in turn communicate with user side threads br Power management in EKA was largely unchanged from EKA The exact scheme varies between phones but generally the null thread puts the CPU and peripherals to sleep after having requested a wake up whenever the next timer is due to expire br EKA runs on ARM architecture CPUs and the WINS emulator Unofficial ports exist for other CPUs On the emulator EKA provides somewhat better emulation than EKA more so for the RProcess APIs which Symbian OS uses to represent processes In EKA they didn t work at all on the emulator which runs as a single Windows process br Much of the credit for EKA goes to a single Symbian kernel engineer who began the project as an experiment many years before it became an official part of Symbian OS br br br See also br br Nanokernel br br br br br br External links br https web archive org web http developer symbian org wiki index php Category AKernel Hardware Services br https web archive org web http wiki forum nokia com index php EPOC Kernel Architecture br http media wiley com product data excerpt pdf