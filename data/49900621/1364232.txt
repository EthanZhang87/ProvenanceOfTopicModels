title: Multi-Environment Real-Time
id: 1364232
Multi Environment Real Time MERT later renamed UNIX Real Time UNIX RT is a hybrid time sharing and real time operating system developed in the s at Bell Labs for use in embedded minicomputers especially PDP s A version named Duplex Multi Environment Real Time DMERT was the operating system for the AT T B D telephone switching minicomputer designed for high availability DMERT was later renamed Unix RTR Real Time Reliable br A generalization of Bell Labs time sharing operating system Unix br MERT featured a redesigned modular kernel that was able to run Unix programs and privileged real time computing processes These processes data structures were isolated from other processes with message passing being the preferred form of interprocess communication IPC although shared memory was also implemented MERT also had a custom file system with special support for large contiguous statically sized files as used in real time database applications The design of MERT was influenced by Dijkstra s THE Hansen s Monitor and IBM s CP br The MERT operating system was a four layer design in decreasing order of protection br br Kernel resource allocation of memory CPU time and interrupts br Kernel mode processes including input output I O device drivers file manager swap manager root process that connects the file manager to the disk usually combined with the swap manager br Operating system supervisor br User processes br The standard supervisor was MERT UNIX a Unix emulator with an extended system call interface and shell that enabled the use of MERT s custom IPC mechanisms although an RSX emulator also existed br br br Kernel and non kernel processes br One interesting feature that DMERT UNIX RTR introduced was the notion of kernel processes This is connected with its microkernelish architecture roots In support there is a separate command bin kpkill rather than bin kill that is used to send signals to kernel processes It is likely there are two different system calls also kill and kpkill the first to end a user process and the second to end a kernel process It is unknown how much of the normal userland signaling mechanism is in place in bin kpkill assuming there is a system call for it it is not known if one can send various signals or simply send one Also unknown is whether the kernel process has a way of catching the signals that are delivered to it It may be that the UNIX RTR developers implemented an entire signal and messaging application programming interface API for kernel processes br br br File system bits br If one has root on a UNIX RTR system they will surely soon find that their ls l output is a bit different than expected Namely there are two completely new bits in the drwxr xr x field They both take place in the first column and are C contiguous and x extents Both of these have to do with contiguous data however one may be to do with inodes and the other with non metadata br Example ls l br br br Lucent emulator and VCDX br AT T then Lucent and now Alcatel Lucent are the vendor of the SPARC based and Solaris OEM package ATT bem which lives on Solaris SPARC in opt ATT bem This is a full B D emulator known as the B E the system behind the Very Compact Digital eXchange or VCDX which is meant to provide a production environment to the Administrative Module AM portion of the ESS switch There are parts of the ESS that are not part of the B D microcomputer at all SMs and CMs Under the emulator the workstation is referred to as the AW Administrative Workstation The emulator installs with Solaris SPARC and also comes with Solstice X SUNWconn formerly known as SunLink X The reason for packaging the X stack with the B D emulator is because the Bell System regional Bell operating companies and ILECs still use X networks for their most critical of systems telephone switches may live on X or Datakit VCS II a similar network developed at Bell Labs but they do not have TCP IP stacks br The AT T Alcatel Lucent emulator is not an easy program to get working correctly even if one manages to have an image from a pulled working ESS hard disk dd output file br First there are quite a few bugs the user must navigate around in the installation process Once this is done there is a configuration file which connects peripherals to emulated peripherals But there is scant documentation on the CD which describes this The name of this file is em devmap for SS s and em devmap ultra for Ultra s br In addition one of the bugs mentioned in the install process is a broken script to fdisk and image hard disks correctly certain things need to be written to certain offsets because the opt ATT bem bin bem process expects or seems to need these hard coded locations br The emulator runs on SPARCstation s and UltraSPARC s It is likely that the B D is emulated faster on a modern SPARC than a B D microcomputer s processor actually runs as measured in MIPS The most difficult thing about having the emulator is acquiring a DMERT UNIX RTR hdd image to actually run The operating system for the ESS is restricted to a few people employees and customers of the vendor who either work on it or write the code for it Having an image of a running system which can be obtained on eBay pulled from a working B D and imaged to a file or put into an Ultra or SPARCstation provides the resources to attempt to run the UNIX RTR system br The uname a output of the Bourne shell running UNIX RTR Real time Reliable is br br Though on B D systems it will print instead of though B Ds are rare nowadays most non VCDX ESSs are B D hardware not B D although they will run the software fine br The B D uses the WE processor while the uses the WE There may be some other differences as well One thing unusual about the processor is the direction the stack grows up br Manual page for falloc which may be responsible for Contiguous or eXtent file space allocation br br FALLOC ESS UNIX FALLOC br NAME br falloc allocate a contiguous file br SYNOPSIS br falloc filename size br DESCRIPTION br A contiguous file of the specified filename is allocated to br be of size byte blocks br DIAGNOSTICS br The command complains a needed directory is not searchable br the final directory is not writable the file already exists br or there is not enough space for the file br br UNIX RTR includes an atomic file swap command atomsw manual page below br br ATOMSW ESS UNIX ATOMSW br NAME br atomsw Atomic switch files br SYNOPSIS br atomsw file file br DESCRIPTION br Atomic switch of two files The contents permissions and br owners of two files are switched in a single operation In br case of a system fault during the operation of this command br file will either have its original contents permissions br and owner or will have file s contents permissions and br owner Thus file is considered precious File may be br truncated in case of a system fault br RESTRICTIONS br Both files must exist Both files must reside on the same br file system Neither file may be a special device for br example a TTY port br To enter this command from the craft shell switching file br tmp abc with file tmp xyz enter for MML br EXC ENVIR UPROC FN bin atomsw ARGS tmp abc tmp xyz br For PDS enter br EXC ENVIR UPROC FN bin atomsw ARGS tmp abc tmp xyz br NOTE br File may be lost during a system fault br FILES br bin atomsw br br br 