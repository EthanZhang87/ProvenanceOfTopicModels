title: OpenVMS
id: 32736
OpenVMS often referred to as just VMS is a multi user multiprocessing and virtual memory based operating system It is designed to support time sharing batch processing transaction processing and workstation applications Customers using OpenVMS include banks and financial services hospitals and healthcare telecommunications operators network information services and industrial manufacturers During the s and s there were approximately half a million VMS systems in operation worldwide br It was first announced by Digital Equipment Corporation DEC as VAX VMS Virtual Address eXtension Virtual Memory System alongside the VAX minicomputer in OpenVMS has subsequently been ported to run on DEC Alpha systems the Itanium based HPE Integrity Servers and select x hardware and hypervisors Since OpenVMS is developed and supported by VMS Software Inc VSI OpenVMS offers high availability through clustering the ability to distribute the system over multiple physical machines This allows clustered applications and data to remain continuously available while operating system software and hardware maintenance and upgrades are performed or if part of the cluster is destroyed VMS cluster uptimes of years have been reported br br br History br br br Origin and name changes br br In April Digital Equipment Corporation embarked on a project to design a bit extension to its PDP computer line The hardware component was code named Star the operating system was code named Starlet Roger Gourd was the project lead for VMS Software engineers Dave Cutler Dick Hustvedt and Peter Lipman acted as technical project leaders The Star and Starlet projects culminated in the VAX computer and the VAX VMS operating system The Starlet project s code name survives in VMS in the name of several of the system libraries including STARLET OLB and STARLET MLB VMS was mostly written in VAX MACRO with some components written in BLISS br One of the original goals for VMS was backward compatibility with DEC s existing RSX M operating system Prior to the V release VAX VMS included a compatibility layer named the RSX Application Migration Executive RSX AME which allowed user mode RSX M software to be run unmodified on top of VMS The RSX AME played an important role on early versions of VAX VMS which used certain RSX M user mode utilities before native VAX versions had been developed By the V release all compatibility mode utilities were replaced with native implementations In VAX VMS V RSX AME was removed from the base system and replaced with an optional layered product named VAX RSX br br A number of distributions of VAX VMS were created br br MicroVMS was a distribution of VAX VMS designed for MicroVAX and VAXstation hardware which had less memory and disk space than larger VAX systems of the time MicroVMS split up VAX VMS into multiple kits which a customer could use to install a subset of VAX VMS tailored to their specific requirements MicroVMS releases were produced for each of the V x releases of VAX VMS and was discontinued when VAX VMS V was released br Desktop VMS was a short lived distribution of VAX VMS sold with VAXstation systems It consisted of a single CD ROM containing a bundle of VMS DECwindows DECnet VAXcluster support and a setup process designed for non technical users Desktop VMS could either be run directly from the CD or could be installed onto a hard drive Desktop VMS had its own versioning scheme beginning with V which corresponded to the V x releases of VMS br An unofficial derivative of VAX VMS named MOS VP Russian lit Multifunctional Operating System with Virtual Memory was created in the Soviet Union during the s for the SM line of VAX clone hardware MOS VP added support for the Cyrillic script and translated parts of the user interface into Russian Similar derivatives of MicroVMS known as MicroMOS VP Russian or MOS M Russian were also created br With the V release in April DEC began to refer to VAX VMS as simply VMS in its documentation In July DEC renamed VAX VMS to OpenVMS as an indication of its support of open systems industry standards such as POSIX and Unix compatibility and to drop the VAX connection since a migration to a different architecture was underway The OpenVMS name was first used with the OpenVMS AXP V release in November DEC began using the OpenVMS VAX name with the V release in June br br br Port to Alpha br br During the s DEC planned to replace the VAX platform and the VMS operating system with the PRISM architecture and the MICA operating system When these projects were cancelled in a team was set up to design new VAX VMS systems of comparable performance to RISC based Unix systems After a number of failed attempts to design a faster VAX compatible processor the group demonstrated the feasibility of porting VMS and its applications to a RISC architecture based on PRISM This led to the creation of the Alpha architecture The project to port VMS to Alpha began in and first booted on a prototype Alpha EV based Alpha Demonstration Unit in early br The main challenge in porting VMS to a new architecture was that VMS and the VAX were designed together meaning that VMS was dependent on certain details of the VAX architecture Furthermore a significant amount of the VMS kernel layered products and customer developed applications were implemented in VAX MACRO assembly code Some of the changes needed to decouple VMS from the VAX architecture included the creation of the MACRO compiler which treated VAX MACRO as a high level language and compiled it to Alpha object code and the emulation of certain low level details of the VAX architecture in PALcode such as interrupt handling and atomic queue instructions br The VMS port to Alpha resulted in the creation of two separate codebases one for VAX and another for Alpha The Alpha code library was based on a snapshot of the VAX VMS code base circa V saw the release of the first version of OpenVMS for Alpha AXP systems designated OpenVMS AXP V In with the release of OpenVMS V feature and version number parity between the VAX and Alpha variants was achieved this was the so called Functional Equivalence release The decision to use the x version numbering stream for the pre production quality releases of OpenVMS AXP confused some customers and was not repeated in the subsequent ports of OpenVMS to new platforms br When VMS was ported to Alpha it was initially left as a bit only operating system This was done to ensure backwards compatibility with software written for the bit VAX bit addressing was first added for Alpha in the V release In order to allow bit code to interoperate with older bit code OpenVMS does not create a distinction between bit and bit executables but instead allows for both bit and bit pointers to be used within the same code This is known as mixed pointer support The bit OpenVMS Alpha releases support a maximum virtual address space size of TiB a bit address space which is the maximum supported by the Alpha and Alpha br One of the more noteworthy Alpha only features of OpenVMS was OpenVMS Galaxy which allowed the partitioning of a single SMP server to run multiple instances of OpenVMS Galaxy supported dynamic resource allocation to running partitions and the ability to share memory between partitions br br br Port to Intel Itanium br br In prior to its acquisition by Hewlett Packard Compaq announced the port of OpenVMS to the Intel Itanium architecture The Itanium port was the result of Compaq s decision to discontinue future development of the Alpha architecture in favour of adopting the then new Itanium architecture The porting began in late and the first boot on took place on January The first boot consisted of booting a minimal system configuration on a HP i workstation logging in as the SYSTEM user and running the DIRECTORY command The Itanium port of OpenVMS supports specific models and configurations of HPE Integrity Servers The Itanium releases were originally named HP OpenVMS Industry Standard for Integrity Servers although the names OpenVMS I or OpenVMS for Integrity Servers are more commonly used br The Itanium port was accomplished using source code maintained in common within the OpenVMS Alpha source code library with the addition of conditional code and additional modules where changes specific to Itanium were required This required certain architectural dependencies of OpenVMS to be replaced or emulated in software Some of the changes included using the Extensible Firmware Interface EFI to boot the operating system reimplementing the functionality previously provided by Alpha PALcode inside the kernel using new executable file formats Executable and Linkable Format and DWARF and adopting IEEE as the default floating point format br As with the VAX to Alpha port a binary translator for Alpha to Itanium was made available allowing user mode OpenVMS Alpha software to be ported to Itanium in situations where it was not possible to recompile the source code This translator is known as the Alpha Environment Software Translator AEST and it also supported translating VAX executables which had already been translated with VEST br Two pre production releases OpenVMS I V and V were available on June and on December These releases were intended for HP organizations and third party vendors involved with porting software packages to OpenVMS I The first production release V was released in February V was also released for Alpha subsequent V x releases of OpenVMS have maintained feature parity between the Alpha and Itanium architectures br br br Port to x br When VMS Software Inc VSI announced that they had secured the rights to develop the OpenVMS operating system from HP they also announced their intention to port OpenVMS to the x architecture The porting effort ran concurrently with the establishment of the company as well as the development of VSI s own Itanium and Alpha releases of OpenVMS V x br The x port is targeted for specific servers from HPE and Dell as well as certain virtual machine hypervisors Initial support was targeted for KVM and VirtualBox Support for VMware was announced in and Hyper V is being explored as a future target In the x port was demonstrated running on an Intel Atom based single board computer br As with the Alpha and Itanium ports the x port made some changes to simplify porting and supporting OpenVMS on the new platform including replacing the proprietary GEM compiler backend used by the VMS compilers with LLVM changing the boot process so that OpenVMS is booted from a memory disk and simulating the four privilege levels of OpenVMS in software since only two of x s privilege levels are usable by OpenVMS br The first boot was announced on May This involved booting OpenVMS on VirtualBox and successfully running the DIRECTORY command In May the V Early Adopter s Kit release was made available to a small number of customers This consisted of the OpenVMS operating system running in a VirtualBox VM with certain limitations most significantly few layered products were available and code can only be compiled for x using cross compilers which run on Itanium based OpenVMS systems Following the V release VSI released a series of updates on a monthly or bimonthly basis which added additional functionality and hypervisor support These were designated V A through V H In June VSI released the V Field Test making it available to VSI s customers and partners V shipped as an ISO image which can be installed onto a variety of hypervisors and onto HPE ProLiant DL servers starting with the V A release br br br Influence br During the s the MICA operating system for the PRISM architecture was intended to be the eventual successor to VMS MICA was designed to maintain backwards compatibility with VMS applications while also supporting Ultrix applications on top of the same kernel MICA was ultimately cancelled along with the rest of the PRISM platform leading Dave Cutler to leave DEC for Microsoft At Microsoft Cutler led the creation of the Windows NT operating system which was heavily inspired by the architecture of MICA As a result VMS is considered an ancestor of Windows NT together with RSX VAXELN and MICA and many similarities exist between VMS and NT br A now defunct project named FreeVMS attempted to develop an open source operating system following VMS conventions FreeVMS was built on top of the L microkernel and supported the x architecture Prior work investigating the implementation of VMS using a microkernel based architecture had previously been undertaken as a prototyping exercise by DEC employees with assistance from Carnegie Mellon University using the Mach microkernel ported to VAXstation hardware adopting a multiserver architectural model br br br Architecture br br The OpenVMS operating system has a layered architecture consisting of a privileged Executive an intermediately privileged Command Language Interpreter and unprivileged utilities and run time libraries RTLs Unprivileged code typically invokes the functionality of the Executive through system services equivalent to system calls in other operating systems br OpenVMS layers and mechanisms are built around certain features of the VAX architecture including br br The availability of four processor access modes named Kernel Executive Supervisor and User in order of decreasing privilege Each mode has its own stack and each memory page can have memory protections specified per mode br A virtual address space which is partitioned between process private space sections and system space sections which are common to all processes br interrupt priority levels which are used for synchronization br Hardware support for delivering asynchronous system traps to processes br These VAX architecture mechanisms are implemented on Alpha Itanium and x by either mapping to corresponding hardware mechanisms on those architectures or through emulation via PALcode on Alpha or in software on Itanium and x br br br Executive and Kernel br The OpenVMS Executive comprises the privileged code and data structures which reside in the system space The Executive is further subdivided between the Kernel which consists of the code which runs at the kernel access mode and the less privileged code outside of the Kernel which runs at the executive access mode br The components of the Executive which run at executive access mode include the Record Management Services and certain system services such as image activation The main distinction between the kernel and executive access modes is that most of the operating system s core data structures can be read from executive mode but require kernel mode to be written to Code running at executive mode can switch to kernel mode at will meaning that the barrier between the kernel and executive modes is intended as a safeguard against accidental corruption as opposed to a security mechanism br The Kernel comprises the operating system s core data structures e g page tables the I O database and scheduling data and the routines which operate on these structures The Kernel is typically described as having three major subsystems I O Process and Time Management Memory Management In addition other functionality such as logical name management synchronization and system service dispatch are implemented inside the Kernel br OpenVMS allows user mode code with suitable privileges to switch to executive or kernel mode using the CMEXEC and CMKRNL system services respectively This allows code outside of system space to have direct access to the Executive s routines and system services In addition to allowing third party extensions to the operating system Privileged Images are used by core operating system utilities to manipulate operating system data structures through undocumented interfaces br br br File system br br The typical user and application interface into the file system is the Record Management Services RMS although applications can interface directly with the underlying file system through the QIO system services The file systems supported by VMS are referred to as the Files On Disk Structures ODS the most significant of which are ODS and ODS VMS is also capable of accessing files on ISO CD ROMs and magnetic tape with ANSI tape labels br Files is limited to TiB volumes DEC attempted to replace it with a log structured file system named Spiralog first released in However Spiralog was discontinued due to a variety of problems including issues with handling full volumes Instead there has been discussion of porting the open source GFS file system to OpenVMS br br br Command Language Interpreter br An OpenVMS Command Language Interpreter CLI implements a command line interface for OpenVMS responsible for executing individual commands and command procedures equivalent to shell scripts or batch files The standard CLI for OpenVMS is the DIGITAL Command Language although other options are available br Unlike Unix shells which typically run in their own isolated process and behave like any other user mode program OpenVMS CLIs are an optional component of a process which exist alongside any executable image which that process may run Whereas a Unix shell will typically run executables by creating a separate process using fork exec an OpenVMS CLI will typically load the executable image into the same process transfer control to the image and ensure that control is transferred back to CLI once the image has exited and that the process is returned to its original state br Because the CLI is loaded into the same address space as user code and the CLI is responsible for invoking image activation and image rundown the CLI is mapped into the process address space at supervisor access mode a higher level of privilege than most user code This is in order to prevent accidental or malicious manipulation of the CLI s code and data structures by user mode code br br br Features br br br Clustering br br OpenVMS supports clustering first called VAXcluster and later VMScluster where multiple computers run their own instance of the operating system Clustered computers nodes may be fully independent from each other or they may share devices like disk drives and printers Communication across nodes provides a single system image abstraction Nodes may be connected to each other via a proprietary hardware connection called Cluster Interconnect or via a standard Ethernet LAN br OpenVMS supports up to nodes in a single cluster It also allows mixed architecture clusters OpenVMS clusters allow applications to function during planned or unplanned outages Planned outages include hardware and software upgrades br br br Networking br br The DECnet protocol suite is tightly integrated into VMS allowing remote logins as well as transparent access to files printers and other resources on VMS systems over a network VAX VMS V featured support for DECnet Phase II and modern versions of VMS support both the traditional Phase IV DECnet protocol as well as the OSI compatible Phase V also known as DECnet Plus Support for TCP IP is provided by the optional TCP IP Services for OpenVMS layered product originally known as the VMS ULTRIX Connection then as the ULTRIX Communications Extensions or UCX TCP IP Services is based on a port of the BSD network stack to OpenVMS along with support for common protocols such as SSH DHCP FTP and SMTP br DEC sold a software package named PATHWORKS originally known as the Personal Computer Systems Architecture or PCSA which allowed personal computers running MS DOS Microsoft Windows or OS or the Apple Macintosh to serve as a terminal for VMS systems or to use VMS systems as a file or print server PATHWORKS was later renamed to Advanced Server for OpenVMS and was eventually replaced with a VMS port of Samba at the time of the Itanium port br DEC provided the Local Area Transport LAT protocol which allowed remote terminals and printers to be attached to a VMS system through a terminal server such as one of the DECserver family br br br Programming br DEC and its successor companies provided a wide variety of programming languages for VMS Officially supported languages on VMS either current or historical include br br Among OpenVMS s notable features is the Common Language Environment a strictly defined standard that specifies calling conventions for functions and routines including use of stacks registers etc independent of programming language Because of this it is possible to call a routine written in one language for example Fortran from another for example COBOL without needing to know the implementation details of the target language OpenVMS itself is implemented in a variety of different languages and the common language environment and calling standard supports freely mixing these languages DEC created a tool named the Structure Definition Language SDL which allowed data type definitions to be generated for different languages from a common definition br br br Development tools br br DEC provided a collection of software development tools in a layered product named DECset originally named VAXset This consisted of the following tools br br Language Sensitive Editor LSE br Code Management System CMS a version control system br Module Management System MMS a build tool br the Source Code Analyzer SCA a static analyzer br the Performance and Coverage Analyzer PCA a profiler br Digital Test Manager DTM as a test manager br In addition a number of text editors are included in the operating system including EDT EVE and TECO br The OpenVMS Debugger supports all DEC compilers and many third party languages It allows breakpoints watchpoints and interactive runtime program debugging using either a command line or graphical user interface A pair of lower level debuggers named DELTA and XDELTA can be used to debug privileged code in additional to normal application code br In VSI released an officially supported Integrated Development Environment for VMS based on Visual Studio Code This allows VMS applications to be developed and debugged remotely from a Microsoft Windows macOS or Linux workstation br br br Database management br DEC created a number of optional database products for VMS some of which were marketed as the VAX Information Architecture family These products included br br Rdb A relational database system which originally used the proprietary Relational Data Operator RDO query interface but later gained SQL support br DBMS A database management system which uses the CODASYL network model and Data Manipulation Language DML br Digital Standard MUMPS DSM an integrated programming language and key value database br Common Data Dictionary CDD a central database schema repository which allowed schemas to be shared between different applications and data definitions to be generated for different programming languages br DATATRIEVE a query and reporting tool which could access data from RMS files as well as Rdb and DBMS databases br Application Control Management System ACMS A transaction processing monitor which allows applications to be created using a high level Task Description Language TDL Individual steps of a transaction can be implemented using DCL commands or Common Language Environment procedures User interfaces can be implemented using TDMS DECforms or Digital s ALL IN office automation product br RALLY DECadmire Fourth generation programming languages GLs for generating database backed applications DECadmire featured integration with ACMS and later provided support for generating Visual Basic client server applications for Windows PCs br In DEC sold Rdb DBMS and CDD to Oracle where they remain under active development In DEC sold DSM to InterSystems who renamed it Open M and eventually replaced it with their Cach product br Examples of third party database management systems for OpenVMS include MariaDB Mimer SQL Itanium and x and System br br br User interfaces br br VMS was originally designed to be used and managed interactively using DEC s text based video terminals such as the VT or hardcopy terminals such as the DECwriter series Since the introduction of the VAXstation line in VMS has optionally supported graphical user interfaces for use with workstations or X terminals such as the VT series br br br Text based user interfaces br br The DIGITAL Command Language DCL has served as the primary command language interpreter CLI of OpenVMS since the first release Other official CLIs available for VMS include the RSX Monitor Console Routine MCR VAX only and various Unix shells DEC provided tools for creating text based user interface applications the Form Management System FMS and Terminal Data Management System TDMS later succeeded by DECforms A lower level interface named Screen Management Services SMG comparable to Unix curses also exists br br br Graphical user interfaces br br Over the years VMS has gone through a number of different GUI toolkits and interfaces br br The original graphical user interface for VMS was a proprietary windowing system known as the VMS Workstation Software VWS which was first released for the VAXstation I in It exposed an API called the User Interface Services UIS It ran on a limited selection of VAX hardware br In DEC replaced VWS with a new X based windowing system named DECwindows It was first included in VAX VMS V Early versions of DECwindows featured an interface built on top of a proprietary toolkit named the X User Interface XUI A layered product named UISX was provided to allow VWS UIS applications to run on top of DECwindows Parts of XUI were subsequently used by the Open Software Foundation as the foundation of the Motif toolkit br In DEC replaced XUI with the Motif toolkit creating DECwindows Motif As a result the Motif Window Manager became the default DECwindows interface in OpenVMS V although the XUI window manager remained as an option br In as part of OpenVMS V DEC released the New Desktop interface for DECwindows Motif based on the Common Desktop Environment CDE On Alpha and Itanium systems it is still possible to select the older MWM based UI referred to as the DECwindows Desktop at login time The New Desktop was never ported to the VAX releases of OpenVMS br Versions of VMS running on DEC Alpha workstations in the s supported OpenGL and Accelerated Graphics Port AGP graphics adapters VMS also provides support for older graphics standards such as GKS and PHIGS Modern versions of DECwindows are based on X Org Server br br br Security br OpenVMS provides various security features and mechanisms including security identifiers resource identifiers subsystem identifiers ACLs intrusion detection and detailed security auditing and alarms Specific versions evaluated at Trusted Computer System Evaluation Criteria Class C and with the SEVMS security enhanced release at Class B OpenVMS also holds an ITSEC E rating see NCSC and Common Criteria Passwords are hashed using the Purdy Polynomial br br br Vulnerabilities br Early versions of VMS included a number of privileged user accounts including SYSTEM FIELD SYSTEST and DECNET with default passwords which were often left unchanged by system managers A number of computer worms for VMS including the WANK worm and the Father Christmas worm exploited these default passwords to gain access to nodes on DECnet networks This issue was also described by Clifford Stoll in The Cuckoo s Egg as a means by which Markus Hess gained unauthorized access to VAX VMS systems In V the default passwords were removed and it became mandatory to provide passwords for these accounts during system setup br A year old vulnerability in VMS on VAX and Alpha was discovered in and assigned the CVE ID CVE On the affected platforms this vulnerability allowed an attacker with access to the DCL command line to carry out a privilege escalation attack The vulnerability relies on exploiting a buffer overflow bug in the DCL command processing code the ability for a user to interrupt a running image program executable with CTRL Y and return to the DCL prompt and the fact that DCL retains the privileges of the interrupted image The buffer overflow bug allowed shellcode to be executed with the privileges of an interrupted image This could be used in conjunction with an image installed with higher privileges than the attacker s account to bypass system security br br br POSIX compatibility br Various official Unix and POSIX compatibility layers were created for VMS The first of these was DEC Shell which was a layered product consisting of ports of the Bourne shell from Version Unix and several other Unix utilities to VAX VMS In DEC released the POSIX for OpenVMS layered product which included a shell based on the KornShell POSIX for OpenVMS was later replaced by the open source GNV GNU s not VMS project which was first included in OpenVMS media in Amongst other GNU tools GNV includes a port of the Bash shell to VMS Examples of third party Unix compatibility layers for VMS include Eunice br br br Hobbyist programs br In OpenVMS and a number of layered products were made available free of charge for hobbyist non commercial use as part of the OpenVMS Hobbyist Program Since then several companies producing OpenVMS software have made their products available under the same terms such as Process Software Prior to the x port the age and cost of hardware capable of running OpenVMS made emulators such as SIMH a common choice for hobbyist installations br In March HPE announced the end of the OpenVMS Hobbyist Program This was followed by VSI s announcement of the Community License Program CLP in April which was intended as a replacement for the HPE Hobbyist Program The CLP was launched in July and provides licenses for VSI OpenVMS releases on Alpha Integrity and x systems OpenVMS for VAX is not covered by the CLP since there are no VSI releases of OpenVMS VAX and the old versions are still owned by HPE br br br Release history br br br See also br Comparison of operating systems br Terry Shannon br br br br br br Further reading br Getting Started with OpenVMS Michael D Duffy ISBN br Introduction to OpenVMS th Edition Lesley Ogilvie Rice ISBN br Ruth Goldenberg Saro Saravanan OpenVMS AXP Internals and Data Structures Version Digital Press ISBN br OpenVMS Alpha Internals and Data Structures Memory Management Ruth Goldenberg ISBN br OpenVMS Alpha Internals and Data Structures Scheduling and Process Control Version Ruth Goldenberg Saro Saravanan Denise Dumas ISBN br VAX VMS Internals and Data Structures Version IDSM Ruth Goldenberg Saro Saravanan Denise Dumas ISBN br Writing Real Programs in DCL second edition Stephen Hoffman Paul Anagnostopoulos ISBN br Writing OpenVMS Alpha Device Drivers in C Margie Sherlock Leonard Szubowicz ISBN br OpenVMS Performance Management Joginder Sethi ISBN br Getting Started with OpenVMS System Management nd Edition David Donald Miller Stephen Hoffman Lawrence Baldwin ISBN br The OpenVMS User s Guide Second Edition Patrick Holmay ISBN br Using DECwindows Motif for OpenVMS Margie Sherlock ISBN br Wayne Sewell Inside VMS The System Manager s and System Programmer s Guide to VMS Internals Van Nostrand Reinhold ISBN br The hitchhiker s guide to VMS an unsupported undocumented can go away at any time feature of VMS Bruce Ellis ISBN br Roland Hughes December The Minimum You Need to Know to Be an OpenVMS Application Developer Logikal Solutions ISBN br br br External links br br VMS Software Current Roadmap and Future Releases br VMS Software Documentation br HP OpenVMS FAQ at the Wayback Machine archived January br comp os vms Usenet group archives on Google Groups