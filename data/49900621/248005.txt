title: IBM i
id: 248005
IBM i the i standing for integrated is an operating system developed by IBM for IBM Power Systems It was originally released in as OS as the sole operating system of the IBM AS line of systems It was renamed to i OS in before being renamed a second time to IBM i in It is an evolution of the System CPF operating system with compatibility layers for System SSP and AIX applications It inherits a number of distinctive features from the System platform including the Machine Interface which provides hardware independence the implementation of object based addressing on top of a single level store and the tight integration of a relational database into the operating system br br br History br br br Origin br br OS was developed alongside the AS hardware platform beginning in December Development began in the aftermath of the failure of the Fort Knox project which left IBM without a competitive midrange system During the Fort Knox project a skunkworks project was started at Rochester by engineers who succeeded in developing code which allowed System applications to run on top of the System and when Fort Knox was cancelled this project evolved into an official project to replace both the System and System with a single new hardware and software platform The project became known as Silverlake named for Silver Lake in Rochester Minnesota br The operating system for Silverlake was codenamed XPF Extended CPF and had originally begun as a port of CPF to the Fort Knox hardware In addition to adding support for System applications some of the user interface and ease of use features from the System were carried over to the new operating system br Silverlake was available for field test in June and was officially announced in August of that year By that point it had been renamed to the Application System and the operating system had been named Operating System br br br The move to PowerPC br br The port to PowerPC required a rewrite of most of the code below the TIMI Early versions of OS inherited the Horizontal and Vertical Microcode layers of the System although they were renamed to the Horizontal Licensed Internal Code HLIC and Vertical Licensed Internal Code VLIC respectively The port to the new hardware led to the IMPI instruction set and the horizontal microcode implementing it being replaced by the PowerPC AS instruction set and its implementation in PowerAS processors This required the VLIC to be rewritten to target PowerPC instead of IMPI and for the operating system functionality previously implemented in the HLIC to be re implemented elsewhere This led to the HLIC and VLIC being replaced with a single layer named the System Licensed Internal Code SLIC The SLIC was implemented in an object oriented style with over million lines of C code replacing some of the HLIC code and most of the VLIC code Owing to the amount of work needed to implement the SLIC IBM Rochester hired several hundred C programmers for the project who worked on the SLIC in parallel to new revisions of the VLIC for the CISC AS systems The first release of OS to support PowerPC based hardware was V R br br br Rebranding br br The AS product line was rebranded multiple times throughout the s and s As part of the rebranding to eServer i OS was renamed to i OS the signifying the use of POWER processors The first release of i OS V R was described by IBM as a different name for the same operating system br In IBM rebranded the AS line one last time to System i In April IBM consolidated the System i with the System p platform to create IBM Power Systems At the same time i OS was renamed to IBM i in order to remove the association with POWER processors The two most recent versions of the operating system at that time which had been released as i OS V R and V R were renamed to IBM i and br Along with the rebranding to IBM i IBM changed the versioning nomenclature for the operating system Prior releases used a Version Release Modification scheme e g V R M This was replaced with a Version Release scheme e g Beginning with IBM i IBM replaced the Modification releases with Technology Refreshes Technology Refreshes are delivered as optional PTFs for specific releases of the operating system which add new functionality or hardware support to the operating system br br br Architecture br br When IBM i was first released as OS it was split into two layers the hardware dependent System Licensed Internal Code SLIC and the hardware independent Extended Control Program Facility XPF These are divided by a hardware abstraction layer called the Technology Independent Machine Interface TIMI Later versions of the operating system gained additional layers including an AIX compatibility layer named Portable Application Solutions Environment originally known as the Private Address Space Environment and the Advanced Machine environment which ran System SSP applications in emulation br IBM often uses different names for the TIMI SLIC and XPF in documentation and marketing materials for example the IBM i documentation refers to them as the IBM i Machine Interface IBM i Licensed Internal Code and IBM i Operating System respectively br br br Technology Independent Machine Interface TIMI br The TIMI isolates users and applications from the underlying hardware This isolation is more thorough than the hardware abstractions of other operating systems and includes abstracting the instruction set architecture of the processor the size of the address space and the specifics of I O and persistence This is accomplished through two interrelated mechanisms br br Compilers for IBM i do not generate native machine code directly instead they generate a high level intermediate representation defined by the TIMI When a program is run the operating system carries out ahead of time translation of the TIMI instructions into native machine code for the processor and stores the generated machine code for future execution of the program If the translation process changes or a different CPU instruction set is adopted the operating system can transparently regenerate the machine code from the TIMI instructions without needing to recompile from source code br Instead of operating on memory addresses TIMI instructions operate on objects All data in IBM i such as data files source code programs and regions of allocated memory are encapsulated inside objects managed by the operating system cf the Everything is a file model in Unix IBM i objects have a fixed type which defines the set of applicable operations which may be carried out on them for example a Program object can be executed but cannot be edited The object model hides whether data is stored in primary or secondary storage Instead the operating system automatically handles the process of retrieving and then storing the changes to permanent storage br The hardware isolation provided by the TIMI allowed IBM to replace the AS s bit IMPI architecture with the bit RS architecture in Applications compiled on systems using the IMPI instruction set could run on top of the newer RS systems without any code changes recompilation or emulation while also allowing those applications to avail of bit addressing br There are two different formats of TIMI instructions known as the Original Machine Interface OMI and New Machine Interface NMI formats OMI instructions are essentially the same as the System Machine interface instructions whereas NMI instructions are lower level resembling the W code intermediate representation format used by IBM s compilers IBM partially documents the OMI instructions whereas the NMI instructions are not officially documented OMI instructions are used by the original AS compilers whereas NMI instructions are used by the Integrated Language Environment compilers During the PowerPC port native support for the OMI format was removed and replaced with a translator which converted OMI instructions into NMI instructions br The storing of the TIMI instructions alongside the native machine code instructions is known as observability In the release of i OS V R later known as IBM i introduced a number of changes to the TIMI layer which caused problems for third party software which removed observability from the application objects shipped to customers br br br SLIC br br The SLIC consists of the code which implements the TIMI on top of the IBM Power architecture In addition to containing most of the functionality typically associated with an operating system kernel it is responsible for translating TIMI instructions into machine code and it also implements some high level functionality which is exposed through the TIMI such as IBM i s integrated relational database The SLIC implements IBM i s object based storage model on top of a single level store addressing scheme which does not distinguish between primary and secondary storage and instead manages all types of storage in a single virtual address space The SLIC is primarily implemented in C and replaced the HLIC and VLIC layers used in versions of OS prior to V R br br br XPF br The XPF consists of the code which implements the hardware independent components of the operating system which are compiled into TIMI instructions Components of the XPF include the user interface the Control Language data management and query utilities development tools and system management utilities The XPF also contains the System Environment and System Environment which provide backwards compatibility APIs and utilities for applications and data migrated from SSP and CPF systems The XPF is IBM s internal name for this layer and as the name suggests began as an evolution of the System Control Program Facility The XPF is mostly implemented in PL MI although other languages are also used br br br PASE br PASE Portable Applications Solutions Environment provides binary compatibility for user mode AIX executables which do not interact directly with the AIX kernel and supports the bit and bit AIX Application Binary Interfaces PASE was first included in a limited and undocumented form in the V R release of OS to support a port of Smalltalk It was first announced to customers at the time of the V R release by which time it had gained significant additional functionality br PASE consists of the AIX userspace running on top of a system call interface implemented by the SLIC The system call interfaces allows interoperability between PASE and native IBM i applications for example PASE applications can access the integrated database or call native IBM i applications and vice versa During the creation of PASE a new type of single level storage object named a Teraspace was added to the operating system which allows each PASE process to have a private TiB space which is addressed with bit pointers This was necessary since all IBM i jobs i e processes typically share the same address space PASE applications do not use the hardware independent TIMI instructions and are instead compiled directly to Power machine code br Ports of open source software to IBM i typically target PASE instead of the native IBM i APIs in order to simplify porting Open source software for IBM i is typically packaged using the RPM package format and installed with the YUM package manager br PASE is distinct from the Qshell environment which is an implementation of a Unix shell and associated utilities built on top of IBM i s native POSIX compatible APIs br br br Advanced Machine br br Introduced in the Advanced platform ran unmodified System applications and the SSP operating system in emulation on top of the OS SLIC using hardware which was mostly identical to that of contemporary AS systems This functionality was incorporated into OS itself from V R through V R making it possible to run up to four System virtual machines to use IBM s term using the so called Advanced Machine feature of the operating system Support was discontinued in the V R release coinciding with IBM s discontinuation of the Advanced product line as a whole The Advanced Machine feature is distinct from the System Environment introduced in the initial OS release and still supported in current IBM i versions br Prior to the Advanced the System line used two different processors in each system the Main Storage Processor MSP which ran most of the SSP operating system as well as user code and the Control Storage Processor CSP which ran so called microcode which implemented core operating system functionality as well as I O The CSP microcode was invoked from the MSP through the use of the Supervisor Call SVC instruction On the Advanced the CSP microcode was reimplemented inside the SLIC An MSP emulator was also built into the SLIC sometimes referred to as the Technology Independent Emulation Interface Even with the overhead of emulation the Advanced systems were significantly faster than the original System systems they replaced due to the performance of their PowerPC AS processors br br br Features br br br Database management br IBM i features an integrated relational database currently known as IBM Db for IBM i The database evolved from the non relational System database gaining support for the relational model and SQL The database originally had no name instead it was described simply as data base support It was given the name DB in to indicate comparable functionality to IBM s other commercial databases Despite the Db branding Db for IBM i is an entirely separate codebase to Db on other platforms and is tightly integrated into the SLIC layer of IBM i as opposed to being an optional product br IBM i provides two mechanisms for accessing the integrated database the so called native interface which is based on the database access model of the System and SQL The native interface consists of the Data Description Specifications DDS language which is used to define schemas and the OPNQRYF command or QQQQRY query API Certain Db for i features such as object relational database management require SQL and cannot be accessed through the native interface IBM i has two separate query optimizers known as the Classic Query Engine CQE and SQL Query Engine SQE These are implemented inside the SLIC alongside a Query Dispatcher which selects the appropriate optimizer depending on the type of the query Remote access through the native interface and SQL is provided by the Distributed Data Management Architecture DDM and Distributed Relational Database Architecture respectively br A storage engine for MySQL and MariaDB named IBMDB I allows applications designed for those databases to use Db for i as a backing store Other open source databases have been ported to IBM i including PostgreSQL MongoDB and Redis These databases run on the PASE environment and are independent of the operating system s integrated database features br br br Networking br IBM i supports TCP IP networking in addition to the proprietary IBM Systems Network Architecture br IBM i systems were historically accessed and managed through IBM terminals attached to the system with twinax cabling With the decline of dedicated terminal hardware modern IBM i systems are typically accessed through terminal emulators IBM provides two terminal emulator products for IBM i br br IBM i Access Client Solutions is a Java based client that runs on Linux macOS and Windows to provide emulation br IBM i Access for Web Mobile provides web based emulation br In addition IBM provides a web based management console and performance analysis product named IBM Navigator for i br br br Programming br Programming languages available from IBM for IBM i include RPG Control Language C C Java EGL COBOL and REXX Compilers were previously available for Pascal BASIC PL I and Smalltalk but have since been discontinued The Integrated Language Environment ILE allows programs from ILE compatible languages C C COBOL RPG and CL to be bound into the same executable and call procedures written in any of the other ILE languages br When PASE was introduced it was necessary to compile code for PASE on an AIX system This requirement was removed in OS V R when it became possible to compile code using the IBM XL compiler suite inside PASE itself Since then other compilers have been ported to PASE including gcc br Certain development tools for IBM i run on top of the operating system itself such as the Source Edit Utility SEU text editor and Programming Development Manager IBM also provides an Eclipse based integrated development environment IDE for IBM i named IBM Rational Developer for i which runs on developer workstations instead of IBM i Prior to the Eclipse based IDE IBM provided an IDE based on WorkFrame which ran on OS named CODE and an IDE based on VisualAge which ran on Microsoft Windows systems br IBM i uses EBCDIC as the default character encoding but also provides support for ASCII UCS and UTF br br br Storage br In IBM i disk drives may be grouped into an auxiliary storage pool ASP in order to organize data to limit the impact of storage device failures and to reduce recovery time If a disk failure occurs only the data in the pool containing the failed unit needs to be recovered ASPs may also be used to improve performance by isolating objects with similar performance characteristics for example journal receivers in their own pool br By default all disk drives are assigned to pool The concept of IBM i pools is similar to the Unix Linux concept of volume groups however with IBM i it is typical for all disk drives to be assigned to a single ASP br br br Security br Security in IBM i is defined in terms of authorities which represents the permission to carry out a specific action on a specific object Authorities can be granted to individual users known as user profiles groups known as group profiles or all users public authorities Related objects can be grouped together in an authorization list making it possible to grant authorities on all objects in the list by granting authorities on the authorization list br User profiles have an associated user class which dictates the set of default authorities available to that user profile There are five standard user classes which in order of increasing privilege are Workstation User System Operator System Programmer Security Administrator and Security Officer IBM i ships with a default user profile for each user class and the default Security Officer user profile named QSECOFR is the closest equivalent to the root user of a Unix like operating system br IBM i can be set to use one of five levels of security which control the extent to which the operating system s security features are enforced br br Level Users can log in without a password and have full access to the system If a user logs in with an unknown username a new user profile will be automatically created br Level Users must log in with a username and password of a known user profile but will have almost full access to the system once logged in Creation or modification of user profiles is restricted to user profiles which have been granted authorities for profile management Limited access accounts can be created which can be restricted to accessing certain objects or running certain commands br Level Authorities are enforced meaning that users cannot access objects unless they have an authority for the object br Level Access to certain system programs and MI instructions are restricted and can only be used by operating system code br Level Includes changes needed for the system to achieve TCSEC C compliance and adds a security audit journal br The first three levels correspond to the security levels available in CPF and the initial releases of OS Security level was added in OS V R and become the default security level for the operating system The addition of Level required the removal of the capability addressing model of the System which was also present in earlier releases of OS Security level was added in V R when OS was certified to TCSEC C security br br br Release timeline br br br See also br Comparison of operating systems br Object IBM i br br br br br br External links br br IBM i site br IBM i Documentation br IT Jungle IBM i news website br MC Press Online IBM Midrange Computer news website