title: FreeRTOS
id: 2152217
FreeRTOS is a real time operating system kernel for embedded devices that has been ported to microcontroller platforms It is distributed under the MIT License br br br History br The FreeRTOS kernel was originally developed by Richard Barry around and was later developed and maintained by Barry s company Real Time Engineers Ltd In the firm passed stewardship of the FreeRTOS project to Amazon Web Services AWS Barry continues to work on FreeRTOS as part of an AWS team br br br Implementation br FreeRTOS is designed to be small and simple It is mostly written in the C programming language to make it easy to port and maintain It also comprises a few assembly language functions where needed mostly in architecture specific scheduler routines br br br Process management br FreeRTOS provides methods for multiple threads or tasks mutexes semaphores and software timers A tickless mode is provided for low power applications Thread priorities are supported FreeRTOS applications can be statically allocated but objects can also be dynamically allocated with five schemes of memory management allocation br br allocate only br allocate and free with a very simple fast algorithm br a more complex but fast allocate and free algorithm with memory coalescence br an alternative to the more complex scheme that includes memory coalescence that allows a heap to be broken across multiple memory areas br and C library allocate and free with some mutual exclusion protection br RTOSes typically do not have the more advanced features that are found in operating systems like Linux and Microsoft Windows such as device drivers advanced memory management and user accounts The emphasis is on compactness and speed of execution FreeRTOS can be thought of as a thread library rather than an operating system although command line interface and POSIX like input output I O abstraction are available br FreeRTOS implements multiple threads by having the host program call a thread tick method at regular short intervals The thread tick method switches tasks depending on priority and a round robin scheduling scheme The usual interval is to milliseconds to of a second via an interrupt from a hardware timer but this interval is often changed to suit a given application br The software distribution contains prepared configurations and demonstrations for every port and compiler allowing rapid application design The project website provides documentation and RTOS tutorials and details of the RTOS design br br br Key features br Book and reference manuals br Small memory size low overhead and fast execution br Tick less option for low power applications br Intended for both hobbyists and professional developers working on commercial products br Scheduler can be configured for both preemptive or cooperative multitasking br Coroutine support coroutines in FreeRTOS are simple and lightweight tasks with limited use of the call stack br Trace support through generic trace macros Tools such as Tracealyzer a commercial tool by FreeRTOS partner Percepio can thereby record and visualize the runtime behavior of FreeRTOS based systems for debugging and verification This includes task scheduling and kernel calls for semaphore and queue operations br br br Supported architectures br br br Derivations br br br Amazon FreeRTOS br Amazon provides a now deprecated extension of FreeRTOS this is FreeRTOS with libraries for Internet of things IoT support specifically for Amazon Web Services Since version in Amazon has taken stewardship of the FreeRTOS code including any updates to the original kernel br br br SAFERTOS br SAFERTOS was developed as a complementary version of FreeRTOS with common functions but designed for safety critical implementation FreeRTOS was subject to hazard and operability study HAZOP and weaknesses were identified and resolved The result was put through a full IEC SIL development lifecycle the highest level for a software only component br SAFERTOS was developed by Wittenstein High Integrity Systems in partnership with Real Time Engineers Ltd primary developer of the FreeRTOS project Both SAFERTOS and FreeRTOS share the same scheduling algorithm have similar application programming interfaces APIs and are otherwise very similar but they were developed with differing objectives SAFERTOS was developed solely in the C language to meet requirements for certification to IEC br SAFERTOS can reside solely in the on chip read only memory ROM of a microcontroller for standards compliance When implemented in hardware memory SAFERTOS code can only be used in its original certified configuration This means certifying a system needs no retesting of the kernel portion of a design SAFERTOS is included in the ROM of some Stellaris Microcontrollers from Texas Instruments SAFERTOS source code does not need to be separately purchased In this usage scenario a C header file is used to map SAFERTOS API functions to their location in read only memory br br br OPENRTOS br OPENRTOS is a commercially licensed version of Amazon FreeRTOS sold by Wittenstein High Integrity Systems This product provides support and allows companies to use the Amazon FreeRTOS kernel and libraries without the a FreeRTOS MIT license br br br See also br br Embedded operating system br br br br br br External links br br Official website