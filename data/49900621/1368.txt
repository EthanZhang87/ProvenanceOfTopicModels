title: Assembly language
id: 1368
In computer programming assembly language alternatively assembler language or symbolic machine code often referred to simply as assembly and commonly abbreviated as ASM or asm is any low level programming language with a very strong correspondence between the instructions in the language and the architecture s machine code instructions Assembly language usually has one statement per machine instruction but constants comments assembler directives symbolic labels of e g memory locations registers and macros are generally also supported br The first assembly code in which a language is used to represent machine code instructions is found in Kathleen and Andrew Donald Booth s work Coding for A R C Assembly code is converted into executable machine code by a utility program referred to as an assembler The term assembler is generally attributed to Wilkes Wheeler and Gill in their book The Preparation of Programs for an Electronic Digital Computer who however used the term to mean a program that assembles another program consisting of several sections into a single program The conversion process is referred to as assembly as in assembling the source code The computational step when an assembler is processing a program is called assembly time br Because assembly depends on the machine code instructions each assembly language is specific to a particular computer architecture br Sometimes there is more than one assembler for the same architecture and sometimes an assembler is specific to an operating system or to particular operating systems Most assembly languages do not provide specific syntax for operating system calls and most assembly languages can be used universally with any operating system as the language provides access to all the real capabilities of the processor upon which all system call mechanisms ultimately rest In contrast to assembly languages most high level programming languages are generally portable across multiple architectures but require interpreting or compiling much more complicated tasks than assembling br In the first decades of computing it was commonplace for both systems programming and application programming to take place entirely in assembly language While still irreplaceable for some purposes the majority of programming is now conducted in higher level interpreted and compiled languages In No Silver Bullet Fred Brooks summarised the effects of the switch away from assembly language programming Surely the most powerful stroke for software productivity reliability and simplicity has been the progressive use of high level languages for programming Most observers credit that development with at least a factor of five in productivity and with concomitant gains in reliability simplicity and comprehensibility br Today it is typical to use small amounts of assembly language code within larger systems implemented in a higher level language for performance reasons or to interact directly with hardware in ways unsupported by the higher level language For instance just under of version of the Linux kernel source code is written in assembly more than is written in C br br br Assembly language syntax br Assembly language uses a mnemonic to represent e g each low level machine instruction or opcode each directive typically also each architectural register flag etc Some of the mnemonics may be built in and some user defined Many operations require one or more operands in order to form a complete instruction Most assemblers permit named constants registers and labels for program and memory locations and can calculate expressions for operands Thus programmers are freed from tedious repetitive calculations and assembler programs are much more readable than machine code Depending on the architecture these elements may also be combined for specific instructions or addressing modes using offsets or other data as well as fixed addresses Many assemblers offer additional mechanisms to facilitate program development to control the assembly process and to aid debugging br Some are column oriented with specific fields in specific columns this was very common for machines using punched cards in the s and early s Some assemblers have free form syntax with fields separated by delimiters e g punctuation white space Some assemblers are hybrid with e g labels in a specific column and other fields separated by delimiters this became more common than column oriented syntax in the s br br br Terminology br A macro assembler is an assembler that includes a macroinstruction facility so that parameterized assembly language text can be represented by a name and that name can be used to insert the expanded text into other code br Open code refers to any assembler input outside of a macro definition br A cross assembler see also cross compiler is an assembler that is run on a computer or operating system the host system of a different type from the system on which the resulting code is to run the target system Cross assembling facilitates the development of programs for systems that do not have the resources to support software development such as an embedded system or a microcontroller In such a case the resulting object code must be transferred to the target system via read only memory ROM EPROM etc a programmer when the read only memory is integrated in the device as in microcontrollers or a data link using either an exact bit by bit copy of the object code or a text based representation of that code such as Intel hex or Motorola S record br A high level assembler is a program that provides language abstractions more often associated with high level languages such as advanced control structures IF THEN ELSE DO CASE etc and high level abstract data types including structures records unions classes and sets br A microassembler is a program that helps prepare a microprogram to control the low level operation of a computer br A meta assembler is a program that accepts the syntactic and semantic description of an assembly language and generates an assembler for that language or that accepts an assembler source file along with such a description and assembles the source file in accordance with that description Meta Symbol assemblers for the SDS Series and SDS Sigma series of computers are meta assemblers Sperry Univac also provided a Meta Assembler for the UNIVAC series br inline assembler or embedded assembler is assembler code contained within a high level language program This is most often used in systems programs which need direct access to the hardware br br br Key concepts br br br Assembler br An assembler program creates object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents This representation typically includes an operation code opcode as well as other control bits and data The assembler also calculates constant expressions and resolves symbolic names for memory locations and other entities The use of symbolic references is a key feature of assemblers saving tedious calculations and manual address updates after program modifications Most assemblers also include macro facilities for performing textual substitution e g to generate common short sequences of instructions as inline instead of called subroutines br Some assemblers may also be able to perform some simple types of instruction set specific optimizations One concrete example of this may be the ubiquitous x assemblers from various vendors Called jump sizing most of them are able to perform jump instruction replacements long jumps replaced by short or relative jumps in any number of passes on request Others may even do simple rearrangement or insertion of instructions such as some assemblers for RISC architectures that can help optimize a sensible instruction scheduling to exploit the CPU pipeline as efficiently as possible br Assemblers have been available since the s as the first step above machine language and before high level programming languages such as Fortran Algol COBOL and Lisp There have also been several classes of translators and semi automatic code generators with properties similar to both assembly and high level languages with Speedcode as perhaps one of the better known examples br There may be several assemblers with different syntax for a particular CPU or instruction set architecture For instance an instruction to add memory data to a register in a x family processor might be add eax ebx in original Intel syntax whereas this would be written addl ebx eax in the AT T syntax used by the GNU Assembler Despite different appearances different syntactic forms generally generate the same numeric machine code A single assembler may also have different modes in order to support variations in syntactic forms as well as their exact semantic interpretations such as FASM syntax TASM syntax ideal mode etc in the special case of x assembly programming br br br Number of passes br There are two types of assemblers based on how many passes through the source are needed how many times the assembler reads the source to produce the object file br br One pass assemblers process the source code once For symbols used before they are defined the assembler will emit errata after the eventual definition telling the linker or the loader to patch the locations where the as yet undefined symbols had been used br Multi pass assemblers create a table with all symbols and their values in the first passes then use the table in later passes to generate code br In both cases the assembler must be able to determine the size of each instruction on the initial passes in order to calculate the addresses of subsequent symbols This means that if the size of an operation referring to an operand defined later depends on the type or distance of the operand the assembler will make a pessimistic estimate when first encountering the operation and if necessary pad it with one or more br no operation instructions in a later pass or the errata In an assembler with peephole optimization addresses may be recalculated between passes to allow replacing pessimistic code with code tailored to the exact distance from the target br The original reason for the use of one pass assemblers was memory size and speed of assembly often a second pass would require storing the symbol table in memory to handle forward references rewinding and rereading the program source on tape or rereading a deck of cards or punched paper tape Later computers with much larger memories especially disc storage had the space to perform all necessary processing without such re reading The advantage of the multi pass assembler is that the absence of errata makes the linking process or the program load if the assembler directly produces executable code faster br Example in the following code snippet a one pass assembler would be able to determine the address of the backward reference BKWD when assembling statement S but would not be able to determine the address of the forward reference FWD when assembling the branch statement S indeed FWD may be undefined A two pass assembler would determine both addresses in pass so they would be known when generating code in pass br br S B FWD br br FWD EQU br br BKWD EQU br br S B BKWD br br br High level assemblers br More sophisticated high level assemblers provide language abstractions such as br br High level procedure function declarations and invocations br Advanced control structures IF THEN ELSE SWITCH br High level abstract data types including structures records unions classes and sets br Sophisticated macro processing although available on ordinary assemblers since the late s for e g the IBM series and IBM series and since the s for IBM System S amongst other machines br Object oriented programming features such as classes objects abstraction polymorphism and inheritance br See Language design below for more details br br br Assembly language br A program written in assembly language consists of a series of mnemonic processor instructions and meta statements known variously as declarative operations directives pseudo instructions pseudo operations and pseudo ops comments and data Assembly language instructions usually consist of an opcode mnemonic followed by an operand which might be a list of data arguments or parameters Some instructions may be implied which means the data upon which the instruction operates is implicitly defined by the instruction itself such an instruction does not take an operand The resulting statement is translated by an assembler into machine language instructions that can be loaded into memory and executed br For example the instruction below tells an x IA processor to move an immediate bit value into a register The binary code for this instruction is followed by a bit identifier for which register to use The identifier for the AL register is so the following machine code loads the AL register with the data br br br br This binary computer code can be made more human readable by expressing it in hexadecimal as follows br br B br br Here B means Move a copy of the following value into AL and is a hexadecimal representation of the value which is in decimal Assembly language for the family provides the mnemonic MOV an abbreviation of move for instructions such as this so the machine code above can be written as follows in assembly language complete with an explanatory comment if required after the semicolon This is much easier to read and to remember br br In some assembly languages including this one the same mnemonic such as MOV may be used for a family of related instructions for loading copying and moving data whether these are immediate values values in registers or memory locations pointed to by values in registers or by immediate a k a direct addresses Other assemblers may use separate opcode mnemonics such as L for move memory to register ST for move register to memory LR for move register to register MVI for move immediate operand to memory etc br If the same mnemonic is used for different instructions that means that the mnemonic corresponds to several different binary instruction codes excluding data e g the h in this example depending on the operands that follow the mnemonic For example for the x IA CPUs the Intel assembly language syntax MOV AL AH represents an instruction that moves the contents of register AH into register AL The hexadecimal form of this instruction is br br E br br The first byte h identifies a move between a byte sized register and either another register or memory and the second byte E h is encoded with three bit fields to specify that both operands are registers the source is AH and the destination is AL br In a case like this where the same mnemonic can represent more than one binary instruction the assembler determines which instruction to generate by examining the operands In the first example the operand h is a valid hexadecimal numeric constant and is not a valid register name so only the B instruction can be applicable In the second example the operand AH is a valid register name and not a valid numeric constant hexadecimal decimal octal or binary so only the instruction can be applicable br Assembly languages are always designed so that this sort of lack of ambiguity is universally enforced by their syntax For example in the Intel x assembly language a hexadecimal constant must start with a numeral digit so that the hexadecimal number A equal to decimal ten would be written as Ah or AH not AH specifically so that it cannot appear to be the name of register AH The same rule also prevents ambiguity with the names of registers BH CH and DH as well as with any user defined symbol that ends with the letter H and otherwise contains only characters that are hexadecimal digits such as the word BEACH br Returning to the original example while the x opcode B copies an bit value into the AL register B moves it into CL and B does so into DL Assembly language examples for these follow br br The syntax of MOV can also be more complex as the following examples show br br In each case the MOV mnemonic is translated directly into one of the opcodes C E A A B BF C or C by an assembler and the programmer normally does not have to know or remember which br Transforming assembly language into machine code is the job of an assembler and the reverse can at least partially be achieved by a disassembler Unlike high level languages there is a one to one correspondence between many simple assembly statements and machine language instructions However in some cases an assembler may provide pseudoinstructions essentially macros which expand into several machine language instructions to provide commonly needed functionality For example for a machine that lacks a branch if greater or equal instruction an assembler may provide a pseudoinstruction that expands to the machine s set if less than and branch if zero on the result of the set instruction Most full featured assemblers also provide a rich macro language discussed below which is used by vendors and programmers to generate more complex code and data sequences Since the information about pseudoinstructions and macros defined in the assembler environment is not present in the object program a disassembler cannot reconstruct the macro and pseudoinstruction invocations but can only disassemble the actual machine instructions that the assembler generated from those abstract assembly language entities Likewise since comments in the assembly language source file are ignored by the assembler and have no effect on the object code it generates a disassembler is always completely unable to recover source comments br Each computer architecture has its own machine language Computers differ in the number and type of operations they support in the different sizes and numbers of registers and in the representations of data in storage While most general purpose computers are able to carry out essentially the same functionality the ways they do so differ the corresponding assembly languages reflect these differences br Multiple sets of mnemonics or assembly language syntax may exist for a single instruction set typically instantiated in different assembler programs In these cases the most popular one is usually that supplied by the CPU manufacturer and used in its documentation br Two examples of CPUs that have two different sets of mnemonics are the Intel family and the Intel Because Intel claimed copyright on its assembly language mnemonics on each page of their documentation published in the s and early s at least some companies that independently produced CPUs compatible with Intel instruction sets invented their own mnemonics The Zilog Z CPU an enhancement of the Intel A supports all the A instructions plus many more Zilog invented an entirely new assembly language not only for the new instructions but also for all of the A instructions For example where Intel uses the mnemonics MOV MVI LDA STA LXI LDAX STAX LHLD and SHLD for various data transfer instructions the Z assembly language uses the mnemonic LD for all of them A similar case is the NEC V and V CPUs enhanced copies of the Intel and respectively Like Zilog with the Z NEC invented new mnemonics for all of the and instructions to avoid accusations of infringement of Intel s copyright It is questionable whether such copyrights can be valid and later CPU companies such as AMD and Cyrix republished Intel s x IA instruction mnemonics exactly with neither permission nor legal penalty It is doubtful whether in practice many people who programmed the V and V actually wrote in NEC s assembly language rather than Intel s since any two assembly languages for the same instruction set architecture are isomorphic somewhat like English and Pig Latin there is no requirement to use a manufacturer s own published assembly language with that manufacturer s products br br br Language design br br br Basic elements br There is a large degree of diversity in the way the authors of assemblers categorize statements and in the nomenclature that they use In particular some describe anything other than a machine mnemonic or extended mnemonic as a pseudo operation pseudo op A typical assembly language consists of types of instruction statements that are used to define program operations br br Opcode mnemonics br Data definitions br Assembly directives br br br Opcode mnemonics and extended mnemonics br Instructions statements in assembly language are generally very simple unlike those in high level languages Generally a mnemonic is a symbolic name for a single executable machine language instruction an opcode and there is at least one opcode mnemonic defined for each machine language instruction Each instruction typically consists of an operation or opcode plus zero or more operands Most instructions refer to a single value or a pair of values Operands can be immediate value coded in the instruction itself registers specified in the instruction or implied or the addresses of data located elsewhere in storage This is determined by the underlying processor architecture the assembler merely reflects how this architecture works Extended mnemonics are often used to specify a combination of an opcode with a specific operand e g the System assemblers use B as an extended mnemonic for BC with a mask of and NOP NO OPeration do nothing for one step for BC with a mask of br Extended mnemonics are often used to support specialized uses of instructions often for purposes not obvious from the instruction name For example many CPU s do not have an explicit NOP instruction but do have instructions that can be used for the purpose In CPUs the instruction xchg ax ax is used for nop with nop being a pseudo opcode to encode the instruction xchg ax ax Some disassemblers recognize this and will decode the xchg ax ax instruction as nop Similarly IBM assemblers for System and System use the extended mnemonics NOP and NOPR for BC and BCR with zero masks For the SPARC architecture these are known as synthetic instructions br Some assemblers also support simple built in macro instructions that generate two or more machine instructions For instance with some Z assemblers the instruction ld hl bc is recognized to generate ld l c followed by ld h b These are sometimes known as pseudo opcodes br Mnemonics are arbitrary symbols in the IEEE published Standard for a uniform set of mnemonics to be used by all assemblers The standard has since been withdrawn br br br Data directives br There are instructions used to define data elements to hold data and variables They define the type of data the length and the alignment of data These instructions can also define whether the data is available to outside programs programs assembled separately or only to the program in which the data section is defined Some assemblers classify these as pseudo ops br br br Assembly directives br Assembly directives also called pseudo opcodes pseudo operations or pseudo ops are commands given to an assembler directing it to perform operations other than assembling instructions Directives affect how the assembler operates and may affect the object code the symbol table the listing file and the values of internal assembler parameters Sometimes the term pseudo opcode is reserved for directives that generate object code such as those that generate data br The names of pseudo ops often start with a dot to distinguish them from machine instructions Pseudo ops can make the assembly of the program dependent on parameters input by a programmer so that one program can be assembled in different ways perhaps for different applications Or a pseudo op can be used to manipulate presentation of a program to make it easier to read and maintain Another common use of pseudo ops is to reserve storage areas for run time data and optionally initialize their contents to known values br Symbolic assemblers let programmers associate arbitrary names labels or symbols with memory locations and various constants Usually every constant and variable is given a name so instructions can reference those locations by name thus promoting self documenting code In executable code the name of each subroutine is associated with its entry point so any calls to a subroutine can use its name Inside subroutines GOTO destinations are given labels Some assemblers support local symbols which are often lexically distinct from normal symbols e g the use of as a GOTO destination br Some assemblers such as NASM provide flexible symbol management letting programmers manage different namespaces automatically calculate offsets within data structures and assign labels that refer to literal values or the result of simple computations performed by the assembler Labels can also be used to initialize constants and variables with relocatable addresses br Assembly languages like most other computer languages allow comments to be added to program source code that will be ignored during assembly Judicious commenting is essential in assembly language programs as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine The raw uncommented assembly language generated by compilers or disassemblers is quite difficult to read when changes must be made br br br Macros br Many assemblers support predefined macros and others support programmer defined and repeatedly re definable macros involving sequences of text lines in which variables and constants are embedded The macro definition is most commonly a mixture of assembler statements e g directives symbolic machine instructions and templates for assembler statements This sequence of text lines may include opcodes or directives Once a macro has been defined its name may be used in place of a mnemonic When the assembler processes such a statement it replaces the statement with the text lines associated with that macro then processes them as if they existed in the source code file including in some assemblers expansion of any macros existing in the replacement text Macros in this sense date to IBM autocoders of the s br Macro assemblers typically have directives to e g define macros define variables set variables to the result of an arithmetic logical or string expression iterate conditionally generate code Some of those directives may be restricted to use within a macro definition e g MEXIT in HLASM while others may be permitted within open code outside macro definitions e g AIF and COPY in HLASM br In assembly language the term macro represents a more comprehensive concept than it does in some other contexts such as the pre processor in the C programming language where its define directive typically is used to create short single line macros Assembler macro instructions like macros in PL I and some other languages can be lengthy programs by themselves executed by interpretation by the assembler during assembly br Since macros can have short names but expand to several or indeed many lines of code they can be used to make assembly language programs appear to be far shorter requiring fewer lines of source code as with higher level languages They can also be used to add higher levels of structure to assembly programs optionally introduce embedded debugging code via parameters and other similar features br Macro assemblers often allow macros to take parameters Some assemblers include quite sophisticated macro languages incorporating such high level language elements as optional parameters symbolic variables conditionals string manipulation and arithmetic operations all usable during the execution of a given macro and allowing macros to save context or exchange information Thus a macro might generate numerous assembly language instructions or data definitions based on the macro arguments This could be used to generate record style data structures or unrolled loops for example or could generate entire algorithms based on complex parameters For instance a sort macro could accept the specification of a complex sort key and generate code crafted for that specific key not needing the run time tests that would be required for a general procedure interpreting the specification An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher level language since such programmers are not working with a computer s lowest level conceptual elements Underlining this point macros were used to implement an early virtual machine in SNOBOL which was written in the SNOBOL Implementation Language SIL an assembly language for a virtual machine The target machine would translate this to its native code using a macro assembler This allowed a high degree of portability for the time br Macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers needs by making specific versions of manufacturer operating systems This was done for example by systems programmers working with IBM s Conversational Monitor System Virtual Machine VM CMS and with IBM s real time transaction processing add ons Customer Information Control System CICS and ACP TPF the airline financial system that began in the s and still runs many large computer reservation systems CRS and credit card systems today br It is also possible to use solely the macro processing abilities of an assembler to generate code written in completely different languages for example to generate a version of a program in COBOL using a pure macro assembler program containing lines of COBOL code inside assembly time operators instructing the assembler to generate arbitrary code IBM OS uses macros to perform system generation The user specifies options by coding a series of assembler macros Assembling these macros generates a job stream to build the system including job control language and utility control statements br This is because as was realized in the s the concept of macro processing is independent of the concept of assembly the former being in modern terms more word processing text processing than generating object code The concept of macro processing appeared and appears in the C programming language which supports preprocessor instructions to set variables and make conditional tests on their values Unlike certain previous macro processors inside assemblers the C preprocessor is not Turing complete because it lacks the ability to either loop or go to the latter allowing programs to loop br Despite the power of macro processing it fell into disuse in many high level languages major exceptions being C C and PL I while remaining a perennial for assemblers br Macro parameter substitution is strictly by name at macro processing time the value of a parameter is textually substituted for its name The most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name In the macro br br foo macro a br load a b br br the intention was that the caller would provide the name of a variable and the global variable or constant b would be used to multiply a If foo is called with the parameter a c the macro expansion of load a c b occurs To avoid any possible ambiguity users of macro processors can parenthesize formal parameters inside macro definitions or callers can parenthesize the input parameters br br br Support for structured programming br Packages of macros have been written providing structured programming elements to encode execution flow The earliest example of this approach was in the Concept macro set originally proposed by Harlan Mills March and implemented by Marvin Kessler at IBM s Federal Systems Division which provided IF ELSE ENDIF and similar control flow blocks for OS assembler programs This was a way to reduce or eliminate the use of GOTO operations in assembly code one of the main factors causing spaghetti code in assembly language This approach was widely accepted in the early s the latter days of large scale assembly language use IBM s High Level Assembler Toolkit includes such a macro package br A curious design was A Natural a stream oriented assembler for Z processors from Whitesmiths Ltd developers of the Unix like Idris operating system and what was reported to be the first commercial C compiler The language was classified as an assembler because it worked with raw machine elements such as opcodes registers and memory references but it incorporated an expression syntax to indicate execution order Parentheses and other special symbols along with block oriented structured programming constructs controlled the sequence of the generated instructions A natural was built as the object language of a C compiler rather than for hand coding but its logical syntax won some fans br There has been little apparent demand for more sophisticated assemblers since the decline of large scale assembly language development In spite of that they are still being developed and applied in cases where resource constraints or peculiarities in the target system s architecture prevent the effective use of higher level languages br Assemblers with a strong macro engine allow structured programming via macros such as the switch macro provided with the Masm package this code is a complete program br br br Use of assembly language br br br Historical perspective br Assembly languages were not available at the time when the stored program computer was introduced Kathleen Booth is credited with inventing assembly language based on theoretical work she began in while working on the ARC at Birkbeck University of London following consultation by Andrew Booth later her husband with mathematician John von Neumann and physicist Herman Goldstine at the Institute for Advanced Study br In late the Electronic Delay Storage Automatic Calculator EDSAC had an assembler named initial orders integrated into its bootstrap program It used one letter mnemonics developed by David Wheeler who is credited by the IEEE Computer Society as the creator of the first assembler Reports on the EDSAC introduced the term assembly for the process of combining fields into an instruction word SOAP Symbolic Optimal Assembly Program was an assembly language for the IBM computer written by Stan Poley in br Assembly languages eliminate much of the error prone tedious and time consuming first generation programming needed with the earliest computers freeing programmers from tedium such as remembering numeric codes and calculating addresses They were once widely used for all sorts of programming However by the late s their use had largely been supplanted by higher level languages in the search for improved programming productivity Today assembly language is still used for direct hardware manipulation access to specialized processor instructions or to address critical performance issues Typical uses are device drivers low level embedded systems and real time systems see Current usage br Numerous programs have been written entirely in assembly language The Burroughs MCP was the first computer for which an operating system was not developed entirely in assembly language it was written in Executive Systems Problem Oriented Language ESPOL an Algol dialect Many commercial applications were written in assembly language as well including a large amount of the IBM mainframe software written by large corporations COBOL FORTRAN and some PL I eventually displaced much of this work although a number of large organizations retained assembly language application infrastructures well into the s br Assembly language has long been the primary development language for bit home computers such as the Apple II Atari bit computers MSX ZX Spectrum and Commodore Interpreted BASIC dialects on these systems offer insufficient execution speed and insufficient facilities to take full advantage of the available hardware These systems have severe resource constraints idiosyncratic memory and display architectures and provide limited system services There are also few high level language compilers suitable for microcomputer use Similarly assembly language is the default choice for bit consoles such as the Atari and Nintendo Entertainment System br Key software for IBM PC compatibles was written in assembly language such as MS DOS Turbo Pascal and the Lotus spreadsheet As computer speed grew exponentially assembly language became a tool for speeding up parts of programs such as the rendering of Doom rather than a dominant development language In the s assembly language was used to get performance out of systems such as the Sega Saturn and as the primary language for arcade hardware based on the TMS integrated CPU GPU such as Mortal Kombat and NBA Jam br br br Current usage br There has been debate over the usefulness and performance of assembly language relative to high level languages br Although assembly language has specific niche uses where it is important see below there are other tools for optimization br As of July the TIOBE index of programming language popularity ranks assembly language at ahead of Visual Basic for example Assembler can be used to optimize for speed or optimize for size In the case of speed optimization modern optimizing compilers are claimed to render high level languages into code that can run as fast as hand written assembly despite the counter examples that can be found The complexity of modern processors and memory sub systems makes effective optimization increasingly difficult for compilers as well as for assembly programmers Moreover increasing processor performance has meant that most CPUs sit idle most of the time with delays caused by predictable bottlenecks such as cache misses I O operations and paging This has made raw code execution speed a non issue for many programmers br There are some situations in which developers might choose to use assembly language br br Writing code for systems with older processors that have limited high level language options such as the Atari Commodore and graphing calculators Programs for these computers of the s and s are often written in the context of demoscene or retrogaming subcultures br Code that must interact directly with the hardware for example in device drivers and interrupt handlers br In an embedded processor or DSP high repetition interrupts require the shortest number of cycles per interrupt such as an interrupt that occurs or times a second br Programs that need to use processor specific instructions not implemented in a compiler A common example is the bitwise rotation instruction at the core of many encryption algorithms as well as querying the parity of a byte or the bit carry of an addition br A stand alone executable of compact size is required that must execute without recourse to the run time components or libraries associated with a high level language Examples have included firmware for telephones automobile fuel and ignition systems air conditioning control systems security systems and sensors br Programs with performance sensitive inner loops where assembly language provides optimization opportunities that are difficult to achieve in a high level language For example linear algebra with BLAS or discrete cosine transformation e g SIMD assembly version from x br Programs that create vectorized functions for programs in higher level languages such as C In the higher level language this is sometimes aided by compiler intrinsic functions which map directly to SIMD mnemonics but nevertheless result in a one to one assembly conversion specific for the given vector processor br Real time programs such as simulations flight navigation systems and medical equipment For example in a fly by wire system telemetry must be interpreted and acted upon within strict time constraints Such systems must eliminate sources of unpredictable delays which may be created by some interpreted languages automatic garbage collection paging operations or preemptive multitasking However some higher level languages incorporate run time components and operating system interfaces that can introduce such delays Choosing assembly or lower level languages for such systems gives programmers greater visibility and control over processing details br Cryptographic algorithms that must always take strictly the same time to execute preventing timing attacks br Video encoders and decoders such as rav e an encoder for AV and dav d the reference decoder for AV contain assembly to leverage AVX and ARM Neon instructions when available br Modify and extend legacy code written for IBM mainframe computers br Situations where complete control over the environment is required in extremely high security situations where nothing can be taken for granted br Computer viruses bootloaders certain device drivers or other items very close to the hardware or low level operating system br Instruction set simulators for monitoring tracing and debugging where additional overhead is kept to a minimum br Situations where no high level language exists on a new or specialized processor for which no cross compiler is available br Reverse engineering and modifying program files such as br existing binaries that may or may not have originally been written in a high level language for example when trying to recreate programs for which source code is not available or has been lost or cracking copy protection of proprietary software br Video games also termed ROM hacking which is possible via several methods The most widely employed method is altering program code at the assembly language level br Assembly language is still taught in most computer science and electronic engineering programs Although few programmers today regularly work with assembly language as a tool the underlying concepts remain important Such fundamental topics as binary arithmetic memory allocation stack processing character set encoding interrupt processing and compiler design would be hard to study in detail without a grasp of how a computer operates at the hardware level Since a computer s behavior is fundamentally defined by its instruction set the logical way to learn such concepts is to study an assembly language Most modern computers have similar instruction sets Therefore studying a single assembly language is sufficient to learn I the basic concepts II to recognize situations where the use of assembly language might be appropriate and III to see how efficient executable code can be created from high level languages br br br Typical applications br Assembly language is typically used in a system s boot code the low level code that initializes and tests the system hardware prior to booting the operating system and is often stored in ROM BIOS on IBM compatible PC systems and CP M is an example br Assembly language is often used for low level code for instance for operating system kernels which cannot rely on the availability of pre existing system calls and must indeed implement them for the particular processor architecture on which the system will be running br Some compilers translate high level languages into assembly first before fully compiling allowing the assembly code to be viewed for debugging and optimization purposes br Some compilers for relatively low level languages such as Pascal or C allow the programmer to embed assembly language directly in the source code so called inline assembly Programs using such facilities can then construct abstractions using different assembly language on each hardware platform The system s portable code can then use these processor specific components through a uniform interface br Assembly language is useful in reverse engineering Many programs are distributed only in machine code form which is straightforward to translate into assembly language by a disassembler but more difficult to translate into a higher level language through a decompiler Tools such as the Interactive Disassembler make extensive use of disassembly for such a purpose This technique is used by hackers to crack commercial software and competitors to produce software with similar results from competing companies br Assembly language is used to enhance speed of execution especially in early personal computers with limited processing power and RAM br Assemblers can be used to generate blocks of data with no high level language overhead from formatted and commented source code to be used by other code br br br See also br br Compiler br Comparison of assemblers br Disassembler br Hexadecimal br Instruction set architecture br Little man computer an educational computer model with a base assembly language br Nibble br Typed assembly language br br br Notes br br br br br br Further reading br Bartlett Jonathan Programming from the Ground Up An introduction to programming using linux assembly language Bartlett Publishing ISBN Archived from the original on Retrieved br Britton Robert MIPS Assembly Language Programming Prentice Hall ISBN br Calingaert Peter Written at University of North Carolina at Chapel Hill Horowitz Ellis ed Assemblers Compilers and Program Translation Computer software engineering series st printing st ed Potomac Maryland US Computer Science Press Inc ISBN ISSN LCCN Retrieved xiv pages br Duntemann Jeff Assembly Language Step by Step Wiley ISBN br Hyde Randall The Art of Assembly Language nd ed No Starch Press ISBN br Jorgensen Ed x Assembly Language Programming with Ubuntu PDF br Kann Charles W Introduction to MIPS Assembly Language Programming Archived from the original on Retrieved br Kann Charles W Introduction to Assembly Language Programming From Soup to Nuts ARM Edition Open Educational Resources br Norton Peter Socha John Peter Norton s Assembly Language Book for the IBM PC New York US Brady Books br Singer Michael PDP Assembler Language Programming and Machine Organization New York US John Wiley Sons br Sweetman Dominic See MIPS Run Morgan Kaufmann Publishers ISBN br Waldron John Introduction to RISC Assembly Language Programming Addison Wesley ISBN br ASM Community Book Archived from the original on Retrieved An online book full of helpful ASM info tutorials and code examples by the ASM Community archived at the internet archive br br br External links br br Assembly language at Curlie br Unix Assembly Language Programming Archived at the Wayback Machine br Linux Assembly br PPR Learning Assembly Language br NASM The Netwide Assembler BSD licensed x assembler br Assembly Language Programming Examples br Authoring Windows Applications In Assembly Language br Assembly Optimization Tips by Mark Larson