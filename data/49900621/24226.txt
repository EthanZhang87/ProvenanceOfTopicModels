title: Plan 9 from Bell Labs
id: 24226
Plan from Bell Labs is a distributed operating system which originated from the Computing Science Research Center CSRC at Bell Labs in the mid s and built on UNIX concepts first developed there in the late s Since Plan has been free and open source The final official release was in early br Under Plan UNIX s everything is a file metaphor is extended via a pervasive network centric filesystem and the cursor addressed terminal based I O at the heart of UNIX like operating systems is replaced by a windowing system and graphical user interface without cursor addressing although rc the Plan shell is text based br The name Plan from Bell Labs is a reference to the Ed Wood cult science fiction Z movie Plan from Outer Space The system continues to be used and developed by operating system researchers and hobbyists br br br History br br Plan from Bell Labs was originally developed starting in the late s by members of the Computing Science Research Center at Bell Labs the same group that originally developed Unix and the C programming language The Plan team was initially led by Rob Pike Ken Thompson Dave Presotto and Phil Winterbottom with support from Dennis Ritchie as head of the Computing Techniques Research Department Over the years many notable developers have contributed to the project including Brian Kernighan Tom Duff Doug McIlroy Bjarne Stroustrup and Bruce Ellis br Plan replaced Unix as Bell Labs s primary platform for operating systems research It explored several changes to the original Unix model that facilitate the use and programming of the system notably in distributed multi user environments After several years of development and internal use Bell Labs shipped the operating system to universities in Three years later Plan was made available for commercial parties by AT T via the book publisher Harcourt Brace With source licenses costing AT T targeted the embedded systems market rather than the computer market at large Ritchie commented that the developers did not expect to do much displacement given how established other operating systems had become br By early the Plan project had been put on the back burner by AT T in favor of Inferno intended to be a rival to Sun Microsystems Java platform br In the late s Bell Labs new owner Lucent Technologies dropped commercial support for the project and in a third release was distributed under an open source license A fourth release under a new free software license occurred in In early the final official release of Plan occurred br A user and development community including current and former Bell Labs personnel produced minor daily releases in the form of ISO images Bell Labs hosted the development The development source tree is accessible over the P and HTTP protocols and is used to update existing installations In addition to the official components of the OS included in the ISOs Bell Labs also hosts a repository of externally developed applications and tools br As Bell Labs has moved on to later projects in recent years development of the official Plan system had stopped On March development resumed following the transfer of copyright from Bell Labs to the Plan Foundation Unofficial development for the system also continues on the front fork where active contributors provide monthly builds and new functionality So far the front fork has provided the system Wi Fi drivers Audio drivers USB support and built in game emulator along with other features Other recent Plan inspired operating systems include Harvey OS and Jehanne OS br br br Design concepts br br Plan is a distributed operating system designed to make a network of heterogeneous and geographically separated computers function as a single system In a typical Plan installation users work at terminals running the window system rio and they access CPU servers which handle computation intensive processes Permanent data storage is provided by additional network hosts acting as file servers and archival storage br Its designers state that br br t he foundations of the system are built on two ideas a per process name space and a simple message oriented file system protocol br The first idea a per process name space means that unlike on most operating systems processes running programs each have their own view of the namespace corresponding to what other operating systems call the file system a single path name may refer to different resources for different processes The potential complexity of this setup is controlled by a set of conventional locations for common resources br The second idea a message oriented filesystem means that processes can offer their services to other processes by providing virtual files that appear in the other processes namespace The client process s input output on such a file becomes inter process communication between the two processes This way Plan generalizes the Unix notion of the filesystem as the central point of access to computing resources It carries over Unix s idea of device files to provide access to peripheral devices mice removable media etc and the possibility to mount filesystems residing on physically distinct filesystems into a hierarchical namespace but adds the possibility to mount a connection to a server program that speaks a standardized protocol and treat its services as part of the namespace br For example the original window system called exploited these possibilities as follows Plan represents the user interface on a terminal by means of three pseudo files mouse which can be read by a program to get notification of mouse movements and button clicks cons which can be used to perform textual input output and bitblt writing to which enacts graphics operations see bit blit The window system multiplexes these devices when creating a new window to run some program in it first sets up a new namespace in which mouse cons and bitblt are connected to itself hiding the actual device files to which it itself has access The window system thus receives all input and output commands from the program and handles these appropriately by sending output to the actual screen device and giving the currently focused program the keyboard and mouse input The program does not need to know if it is communicating directly with the operating system s device drivers or with the window system it only has to assume that its namespace is set up so that these special files provide the kind of input and accept the kind of messages that it expects br Plan s distributed operation relies on the per process namespaces as well allowing client and server processes to communicate across machines in the way just outlined For example the cpu command starts a remote session on a computation server The command exports part of its local namespace including the user s terminal s devices mouse cons bitblt to the server so that remote programs can perform input output using the terminal s mouse keyboard and display combining the effects of remote login and a shared network filesystem br br br P protocol br br All programs that wish to provide services as files to other programs speak a unified protocol called P Compared to other systems this reduces the number of custom programming interfaces P is a generic medium agnostic byte oriented protocol that provides for messages delivered between a server and a client The protocol is used to refer to and communicate with processes programs and data including both the user interface and the network With the release of the th edition it was modified and renamed P br Unlike most other operating systems Plan does not provide special application programming interfaces such as Berkeley sockets X resources or ioctl system calls to access devices Instead Plan device drivers implement their control interface as a file system so that the hardware can be accessed by the ordinary file input output operations read and write Consequently sharing the device across the network can be accomplished by mounting the corresponding directory tree to the target machine br br br Union directories and namespaces br Plan allows the user to collect the files called names from different directory trees in a single location The resulting union directory behaves as the concatenation of the underlying directories the order of concatenation can be controlled if the constituent directories contain files having the same name a listing of the union directory ls or lc will simply report duplicate names Resolution of a single path name is performed top down if the directories top and bottom are unioned into u with top first then u name denotes top name if it exists bottom name only if it exists and top name does not exist and no file if neither exists No recursive unioning of subdirectories is performed so if top subdir exists the files in bottom subdir are not accessible through the union br A union directory can be created by using a sequence of bind commands br br bind arm bin bin br bind a acme bin arm bin br bind b usr alice bin bin br br In the example above arm bin is mounted at bin the contents of arm bin replacing the previous contents of bin Acme s bin directory is then union mounted after bin and Alice s personal bin directory is union mounted before When a file is requested from bin it is first looked for in usr alice bin then in arm bin and then finally in acme bin arm br The separate process namespaces thus usually replace the notion of a search path in the shell A path environment variable path still exists in the rc shell the shell mainly used in Plan however rc s path environment variable conventionally only contains the bin and directories and modifying the variable is discouraged instead adding additional commands should be done by binding several directories together as a single bin Unlike in Plan the path environment variable of Unix shells should be set to include the additional directories whose executable files need to be added as commands br Furthermore the kernel can keep separate mount tables for each process and can thus provide each process with its own file system namespace Processes namespaces can be constructed independently and the user may work simultaneously with programs that have heterogeneous namespaces Namespaces may be used to create an isolated environment similar to chroot but in a more secure way br Plan s union directory architecture inspired BSD and Linux union file system implementations although the developers of the BSD union mounting facility found the non recursive merging of directories in Plan too restrictive for general purpose use br br br Special virtual filesystem br br br proc br br Instead of having system calls specifically for process management Plan provides the proc file system Each process appears as a directory containing information and control files which can be manipulated by the ordinary file IO system calls br The file system approach allows Plan processes to be managed with simple file management tools such as ls and cat however the processes cannot be copied and moved as files br br br net br Plan does not have specialised system calls or ioctls for accessing the networking stack or networking hardware Instead the net file system is used Network connections are controlled by reading and writing control messages to control files Sub directories such as net tcp and net udp are used as an interface to their respective protocols br br br Unicode br br To reduce the complexity of managing character encodings Plan uses Unicode throughout the system The initial Unicode implementation was ISO IEC Ken Thompson invented UTF which became the native encoding in Plan The entire system was converted to general use in UTF preserves backwards compatibility with traditional null terminated strings enabling more reliable information processing and the chaining of multilingual string data with Unix pipes between multiple processes Using a single UTF encoding with characters for all cultures and regions eliminates the need for switching between code sets br br br Combining the design concepts br Though interesting on their own the design concepts of Plan were supposed to be most useful when combined For example to implement a network address translation NAT server a union directory can be created overlaying the router s net directory tree with its own net Similarly a virtual private network VPN can be implemented by overlaying in a union directory a net hierarchy from a remote gateway using secured P over the public Internet A union directory with the net hierarchy and filters can be used to sandbox an untrusted application or to implement a firewall In the same manner a distributed computing network can be composed with a union directory of proc hierarchies from remote hosts which allows interacting with them as if they are local br When used together these features allow for assembling a complex distributed computing environment by reusing the existing hierarchical name system br br br Software for Plan br br As a benefit from the system s design most tasks in Plan can be accomplished by using ls cat grep cp and rm utilities in combination with the rc shell the default Plan shell br Factotum is an authentication and key management server for Plan It handles authentication on behalf of other programs such that both secret keys and implementation details need only be known to Factotum br br br Graphical programs br br Unlike Unix Plan was designed with graphics in mind After booting a Plan terminal will run the rio windowing system in which the user can create new windows displaying rc Graphical programs invoked from this shell replace it in its window br The plumber provides an inter process communication mechanism which allows system wide hyperlinking br Sam and acme are Plan s text editors br br br Storage system br Plan supports the Kfs Paq Cwfs FAT and Fossil file systems The last was designed at Bell Labs specifically for Plan and provides snapshot storage capability It can be used directly with a hard drive or backed with Venti an archival file system and permanent data storage system br br br Software development br The distribution package for Plan includes special compiler variants and programming languages and provides a tailored set of libraries along with a windowing user interface system specific to Plan The bulk of the system is written in a dialect of C ANSI C with some extensions and some other features left out The compilers for this language were custom built with portability in mind according to their author they compile quickly load slowly and produce medium quality object code br A concurrent programming language called Alef was available in the first two editions but was then dropped for maintenance reasons and replaced by a threading library for C br br br Unix compatibility br Though Plan was supposed to be a further development of Unix concepts compatibility with preexisting Unix software was never the goal for the project Many command line utilities of Plan share the names of Unix counterparts but work differently br Plan can support POSIX applications and can emulate the Berkeley socket interface through the ANSI POSIX Environment APE that implements an interface close to ANSI C and POSIX with some common extensions the native Plan C interfaces conform to neither standard It also includes a POSIX compatible shell APE s authors claim to have used it to port the X Window System X to Plan although they do not ship X because supporting it properly is too big a job Some Linux binaries can be used with the help of a linuxemu Linux emulator application however it is still a work in progress Vice versa the Vx virtual machine allows a slightly modified Plan kernel to run as a user process in Linux supporting unmodified Plan programs br br br Reception br br br Comparison to contemporary operating systems br In Plan s designers compared their system to other early nineties operating systems in terms of size showing that the source code for a minimal working albeit not very useful version was less than one fifth the size of a Mach microkernel without any device drivers or lines of code for Plan depending on metric vs lines The complete kernel comprised lines of code According to a count the kernel was then some lines but this was compared against more than million in Linux br Within the operating systems research community as well as the commercial Unix world other attempts at achieving distributed computing and remote filesystem access were made concurrently with the Plan design effort These included the Network File System and the associated vnode architecture developed at Sun Microsystems and more radical departures from the Unix model such as the Sprite OS from UC Berkeley Sprite developer Brent Welch points out that the SunOS vnode architecture is limited compared to Plan s capabilities in that it does not support remote device access and remote inter process communication cleanly even though it could have had the preexisting UNIX domain sockets which can essentially be used to name user level servers been integrated with the vnode architecture br One critique of the everything is a file communication by textual message design of Plan pointed out limitations of this paradigm compared to the typed interfaces of Sun s object oriented operating system Spring br br Plan constrains everything to look like a file In most cases the real interface type comprises the protocol of messages that must be written to and read from a file descriptor This is difficult to specify and document and prohibits any automatic type checking at all except for file errors at run time br A path name relative to a process implicit root context is the only way to name a service Binding a name to an object can only be done by giving an existing name for the object in the same context as the new name As such interface references simply cannot be passed between processes much less across networks Instead communication has to rely on conventions which are prone to error and do not scale br A later retrospective comparison of Plan Sprite and a third contemporary distributed research operating system Amoeba found that br br the environments they Amoeba and Sprite build are tightly coupled within the OS making communication with external services difficult Such systems suffer from the radical departure from the UNIX model which also discourages portability of already existing software to the platform The lack of developers the very small range of supported hardware and the small even compared to Plan user base have also significantly slowed the adoption of those systems In retrospect Plan was the only research distributed OS from that time which managed to attract developers and be used in commercial projects long enough to warrant its survival to this day br br br Impact br br Plan demonstrated that an integral concept of Unix that every system interface could be represented as a set of files could be successfully implemented in a modern distributed system Some features from Plan like the UTF character encoding of Unicode have been implemented in other operating systems Unix like operating systems such as Linux have implemented P Plan s protocol for accessing remote files and have adopted features of rfork Plan s process creation mechanism Additionally in Plan from User Space several of Plan s applications and tools including the sam and acme editors have been ported to Unix and Linux systems and have achieved some level of popularity Several projects seek to replace the GNU operating system programs surrounding the Linux kernel with the Plan operating system programs The wm window manager was inspired by the older windowing system of Plan wmii is also heavily influenced by Plan br In computer science research Plan has been used as a grid computing platform and as a vehicle for research into ubiquitous computing without middleware br In commerce Plan underlies Coraid storage systems br However Plan has never approached Unix in popularity and has been primarily a research tool br br I t looks like Plan failed simply because it fell short of being a compelling enough improvement on Unix to displace its ancestor Compared to Plan Unix creaks and clanks and has obvious rust spots but it gets the job done well enough to hold its position There is a lesson here for ambitious system architects the most dangerous enemy of a better solution is an existing codebase that is just good enough br Other factors that contributed to low adoption of Plan include the lack of commercial backup the low number of end user applications and the lack of device drivers br Plan proponents and developers claim that the problems hindering its adoption have been solved that its original goals as a distributed system development environment and research platform have been met and that it enjoys moderate but growing popularity Inferno through its hosted capabilities has been a vehicle for bringing Plan technologies to other systems as a hosted part of heterogeneous computing grids br Several projects work to extend Plan including atom and front These forks augment Plan with additional hardware drivers and software including an improved version of the Upas e mail system the Go compiler Mercurial version control system support and now also a git implementation and other programs Plan was ported to the Raspberry Pi single board computer The Harvey project attempts to replace the custom Plan C compiler with GCC to leverage modern development tools such as GitHub and Coverity and speed up development br Since Windows version the Windows Subsystem for Linux implements the Plan Filesystem Protocol as a server and the host Windows operating system acts as a client br br br Derivatives and forks br Inferno is a descendant of Plan and shares many design concepts and even source code in the kernel particularly around devices and the Styx P protocol Inferno shares with Plan the Unix heritage from Bell Labs and the Unix philosophy Many of the command line tools in Inferno were Plan tools that were translated to Limbo br atom augments the Plan distribution with the addition of a PAE kernel an amd cpu and terminal kernel nupas extra pc hardware support IL and Ken s fs br front is a fork of Plan It was started to remedy a perceived lack of devoted development resources inside Bell Labs and has accumulated various fixes and improvements br legacy is an alternative distribution It includes a set of patches based on the current Plan distribution br Akaros is designed for many core architectures and large scale SMP systems br Harvey OS is an effort to get the Plan code working with gcc and clang br JehanneOS is an experimental OS derived from Plan Its userland and modules are mostly derived from front its build system from Harvey OS and its kernel is a fork of the Plan k bit Plan kernel br NIX is a fork of Plan aimed at multicore systems and cloud computing br node is a scripted derivative of Plan Inferno that replaces the Limbo programming language and DIS virtual machine with the Lua language and LuaJit virtual machine It also replaces the Inferno per platform hosted I O with Node js libuv eventing and I O for consistent cross platform hosting It s a proof of concept that demonstrates that a distributed OS can be constructed from per process namespaces and generic cloud elements to construct a single system image of arbitrary size br Plan B designed to work in distributed environments where the set of available resources is different at different points in time Originally based on the third edition Plan kernel Plan B was moved into user space to run on current Plan systems br br br License br Starting with the release of Fourth edition in April the full source code of Plan from Bell Labs is freely available under Lucent Public License which is considered to be an open source license by the Open Source Initiative OSI free software license by the Free Software Foundation and it passes the Debian Free Software Guidelines br In February the University of California Berkeley was authorized by the current Plan copyright holder Alcatel Lucent to release all Plan software previously governed by the Lucent Public License Version under the GPL only br On March ownership of Plan transferred from Bell Labs to the Plan Foundation and all previous releases have been relicensed to the MIT License br br br See also br br Alef programming language br Rendezvous Plan br Inferno operating system br Redox operating system br Minix br HelenOS br br br br br br External links br br p io Archived mirror of the original official Plan Web site at plan bell labs com Archived at the Wayback Machine br fans Semi official mailing list for Plan users and developers br Plan Foundation