title: NetBSD
id: 28901365
NetBSD is a free and open source Unix like operating system based on the Berkeley Software Distribution BSD It was the first open source BSD descendant officially released after BSD was forked It continues to be actively developed and is available for many platforms including servers desktops handheld devices and embedded systems br The NetBSD project focuses on code clarity careful design and portability across many computer architectures Its source code is publicly available and permissively licensed br br br History br NetBSD was originally derived from the BSD Reno release of the Berkeley Software Distribution from the Computer Systems Research Group of the University of California Berkeley via its Net source code release and the BSD project The NetBSD project began as a result of frustration within the BSD developer community with the pace and direction of the operating system s development The four founders of the NetBSD project Chris Demetriou Theo de Raadt Adam Glass and Charles Hannum felt that a more open development model would benefit the project one centered on portable clean correct code They aimed to produce a unified multi platform production quality BSD based operating system The name NetBSD was chosen based on the importance and growth of networks such as the Internet at that time and the distributed collaborative nature of its development br The NetBSD source code repository was established on March and the first official release NetBSD was made on April This was derived from BSD plus the version unofficial patchkit with several programs from the Net release missing from BSD re integrated and various other improvements The first multi platform release NetBSD was made in October and being updated with BSD Lite sources it was free of all legally encumbered BSD Net code Also in for disputed reasons one of the founders Theo de Raadt was removed from the project He later founded a new project OpenBSD from a forked version of NetBSD near the end of br In NetBSD introduced the pkgsrc packages collection br Until NetBSD x releases were made at roughly annual intervals with minor patch releases in between From release onwards NetBSD uses semantic versioning and each major NetBSD release corresponds to an incremented major version number i e the major releases following are and so on The previous minor releases are now divided into two categories x y stable maintenance releases and x y z releases containing only security and critical fixes br NetBSD used to ship with twm as a preconfigured graphical interface window manager in version this was changed to the more modern and versatile CTWM br br br Features br br br Portability br br As the project s motto Of course it runs NetBSD suggests NetBSD has been ported to a large number of and bit architectures These range from VAX minicomputers to Pocket PC PDAs NetBSD has also been ported to several video game consoles such as the Sega Dreamcast and the Nintendo Wii As of NetBSD supports hardware platforms across different instruction sets The kernel and userland for these platforms are all built from a central unified source code tree managed by CVS Currently unlike other kernels such as Clinux the NetBSD kernel requires the presence of an MMU in any given target architecture br NetBSD s portability is aided by the use of hardware abstraction layer interfaces for low level hardware access such as bus input output or DMA Using this portability layer device drivers can be split into machine independent and machine dependent components This makes a single driver easily usable on several platforms by hiding hardware access details and reduces the work to port it to a new system br This permits a particular device driver for a PCI card to work without modifications whether it is in a PCI slot on an IA Alpha PowerPC SPARC or other architecture with a PCI bus Also a single driver for a specific device can operate via several different buses like ISA PCI or PC Card br This platform independence aids the development of embedded systems particularly since NetBSD when the entire toolchain of compilers assemblers linkers and other tools fully support cross compiling br In as a demonstration of NetBSD s portability and suitability for embedded applications Technologic Systems a vendor of embedded systems hardware designed and demonstrated a NetBSD powered kitchen toaster br Commercial ports to embedded platforms were available from and supported by Wasabi Systems including platforms such as the AMD Geode LX Freescale PowerQUICC processors Marvell Orion AMCC family of PowerPC processors and the Intel XScale IOP and IXP series br br br Portable build framework br The NetBSD cross compiling framework also known as build sh lets a developer build a complete NetBSD system for an architecture from a more powerful system of different architecture cross compiling including on a different operating system the framework supports most POSIX compliant systems Several embedded systems using NetBSD have required no additional software development other than toolchain and target rehost br br br The pkgsrc packages collection br br NetBSD features pkgsrc short for package source a framework for building and managing third party application software packages The pkgsrc collection consists of more than packages as of October Building and installing packages such as Lumina KDE GNOME the Apache HTTP Server or Perl is performed through the use of a system of makefiles This can automatically fetch the source code unpack patch configure build and install the package such that it can be removed again later An alternative to compiling from source is to use a precompiled binary package In either case any prerequisites dependencies will be installed automatically by the package system without need for manual intervention br pkgsrc supports not only NetBSD but also several other BSD variants like FreeBSD and Darwin macOS and other Unix like operating systems such as Linux Solaris IRIX and others as well as Interix pkgsrc was previously adopted as the official package management system for DragonFly BSD br br br Symmetric multiprocessing br NetBSD has supported SMP since the NetBSD release in which was initially implemented using the giant lock approach During the development cycle of the NetBSD release major work was done to improve SMP support most of the kernel subsystems were modified to use the fine grained locking approach New synchronization primitives were implemented and scheduler activations was replaced with a threading model in February A scalable M thread scheduler was implemented though the old BSD scheduler still remains the default but was modified to scale with SMP Threaded software interrupts were implemented to improve synchronization The virtual memory system memory allocator and trap handling were made MP safe The file system framework including the VFS and major file systems were modified to be MP safe Since April the only subsystems running with a giant lock are the network protocols and most device drivers br br br Security br NetBSD provides various features in the security area The Kernel Authorization framework or Kauth is a subsystem managing all authorization requests inside the kernel and used as system wide security policy It allows external modules to plug in the authorization process NetBSD also incorporates exploit mitigation features ASLR KASLR restricted mprotect and Segvguard from the PaX project and GCC Stack Smashing Protection SSP or also known as ProPolice enabled by default since NetBSD compiler extensions Verified Executables or Veriexec is an in kernel file integrity subsystem in NetBSD It allows the user to set digital fingerprints hashes of files and take a number of different actions if files do not match their fingerprints For example one can allow Perl to run only scripts that match their fingerprints The cryptographic device driver CGD allows using disks or partitions including CDs and DVDs for encrypted storage br br br Virtualization br The Xen virtual machine monitor has been supported in NetBSD since release The use of Xen requires a special pre kernel boot environment that loads a Xen specialized kernel as the host OS Dom Any number of guest OSes DomU virtualized computers with or without specific Xen DomU support can be run in parallel with the appropriate hardware resources br The need for a third party boot manager such as GRUB was eliminated with NetBSD s Xen compatible boot manager NetBSD as a Dom has been benchmarked comparably to Linux with better performance than Linux in some tests br As of NetBSD accelerated virtualization is provided through the native hypervisor NVMM NetBSD Virtual Machine Monitor br It provides a virtualization API libnvmm that can be leveraged by emulators such as QEMU A unique property of NVMM is that the kernel never accesses guest VM memory only creating it br Intel s Hardware Accelerated Execution Manager HAXM provides an alternative solution for acceleration in QEMU for Intel CPUs only similar to Linux s KVM br NetBSD introduced the rump kernel an architecture to run drivers in user space by emulating kernel space calls This anykernel architecture allows adding support of NetBSD drivers to other kernel architectures ranging from exokernels to monolithic kernels br br br Storage br NetBSD includes many enterprise features like iSCSI a journaling filesystem logical volume management and the ZFS filesystem br The bio interface for vendor agnostic RAID volume management through bioctl has been available in NetBSD since br The WAPBL journaling filesystem an extension of the BSD FFS filesystem was contributed by Wasabi Systems in br The NetBSD Logical Volume Manager is based on a BSD reimplementation of a device mapper driver and a port of the Linux Logical Volume Manager tools It was mostly written during the Google Summer of Code br The ZFS filesystem developed by Sun Microsystems was imported into the NetBSD base system in br The CHFS Flash memory filesystem was imported into NetBSD in November CHFS is a file system developed at the Department of Software Engineering University of Szeged Hungary and is the first open source Flash specific file system written for NetBSD br br br Compatibility with other operating systems br At the source code level NetBSD is very nearly entirely compliant with POSIX IEEE standard and mostly compliant with POSIX IEEE br NetBSD provides system call level binary compatibility on the appropriate processor architectures with its previous releases but also with several other UNIX derived and UNIX like operating systems including Linux and other BSD derivatives like SunOS This allows NetBSD users to run many applications that are only distributed in binary form for other operating systems usually with no significant loss of performance br A variety of foreign disk filesystem formats are also supported in NetBSD including ZFS FAT NTFS Linux ext fs Apple HFS and OS X UFS RISC OS FileCore ADFS AmigaOS Fast File System IRIX EFS Version Unix File System and many more through PUFFS br br br Kernel scripting br Kernel space scripting with the Lua programming language was added in NetBSD The Lua language i e its interpreter and standard libraries was initially ported to the NetBSD kernel during Google Summer of Code and has undergone several improvements since then There are two main differences between user and kernel space Lua kernel Lua does not support floating point numbers as such only Lua integers are available It also does not have full support to user space libraries that rely on the operating system e g io and os br br br Sensors br br NetBSD has featured a native hardware monitoring framework since In it served as the inspiration behind the OpenBSD s sysctl hw sensors framework when some NetBSD drivers were being ported to OpenBSD br As of March NetBSD had close to device drivers exporting data through the API of the envsys framework Since the revision serialisation of data between the kernel and userland is done through XML property lists with the help of NetBSD s proplib br br br Uses br br NetBSD s clean design high performance scalability and support for many architectures has led to its use in embedded devices and servers especially in networking applications br A commercial real time operating system QNX uses a network stack based on NetBSD code and provides various drivers ported from NetBSD br Dell Force uses NetBSD as the underlying operating system that powers FTOS the Force Operating System which is used in high scalability switch routers Force also made a donation to the NetBSD Foundation in to help further research and the open development community br Wasabi Systems provides a commercial Wasabi Certified BSD product based on NetBSD with proprietary enterprise features and extensions which are focused on embedded server and storage applications br NetBSD was used in NASA s SAMS II Project of measuring the microgravity environment on the International Space Station and for investigations of TCP for use in satellite networks br In SUNET used NetBSD to set the Internet Land Speed Record NetBSD was chosen due to the scalability of the TCP code br NetBSD is also used in Apple s AirPort Extreme and Time Capsule products instead of Apple s own OS X of which most Unix level userland code is derived from FreeBSD code but some is derived from NetBSD code br The operating system of the T Mobile Sidekick LX smartphone is based on NetBSD br The Minix operating system uses a mostly NetBSD userland as well as its pkgsrc packages infrastructure since version br Parts of macOS were originally taken from NetBSD such as some userspace command line tools br br br Licensing br All of the NetBSD kernel and most of the core userland source code is released under the terms of the BSD License two three and four clause variants This essentially allows everyone to use modify redistribute or sell it as they wish as long as they do not remove the copyright notice and license text the four clause variants also include terms relating to publicity material Thus the development of products based on NetBSD is possible without having to make modifications to the source code public In contrast the GPL which does not apply to NetBSD stipulates that changes to source code of a product must be released to the product recipient when products derived from those changes are released br On June the NetBSD Foundation announced a transition to the two clause BSD license citing concerns with UCB support of clause and industry applicability of clause br NetBSD also includes the GNU development tools and other packages which are covered by the GPL and other open source licenses As with other BSD projects NetBSD separates those in its base source tree to make it easier to remove code that is under more restrictive licenses As for packages the installed software licenses may be controlled by modifying the list of allowed licenses in the pkgsrc configuration file mk conf br br br Releases br The following table lists major NetBSD releases and their notable features in reverse chronological order Minor and patch releases are not included br br br Logo br The NetBSD flag logo designed by Grant Bissett was introduced in and is an abstraction of the older logo which was designed by Shawn Mueller in Mueller s version was based on the famous World War II photograph Raising the Flag on Iwo Jima br br br The NetBSD Foundation br The NetBSD Foundation is the legal entity that owns the intellectual property and trademarks associated with NetBSD and on January became a c tax exempt non profit organization The members of the foundation are developers who have CVS commit access The NetBSD Foundation has a Board of Directors elected by the voting of members for two years br br br Hosting br Hosting for the project is provided primarily by Columbia University and Western Washington University fronted by a CDN provided by Fastly Mirrors for the project are spread around the world and provided by volunteers and supporters of the project br br br Commit guidelines br The project defines guidelines to make commits to its CVS source tree On April its first version was published The guidelines of this version can be summarized as br br Commit only familiar code you are familiar with br Do not commit tainted code to the repository i e if the code is not yours check its license br The more intrusive your changes are the higher is the level of required prior approval br Commit only code that you have tested br Group commits together that are part of the same fix br Each commit should be a separate patch fix addition etc br Do not mix functionality or bug fix patches with whitespace layout updates br Clearly document your changes in the commit log br Give proper credit if your commit contains code br Do not revert other developer s commits try to reach an agreement br In May the second guideline was extended to state that code generated by large language model or similar technology must not be committed without prior written approval by core br br br See also br br br br br br External links br br Official website