title: C Sharp (programming language)
id: 2356196
C see SHARP is a general purpose high level programming language supporting multiple paradigms C encompasses static typing strong typing lexically scoped imperative declarative functional generic object oriented class based and component oriented programming disciplines br The C programming language was designed by Anders Hejlsberg from Microsoft in and was later approved as an international standard by Ecma ECMA in and ISO IEC ISO IEC and in Microsoft introduced C along with NET Framework and Visual Studio both of which were closed source At the time Microsoft had no open source products Four years later in a free and open source project called Mono began providing a cross platform compiler and runtime environment for the C programming language A decade later Microsoft released Visual Studio Code code editor Roslyn compiler and the unified NET platform software framework all of which support C and are free open source and cross platform Mono also joined Microsoft but was not merged into NET br As of November the most recent stable version of the language is C which was released in in NET br br br Design goals br The Ecma standard lists these design goals for C br br The language is intended to be a simple modern general purpose object oriented programming language br The language and implementations thereof should provide support for software engineering principles such as strong type checking array bounds checking detection of attempts to use uninitialized variables and automatic garbage collection Software robustness durability and programmer productivity are important br The language is intended for use in developing software components suitable for deployment in distributed environments br Portability is very important for source code and programmers especially those already familiar with C and C br Support for internationalization is very important br C is intended to be suitable for writing applications for both hosted and embedded systems ranging from the very large that use sophisticated operating systems down to the very small having dedicated functions br Although C applications are intended to be economical with regard to memory and processing power requirements the language was not intended to compete directly on performance and size with C or assembly language br br br History br During the development of the NET Framework the class libraries were originally written using a managed code compiler system named Simple Managed C SMC In January Anders Hejlsberg formed a team to build a new language at the time called Cool which stood for C like Object Oriented Language Microsoft had considered keeping the name Cool as the final name of the language but chose not to do so for trademark reasons By the time the NET project was publicly announced at the July Professional Developers Conference the language had been renamed C and the class libraries and ASP NET runtime had been ported to C br Hejlsberg is C s principal designer and lead architect at Microsoft and was previously involved with the design of Turbo Pascal Embarcadero Delphi formerly CodeGear Delphi Inprise Delphi and Borland Delphi and Visual J In interviews and technical papers he has stated that flaws in most major programming languages e g C Java Delphi and Smalltalk drove the fundamentals of the Common Language Runtime CLR which in turn drove the design of the C language br James Gosling who created the Java programming language in and Bill Joy a co founder of Sun Microsystems the originator of Java called C an imitation of Java Gosling further said that C is sort of Java with reliability productivity and security deleted br In July Hejlsberg said that C is not a Java clone and is much closer to C in its design br Since the release of C in November the C and Java languages have evolved on increasingly divergent trajectories becoming two quite different languages One of the first major departures came with the addition of generics to both languages with vastly different implementations C makes use of reification to provide first class generic objects that can be used like any other class with code generation performed at class load time br Furthermore C has added several major features to accommodate functional style programming culminating in the LINQ extensions released with C and its supporting framework of lambda expressions extension methods and anonymous types These features enable C programmers to use functional programming techniques such as closures when it is advantageous to their application The LINQ extensions and the functional imports help developers reduce the amount of boilerplate code that is included in common tasks like querying a database parsing an xml file or searching through a data structure shifting the emphasis onto the actual program logic to help improve readability and maintainability br C used to have a mascot called Andy named after Anders Hejlsberg It was retired on January br C was originally submitted to the ISO IEC JTC subcommittee SC for review under ISO IEC was withdrawn and was then approved under ISO IEC The is withdrawn under and approved with this version br br br Name br Microsoft first used the name C in for a variant of the C language designed for incremental compilation That project was not completed and the name was later reused br br The name C sharp was inspired by the musical notation whereby a sharp symbol indicates that the written note should be made a semitone higher in pitch br This is similar to the language name of C where indicates that a variable should be incremented by after being evaluated The sharp symbol also resembles a ligature of four symbols in a two by two grid further implying that the language is an increment of C br Due to technical limits of display standard fonts browsers etc and most keyboard layouts lacking a sharp symbol U F MUSIC SHARP SIGN sharp the number sign U NUMBER SIGN num was chosen to approximate the sharp symbol in the written name of the programming language br This convention is reflected in the ECMA C Language Specification br The sharp suffix has been used by a number of other NET languages that are variants of existing languages including J a NET language also designed by Microsoft that is derived from Java A from Ada and the functional programming language F The original implementation of Eiffel for NET was called Eiffel a name retired since the full Eiffel language is now supported The suffix has also been used for libraries such as Gtk a NET wrapper for GTK and other GNOME libraries and Cocoa a wrapper for Cocoa br br br Versions br br br Syntax br br The core syntax of the C language is similar to that of other C style languages such as C C and Java particularly br br Semicolons are used to denote the end of a statement br Curly brackets are used to group statements Statements are commonly grouped into methods functions methods into classes and classes into namespaces br Variables are assigned using an equals sign but compared using two consecutive equals signs br Square brackets are used with arrays both to declare them and to get a value at a given index in one of them br br br Distinguishing features br br Some notable features of C that distinguish it from C C and Java where noted are br br br Portability br By design C is the programming language that most directly reflects the underlying Common Language Infrastructure CLI Most of its intrinsic types correspond to value types implemented by the CLI framework However the language specification does not state the code generation requirements of the compiler that is it does not state that a C compiler must target a Common Language Runtime or generate Common Intermediate Language CIL or generate any other specific format Some C compilers can also generate machine code like traditional compilers of C or Fortran br br br Typing br C supports strongly implicitly typed variable declarations with the keyword var and implicitly typed arrays with the keyword new followed by a collection initializer br Its type system is split into two families Value types like the built in numeric types and user defined structs which are automatically handed over as copies when used as parameters and reference types including arrays instances of classes and strings which only hand over a pointer to the respective object Due to their special handling of the equality operator strings will nevertheless behave as if they were values for all practical purposes You can even use them as case labels Where necessary value types will be boxed automatically br C supports a strict Boolean data type bool Statements that take conditions such as while and if require an expression of a type that implements the true operator such as the Boolean type While C also has a Boolean type it can be freely converted to and from integers and expressions such as if a require only that a is convertible to bool allowing a to be an int or a pointer C disallows this integer meaning true or false approach on the grounds that forcing programmers to use expressions that return exactly bool can prevent certain types of programming mistakes such as if a b use of assignment instead of equality br C is more type safe than C The only implicit conversions by default are those that are considered safe such as widening of integers This is enforced at compile time during JIT and in some cases at runtime No implicit conversions occur between Booleans and integers nor between enumeration members and integers except for literal which can be implicitly converted to any enumerated type Any user defined conversion must be explicitly marked as explicit or implicit unlike C copy constructors and conversion operators which are both implicit by default br C has explicit support for covariance and contravariance in generic types unlike C which has some degree of support for contravariance simply through the semantics of return types on virtual methods br Enumeration members are placed in their own scope br The C language does not allow for global variables or functions All methods and members must be declared within classes Static members of public classes can substitute for global variables and functions br Local variables cannot shadow variables of the enclosing block unlike C and C br br br Metaprogramming br Metaprogramming can be achieved in several ways br br Reflection is supported through NET APIs which enable scenarios such as type metadata inspection and dynamic method invocation br Expression trees represent code as an abstract syntax tree where each node is an expression that can be inspected or executed This enables dynamic modification of executable code at runtime Expression trees introduce some homoiconicity to the language br Attributes are metadata that can be attached to types members or entire assemblies equivalent to annotations in Java Attributes are accessible both to the compiler and to code through reflection Many of native attributes duplicate the functionality of GCC s and VisualC s platform dependent preprocessor directives br System Reflection Emit namespace which contains classes that emit metadata and CIL types assemblies etc at runtime br The NET Compiler Platform Roslyn provides API access to language compilation services allowing for the compilation of C code from within NET applications It exposes APIs for syntactic lexical analysis of code semantic analysis dynamic compilation to CIL and code emission br Source generators a feature of the Roslyn C compiler enable compile time metaprogramming During the compilation process developers can inspect the code being compiled with the compiler s API and pass additional generated C source code to be compiled br br br Methods and functions br A method in C is a member of a class that can be invoked as a function a sequence of instructions rather than the mere value holding capability of a field i e class or instance variable As in other syntactically similar languages such as C and ANSI C the signature of a method is a declaration comprising in order any optional accessibility keywords such as private the explicit specification of its return type such as int or the keyword void if no value is returned the name of the method and finally a parenthesized sequence of comma separated parameter specifications each consisting of a parameter s type its formal name and optionally a default value to be used whenever none is provided Different from most other languages call by reference parameters have to be marked both at the function definition and at the calling site and you can choose between ref and out the latter allowing handing over an uninitialized variable which will have a definite value on return Additionally you can specify a variable sized argument list by applying the params keyword to the last parameter Certain specific kinds of methods such as those that simply get or set a field s value by returning or assigning it do not require an explicitly stated full signature but in the general case the definition of a class includes the full signature declaration of its methods br Like C and unlike Java C programmers must use the scope modifier keyword virtual to allow methods to be overridden by subclasses Unlike C you have to explicitly specify the keyword override when doing so This is supposed to avoid confusion between overriding and newly overloading a function i e hiding the former implementation To do the latter you have to specify the new keyword br Extension methods in C allow programmers to use static methods as if they were methods from a class s method table allowing programmers to virtually add instance methods to a class that they feel should exist on that kind of objects and instances of the respective derived classes br The type dynamic allows for run time method binding allowing for JavaScript like method calls and run time object composition br C has support for strongly typed function pointers via the keyword delegate Like the Qt framework s pseudo C signal and slot C has semantics specifically surrounding publish subscribe style events though C uses delegates to do so br C offers Java like synchronized method calls via the attribute MethodImpl MethodImplOptions Synchronized and has support for mutually exclusive locks via the keyword lock br br br Property br C supports classes with properties The properties can be simple accessor functions with a backing field or implement arbitrary getter and setter functions A property is read only if there s no setter Like with fields there can be class and instance properties The underlying methods can be virtual or abstract like any other method br Since C the syntactic sugar of auto implemented properties is available where the accessor getter and mutator setter encapsulate operations on a single attribute of a class br br br Namespace br A C namespace provides the same level of code isolation as a Java package or a C namespace with very similar rules and features to a package Namespaces can be imported with the using syntax br br br Memory access br In C memory address pointers can only be used within blocks specifically marked as unsafe and programs with unsafe code need appropriate permissions to run Most object access is done through safe object references which always either point to a live object or have the well defined null value it is impossible to obtain a reference to a dead object one that has been garbage collected or to a random block of memory An unsafe pointer can point to an instance of an unmanaged value type that does not contain any references to objects subject to garbage collections such as class instances arrays or strings Code that is not marked as unsafe can still store and manipulate pointers through the System IntPtr type but it cannot dereference them br Managed memory cannot be explicitly freed instead it is automatically garbage collected Garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed in most cases Code that retains references to objects longer than is required can still experience higher memory usage than necessary however once the final reference to an object is released the memory is available for garbage collection br br br Exceptions br A range of standard exceptions are available to programmers Methods in standard libraries regularly throw system exceptions in some circumstances and the range of exceptions thrown is normally documented Custom exception classes can be defined for classes allowing handling to be put in place for particular circumstances as needed br The syntax for handling exceptions is try something catch Exception ex handle ex finally do something whether or not an exception occurred Depending on your plans the catch or the finally part can be left out and there can be several catch parts handling different kinds of exceptions br br Checked exceptions are not present in C in contrast to Java This has been a conscious decision based on the issues of scalability and versionability br br br Polymorphism br Unlike C C does not support multiple inheritance although a class can implement any number of interfaces fully abstract classes This was a design decision by the language s lead architect to avoid complications and to simplify architectural requirements throughout CLI br When implementing multiple interfaces that contain a method with the same name and taking parameters of the same type in the same order i e the same signature similar to Java C allows both a single method to cover all interfaces and if necessary specific methods for each interface br However unlike Java C supports operator overloading br C also offers function overloading a k a ad hoc polymorphism br Since version C offers parametric polymorphism i e classes with arbitrary or constrained type parameters e g List T a variable sized array which only can contain elements of type T There are certain kinds of constraints you can specify for the type parameters Has to be type X or one derived from it has to implement a certain interface has to be a reference type has to be a value type has to implement a public parameterless constructor Most of them can be combined and you can specify any number of interfaces br br br Language Integrated Query LINQ br C has the ability to utilize LINQ through the NET Framework A developer can query a variety of data sources provided the IEnumerable T interface is implemented on the object This includes XML documents an ADO NET dataset and SQL databases br Using LINQ in C brings advantages like IntelliSense support strong filtering capabilities type safety with compile error checking ability and consistency for querying data over a variety of sources There are several different language structures that can be utilized with C and LINQ and they are query expressions lambda expressions anonymous types implicitly typed variables extension methods and object initializers br LINQ has two syntaxes query syntax and method syntax However the compiler always converts the query syntax to method syntax at compile time br br br Functional programming br Though primarily an imperative language C always adds functional features over time for example br br Functions as first class citizen C delegates br Higher order functions C together with delegates br Anonymous functions C anonymous delegates and C lambdas expressions br Closures C together with anonymous delegates and C together with lambdas expressions br Type inference C with implicitly typed local variables var and C target typed new expressions new br List comprehension C LINQ br Tuples NET Framework but it becomes popular when C introduced a new tuple type with language support br Nested functions C br Pattern matching C br Immutability C readonly struct C record types and Init only setters br Type classes C roles extensions in development br br br Common type system br C has a unified type system This unified type system is called Common Type System CTS Part Chapter The Type System br A unified type system implies that all types including primitives such as integers are subclasses of the System Object class For example every type inherits a ToString method br br br Categories of data types br CTS separates data types into two categories br br Reference types br Value types br Instances of value types neither have referential identity nor referential comparison semantics Equality and inequality comparisons for value types compare the actual data values within the instances unless the corresponding operators are overloaded Value types are derived from System ValueType always have a default value and can always be created and copied Some other limitations on value types are that they cannot derive from each other but can implement interfaces and cannot have an explicit default parameterless constructor because they already have an implicit one which initializes all contained data to the type dependent default value null or alike Examples of value types are all primitive types such as int a signed bit integer float a bit IEEE floating point number char a bit Unicode code unit decimal fixed point numbers useful for handling currency amounts and System DateTime identifies a specific point in time with nanosecond precision Other examples are enum enumerations and struct user defined structures br In contrast reference types have the notion of referential identity meaning that each instance of a reference type is inherently distinct from every other instance even if the data within both instances is the same This is reflected in default equality and inequality comparisons for reference types which test for referential rather than structural equality unless the corresponding operators are overloaded such as the case for System String Some operations are not always possible such as creating an instance of a reference type copying an existing instance or performing a value comparison on two existing instances Nevertheless specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface such as ICloneable or IComparable Examples of reference types are object the ultimate base class for all other C classes System String a string of Unicode characters and System Array a base class for all C arrays br Both type categories are extensible with user defined types br br br Boxing and unboxing br Boxing is the operation of converting a value type object into a value of a corresponding reference type Boxing in C is implicit br Unboxing is the operation of converting a value of a reference type previously boxed into a value of a value type Unboxing in C requires an explicit type cast A boxed object of type T can only be unboxed to a T or a nullable T br Example br br br Libraries br The C specification details a minimum set of types and class libraries that the compiler expects to have available In practice C is most often used with some implementation of the Common Language Infrastructure CLI which is standardized as ECMA Common Language Infrastructure CLI br In addition to the standard CLI specifications there are many commercial and community class libraries that build on top of the NET framework libraries to provide additional functionality br C can make calls to any library included in the List of NET libraries and frameworks br br br Examples br br br Hello World br The following is a very simple C program a version of the classic Hello world example using the top level statements feature introduced in C br br For code written as C or lower the entry point logic of a program must be written in a Main method inside a type br br This code will display this text in the console window br br Hello world br br Each line has a purpose br br The above line imports all types in the System namespace For example the Console class used later in the source code is defined in the System namespace meaning it can be used without supplying the full name of the type which includes the namespace br br This line is a comment it describes and documents the code for the programmer s br Above is a class definition for the Program class Everything that follows between the pair of braces describes that class The curly brackets demarcate the boundaries of a code block In this first instance they are marking the start and end of the Program class br This declares the class member method where the program begins execution The NET runtime calls the Main method Unlike in Java the Main method does not need the public keyword which tells the compiler that the method can be called from anywhere by any class Writing static void Main string args is equivalent to writing private static void Main string args The static keyword makes the method accessible without an instance of Program Each console application s Main entry point must be declared static otherwise the program would require an instance of Program but any instance would require a program To avoid that irresolvable circular dependency C compilers processing console applications like that above report an error if there is no static Main method The void keyword declares that Main has no return value Note however that short programs can be written using Top Level Statements introduced in C as mentioned earlier br br This line writes the output Console is a static class in the System namespace It provides an interface to the standard input output and error streams for console applications The program calls the Console method WriteLine which displays on the console a line with the argument the string Hello world br br br Generics br br With NET and C the community got more flexible collections than those in NET x In the absence of generics developers had to use collections such as ArrayList to store elements as objects of unspecified kind which incurred performance overhead when boxing unboxing type checking the contained items br Generics introduced a massive new feature in NET that allowed developers to create type safe data structures This shift is particularly important in the context of converting legacy systems where updating to generics can significantly enhance performance and maintainability by replacing outdated data structures with more efficient type safe alternatives br Example br br br GUI br A Windows GUI example br br This example is similar to the previous example except that it generates a dialog box that contains the message Hello World instead of writing it to the console br br br Images br Another useful library is the System Drawing library which is used to programmatically draw images For example This will create an image that is identical to that stored in Image png br br br Standardization and licensing br In August Microsoft Hewlett Packard and Intel co sponsored the submission of specifications for C as well as the Common Language Infrastructure CLI to the standards organization Ecma International In December ECMA released ECMA C Language Specification C became an ISO IEC standard in ISO IEC Information technology Programming languages C ECMA had previously adopted equivalent specifications as the nd edition of C in December In June ECMA approved edition of the C specification and updated ECMA Additions included partial classes anonymous methods nullable types and generics somewhat similar to C templates In July ECMA submitted to ISO IEC JTC SC via the latter s Fast Track process the standards and related TRs This process usually takes months br The C language definition and the CLI are standardized under ISO IEC and Ecma standards that provide reasonable and non discriminatory licensing protection from patent claims br Microsoft initially agreed not to sue open source developers for violating patents in non profit projects for the part of the framework that is covered by the Open Specification Promise Microsoft has also agreed not to enforce patents relating to Novell products against Novell s paying customers with the exception of a list of products that do not explicitly mention C NET or Novell s implementation of NET The Mono Project However Novell maintained that Mono does not infringe any Microsoft patents Microsoft also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin which depends on Mono provided it is obtained through Novell br A decade later Microsoft began developing free open source and cross platform tooling for C namely Visual Studio Code NET Core and Roslyn Mono joined Microsoft as a project of Xamarin a Microsoft subsidiary br br br Implementations br Microsoft is leading the development of the open source reference C compilers and set of tools The first compiler Roslyn compiles into intermediate language IL and the second one RyuJIT is a JIT just in time compiler which is dynamic and does on the fly optimization and compiles the IL into native code for the front end of the CPU RyuJIT is open source and written in C Roslyn is entirely written in managed code C has been opened up and functionality surfaced as APIs It is thus enabling developers to create refactoring and diagnostics tools Two branches of official implementation are NET Framework closed source Windows only and NET Core open source cross platform they eventually converged into one open source implementation NET At NET Framework a new JIT compiler replaced the former br Other C compilers some of which include an implementation of the Common Language Infrastructure and NET class libraries br br Mono a Microsoft sponsored project provides an open source C compiler a complete open source implementation of the CLI including the required framework libraries as they appear in the ECMA specification and a nearly complete implementation of the NET class libraries up to NET Framework br The Elements tool chain from RemObjects includes RemObjects C which compiles C code to NET s Common Intermediate Language Java bytecode Cocoa Android bytecode WebAssembly and native machine code for Windows macOS and Linux br The DotGNU project now discontinued also provided an open source C compiler a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification and subset of some of the remaining Microsoft proprietary NET class libraries up to NET those not documented or included in the ECMA specification but included in Microsoft s standard NET Framework distribution br The Unity game engine uses C as its primary scripting language The Godot game engine has implemented an optional C module thanks to a donation of from Microsoft br br br See also br br br Notes br br br br br br Citations br br br Sources br Albahari Joseph C in a Nutshell First ed O Reilly ISBN br Archer Tom Part Chapter The Type System Inside C Redmond Washington Microsoft Press ISBN br Nov k Istv n Velvart Andras Granicz Adam Bal ssy Gy rgy Hajdrik Attila Sellers Mitchel Hillar Gast n C Moln r gnes Kanjilal Joydip Visual Studio and NET Six in One Wrox Press ISBN br Skeet Jon C in Depth Fourth ed Manning ISBN br br br Further reading br Drayton Peter Albahari Ben Neward Ted C Language Pocket Reference O Reilly ISBN X br Petzold Charles Programming Microsoft Windows with C Microsoft Press ISBN br br br External links br C Language Specification br C Programming Guide br ISO C Language Specification br C Compiler Platform Roslyn source code