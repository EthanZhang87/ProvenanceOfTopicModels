title: QNX
id: 65184
QNX or is a commercial Unix like real time operating system aimed primarily at the embedded systems market br The product was originally developed in the early s by Canadian company Quantum Software Systems later renamed QNX Software Systems br As of it is used in a variety of devices including automobiles medical devices program logic controllers automated manufacturing trains and more br br br History br br Gordon Bell and Dan Dodge both students at the University of Waterloo in took a course in real time operating systems in which the students constructed a basic real time microkernel and user programs Both were convinced there was a commercial need for such a system and moved to the high tech planned community Kanata Ontario to start Quantum Software Systems that year In the first version of QUNIX was released for the Intel CPU In Quantum Software Systems renamed QUNIX to QNX in an effort to avoid any trademark infringement challenges br One of the first widespread uses of the QNX real time OS RTOS was in the nonembedded world when it was selected as the operating system for the Ontario education system s own computer design the Unisys ICON Over the years QNX was used mostly for larger projects as its k kernel was too large to fit inside the one chip computers of the era The system garnered a reputation for reliability and became used in running machinery in many industrial applications br In the late s Quantum realized that the market was rapidly moving towards the Portable Operating System Interface POSIX model and decided to rewrite the kernel to be much more compatible at a low level The result was QNX During this time Patrick Hayden while working as an intern along with Robin Burgener a full time employee at the time developed a new windowing system This patented concept was developed into the embeddable graphical user interface GUI named the QNX Photon microGUI QNX also provided a version of the X Window System br To demonstrate the OS s capability and relatively small size in the late s QNX released a demo image that included the POSIX compliant QNX OS a full graphical user interface graphical text editor TCP IP networking web browser and web server that all fit on a bootable MB floppy disk for the PC br Toward the end of the s the company then named QNX Software Systems began work on a new version of QNX designed from the ground up to be symmetric multiprocessing SMP capable and to support all current POSIX application programming interfaces APIs and any new POSIX APIs that could be anticipated while still retaining the microkernel architecture This resulted in QNX Neutrino released in br Along with the Neutrino kernel QNX Software Systems became a founding member of the Eclipse integrated development environment consortium The company released a suite of Eclipse plug ins packaged with the Eclipse workbench in and named QNX Momentics Tool Suite br In the company announced it had been sold to Harman International Industries Before this acquisition QNX software was already widely used in the automotive industry for telematics systems Since the purchase by Harman QNX software has been designed into over different automobile makes and models in telematics systems and in infotainment and navigation units The QNX CAR Application Platform was running in over million vehicles as of mid The company has since released several middleware products including the QNX Aviage Multimedia Suite the QNX Aviage Acoustic Processing Suite and the QNX HMI Suite br The microkernels of Cisco Systems IOS XR ultra high availability IOS introduced and IOS Software Modularity introduced are based on QNX br In September QNX Software Systems announced the availability of some of its source code br On April Research In Motion later renamed to BlackBerry Limited announced they would acquire QNX Software Systems from Harman International Industries On the same day QNX source code access was restricted from the public and hobbyists br In September the company announced a tablet computer the BlackBerry PlayBook and a new operating system BlackBerry Tablet OS based on QNX to run on the tablet br On October Research In Motion announced BBX which was later renamed BlackBerry in December Blackberry devices build upon the BlackBerry PlayBook QNX based operating system for touch devices but adapt the user interface for smartphones using the Qt based Cascades Native User Interface framework br At the Geneva Motor Show Apple demonstrated CarPlay which provides an iOS like user interface to head units in compatible vehicles Once configured by the automaker QNX can be programmed to hand off its display and some functions to an Apple CarPlay device br On December Ford Motor Company stated that it would replace Microsoft Auto with QNX br In January QNX announced the upcoming release of its SDP with support for Intel and ARM and bit platforms and support for C It was released in March br In December QNX released QNX SDP which is powered by a next generation microkernel with support for the latest Intel and ARM v and v bit platforms GCC based toolchain and a QNX toolkit for Visual Studio Code br br br Technology br As a microkernel based OS QNX is based on the idea of running most of the operating system kernel in the form of a number of small tasks named Resource Managers This differs from the more traditional monolithic kernel in which the operating system kernel is one very large program composed of a huge number of parts with special abilities In the case of QNX the use of a microkernel allows users developers to turn off any functions they do not need without having to change the OS Instead such services will simply not run br The QNX kernel procnto also name of the binary executable program for the QNX Neutrino nto process proc itself contains only CPU scheduling interprocess communication interrupt redirection and timers Everything else runs as a user process including a special process known as proc which performs process creation and memory management by operating in conjunction with the microkernel This is made possible by two key mechanisms subroutine call type interprocess communication and a boot loader which can load an image containing the kernel and any desired set of user programs and shared libraries There are no device drivers in the kernel The network stack is based on NetBSD code Along with its support for its own native device drivers QNX supports its legacy io net manager server and the network drivers ported from NetBSD br QNX interprocess communication consists of sending a message from one process to another and waiting for a reply This is a single operation called MsgSend The message is copied by the kernel from the address space of the sending process to that of the receiving process If the receiving process is waiting for the message control of the CPU is transferred at the same time without a pass through the CPU scheduler Thus sending a message to another process and waiting for a reply does not result in losing one s turn for the CPU This tight integration between message passing and CPU scheduling is one of the key mechanisms that makes QNX message passing broadly usable Most Unix and Linux interprocess communication mechanisms lack this tight integration although a user space implementation of QNX type messaging for Linux does exist Mishandling of this subtle issue is a primary reason for the disappointing performance of some other microkernel systems such as early versions of Mach The recipient process need not be on the same physical machine br All I O operations file system operations and network operations were meant to work through this mechanism and the data transferred was copied during message passing Later versions of QNX reduce the number of separate processes and integrate the network stack and other function blocks into single applications for performance reasons br Message handling is prioritized by thread priority Since I O requests are performed using message passing high priority threads receive I O service before low priority threads an essential feature in a hard real time system br The boot loader is the other key component of the minimal microkernel system Because user programs can be built into the boot image the set of device drivers and support libraries needed for startup need not be and are not in the kernel Even such functions as program loading are not in the kernel but instead are in shared user space libraries loaded as part of the boot image It is possible to put an entire boot image into ROM which is used for diskless embedded systems br Neutrino supports symmetric multiprocessing and processor affinity called bound multiprocessing BMP in QNX terminology BMP is used to improve cache hitting and to ease the migration of non SMP safe applications to multi processor computers br Neutrino supports strict priority preemptive scheduling and adaptive partition scheduling APS APS guarantees minimum CPU percentages to selected groups of threads even though others may have higher priority The adaptive partition scheduler is still strictly priority preemptive when the system is underloaded It can also be configured to run a selected set of critical threads strictly real time even when the system is overloaded br The QNX operating system also contained a web browser known as Voyager br Due to its microkernel architecture QNX is also a distributed operating system Dan Dodge and Peter van der Veen hold U S Patent Distributed kernel operating system based on the QNX operating system s distributed processing features known commercially as Transparent Distributed Processing This allows the QNX kernels on separate devices to access each other s system services using effectively the same communication mechanism as is used to access local services br br br Releases br br br Uses br The BlackBerry PlayBook tablet computer designed by BlackBerry uses a version of QNX as the primary operating system The BlackBerry operating system is also based on QNX br QNX is also used in car infotainment systems with many major car makers offering variants that include an embedded QNX architecture It is supported by popular SSL TLS libraries such as wolfSSL br Since the introduction of its Safe Kernel in QNX was projected and used subsequently in automated drive or ADAS systems for automotive projects that require a functional safety certified RTOS QNX provides this with its QNX OS for Safety products br QNX Neutrino has been ported to a number of platforms and now runs on practically any modern central processing unit CPU family that is used in the embedded market This includes the PowerPC x MIPS SH and the closely interrelated group of ARM StrongARM and XScale br br br Licensing br QNX offers a license for noncommercial and academic users In January BlackBerry introduced QNX Everywhere to make QNX more accessible to Hobbyists QNX Everywhere has not been made publicly accessible yet br br br Community br OpenQNX is a QNX Community Portal established and run independently An IRC channel and Newsgroups access via web is available Diverse industries are represented by the developers on the site br Foundry is a web based QNX community established by the company It serves as a hub to QNX Neutrino development where developers can register choose the license and get the source code and related toolkit of the RTOS br br br See also br Comparison of operating systems br Android Auto br Android Automotive br Automotive Grade Linux br CarPlay br Ford Sync br Windows Embedded Automotive br OpenHarmony br HarmonyOS NEXT br br br br br br Further reading br Dan Hildebrand An Architectural Overview of QNX Proceedings of the Workshop on Micro kernels and Other Kernel Architectures ISBN br br br External links br br Official website br QNX at Curlie br Development for QNX phones br Foundry br QNX User Community br Open source applications br GUIdebook GUIs QNX br QNX used for Canadian Nuclear Power Plants br QNX demo floppy disk