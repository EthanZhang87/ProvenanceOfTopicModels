title: Programming language
id: 23015
A programming language is a system of notation for writing computer programs br Programming languages are described in terms of their syntax form and semantics meaning usually defined by a formal language Languages usually provide features such as a type system variables and mechanisms for error handling An implementation of a programming language is required in order to execute programs namely a compiler or an interpreter An interpreter directly executes the source code while a compiler produces an executable program br Computer architecture has strongly influenced the design of programming languages with the most common type imperative languages which implement operations in a specified order developed to perform well on the popular von Neumann architecture While early programming languages were closely tied to the hardware over time they have developed more abstraction to hide implementation details for greater simplicity br Thousands of programming languages often classified as imperative functional logic or object oriented have been developed for a wide variety of uses Many aspects of programming language design involve tradeoffs for example exception handling simplifies error handling but at a performance cost Programming language theory is the subfield of computer science that studies the design implementation analysis characterization and classification of programming languages br br br Definitions br There are a variety of criteria that may be considered when defining what constitutes a programming language br br br Computer languages vs programming languages br The term computer language is sometimes used interchangeably with programming language However the usage of both terms varies among authors including the exact scope of each One usage describes programming languages as a subset of computer languages Similarly languages used in computing that have a different goal than expressing computer programs are generically designated computer languages For instance markup languages are sometimes referred to as computer languages to emphasize that they are not meant to be used for programming br One way of classifying computer languages is by the computations they are capable of expressing as described by the theory of computation The majority of practical programming languages are Turing complete and all Turing complete languages can implement the same set of algorithms ANSI ISO SQL and Charity are examples of languages that are not Turing complete yet are often called programming languages However some authors restrict the term programming language to Turing complete languages br Another usage regards programming languages as theoretical constructs for programming abstract machines and computer languages as the subset thereof that runs on physical computers which have finite hardware resources John C Reynolds emphasizes that formal specification languages are just as much programming languages as are the languages intended for execution He also argues that textual and even graphical input formats that affect the behavior of a computer are programming languages despite the fact they are commonly not Turing complete and remarks that ignorance of programming language concepts is the reason for many flaws in input formats br br br Domain and target br In most practical contexts a programming language involves a computer consequently programming languages are usually defined and studied this way Programming languages differ from natural languages in that natural languages are only used for interaction between people while programming languages also allow humans to communicate instructions to machines br The domain of the language is also worth consideration Markup languages like XML HTML or troff which define structured data are not usually considered programming languages Programming languages may however share the syntax with markup languages if a computational semantics is defined XSLT for example is a Turing complete language entirely using XML syntax Moreover LaTeX which is mostly used for structuring documents also contains a Turing complete subset br br br Abstractions br Programming languages usually contain abstractions for defining and manipulating data structures or controlling the flow of execution The practical necessity that a programming language supports adequate abstractions is expressed by the abstraction principle This principle is sometimes formulated as a recommendation to the programmer to make proper use of such abstractions br br br History br br br Early developments br The first programmable computers were invented at the end of the s and with them the first programming languages The earliest computers were programmed in first generation programming languages GLs machine language simple instructions that could be directly executed by the processor This code was very difficult to debug and was not portable between different computer systems In order to improve the ease of programming assembly languages or second generation programming languages GLs were invented diverging from the machine language to make programs easier to understand for humans although they did not increase portability br Initially hardware resources were scarce and expensive while human resources were cheaper Therefore cumbersome languages that were time consuming to use but were closer to the hardware for higher efficiency were favored The introduction of high level programming languages third generation programming languages GLs revolutionized programming These languages abstracted away the details of the hardware instead being designed to express algorithms that could be understood more easily by humans For example arithmetic expressions could now be written in symbolic notation and later translated into machine code that the hardware could execute In Fortran FORmula TRANslation was invented Often considered the first compiled high level programming language Fortran has remained in use into the twenty first century br br br s and s br br Around the first mainframes general purpose computers were developed although they could only be operated by professionals and the cost was extreme The data and instructions were input by punch cards meaning that no input could be added while the program was running The languages developed at this time therefore are designed for minimal interaction After the invention of the microprocessor computers in the s became dramatically cheaper New computers also allowed more user interaction which was supported by newer programming languages br Lisp implemented in was the first functional programming language Unlike Fortran it supports recursion and conditional expressions and it also introduced dynamic memory management on a heap and automatic garbage collection For the next decades Lisp dominated artificial intelligence applications In another functional language ML introduced inferred types and polymorphic parameters br After ALGOL ALGOrithmic Language was released in and it became the standard in computing literature for describing algorithms Although its commercial success was limited most popular imperative languages including C Pascal Ada C Java and C are directly or indirectly descended from ALGOL Among its innovations adopted by later programming languages included greater portability and the first use of context free BNF grammar Simula the first language to support object oriented programming including subtypes dynamic dispatch and inheritance also descends from ALGOL and achieved commercial success C another ALGOL descendant has sustained popularity into the twenty first century C allows access to lower level machine operations more than other contemporary languages Its power and efficiency generated in part with flexible pointer operations comes at the cost of making it more difficult to write correct code br Prolog designed in was the first logic programming language communicating with a computer using formal logic notation With logic programming the programmer specifies a desired result and allows the interpreter to decide how to achieve it br br br s to s br br During the s the invention of the personal computer transformed the roles for which programming languages were used New languages introduced in the s included C a superset of C that can compile C programs but also supports classes and inheritance Ada and other new languages introduced support for concurrency The Japanese government invested heavily into the so called fifth generation languages that added support for concurrency to logic programming constructs but these languages were outperformed by other concurrency supporting languages br Due to the rapid growth of the Internet and the World Wide Web in the s new programming languages were introduced to support Web pages and networking Java based on C and designed for increased portability across systems and security enjoyed large scale success because these features are essential for many Internet applications Another development was that of dynamically typed scripting languages Python JavaScript PHP and Ruby designed to quickly produce small programs that coordinate existing applications Due to their integration with HTML they have also been used for building web pages hosted on servers br br br s to present br During the s there was a slowdown in the development of new programming languages that achieved widespread popularity One innovation was service oriented programming designed to exploit distributed systems whose components are connected by a network Services are similar to objects in object oriented programming but run on a separate process C and F cross pollinated ideas between imperative and functional programming After several new languages Rust Go Swift Zig and Carbon competed for the performance critical software for which C had historically been used Most of the new programming languages uses static typing while a few numbers of new languages use dynamic typing like Ring and Julia br Some of the new programming languages are classified as visual programming languages like Scratch LabVIEW and PWCT Also some of these languages mix between textual and visual programming usage like Ballerina Also this trend lead to developing projects that help in developing new VPLs like Blockly by Google Many game engines like Unreal and Unity added support for visual scripting too br br br Elements br Every programming language includes fundamental elements for describing data and the operations or transformations applied to them such as adding two numbers or selecting an item from a collection These elements are governed by syntactic and semantic rules that define their structure and meaning respectively br br br Syntax br br A programming language s surface form is known as its syntax Most programming languages are purely textual they use sequences of text including words numbers and punctuation much like written natural languages On the other hand some programming languages are graphical using visual relationships between symbols to specify a program br The syntax of a language describes the possible combinations of symbols that form a syntactically correct program The meaning given to a combination of symbols is handled by semantics either formal or hard coded in a reference implementation Since most languages are textual this article discusses textual syntax br The programming language syntax is usually defined using a combination of regular expressions for lexical structure and Backus Naur form for grammatical structure Below is a simple grammar based on Lisp br br This grammar specifies the following br br an expression is either an atom or a list br an atom is either a number or a symbol br a number is an unbroken sequence of one or more decimal digits optionally preceded by a plus or minus sign br a symbol is a letter followed by zero or more of any characters excluding whitespace and br a list is a matched pair of parentheses with zero or more expressions inside it br The following are examples of well formed token sequences in this grammar and a b c br Not all syntactically correct programs are semantically correct Many syntactically correct programs are nonetheless ill formed per the language s rules and may depending on the language specification and the soundness of the implementation result in an error on translation or execution In some cases such programs may exhibit undefined behavior Even when a program is well defined within a language it may still have a meaning that is not intended by the person who wrote it br Using natural language as an example it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false br br Colorless green ideas sleep furiously is grammatically well formed but has no generally accepted meaning br John is a married bachelor is grammatically well formed but expresses a meaning that cannot be true br The following C language fragment is syntactically correct but performs operations that are not semantically defined the operation p has no meaning for a value having a complex type and p im is not defined because the value of p is the null pointer br br If the type declaration on the first line were omitted the program would trigger an error on the undefined variable p during compilation However the program would still be syntactically correct since type declarations provide only semantic information br The grammar needed to specify a programming language can be classified by its position in the Chomsky hierarchy The syntax of most programming languages can be specified using a Type grammar i e they are context free grammars Some languages including Perl and Lisp contain constructs that allow execution during the parsing phase Languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis an undecidable problem and generally blur the distinction between parsing and execution In contrast to Lisp s macro system and Perl s BEGIN blocks which may contain general computations C macros are merely string replacements and do not require code execution br br br Semantics br br The term semantics refers to the meaning of languages as opposed to their form syntax br br br Static semantics br Static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms For compiled languages static semantics essentially include those semantic rules that can be checked at compile time Examples include checking that every identifier is declared before it is used in languages that require such declarations or that the labels on the arms of a case statement are distinct Many important restrictions of this type like checking that identifiers are used in the appropriate context e g not adding an integer to a function name or that subroutine calls have the appropriate number and type of arguments can be enforced by defining them as rules in a logic called a type system Other forms of static analyses like data flow analysis may also be part of static semantics Programming languages such as Java and C have definite assignment analysis a form of data flow analysis as part of their respective static semantics br br br Dynamic semantics br br Once data has been specified the machine must be instructed to perform operations on the data For example the semantics may define the strategy by which expressions are evaluated to values or the manner in which control structures conditionally execute statements The dynamic semantics also known as execution semantics of a language defines how and when the various constructs of a language should produce a program behavior There are many ways of defining execution semantics Natural language is often used to specify the execution semantics of languages commonly used in practice A significant amount of academic research goes into formal semantics of programming languages which allows execution semantics to be specified in a formal manner Results from this field of research have seen limited application to programming language design and implementation outside academia br br br Type system br br A type system defines how a programming language classifies values and expressions into types how it can manipulate those types and how they interact The goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations Any decidable type system involves a trade off while it rejects many incorrect programs it can also prohibit some correct albeit unusual programs In order to bypass this downside a number of languages have type loopholes usually unchecked casts that may be used by the programmer to explicitly allow a normally disallowed operation between different types In most typed languages the type system is used only to type check programs but a number of languages usually functional ones infer types relieving the programmer from the need to write type annotations The formal design and study of type systems is known as type theory br br br Typed versus untyped languages br A language is typed if the specification of every operation defines types of data to which the operation is applicable For example the data represented by this text between the quotes is a string and in many programming languages dividing a number by a string has no meaning and will not be executed The invalid operation may be detected when the program is compiled static type checking and will be rejected by the compiler with a compilation error message or it may be detected while the program is running dynamic type checking resulting in a run time exception Many languages allow a function called an exception handler to handle this exception and for example always return as the result br A special case of typed languages is the single typed languages These are often scripting or markup languages such as REXX or SGML and have only one data type most commonly character strings which are used for both symbolic and numeric data br In contrast an untyped language such as most assembly languages allows any operation to be performed on any data generally sequences of bits of various lengths High level untyped languages include BCPL Tcl and some varieties of Forth br In practice while few languages are considered typed from the type theory verifying or rejecting all operations most modern languages offer a degree of typing Many production languages provide means to bypass or subvert the type system trading type safety for finer control over the program s execution see casting br br br Static vis vis dynamic typing br In static typing all expressions have their types determined before a program executes typically at compile time For example and are integer expressions they cannot be passed to a function that expects a string or stored in a variable that is defined to hold dates br Statically typed languages can be either manifestly typed or type inferred In the first case the programmer must explicitly write types at certain textual positions for example at variable declarations In the second case the compiler infers the types of expressions and declarations based on context Most mainstream statically typed languages such as C C and Java are manifestly typed Complete type inference has traditionally been associated with functional languages such as Haskell and ML However many manifestly typed languages support partial type inference for example C Java and C all infer types in certain limited cases Additionally some programming languages allow for some types to be automatically converted to other types for example an int can be used where the program expects a float br Dynamic typing also called latent typing determines the type safety of operations at run time in other words types are associated with run time values rather than textual expressions As with type inferred languages dynamically typed languages do not require the programmer to write explicit type annotations on expressions Among other things this may permit a single variable to refer to values of different types at different points in the program execution However type errors cannot be automatically detected until a piece of code is actually executed potentially making debugging more difficult Lisp Smalltalk Perl Python JavaScript Ruby Ring and Julia are all examples of dynamically typed languages br br br Weak and strong typing br Weak typing allows a value of one type to be treated as another for example treating a string as a number This can occasionally be useful but it can also allow some kinds of program faults to go undetected at compile time and even at run time br Strong typing prevents these program faults An attempt to perform an operation on the wrong type of value raises an error Strongly typed languages are often termed type safe or safe br An alternative definition for weakly typed refers to languages such as Perl Ring and JavaScript which permit a large number of implicit type conversions In JavaScript for example the expression x implicitly converts x to a number and this conversion succeeds even if x is null undefined an Array or a string of letters Such implicit conversions are often useful but they can mask programming errors Strong and static are now generally considered orthogonal concepts but usage in the literature differs Some use the term strongly typed to mean strongly statically typed or even more confusingly to mean simply statically typed Thus C has been called both strongly typed and weakly statically typed br It may seem odd to some professional programmers that C could be weakly statically typed However the use of the generic pointer the void pointer does allow casting pointers to other pointers without needing to do an explicit cast This is extremely similar to somehow casting an array of bytes to any kind of datatype in C without using an explicit cast such as int or char br br br Standard library and run time system br br Most programming languages have an associated core library sometimes known as the standard library especially if it is included as part of the published language standard which is conventionally made available by all implementations of the language Core libraries typically include definitions for commonly used algorithms data structures and mechanisms for input and output br The line between a language and its core library differs from language to language In some cases the language designers may treat the library as a separate entity from the language However a language s core library is often treated as part of the language by its users and some language specifications even require that this library be made available in all implementations Indeed some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library For example in Java a string literal is defined as an instance of the java lang String class similarly in Smalltalk an anonymous function expression a block constructs an instance of the library s BlockContext class Conversely Scheme contains multiple coherent subsets that suffice to construct the rest of the language as library macros and so the language designers do not even bother to say which portions of the language must be implemented as language constructs and which must be implemented as parts of a library br br br Concurrency br br In computing multiple instructions can be executed simultaneously Many programming languages support instruction level and subprogram level concurrency By the twenty first century additional processing power on computers was increasingly coming from the use of additional processors which requires programmers to design software that makes use of multiple processors simultaneously to achieve improved performance Interpreted languages such as Python and Ruby do not support the concurrent use of multiple processors Other programming languages do support managing data shared between different threads by controlling the order of execution of key instructions via the use of semaphores controlling access to shared data via monitor or enabling message passing between threads br br br Exception handling br br Many programming languages include exception handlers a section of code triggered by runtime errors that can deal with them in two main ways br br Termination shutting down and handing over control to the operating system This option is considered the simplest br Resumption resuming the program near where the exception occurred This can trigger a repeat of the exception unless the exception handler is able to modify values to prevent the exception from reoccurring br Some programming languages support dedicating a block of code to run regardless of whether an exception occurs before the code is reached this is called finalization br There is a tradeoff between increased ability to handle exceptions and reduced performance For example even though array index errors are common C does not check them for performance reasons Although programmers can write code to catch user defined exceptions this can clutter a program Standard libraries in some languages such as C use their return values to indicate an exception Some languages and their compilers have the option of turning on and off error handling capability either temporarily or permanently br br br Design and implementation br br Programming languages share properties with natural languages related to their purpose as vehicles for communication having a syntactic form separate from its semantics and showing language families of related languages branching one from another But as artificial constructs they also differ in fundamental ways from languages that have evolved through usage A significant difference is that a programming language can be fully described and studied in its entirety since it has a precise and finite definition By contrast natural languages have changing meanings given by their users in different communities While constructed languages are also artificial languages designed from the ground up with a specific purpose they lack the precise and complete semantic definition that a programming language has br Many programming languages have been designed from scratch altered to meet new needs and combined with other languages Many have eventually fallen into disuse Although there have been attempts to design one universal programming language that serves all purposes all of them have failed to be generally accepted as filling this role The need for diverse programming languages arises from the diversity of contexts in which languages are used br br Programs range from tiny scripts written by individual hobbyists to huge systems written by hundreds of programmers br Programmers range in expertise from novices who need simplicity above all else to experts who may be comfortable with considerable complexity br Programs must balance speed size and simplicity on systems ranging from microcontrollers to supercomputers br Programs may be written once and not change for generations or they may undergo continual modification br Programmers may simply differ in their tastes they may be accustomed to discussing problems and expressing them in a particular language br One common trend in the development of programming languages has been to add more ability to solve problems using a higher level of abstraction The earliest programming languages were tied very closely to the underlying hardware of the computer As new programming languages have developed features have been added that let programmers express ideas that are more remote from simple translation into underlying hardware instructions Because programmers are less tied to the complexity of the computer their programs can do more computing with less effort from the programmer This lets them write more functionality per time unit br br Natural language programming has been proposed as a way to eliminate the need for a specialized language for programming However this goal remains distant and its benefits are open to debate Edsger W Dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs and dismissed natural language programming as foolish Alan Perlis was similarly dismissive of the idea Hybrid approaches have been taken in Structured English and SQL br A language s designers and users must construct a number of artifacts that govern and enable the practice of programming The most important of these artifacts are the language specification and implementation br br br Specification br br The specification of a programming language is an artifact that the language users and the implementors can use to agree upon whether a piece of source code is a valid program in that language and if so what its behavior shall be br A programming language specification can take several forms including the following br br An explicit definition of the syntax static semantics and execution semantics of the language While syntax is commonly specified using a formal grammar semantic definitions may be written in natural language e g as in the C language or a formal semantics e g as in Standard ML and Scheme specifications br A description of the behavior of a translator for the language e g the C and Fortran specifications The syntax and semantics of the language have to be inferred from this description which may be written in natural or formal language br A reference or model implementation sometimes written in the language being specified e g Prolog or ANSI REXX The syntax and semantics of the language are explicit in the behavior of the reference implementation br br br Implementation br br An implementation of a programming language is the conversion of a program into machine code that can be executed by the hardware The machine code then can be executed with the help of the operating system The most common form of interpretation in production code is by a compiler which translates the source code via an intermediate level language into machine code known as an executable Once the program is compiled it will run more quickly than with other implementation methods Some compilers are able to provide further optimization to reduce memory or computation usage when the executable runs but increasing compilation time br Another implementation method is to run the program with an interpreter which translates each line of software into machine code just before it executes Although it can make debugging easier the downside of interpretation is that it runs to times slower than a compiled executable Hybrid interpretation methods provide some of the benefits of compilation and some of the benefits of interpretation via partial compilation One form this takes is just in time compilation in which the software is compiled ahead of time into an intermediate language and then into machine code immediately before execution br br br Proprietary languages br Although most of the most commonly used programming languages have fully open specifications and implementations many programming languages exist only as proprietary programming languages with the implementation available only from a single vendor which may claim that such a proprietary language is their intellectual property Proprietary programming languages are commonly domain specific languages or internal scripting languages for a single product some proprietary languages are used only internally within a vendor while others are available to external users br Some programming languages exist on the border between proprietary and open for example Oracle Corporation asserts proprietary rights to some aspects of the Java programming language and Microsoft s C programming language which has open implementations of most parts of the system also has Common Language Runtime CLR as a closed environment br Many proprietary languages are widely used in spite of their proprietary nature examples include MATLAB VBScript and Wolfram Language Some languages may make the transition from closed to open for example Erlang was originally Ericsson s internal programming language br Open source programming languages are particularly helpful for open science applications enhancing the capacity for replication and code sharing br br br Use br Thousands of different programming languages have been created mainly in the computing field br Individual software projects commonly use five programming languages or more br Programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness When using a natural language to communicate with other people human authors and speakers can be ambiguous and make small errors and still expect their intent to be understood However figuratively speaking computers do exactly what they are told to do and cannot understand what code the programmer intended to write The combination of the language definition a program and the program s inputs must fully specify the external behavior that occurs when the program is executed within the domain of control of that program On the other hand ideas about an algorithm can be communicated to humans without the precision required for execution by using pseudocode which interleaves natural language with code written in a programming language br A programming language provides a structured mechanism for defining pieces of data and the operations or transformations that may be carried out automatically on that data A programmer uses the abstractions present in the language to represent the concepts involved in a computation These concepts are represented as a collection of the simplest elements available called primitives Programming is the process by which programmers combine these primitives to compose new programs or adapt existing ones to new uses or a changing environment br Programs for a computer might be executed in a batch process without human interaction or a user might type commands in an interactive session of an interpreter In this case the commands are simply programs whose execution is chained together When a language can run its commands through an interpreter such as a Unix shell or other command line interface without compiling it is called a scripting language br br br Measuring language usage br Determining which is the most widely used programming language is difficult since the definition of usage varies by context One language may occupy the greater number of programmer hours a different one has more lines of code and a third may consume the most CPU time Some languages are very popular for particular kinds of applications For example COBOL is still strong in the corporate data center often on large mainframes Fortran in scientific and engineering applications Ada in aerospace transportation military real time and embedded applications and C in embedded applications and operating systems Other languages are regularly used to write many different kinds of applications br Various methods of measuring language popularity each subject to a different bias over what is measured have been proposed br br counting the number of job advertisements that mention the language br the number of books sold that teach or describe the language br estimates of the number of existing lines of code written in the language which may underestimate languages not often found in public searches br counts of language references i e to the name of the language found using a web search engine br Combining and averaging information from various internet sites stackify com reported the ten most popular programming languages in descending order by overall popularity Java C C Python C JavaScript VB NET R PHP and MATLAB br As of June the top five programming languages as measured by TIOBE index are Python C C Java and C TIOBE provide a list of top programming languages according to popularity and update this list every month br br br Dialects flavors and implementations br A dialect of a programming language or a data exchange language is a relatively small variation or extension of the language that does not change its intrinsic nature With languages such as Scheme and Forth standards may be considered insufficient inadequate or illegitimate by implementors so often they will deviate from the standard making a new dialect In other cases a dialect is created for use in a domain specific language often a subset In the Lisp world most languages that use basic S expression syntax and Lisp like semantics are considered Lisp dialects although they vary wildly as do say Racket and Clojure As it is common for one language to have several dialects it can become quite difficult for an inexperienced programmer to find the right documentation The BASIC language has many dialects br br br Classifications br br Programming languages are often placed into four main categories imperative functional logic and object oriented br br Imperative languages are designed to implement an algorithm in a specified order they include visual programming languages such as NET for generating graphical user interfaces Scripting languages which are partly or fully interpreted rather than compiled are sometimes considered a separate category but meet the definition of imperative languages br Functional programming languages work by successively applying functions to the given parameters Although appreciated by many researchers for their simplicity and elegance problems with efficiency have prevented them from being widely adopted br Logic languages are designed so that the software rather than the programmer decides what order in which the instructions are executed br Object oriented programming whose characteristic features are data abstraction inheritance and dynamic dispatch is supported by most popular imperative languages and some functional languages br Although markup languages are not programming languages some have extensions that support limited programming Additionally there are special purpose languages that are not easily compared to other programming languages br br br See also br br br br br br Further reading 