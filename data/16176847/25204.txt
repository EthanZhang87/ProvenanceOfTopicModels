title: Qt (software)
id: 25204
Qt pronounced cute or as an initialism is cross platform application development framework for creating graphical user interfaces as well as cross platform applications that run on various software and hardware platforms such as Linux Windows macOS Android or embedded systems with little or no change in the underlying codebase while still being a native application with native capabilities and speed br Qt is currently being developed by The Qt Company a publicly listed company and the Qt Project under open source governance involving individual developers and organizations working to advance Qt Qt is available under both commercial licenses and open source GPL GPL and LGPL licenses br br br Purposes and abilities br Qt is used for developing graphical user interfaces GUIs and multi platform applications that run on all major desktop platforms and mobile or embedded platforms br Most GUI programs created with Qt have a native looking interface in which case Qt is classified as a widget toolkit Non GUI programs can also be developed such as command line tools and consoles for servers An example of such a non GUI program using Qt is the Cutelyst web framework br Qt supports various C compilers including the GCC and Clang C compilers and the Visual Studio suite It supports other languages with bindings or extensions such as Python via Python bindings and PHP via an extension for PHP and has extensive internationalization support Qt also provides Qt Quick that includes a declarative scripting language called QML that allows using JavaScript to provide the logic With Qt Quick rapid application development for mobile devices became possible while logic can still be written with native code as well to achieve the best possible performance br Other features include SQL database access XML parsing JSON parsing thread management and network support br br br Releases br The latest version of the Qt Framework is Qt which was released on April br Also still supported are for commercial users LTS released on April LTS released on September and LTS released on May long term support LTS versions are generally supported for three years with a commercial license while support was extended to five years for subscription license holders and so it is supported until May Additionally the KDE project provides unofficial support for at least Qt i e not just for commercial users br br br Qt in use br In the Qt Company estimated a community of about million developers worldwide in over industries br br br Desktop UIs br br Graphical user interfaces and desktop environments that utilize Qt QML as widget toolkit br br KDE Plasma a libre desktop environment for various computing devices br DDE Deepin Desktop Environment of Linux Deepin br UKUI Ubuntu Kylin User Interface br CutefishDE a desktop environment built with Qt Quick and essential KDE frameworks br LXQt Lightweight X Desktop Environment br Lumina a desktop environment designed for BSD based TrueOS br Lomiri formerly Unity a convergent desktop environment started by Canonical maintained by Ubports br Maui Shell a DE that also features their own app suite br Unity D a desktop shell written in Qt and Qml br Trinity DE a continuously developed fork based on KDE br SDDM a display manager written in QML that is compatible with X and Wayland br br br Embedded and mobile UIs br Actively developed or maintained br AsteroidOS an open source operating system designed for smartwatches br Avionics Panasonic s in flight entertainment system br Sailfish OS a mobile operating system developed by Jolla br Plasma Mobile a touch based GUI developed by KDE br LuneOS community driven successor for Palm HP webOS br Nemo Mobile based on Mer br Lomiri formerly known as Unity a phone UI developed by Ubports originally by Canonical br Tesla Model S in car UI br webOS a multitask operating system from LG for smart devices like TVs and smartwatches br Sky Q the home entertainment system of Sky plc br Available but inactive br MeeGo handset and tablet UX br Qtopia a system by Nokia for embedded and mobile devices br br br Applications using Qt br br Many notable open source or proprietary cross platform software are using Qt or QML br br br Organizations using Qt br Qt is utilized by a wide range of companies and organizations such as br br br Qt software architecture br br br Qt concepts br Qt is built on these key concepts br br Complete abstraction of the GUI br When first released Qt used its own paint engine and controls emulating the look of the different platforms it runs on when it drew its widgets This made the porting work easier because very few classes in Qt really depended on the target platform however this occasionally led to slight discrepancies where that emulation was imperfect Recent versions of Qt use the native style APIs of the different platforms on platforms that have a native widget set to query metrics and draw most controls and do not suffer from such issues as often On some platforms such as MeeGo and KDE Qt is the native API Some other portable graphical toolkits have made different design decisions for example wxWidgets uses the toolkits of the target platform for its implementations br Signals and slots br A language construct introduced in Qt for communication between objects which makes it easy to implement the observer pattern while avoiding boilerplate code The concept is that GUI widgets can send signals containing event information which can be received by other controls using special functions known as slots br Metaobject compiler br The metaobject compiler termed moc is a tool that is run on the sources of a Qt program It interprets certain macros from the C code as annotations and uses them to generate added C code with meta information about the classes used in the program This meta information is used by Qt to provide programming features not available natively in C signals and slots introspection and asynchronous function calls br Language bindings br Qt can be used in several programming languages other than C such as Python Javascript C and Rust via language bindings many languages have bindings for Qt and bindings for Qt br br br Qt modules br Starting with Qt the framework was split into individual modules With Qt the architecture was modularized even further Qt is now split into essential and add on modules br br br Qt essentials br br br Qt add ons br br br Editions br There are four editions of Qt available Community Indie Mobile Professional and Enterprise The Community version is under the open source licenses while the Indie Mobile Professional and Enterprise versions which contain additional functionality and libraries e g Enterprise Controls are commercially sold by The Qt Company br br br Supported platforms br br Qt works on many different platforms the following are officially supported br br After Nokia opened the Qt source code to the community on Gitorious various ports appeared There are also some ports of Qt that may be available but are not supported anymore These platforms are listed in List of platforms supported by Qt See also there for current community support for other lesser known platforms such as SailfishOS br br br Licensing br Qt is available under the following free software licenses GPL GPL LGPL and LGPL with Qt special exception Note that some modules are available only under a GPL license which means that applications which link to these modules need to comply with that license br In addition Qt has always been available under a commercial license like the Qt Commercial License that allows developing proprietary applications with no restrictions on licensing br br br Qt tools br br Qt comes with its own set of tools to ease cross platform development which can otherwise be cumbersome due to different set of development tools br Qt Creator is a cross platform IDE for C and QML Qt Designer s GUI layout design functionality is integrated into the IDE although Qt Designer can still be started as a standalone tool br In addition to Qt Creator Qt provides qmake a cross platform build script generation tool that automates the generation of Makefiles for development projects across different platforms br There are other tools available in Qt including the Qt Designer interface builder and the Qt Assistant help browser which are both embedded in Qt Creator the Qt Linguist translation tool uic user interface compiler and moc Meta Object Compiler br br br History of Qt br br br Early developments br In the summer of Haavard Nord and Eirik Chambe Eng the original developers of Qt and the CEO and President respectively of Trolltech were working together on a database application for ultrasound images written in C and running on Mac OS Unix and Microsoft Windows They began development of Qt in three years before the company was incorporated as Quasar Technologies then changed the name to Troll Tech and then to Trolltech br The toolkit was called Qt because the letter Q looked appealing in Haavard s Emacs typeface and t was inspired by Xt the X toolkit br The first two versions of Qt had only two flavors Qt X for Unix and Qt Windows for Windows br On May Trolltech publicly released Qt for X Linux with the source code under the Qt Free Edition License This license was viewed as not compliant with the free software definition by Free Software Foundation because while the source was available it did not allow the redistribution of modified versions Trolltech used this license until version Controversy erupted around when it became clear that the K Desktop Environment was going to become one of the leading desktop environments for Linux As it was based on Qt many people in the free software movement worried that an essential piece of one of their major operating systems would be proprietary br The Windows platform was available only under a proprietary license which meant free open source applications written in Qt for X could not be ported to Windows without purchasing the proprietary edition br br br Becoming free software friendly br With the release of version of the toolkit in mid the license was changed to the Q Public License QPL a free software license but one regarded by the Free Software Foundation as incompatible with the GPL Compromises were sought between KDE and Trolltech whereby Qt would not be able to fall under a more restrictive license than the QPL even if Trolltech was bought out or went bankrupt This led to the creation of the KDE Free Qt foundation which guarantees that Qt would fall under a BSD style license should no free open source version of Qt be released during months br In Qt X was released under the GPL v ending all controversy regarding GPL compatibility br At the end of Trolltech released Qt which added support for Mac OS X now known as macOS The Mac OS X support was available only in the proprietary license until June when Trolltech released Qt with Mac OS X support available under the GPL br In members of the KDE on Cygwin project began porting the GPL licensed Qt X code base to Windows This was in response to Trolltech s refusal to license Qt Windows under the GPL on the grounds that Windows was not a free open source software platform The project achieved reasonable success although it never reached production quality br This was resolved when Trolltech released Qt also for Windows under the GPL in June Qt supported the same set of platforms in the free software open source editions as in the proprietary edition so it is possible with Qt and later releases to create GPL licensed free open source applications using Qt on all supported platforms The GPL v with special exception was later added as an added licensing option The GPL exception allows the final application to be licensed under various GPL incompatible free software open source licenses such as the Mozilla Public License br br br Acquisition by Nokia br Nokia acquired Trolltech ASA on June and changed the name first to Qt Software then to Qt Development Frameworks br Nokia focused on turning Qt into the main development platform for its devices including a port to the Symbian S platform Version of the Nokia Qt SDK was released on June The source code was made available over Gitorious a community oriented git source code repository with a goal of creating a broader community using and improving Qt br On January Qt version added another option the LGPL to make Qt more attractive for both non GPL open source projects and closed applications br In February Nokia announced its decision to drop Symbian technologies and base their future smartphones on the Windows Phone platform instead and since then support for that platform has also been dropped One month later Nokia announced the sale of Qt s commercial licensing and professional services to Digia with the immediate goal of taking Qt support to Android iOS and Windows platforms and to continue focusing on desktop and embedded development although Nokia was to remain the main development force behind the framework at that time br br br Merging and demerging with Digia br In March Nokia sold the commercial licensing part of Qt to Digia creating Qt Commercial In August Digia announced that it would acquire Qt from Nokia The Qt team at Digia started their work in September They released Qt within a month and newer versions every six months with new features and additional supported platforms br In September Digia transferred the Qt business and copyrights to their wholly owned subsidiary The Qt Company which owns brands related to Qt In May Digia and Qt demerged completely into two independent companies br br br The Qt Project and open governance br br Qt was officially released on December This new version marked a major change in the platform with hardware accelerated graphics QML and JavaScript playing a major role The traditional C only QWidgets continued to be supported but did not benefit from the performance improvements available through the new architecture Qt brings significant improvements to the speed and ease of developing user interfaces br Framework development of Qt moved to open governance at qt project org which made it possible for developers outside Digia to submit patches for review br br br Qt contributors br br Aside from The Qt Company many organizations and individuals using Qt as their development platform participate in the open development of Qt via the Qt Project br One such Qt contributor is Klar lvdalens Datakonsult AB a Swedish Qt consulting company KDAB is involved in many areas including maintenance of several components br Together with RIM BlackBerry KDAB is maintaining the QNX and BlackBerry ports of Qt br Another participator is Intel contributing for example Wayland support AudioCodes maintains IBM ClearCase support in Qt Creator br As a heavy user of Qt the KDE project submits many patches and features from its developer library KDE Frameworks back to Qt br br br See also br List of widget toolkits br Android software development br iOS SDK br Wt web toolkit br br br Bibliography br Qt Wiki provides a comprehensive list of English books about Qt This is a list of notable books br br br br br br External links br br Official website br The Qt Dance video YouTube August Archived from the original on December Retrieved September 