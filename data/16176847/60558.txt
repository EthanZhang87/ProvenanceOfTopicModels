title: ARM architecture family
id: 60558
ARM stylised in lowercase as arm formerly an acronym for Advanced RISC Machines and originally Acorn RISC Machine is a family of RISC instruction set architectures ISAs for computer processors Arm Ltd develops the ISAs and licenses them to other companies who build the physical devices that use the instruction set It also designs and licenses cores that implement these ISAs br Due to their low costs low power consumption and low heat generation ARM processors are useful for light portable battery powered devices including smartphones laptops and tablet computers as well as embedded systems However ARM processors are also used for desktops and servers including the world s fastest supercomputer Fugaku from to With over billion ARM chips produced as of ARM is the most widely used family of instruction set architectures br There have been several generations of the ARM design The original ARM used a bit internal structure but had a bit address space that limited it to MB of main memory This limitation was removed in the ARMv series which has a bit address space and several additional generations up to ARMv remained bit Released in the ARMv A architecture added support for a bit address space and bit arithmetic with its new bit fixed length instruction set Arm Ltd has also released a series of additional instruction sets for different rules the Thumb extension adds both and bit instructions for improved code density while Jazelle added instructions for directly handling Java bytecode More recent changes include the addition of simultaneous multithreading SMT for improved performance or fault tolerance br br br History br br br BBC Micro br br Acorn Computers first widely successful design was the BBC Micro introduced in December This was a relatively conventional machine based on the MOS Technology CPU but ran at roughly double the performance of competing designs like the Apple II due to its use of faster dynamic random access memory DRAM Typical DRAM of the era ran at about MHz Acorn arranged a deal with Hitachi for a supply of faster MHz parts br Machines of the era generally shared memory between the processor and the framebuffer which allowed the processor to quickly update the contents of the screen without having to perform separate input output I O As the timing of the video display is exacting the video hardware had to have priority access to that memory Due to a quirk of the s design the CPU left the memory untouched for half of the time Thus by running the CPU at MHz the video system could read data during those down times taking up the total MHz bandwidth of the RAM In the BBC Micro the use of MHz RAM allowed the same technique to be used but running at twice the speed This allowed it to outperform any similar machine on the market br br br Acorn Business Computer br br was also the year that the IBM Personal Computer was introduced Using the recently introduced Intel a bit CPU compared to the s bit design it offered higher overall performance Its introduction changed the desktop computer market radically what had been largely a hobby and gaming market emerging over the prior five years began to change to a must have business tool where the earlier bit designs simply could not compete Even newer bit designs were also coming to market such as the Motorola and National Semiconductor NS br Acorn began considering how to compete in this market and produced a new paper design named the Acorn Business Computer They set themselves the goal of producing a machine with ten times the performance of the BBC Micro but at the same price This would outperform and underprice the PC At the same time the recent introduction of the Apple Lisa brought the graphical user interface GUI concept to a wider audience and suggested the future belonged to machines with a GUI The Lisa however cost as it was packed with support chips large amounts of memory and a hard disk drive all very expensive then br The engineers then began studying all of the CPU designs available Their conclusion about the existing bit designs was that they were a lot more expensive and were still a bit crap offering only slightly higher performance than their BBC Micro design They also almost always demanded a large number of support chips to operate even at that level which drove up the cost of the computer as a whole These systems would simply not hit the design goal They also considered the new bit designs but these cost even more and had the same issues with support chips According to Sophie Wilson all the processors tested at that time performed about the same with about a Mbit s bandwidth br Two key events led Acorn down the path to ARM One was the publication of a series of reports from the University of California Berkeley which suggested that a simple chip design could nevertheless have extremely high performance much higher than the latest bit designs on the market The second was a visit by Steve Furber and Sophie Wilson to the Western Design Center a company run by Bill Mensch and his sister which had become the logical successor to the MOS team and was offering new versions like the WDC C The Acorn team saw high school students producing chip layouts on Apple II machines which suggested that anyone could do it In contrast a visit to another design firm working on modern bit CPU revealed a team with over a dozen members which were already on revision H of their design and yet it still contained bugs This cemented their late decision to begin their own CPU design the Acorn RISC Machine br br br Design concepts br The original Berkeley RISC designs were in some sense teaching systems not designed specifically for outright performance To the RISC s basic register heavy and load store concepts ARM added a number of the well received design notes of the Primary among them was the ability to quickly serve interrupts which allowed the machines to offer reasonable input output performance with no added external hardware To offer interrupts with similar performance as the the ARM design limited its physical address space to MB of total addressable space requiring bits of address As instructions were bytes bits long and required to be aligned on byte boundaries the lower bits of an instruction address were always zero This meant the program counter PC only needed to be bits allowing it to be stored along with the eight bit processor flags in a single bit register That meant that upon receiving an interrupt the entire machine state could be saved in a single operation whereas had the PC been a full bit value it would require separate operations to store the PC and the status flags This decision halved the interrupt overhead br Another change and among the most important in terms of practical real world performance was the modification of the instruction set to take advantage of page mode DRAM Recently introduced page mode allowed subsequent accesses of memory to run twice as fast if they were roughly in the same location or page in the DRAM chip Berkeley s design did not consider page mode and treated all memory equally The ARM design added special vector like memory access instructions the S cycles that could be used to fill or save multiple registers in a single page using page mode This doubled memory performance when they could be used and was especially important for graphics performance br The Berkeley RISC designs used register windows to reduce the number of register saves and restores performed in procedure calls the ARM design did not adopt this br Wilson developed the instruction set writing a simulation of the processor in BBC BASIC that ran on a BBC Micro with a second processor This convinced Acorn engineers they were on the right track Wilson approached Acorn s CEO Hermann Hauser and requested more resources Hauser gave his approval and assembled a small team to design the actual processor based on Wilson s ISA The official Acorn RISC Machine project started in October br br br ARM br br Acorn chose VLSI Technology as the silicon partner as they were a source of ROMs and custom chips for Acorn Acorn provided the design and VLSI provided the layout and production The first samples of ARM silicon worked properly when first received and tested on April Known as ARM these versions ran at MHz br The first ARM application was as a second processor for the BBC Micro where it helped in developing simulation software to finish development of the support chips VIDC IOC MEMC and sped up the CAD software used in ARM development Wilson subsequently rewrote BBC BASIC in ARM assembly language The in depth knowledge gained from designing the instruction set enabled the code to be very dense making ARM BBC BASIC an extremely good test for any ARM emulator br br br ARM br The result of the simulations on the ARM boards led to the late introduction of the ARM design running at MHz and the early speed bumped version at to MHz A significant change in the underlying architecture was the addition of a Booth multiplier whereas formerly multiplication had to be carried out in software Further a new Fast Interrupt reQuest mode FIQ for short allowed registers through to be replaced as part of the interrupt itself This meant FIQ requests did not have to save out their registers further speeding interrupts br The first use of the ARM was the Acorn Archimedes personal computer models A A and A launched in br According to the Dhrystone benchmark the ARM was roughly seven times the performance of a typical MHz based system like the Amiga or Macintosh SE It was twice as fast as an Intel running at MHz and about the same speed as a multi processor VAX superminicomputer The only systems that beat it were the Sun SPARC and MIPS R RISC based workstations Further as the CPU was designed for high speed I O it dispensed with many of the support chips seen in these machines notably it lacked any dedicated direct memory access DMA controller which was often found on workstations The graphics system was also simplified based on the same set of underlying assumptions about memory and timing The result was a dramatically simplified design offering performance on par with expensive workstations but at a price point similar to contemporary desktops br The ARM featured a bit data bus bit address space and bit registers of which are accessible at any one time including the PC The ARM had a transistor count of just compared to Motorola s six year older model with around Much of this simplicity came from the lack of microcode which represents about one quarter to one third of the s transistors and the lack of like most CPUs of the day a cache This simplicity enabled the ARM to have a low power consumption and simpler thermal packaging through having fewer powered transistors yet offering better performance than the contemporary IBM PS Model which initially utilised an Intel offering MIPS MHz and later in the MIPS of the PS with its Intel DX MHz br A successor ARM was produced with a KB cache which further improved performance The address bus was extended to bits in the ARM but program code still had to lie within the first MB of memory in bit compatibility mode due to the reserved bits for the status flags br br br Advanced RISC Machines Ltd ARM br br In the late s Apple Computer and VLSI Technology started working with Acorn on newer versions of the ARM core In Acorn spun off the design team into a new company named Advanced RISC Machines Ltd which became ARM Ltd when its parent company Arm Holdings plc floated on the London Stock Exchange and Nasdaq in The new Apple ARM work would eventually evolve into the ARM first released in early Apple used the ARM based ARM as the basis for their Apple Newton PDA br br br Early licensees br In Acorn used the ARM as the main central processing unit CPU in their RiscPC computers DEC licensed the ARMv architecture and produced the StrongARM At MHz this CPU drew only one watt newer versions draw far less This work was later passed to Intel as part of a lawsuit settlement and Intel took the opportunity to supplement their i line with the StrongARM Intel later developed its own high performance implementation named XScale which it has since sold to Marvell Transistor count of the ARM core remained essentially the same throughout these changes ARM had transistors while ARM grew only to br br br Market share br In about of all mobile phones sold used at least one ARM processor In producers of chips based on ARM architectures reported shipments of billion ARM based processors representing of smartphones of digital televisions and set top boxes and of mobile computers In the bit ARM architecture was the most widely used architecture in mobile devices and the most popular bit one in embedded systems In billion were produced and ARM based chips are found in nearly percent of the world s mobile devices br br br Licensing br br br Core licence br Arm Ltd s primary business is selling IP cores which licensees use to create microcontrollers MCUs CPUs and systems on chips based on those cores The original design manufacturer combines the ARM core with other parts to produce a complete device typically one that can be built in existing semiconductor fabrication plants fabs at low cost and still deliver substantial performance The most successful implementation has been the ARM TDMI with hundreds of millions sold Atmel has been a precursor design center in the ARM TDMI based embedded system br The ARM architectures used in smartphones PDAs and other mobile devices range from ARMv to ARMv A br In some manufacturers introduced netbooks based on ARM architecture CPUs in direct competition with netbooks based on Intel Atom br Arm Ltd offers a variety of licensing terms varying in cost and deliverables Arm Ltd provides to all licensees an integratable hardware description of the ARM core as well as complete software development toolset compiler debugger software development kit and the right to sell manufactured silicon containing the ARM CPU br SoC packages integrating ARM s core designs include Nvidia Tegra s first three generations CSR plc s Quatro family ST Ericsson s Nova and NovaThor Silicon Labs s Precision MCU Texas Instruments s OMAP products Samsung s Hummingbird and Exynos products Apple s A A and A X and NXP s i MX br Fabless licensees who wish to integrate an ARM core into their own chip design are usually only interested in acquiring a ready to manufacture verified semiconductor intellectual property core For these customers Arm Ltd delivers a gate netlist description of the chosen ARM core along with an abstracted simulation model and test programs to aid design integration and verification More ambitious customers including integrated device manufacturers IDM and foundry operators choose to acquire the processor IP in synthesizable RTL Verilog form With the synthesizable RTL the customer has the ability to perform architectural level optimisations and extensions This allows the designer to achieve exotic design goals not otherwise possible with an unmodified netlist high clock speed very low power consumption instruction set extensions etc While Arm Ltd does not grant the licensee the right to resell the ARM architecture itself licensees may freely sell manufactured products such as chip devices evaluation boards and complete systems Merchant foundries can be a special case not only are they allowed to sell finished silicon containing ARM cores they generally hold the right to re manufacture ARM cores for other customers br Arm Ltd prices its IP based on perceived value Lower performing ARM cores typically have lower licence costs than higher performing cores In implementation terms a synthesisable core costs more than a hard macro blackbox core Complicating price matters a merchant foundry that holds an ARM licence such as Samsung or Fujitsu can offer fab customers reduced licensing costs In exchange for acquiring the ARM core through the foundry s in house design services the customer can reduce or eliminate payment of ARM s upfront licence fee br Compared to dedicated semiconductor foundries such as TSMC and UMC without in house design services Fujitsu Samsung charge two to three times more per manufactured wafer For low to mid volume applications a design service foundry offers lower overall pricing through subsidisation of the licence fee For high volume mass produced parts the long term cost reduction achievable through lower wafer pricing reduces the impact of ARM s NRE non recurring engineering costs making the dedicated foundry a better choice br Companies that have developed chips with cores designed by Arm include Amazon com s Annapurna Labs subsidiary Analog Devices Apple AppliedMicro now MACOM Technology Solutions Atmel Broadcom Cavium Cypress Semiconductor Freescale Semiconductor now NXP Semiconductors Huawei Intel Maxim Integrated Nvidia NXP Qualcomm Renesas Samsung Electronics ST Microelectronics Texas Instruments and Xilinx br br br Built on ARM Cortex Technology licence br In February ARM announced the Built on ARM Cortex Technology licence often shortened to Built on Cortex BoC licence This licence allows companies to partner with ARM and make modifications to ARM Cortex designs These design modifications will not be shared with other companies These semi custom core designs also have brand freedom for example Kryo br Companies that are current licensees of Built on ARM Cortex Technology include Qualcomm br br br Architectural licence br Companies can also obtain an ARM architectural licence for designing their own CPU cores using the ARM instruction sets These cores must comply fully with the ARM architecture Companies that have designed cores that implement an ARM architecture include Apple AppliedMicro now Ampere Computing Broadcom Cavium now Marvell Digital Equipment Corporation Intel Nvidia Qualcomm Samsung Electronics Fujitsu and NUVIA Inc acquired by Qualcomm in br br br ARM Flexible Access br On July ARM announced ARM Flexible Access ARM Flexible Access provides unlimited access to included ARM intellectual property IP for development Per product licence fees are required once a customer reaches foundry tapeout or prototyping br of ARM s most recent IP over the last two years are included in ARM Flexible Access As of October br br CPUs Cortex A Cortex A Cortex A Cortex A Cortex A Cortex A Cortex R Cortex R Cortex R Cortex M Cortex M Cortex M Cortex M Cortex M Cortex M Cortex M br GPUs Mali G Mali G Includes Mali Driver Development Kits DDK br Interconnect CoreLink NIC CoreLink NIC CoreLink CCI CoreLink CCI CoreLink CCI ADB AMBA XHB AXI AHB br System Controllers CoreLink GIC CoreLink GIC PL VIC BP TrustZone Memory Wrapper CoreLink TZC CoreLink L C CoreLink MMU BP Memory Interface br Security IP CryptoCell CryptoCell TrustZone True Random Number Generator br Peripheral Controllers PL UART PL SPI PL RTC br Debug Trace CoreSight SoC CoreSight SDC CoreSight STM CoreSight System Trace Macrocell CoreSight Trace Memory Controller br Design Kits Corstone Corstone br Physical IP Artisan PIK for Cortex M TSMC ULL including memory compilers logic libraries GPIOs and documentation br Tools Materials Socrates IP ToolingARM Design Studio Virtual System Models br Support Standard ARM Technical support ARM online training maintenance updates credits toward onsite training and design reviews br br br Cores br br Arm provides a list of vendors who implement ARM cores in their design application specific standard products ASSP microprocessor and microcontrollers br br br Example applications of ARM cores br br ARM cores are used in a number of products particularly PDAs and smartphones Some computing examples are Microsoft s first generation Surface Surface and Pocket PC devices following Apple s iPads and Asus s Eee Pad Transformer tablet computers and several Chromebook laptops Others include Apple s iPhone smartphones and iPod portable media players Canon PowerShot digital cameras Nintendo Switch hybrid the Wii security processor and DS handheld game consoles and TomTom turn by turn navigation systems br In Arm took part in the development of Manchester University s computer SpiNNaker which used ARM cores to simulate the human brain br ARM chips are also used in Raspberry Pi BeagleBoard BeagleBone PandaBoard and other single board computers because they are very small inexpensive and consume very little power br br br bit architecture br br The bit ARM architecture ARM such as ARMv A implementing AArch see section on Armv A for more on it was the most widely used architecture in mobile devices as of br Since various versions of the ARM Architecture Reference Manual see External links have been the primary source of documentation on the ARM processor architecture and instruction set distinguishing interfaces that all ARM processors are required to support such as instruction semantics from implementation details that may vary The architecture has evolved over time and version seven of the architecture ARMv defines three architecture profiles br br A profile the Application profile implemented by bit cores in the Cortex A series and by some non ARM cores br R profile the Real time profile implemented by cores in the Cortex R series br M profile the Microcontroller profile implemented by most cores in the Cortex M series br Although the architecture profiles were first defined for ARMv ARM subsequently defined the ARMv M architecture used by the Cortex M M M as a subset of the ARMv M profile with fewer instructions br br br CPU modes br Except in the M profile the bit ARM architecture specifies several CPU modes depending on the implemented architecture features At any moment in time the CPU can be in only one mode but it can switch modes due to external events interrupts or programmatically br br User mode The only non privileged mode br FIQ mode A privileged mode that is entered whenever the processor accepts a fast interrupt request br IRQ mode A privileged mode that is entered whenever the processor accepts an interrupt br Supervisor svc mode A privileged mode entered whenever the CPU is reset or when an SVC instruction is executed br Abort mode A privileged mode that is entered whenever a prefetch abort or data abort exception occurs br Undefined mode A privileged mode that is entered whenever an undefined instruction exception occurs br System mode ARMv and above The only privileged mode that is not entered by an exception It can only be entered by executing an instruction that explicitly writes to the mode bits of the Current Program Status Register CPSR from another privileged mode not from user mode br Monitor mode ARMv and ARMv Security Extensions ARMv EL A monitor mode is introduced to support TrustZone extension in ARM cores br Hyp mode ARMv Virtualization Extensions ARMv EL A hypervisor mode that supports Popek and Goldberg virtualization requirements for the non secure operation of the CPU br Thread mode ARMv M ARMv M ARMv M A mode which can be specified as either privileged or unprivileged Whether the Main Stack Pointer MSP or Process Stack Pointer PSP is used can also be specified in CONTROL register with privileged access This mode is designed for user tasks in RTOS environment but it is typically used in bare metal for super loop br Handler mode ARMv M ARMv M ARMv M A mode dedicated for exception handling except the RESET which are handled in Thread mode Handler mode always uses MSP and works in privileged level br br br Instruction set br The original and subsequent ARM implementation was hardwired without microcode like the much simpler bit processor used in prior Acorn microcomputers br The bit ARM architecture and the bit architecture for the most part includes the following RISC features br br Load store architecture br No support for unaligned memory accesses in the original version of the architecture ARMv and later except some microcontroller versions support unaligned accesses for half word and single word load store instructions with some limitations such as no guaranteed atomicity br Uniform bit register file including the program counter stack pointer and the link register br Fixed instruction width of bits to ease decoding and pipelining at the cost of decreased code density Later the Thumb instruction set added bit instructions and increased code density br Mostly single clock cycle execution br To compensate for the simpler design compared with processors like the Intel and Motorola some additional design features were used br br Conditional execution of most instructions reduces branch overhead and compensates for the lack of a branch predictor in early chips br Arithmetic instructions alter condition codes only when desired br bit barrel shifter can be used without performance penalty with most arithmetic instructions and address calculations br Has powerful indexed addressing modes br A link register supports fast leaf function calls br A simple but fast priority level interrupt subsystem has switched register banks br br br Arithmetic instructions br ARM includes integer arithmetic operations for add subtract and multiply some versions of the architecture also support divide operations br ARM supports bit bit multiplies with either a bit result or bit result though Cortex M M M cores do not support bit results Some ARM cores also support bit bit and bit bit multiplies br The divide instructions are only included in the following ARM architectures br br Armv M and Armv E M architectures always include divide instructions br Armv R architecture always includes divide instructions in the Thumb instruction set but optionally in its bit instruction set br Armv A architecture optionally includes the divide instructions The instructions might not be implemented or implemented only in the Thumb instruction set or implemented in both the Thumb and ARM instruction sets or implemented if the Virtualization Extensions are included br br br Registers br br Registers R through R are the same across all CPU modes they are never banked br Registers R through R are the same across all CPU modes except FIQ mode FIQ mode has its own distinct R through R registers br R and R are banked across all privileged CPU modes except system mode That is each mode that can be entered because of an exception has its own R and R These registers generally contain the stack pointer and the return address from function calls respectively br Aliases br br R is also referred to as SP the stack pointer br R is also referred to as LR the link register br R is also referred to as PC the program counter br The Current Program Status Register CPSR has the following bits br br M bits is the processor mode bits br T bit is the Thumb state bit br F bit is the FIQ disable bit br I bit is the IRQ disable bit br A bit is the imprecise data abort disable bit br E bit is the data endianness bit br IT bits and is the if then state bits br GE bits is the greater than or equal to bits br DNM bits is the do not modify bits br J bit is the Java state bit br Q bit is the sticky overflow bit br V bit is the overflow bit br C bit is the carry borrow extend bit br Z bit is the zero bit br N bit is the negative less than bit br br br Conditional execution br Almost every ARM instruction has a conditional execution feature called predication which is implemented with a bit condition code selector the predicate To allow for unconditional execution one of the four bit codes causes the instruction to be always executed Most other CPU architectures only have condition codes on branch instructions br Though the predicate takes up four of the bits in an instruction code and thus cuts down significantly on the encoding bits available for displacements in memory access instructions it avoids branch instructions when generating code for small if statements Apart from eliminating the branch instructions themselves this preserves the fetch decode execute pipeline at the cost of only one cycle per skipped instruction br An algorithm that provides a good example of conditional execution is the subtraction based Euclidean algorithm for computing the greatest common divisor In the C programming language the algorithm can be written as br br The same algorithm can be rewritten in a way closer to target ARM instructions as br br and coded in assembly language as br br which avoids the branches around the then and else clauses If r and r are equal then neither of the SUB instructions will be executed eliminating the need for a conditional branch to implement the while check at the top of the loop for example had SUBLE less than or equal been used br One of the ways that Thumb code provides a more dense encoding is to remove the four bit selector from non branch instructions br br br Other features br Another feature of the instruction set is the ability to fold shifts and rotates into the data processing arithmetic logical and register register move instructions so that for example the statement in C language br br could be rendered as a one word one cycle instruction br br This results in the typical ARM program being denser than expected with fewer memory accesses thus the pipeline is used more efficiently br The ARM processor also has features rarely seen in other RISC architectures such as PC relative addressing indeed on the bit ARM the PC is one of its registers and pre and post increment addressing modes br The ARM instruction set has increased over time Some early ARM processors before ARM TDMI for example have no instruction to store a two byte quantity br br br Pipelines and other implementation issues br The ARM and earlier implementations have a three stage pipeline the stages being fetch decode and execute Higher performance designs such as the ARM have deeper pipelines Cortex A has thirteen stages Additional implementation changes for higher performance include a faster adder and more extensive branch prediction logic The difference between the ARM DI and ARM DMI cores for example was an improved multiplier hence the added M br br br Coprocessors br The ARM architecture pre Armv provides a non intrusive way of extending the instruction set using coprocessors that can be addressed using MCR MRC MRRC MCRR and similar instructions The coprocessor space is divided logically into coprocessors with numbers from to coprocessor cp being reserved for some typical control functions like managing the caches and MMU operation on processors that have one br In ARM based machines peripheral devices are usually attached to the processor by mapping their physical registers into ARM memory space into the coprocessor space or by connecting to another device a bus that in turn attaches to the processor Coprocessor accesses have lower latency so some peripherals for example an XScale interrupt controller are accessible in both ways through memory and through coprocessors br In other cases chip designers only integrate hardware using the coprocessor mechanism For example an image processing engine might be a small ARM TDMI core combined with a coprocessor that has specialised operations to support a specific set of HDTV transcoding primitives br br br Debugging br br All modern ARM processors include hardware debugging facilities allowing software debuggers to perform operations such as halting stepping and breakpointing of code starting from reset These facilities are built using JTAG support though some newer cores optionally support ARM s own two wire SWD protocol In ARM TDMI cores the D represented JTAG debug support and the I represented presence of an EmbeddedICE debug module For ARM and ARM core generations EmbeddedICE over JTAG was a de facto debug standard though not architecturally guaranteed br The ARMv architecture defines basic debug facilities at an architectural level These include breakpoints watchpoints and instruction execution in a Debug Mode similar facilities were also available with EmbeddedICE Both halt mode and monitor mode debugging are supported The actual transport mechanism used to access the debug facilities is not architecturally specified but implementations generally include JTAG support br There is a separate ARM CoreSight debug architecture which is not architecturally required by ARMv processors br br br Debug Access Port br The Debug Access Port DAP is an implementation of an ARM Debug Interface br There are two different supported implementations the Serial Wire JTAG Debug Port SWJ DP and the Serial Wire Debug Port SW DP br CMSIS DAP is a standard interface that describes how various debugging software on a host PC can communicate over USB to firmware running on a hardware debugger which in turn talks over SWD or JTAG to a CoreSight enabled ARM Cortex CPU br br br DSP enhancement instructions br To improve the ARM architecture for digital signal processing and multimedia applications DSP instructions were added to the instruction set These are signified by an E in the name of the ARMv TE and ARMv TEJ architectures E variants also imply T D M and I br The new instructions are common in digital signal processor DSP architectures They include variations on signed multiply accumulate saturated add and subtract and count leading zeros br First introduced in this extension of the core instruction set contrasted with ARM s earlier DSP coprocessor known as Piccolo which employed a distinct incompatible instruction set whose execution involved a separate program counter Piccolo instructions employed a distinct register file of sixteen bit registers with some instructions combining registers for use as bit accumulators and other instructions addressing bit half registers Some instructions were able to operate on two such bit values in parallel Communication with the Piccolo register file involved load to Piccolo and store from Piccolo coprocessor instructions via two buffers of eight bit entries Described as reminiscent of other approaches notably Hitachi s SH DSP and Motorola s Piccolo did not employ dedicated local memory and relied on the bandwidth of the ARM core for DSP operand retrieval impacting concurrent performance Piccolo s distinct instruction set also proved not to be a good compiler target br br br SIMD extensions for multimedia br Introduced in the ARMv architecture this was a precursor to Advanced SIMD also named Neon br br br Jazelle br br Jazelle DBX Direct Bytecode eXecution is a technique that allows Java bytecode to be executed directly in the ARM architecture as a third execution state and instruction set alongside the existing ARM and Thumb mode Support for this state is signified by the J in the ARMv TEJ architecture and in ARM EJ S and ARM EJ S core names Support for this state is required starting in ARMv except for the ARMv M profile though newer cores only include a trivial implementation that provides no hardware acceleration br br br Thumb br To improve compiled code density processors since the ARM TDMI released in have featured the Thumb compressed instruction set which have their own state The T in TDMI indicates the Thumb feature When in this state the processor executes the Thumb instruction set a compact bit encoding for a subset of the ARM instruction set Most of the Thumb instructions are directly mapped to normal ARM instructions The space saving comes from making some of the instruction operands implicit and limiting the number of possibilities compared to the ARM instructions executed in the ARM instruction set state br In Thumb the bit opcodes have less functionality For example only branches can be conditional and many opcodes are restricted to accessing only half of all of the CPU s general purpose registers The shorter opcodes give improved code density overall even though some operations require extra instructions In situations where the memory port or bus width is constrained to less than bits the shorter Thumb opcodes allow increased performance compared with bit ARM code as less program code may need to be loaded into the processor over the constrained memory bandwidth br Unlike processor architectures with variable length or bit instructions such as the Cray and Hitachi SuperH the ARM and Thumb instruction sets exist independently of each other Embedded hardware such as the Game Boy Advance typically have a small amount of RAM accessible with a full bit datapath the majority is accessed via a bit or narrower secondary datapath In this situation it usually makes sense to compile Thumb code and hand optimise a few of the most CPU intensive sections using full bit ARM instructions placing these wider instructions into the bit bus accessible memory br The first processor with a Thumb instruction decoder was the ARM TDMI All processors supporting bit instruction sets starting with ARM and including XScale have included a Thumb instruction decoder It includes instructions adopted from the Hitachi SuperH which was licensed by ARM ARM s smallest processor families Cortex M and M implement only the bit Thumb instruction set for maximum performance in lowest cost applications ARM processors that don t support bit addressing also omit Thumb br br br Thumb br Thumb technology was introduced in the ARM core announced in Thumb extends the limited bit instruction set of Thumb with additional bit instructions to give the instruction set more breadth thus producing a variable length instruction set A stated aim for Thumb was to achieve code density similar to Thumb with performance similar to the ARM instruction set on bit memory br Thumb extends the Thumb instruction set with bit field manipulation table branches and conditional execution At the same time the ARM instruction set was extended to maintain equivalent functionality in both instruction sets A new Unified Assembly Language UAL supports generation of either Thumb or ARM instructions from the same source code versions of Thumb seen on ARMv processors are essentially as capable as ARM code including the ability to write interrupt handlers This requires a bit of care and use of a new IT if then instruction which permits up to four successive instructions to execute based on a tested condition or on its inverse When compiling into ARM code this is ignored but when compiling into Thumb it generates an actual instruction For example br br All ARMv chips support the Thumb instruction set All chips in the Cortex A series that support ARMv all Cortex R series and all ARM series support both ARM instruction set state and Thumb instruction set state while chips in the Cortex M series support only the Thumb instruction set br br br Thumb Execution Environment ThumbEE br ThumbEE erroneously called Thumb EE in some ARM documentation which was marketed as Jazelle RCT Runtime Compilation Target was announced in and deprecated in It first appeared in the Cortex A processor ThumbEE is a fourth instruction set state making small changes to the Thumb extended instruction set These changes make the instruction set particularly suited to code generated at runtime e g by JIT compilation in managed Execution Environments ThumbEE is a target for languages such as Java C Perl and Python and allows JIT compilers to output smaller compiled code without reducing performance br New features provided by ThumbEE include automatic null pointer checks on every load and store instruction an instruction to perform an array bounds check and special instructions that call a handler In addition because it utilises Thumb technology ThumbEE provides access to registers r r where the Jazelle DBX Java VM state is held Handlers are small sections of frequently called code commonly used to implement high level languages such as allocating memory for a new object These changes come from repurposing a handful of opcodes and knowing the core is in the new ThumbEE state br On November Arm deprecated any use of the ThumbEE instruction set and Armv removes support for ThumbEE br br br Floating point VFP br VFP Vector Floating Point technology is a floating point unit FPU coprocessor extension to the ARM architecture implemented differently in Armv coprocessors not defined there It provides low cost single precision and double precision floating point computation fully compliant with the ANSI IEEE Std Standard for Binary Floating Point Arithmetic VFP provides floating point computation suitable for a wide spectrum of applications such as PDAs smartphones voice compression and decompression three dimensional graphics and digital audio printers set top boxes and automotive applications The VFP architecture was intended to support execution of short vector mode instructions but these operated on each vector element sequentially and thus did not offer the performance of true single instruction multiple data SIMD vector parallelism This vector mode was therefore removed shortly after its introduction to be replaced with the much more powerful Advanced SIMD also named Neon br Some devices such as the ARM Cortex A have a cut down VFPLite module instead of a full VFP module and require roughly ten times more clock cycles per float operation Pre Armv architecture implemented floating point SIMD with the coprocessor interface Other floating point and or SIMD units found in ARM based processors using the coprocessor interface include FPA FPE iwMMXt some of which were implemented in software by trapping but could have been implemented in hardware They provide some of the same functionality as VFP but are not opcode compatible with it FPA also provides extended precision but implements correct rounding required by IEEE only in single precision br br VFPv br Obsolete br VFPv br An optional extension to the ARM instruction set in the ARMv TE ARMv TEJ and ARMv architectures VFPv has bit FPU registers br VFPv or VFPv D br Implemented on most Cortex A and A ARMv processors It is backward compatible with VFPv except that it cannot trap floating point exceptions VFPv has bit FPU registers as standard adds VCVT instructions to convert between scalar float and double adds immediate mode to VMOV such that constants can be loaded into FPU registers br VFPv D br As above but with only bit FPU registers Implemented on Cortex R and R processors and the Tegra Cortex A br VFPv F br Uncommon it supports IEEE half precision bit floating point as a storage format br VFPv or VFPv D br Implemented on Cortex A and A ARMv processors Cortex A optionally has VFPv D in the case of an FPU with Neon VFPv has bit FPU registers as standard adds both half precision support as a storage format and fused multiply accumulate instructions to the features of VFPv br VFPv D br As above but it has only bit FPU registers Implemented on Cortex A and A processors in the case of an FPU without Neon br VFPv D M br Implemented on Cortex M when single and double precision floating point core option exists br In Debian Linux and derivatives such as Ubuntu and Linux Mint armhf ARM hard float refers to the ARMv architecture including the additional VFP D floating point hardware extension and Thumb above Software packages and cross compiler tools use the armhf vs arm armel suffixes to differentiate br br br Advanced SIMD Neon br The Advanced SIMD extension also known as Neon or MPE Media Processing Engine is a combined and bit SIMD instruction set that provides standardised acceleration for media and signal processing applications Neon is included in all Cortex A devices but is optional in Cortex A devices Neon can execute MP audio decoding on CPUs running at MHz and can run the GSM adaptive multi rate AMR speech codec at MHz It features a comprehensive instruction set separate register files and independent execution hardware Neon supports and bit integer and single precision bit floating point data and SIMD operations for handling audio and video processing as well as graphics and gaming processing In Neon the SIMD supports up to operations at the same time The Neon hardware shares the same floating point registers as used in VFP Devices such as the ARM Cortex A and Cortex A support bit vectors but will execute with bits at a time whereas newer Cortex A devices can execute bits at a time br A quirk of Neon in Armv devices is that it flushes all subnormal numbers to zero and as a result the GCC compiler will not use it unless funsafe math optimizations which allows losing denormals is turned on Enhanced Neon defined since Armv does not have this quirk but as of GCC the same flag is still required to enable Neon instructions On the other hand GCC does consider Neon safe on AArch for Armv br ProjectNe is ARM s first open source project from its inception while they acquired an older project now named Mbed TLS The Ne library is a set of common useful functions written in both Neon and C for compatibility The library was created to allow developers to use Neon optimisations without learning Neon but it also serves as a set of highly optimised Neon intrinsic and assembly code examples for common DSP arithmetic and image processing routines The source code is available on GitHub br br br ARM Helium technology br Helium is the M Profile Vector Extension MVE It adds more than scalar and vector instructions br br br Security extensions br br br TrustZone for Cortex A profile br The Security Extensions marketed as TrustZone Technology is in ARMv KZ and later application profile architectures It provides a low cost alternative to adding another dedicated security core to an SoC by providing two virtual processors backed by hardware based access control This lets the application core switch between two states referred to as worlds to reduce confusion with other names for capability domains to prevent information leaking from the more trusted world to the less trusted world This world switch is generally orthogonal to all other capabilities of the processor thus each world can operate independently of the other while using the same core Memory and peripherals are then made aware of the operating world of the core and may use this to provide access control to secrets and code on the device br Typically a rich operating system is run in the less trusted world with smaller security specialised code in the more trusted world aiming to reduce the attack surface Typical applications include DRM functionality for controlling the use of media on ARM based devices and preventing any unapproved use of the device br In practice since the specific implementation details of proprietary TrustZone implementations have not been publicly disclosed for review it is unclear what level of assurance is provided for a given threat model but they are not immune from attack br Open Virtualization is an open source implementation of the trusted world architecture for TrustZone br AMD has licensed and incorporated TrustZone technology into its Secure Processor Technology Enabled in some but not all products AMD s APUs include a Cortex A processor for handling secure processing In fact the Cortex A TrustZone core had been included in earlier AMD products but was not enabled due to time constraints br Samsung Knox uses TrustZone for purposes such as detecting modifications to the kernel storing certificates and attestating keys br br br TrustZone for Armv M for Cortex M profile br The Security Extension marketed as TrustZone for Armv M Technology was introduced in the Armv M architecture While containing similar concepts to TrustZone for Armv A it has a different architectural design as world switching is performed using branch instructions instead of using exceptions It also supports safe interleaved interrupt handling from either world regardless of the current security state Together these features provide low latency calls to the secure world and responsive interrupt handling ARM provides a reference stack of secure world code in the form of Trusted Firmware for M and PSA Certified br br br No execute page protection br As of ARMv the ARM architecture supports no execute page protection which is referred to as XN for eXecute Never br br br Large Physical Address Extension LPAE br The Large Physical Address Extension LPAE which extends the physical address size from bits to bits was added to the Armv A architecture in br The physical address size may be even larger in processors based on the bit Armv A architecture For example it is bits in Cortex A and Cortex A AE br br br Armv R and Armv M br The Armv R and Armv M architectures announced after the Armv A architecture share some features with Armv A However Armv M does not include any bit AArch instructions and Armv R originally did not include any AArch instructions those instructions were added to Armv R later br br br Armv M br The Armv M architecture announced in February is an enhancement of the Armv M architecture It brings new features including br br A new vector instruction set extension The M Profile Vector Extension MVE or Helium is for signal processing and machine learning applications br Additional instruction set enhancements for loops and branches Low Overhead Branch Extension br Instructions for half precision floating point support br Instruction set enhancement for TrustZone management for Floating Point Unit FPU br New memory attribute in the Memory Protection Unit MPU br Enhancements in debug including Performance Monitoring Unit PMU Unprivileged Debug Extension and additional debug support focus on signal processing application developments br Reliability Availability and Serviceability RAS extension br br br bit architecture br br br Armv br br br Armv A br br Announced in October Armv A often called ARMv while the Armv R is also available represents a fundamental change to the ARM architecture It supports two Execution states a bit state named AArch and a bit state named AArch In the AArch state a new bit A instruction set is supported in the AArch state two instruction sets are supported the original bit instruction set named A and the bit Thumb instruction set named T AArch provides user space compatibility with Armv A The processor state can change on an Exception level change this allows bit applications to be executed in AArch state under a bit OS whose kernel executes in AArch state and allows a bit OS to run in AArch state under the control of a bit hypervisor running in AArch state ARM announced their Cortex A and Cortex A cores on October Apple was the first to release an Armv A compatible core in a consumer product Apple A in iPhone S AppliedMicro using an FPGA was the first to demo Armv A The first Armv A SoC from Samsung is the Exynos used in the Galaxy Note which features two clusters of four Cortex A and Cortex A cores in a big LITTLE configuration but it will run only in AArch mode br To both AArch and AArch Armv A makes VFPv v and advanced SIMD Neon standard It also adds cryptography instructions supporting AES SHA SHA and finite field arithmetic AArch was introduced in Armv A and its subsequent revision AArch is not included in the bit Armv R and Armv M architectures br An ARMv A processor can support one or both of AArch and AArch it may support AArch and AArch at lower Exception levels and only AArch at higher Exception levels For example the ARM Cortex A supports only AArch the ARM Cortex A supports only AArch and the ARM Cortex A supports both AArch and AArch An ARMv A processor must support AArch at all Exception levels and may support AArch at EL br br br Armv R br Optional AArch support was added to the Armv R profile with the first ARM core implementing it being the Cortex R It adds the A instruction set br br br Armv br br br Armv A br Announced in March the updated architecture places a focus on secure execution and compartmentalisation br br br Arm SystemReady br Arm SystemReady formerly named Arm ServerReady is a certification program that helps land the generic off the shelf operating systems and hypervisors on to the Arm based systems from datacenter servers to industrial edge and IoT devices The key building blocks of the program are the specifications for minimum hardware and firmware requirements that the operating systems and hypervisors can rely upon These specifications are br br Base System Architecture BSA and the market segment specific supplements e g Server BSA supplement br Base Boot Requirements BBR and Base Boot Security Requirements BBR br These specifications are co developed by Arm and its partners in the System Architecture Advisory Committee SystemArchAC br Architecture Compliance Suite ACS is the test tools that help to check the compliance of these specifications The Arm SystemReady Requirements Specification documents the requirements of the certifications br This program was introduced by Arm in at the first DevSummit event Its predecessor Arm ServerReady was introduced in at the Arm TechCon event This program currently includes four bands br br SystemReady SR this band is for servers and workstations that support operating systems and hypervisors that expect UEFI ACPI and SMBIOS interfaces Windows Red Hat Enterprise Linux and VMware ESXi Arm require these interfaces while other Linux and BSD distros can also support br SystemReady LS LinuxBoot System this band is for servers that hyperscalers use to support Linux operating systems that expect LinuxBoot firmware along with the ACPI and SMBIOS interfaces br SystemReady ES Embedded System this band is for the industrial edge and IoT devices that support operating systems and hypervisors that expect UEFI ACPI and SMBIOS interfaces Windows IoT Enterprise Red Hat Enterprise Linux and VMware ESXi Arm require these interfaces while other Linux and BSD distros can also support br SystemReady IR IoT Ready this band is for the industrial edge and IoT devices that support operating systems that expect UEFI and devicetree interfaces Embedded Linux e g Yocto and some Linux BSD distros e g Fedora Ubuntu Debian and OpenSUSE can also support br br br PSA Certified br PSA Certified formerly named Platform Security Architecture is an architecture agnostic security framework and evaluation scheme It is intended to help secure Internet of things IoT devices built on system on a chip SoC processors It was introduced to increase security where a full trusted execution environment is too large or complex br The architecture was introduced by Arm in at the annual TechCon event Although the scheme is architecture agnostic it was first implemented on Arm Cortex M processor cores intended for microcontroller use PSA Certified includes freely available threat models and security analyses that demonstrate the process for deciding on security features in common IoT products It also provides freely downloadable application programming interface API packages architectural specifications open source firmware implementations and related test suites br Following the development of the architecture security framework in the PSA Certified assurance scheme launched two years later at Embedded World in PSA Certified offers a multi level security evaluation scheme for chip vendors OS providers and IoT device makers The Embedded World presentation introduced chip vendors to Level Certification A draft of Level protection was presented at the same time Level certification became a usable standard in February br The certification was created by PSA Joint Stakeholders to enable a security by design approach for a diverse set of IoT products PSA Certified specifications are implementation and architecture agnostic as a result they can be applied to any chip software or device The certification also removes industry fragmentation for IoT product manufacturers and developers br br br Operating system support br br br bit operating systems br br br Historical operating systems br The first bit ARM based personal computer the Acorn Archimedes was originally intended to run an ambitious operating system called ARX The machines shipped with RISC OS which was also used on later ARM based systems from Acorn and other vendors Some early Acorn machines were also able to run a Unix port called RISC iX Neither is to be confused with RISC os a contemporary Unix variant for the MIPS architecture br br br Embedded operating systems br The bit ARM architecture is supported by a large number of embedded and real time operating systems including br br br Mobile device operating systems br As of March the bit ARM architecture used to be the primary hardware environment for most mobile device operating systems such as the following but many of these platforms such as Android and Apple iOS have evolved to the bit ARM architecture br br Formerly but now discontinued br br br Desktop and server operating systems br The bit ARM architecture is supported by RISC OS and by multiple Unix like operating systems including br br FreeBSD br NetBSD br OpenBSD br OpenSolaris br several Linux distributions such as br Debian br Armbian br Gentoo br Ubuntu br Raspberry Pi OS formerly Raspbian br Slackware br br br bit operating systems br br br Embedded operating systems br INTEGRITY br OSE br SCIOPTA br seL br Pharos br FreeRTOS br QNX br VxWorks br Zephyr br br br Mobile device operating systems br Android supports Armv A in Android Lollipop and later br iOS supports Armv A in iOS and later on bit Apple SoCs iOS and later and iPadOS only support bit ARM processors and applications br Mobian br PostmarketOS br Arch Linux ARM br Manjaro br br br Desktop and server operating systems br Support for Armv A was merged into the Linux kernel version in late Armv A is supported by a number of Linux distributions such as br Debian br Armbian br Alpine Linux br Ubuntu br Fedora br openSUSE br SUSE Linux Enterprise br RHEL br Raspberry Pi OS formerly Raspbian br Support for Armv A was merged into FreeBSD in late br OpenBSD has Armv support as of br NetBSD has Armv support since early br Windows Windows runs bit x and bit ARM applications as well as native ARM desktop apps Windows runs native ARM apps and can also run x and x apps via emulation Support for bit ARM apps in the Microsoft Store has been available since November br macOS has ARM support since late the first release to support ARM is macOS Big Sur Rosetta adds support for x applications but not virtualization of x computer platforms br br br Porting to or bit ARM operating systems br Windows applications recompiled for ARM and linked with Winelib from the Wine project can run on bit or bit ARM in Linux FreeBSD or other compatible operating systems x binaries e g when not specially compiled for ARM have been demonstrated on ARM using QEMU with Wine on Linux and more but do not work at full speed or same capability as with Winelib br br br Notes br br br See also br br Amber an open source ARM compatible processor core br AMULET an asynchronous implementation of the ARM architecture br Apple silicon br ARM Accredited Engineer certification program br ARM big LITTLE ARM s heterogeneous computing architecture br DynamIQ br ARMulator an instruction set simulator br Comparison of ARM processors br Meltdown security vulnerability br Reduced instruction set computer RISC br RISC V br Spectre security vulnerability br Unicore a register architecture based heavily on a bit ARM br br br br br br Citations br br br Bibliography br Evans Matt December The Ultimate Acorn Archimedes talk Schedule Chaos Communication Congress YouTube Archived from the original on December via media ccc de br br br Further reading br br br External links br br Official website ARM Ltd br br br Architecture manuals br ARM Limited ARM Architecture Reference Manual documentation service arm com Retrieved July covers ARMv ARMv T ARMv T ARMv TExP ARMv TE ARMv TEJ and ARMv br ARM Limited Armv M Architecture Reference Manual ARM documentation Retrieved July br ARM Limited ARM Architecture Reference Manual ARMv A and ARMv R edition ARM documentation Retrieved July br ARM Limited ARMv M Architecture Reference Manual ARM documentation Retrieved August br ARM Limited Arm Architecture Reference Manual for A profile architecture ARM documentation Retrieved August br ARM Limited ARM Architecture Reference Manual Supplement ARMv for the ARMv R AArch architecture profile ARM documentation Retrieved July br ARM Limited Arm Architecture Reference Manual Supplement Armv for Armv R AArch architecture profile ARM documentation Retrieved August br ARM Limited Armv M Architecture Reference Manual ARM documentation Retrieved August br ARM Limited Arm Armv A A Instruction Set Architecture ARM documentation Retrieved July br ARM Virtualization Extensions Archived from the original on December br br br Quick reference cards br br br Instructions br Thumb Archived June at the Wayback Machine br ARM and Thumb Archived June at the Wayback Machine br Vector Floating Point Archived June at the Wayback Machine br br br Opcodes br Thumb Archived July at the Wayback Machine Additional archives August br ARM Archived June at the Wayback Machine Additional archives August br GNU Assembler Directives Archived April at the Wayback Machine Additional archives August 