title: OpenAL
id: 563960
OpenAL Open Audio Library is a cross platform audio application programming interface API It is designed for efficient rendering of multichannel three dimensional positional audio Its API style and conventions deliberately resemble those of OpenGL OpenAL is an environmental D audio library which can add realism to a game by simulating attenuation degradation of sound over distance the Doppler effect change in frequency as a result of motion and material densities br OpenAL aimed to originally be an open standard and open source replacement for proprietary and generally incompatible with one another D audio APIs such as DirectSound and Core Audio though in practice has largely been implemented on various platforms as a wrapper around said proprietary APIs or as a proprietary and vendor specific fork While the reference implementation later became proprietary and unmaintained there are open source implementations such as OpenAL Soft available br br br History br OpenAL was originally developed in by Loki Software to help them in their business of porting Windows games to Linux After the demise of Loki the project was maintained for a time by the free software open source community and implemented on NVIDIA nForce sound cards and motherboards It was hosted and largely developed by Creative Technology until circa br Since the sample implementation by Creative has turned proprietary with the last releases in free licenses still accessible through the project s Subversion source code repository However OpenAL Soft is a widely used open source alternative and remains actively maintained and extended br While the OpenAL charter says that there will be an Architecture Review Board ARB modeled on the OpenGL ARB no such organization has ever been formed and the OpenAL specification is generally handled and discussed via email on its public mailing list br The original mailing list openal devel hosted by Creative ran from March to circa August Ryan C Gordon a Loki veteran who went on to develop Simple DirectMedia Layer started a new mailing list and website at OpenAL org in January As of February the list remains in use br br br API structure and functionality br The general functionality of OpenAL is encoded in source objects audio buffers and a single listener A source object contains a pointer to a buffer the velocity position and direction of the sound and the intensity of the sound The listener object contains the velocity position and direction of the listener and the general gain applied to all sound Buffers contain audio data in PCM format either or bit in either monaural or stereo format The rendering engine performs all necessary calculations for distance attenuation Doppler effect etc br The net result of all of this for the end user is that in a properly written OpenAL application sounds behave quite naturally as the user moves through the three dimensional space of the virtual world From a programmer s perspective very little additional work is required to make this happen in an existing OpenGL based D graphical application br Unlike the OpenGL specification the OpenAL specification includes two subsections of the API the core consisting of the actual OpenAL function calls and the ALC Audio Library Context API which is used to manage rendering contexts resource usage and locking in a cross platform manner There is also an ALUT Audio Library Utility Toolkit library that provides higher level convenience functions exactly analogous to OpenGL s GLUT br In order to provide additional functionality in the future OpenAL utilizes an extension mechanism Individual vendors are thereby able to include their own extensions into distributions of OpenAL commonly for the purpose of exposing additional functionality on their proprietary hardware Extensions can be promoted to ARB Architecture Review Board status indicating a standard extension which will be maintained for backwards compatibility ARB extensions have the prospect of being added to the core API after a period of time br For advanced digital signal processing and hardware accelerated sound effects the EFX Effects Extension or environmental audio extensions EAX can be used br br br Limitations br The single listener model in OpenAL is tailored to a single human user and is not fit for artificial intelligence or robotic simulations or multiple human participants as in collaborative musical performances br In these cases a multiple listener model is required OpenAL also fails to take into account sound propagation delays the speed of sound is used for the Doppler effect only The distance to a sound source only translates into an amplitude effect attenuation and not a delay Hence OpenAL cannot be used for time difference of arrival calculations unless that functionality is added in separately br In order to take full speed advantage of OpenAL a vendor hardware specific implementation is needed and these are seldom released as open source Many supported platforms in fact implement OpenAL as a wrapper which simply translates calls to the platform s native and often proprietary audio API On Windows if a vendor specific implementation is not detected it will fall back to the wrap oal dll wrapper library that translates OpenAL into DirectSound Generic Software or DirectSound D Generic Hardware the removal of the latter from Windows Vista onward has effectively broken generic hardware acceleration on modern versions of Windows br br br Supported platforms br The API is available on the following platforms and operating systems Android supports OpenSL ES AmigaOS x and x Bada BlackBerry BlackBerry PlayBook BSD iOS supports Core Audio IRIX Linux supports ALSA OSS PortAudio and PulseAudio Mac OS Mac OS and Mac OS X Core Audio Microsoft Windows supports DirectSound Windows Multimedia API and Windows Multimedia Device MMDevice API MorphOS OpenBSD Solaris QNX and AROS br Supported gaming devices are for instance GameCube PlayStation PlayStation Xbox Xbox Wii and PlayStation Portable br br br Applications br br br Games br The following video games are known to use OpenAL br br br Other applications br Blender D modelling and rendering tool uses OpenAL for its built in game engine br DMark Gamer s benchmarking tool br Dolphin emulator GameCube and Wii emulator br Vanda Engine uses OpenAL to simulate D and D sounds br Croquet Project br Bino Video player software that has support for stereoscopic D video and multi display video br br br Implementations br OpenAL SI br The OpenAL Sample Implementation is the original implementation from Loki and is not currently maintained br OpenAL Soft br OpenAL Soft is an LGPL licensed cross platform software implementation The library is meant as a free compatible update replacement to the now deprecated and proprietary OpenAL Sample Implementation OpenAL Soft supports mono stereo including HRTF and UHJ channel and B Format output Ambisonic assets are supported br AeonWave OpenAL br AeonWave OpenAL is an LGPL licensed OpenAL emulation layer that takes advantage of the hardware acceleration provided by the non free but low cost AeonWave D audio library for Linux and Windows made by Adalin B V The author claims that AeonWave OpenAL implementation renders D audio five on an AMD Athlon X to seven on an Intel Atom N times faster than either OpenAL SI or OpenAL Soft under the same conditions By using the AeonWave library this implementation supports HRTF as well as spatialised surround sound for up to eight speakers br Rapture D OpenAL Driver br The Rapture D OpenAL Driver is a non free commercial Windows only software implementation made by Blue Ripple Sound The library is intended as a high performance drop in replacement for other implementations It features br bit floating point audio path br High quality sample rate conversion used for various purposes including Doppler shift br High quality effects and filters br Support for multi channel sound sources including assets encoded using Ambisonics br The only limit on the number of sources or effects is CPU power can render hundreds of sound sources and multiple effects on relatively old hardware br Higher order Ambisonics HOA bus running at up to fourth order br Apple OpenAL br Apple ships an implementation of OpenAL in macOS and iOS It is a very thin layer over the D Mixer kAudioUnitSubType DMixer feature in the operating system This implementation was originally written by Ryan C Gordon for Altivec Mac OS X systems br MojoAL br Tiny single file full OpenAL implementation built on top of SDL by Ryan C Gordon br br br See also br br OpenCL br OpenML br OpenMAX AL br FMOD br Java OpenAL br irrKlang br Lightweight Java Game Library br Web Audio defines an API similar in some ways to OpenAL br br br br br br External links br OpenAL official website br Implementations br br OpenAL Soft br AeonWave OpenAL br Rapture D advanced OpenAL driver br Developer resources br br DevMaster net OpenAL Tutorials Note these tutorials are showing their age slightly by for instance using deprecated functions such as alutLoadWAVFile br OpenAL extension repository maintained by Raulshc as of with table of supported extensions per implementation br OpenAL package in Conan a C package manager