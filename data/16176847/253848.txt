title: Apple DOS
id: 253848
Apple DOS is the family of disk operating systems for the Apple II series of microcomputers from late through early It was superseded by ProDOS in Apple DOS has three major releases DOS DOS and DOS each one of these three releases was followed by a second minor bug fix release but only in the case of Apple DOS did that minor release receive its own version number Apple DOS The best known and most used version is Apple DOS in the and releases Prior to the release of Apple DOS Apple users had to rely on audio cassette tapes for data storage and retrieval br br br Version history br When Apple Computer introduced the Apple II in April the new computer had no disk drive or disk operating system DOS Although Apple co founder Steve Wozniak designed the Disk II controller late that year and believed that he could have written a DOS his co founder Steve Jobs decided to outsource the task The company considered using Digital Research s CP M but Wozniak sought an operating system that was easier to use On April Apple signed a contract with Shepardson Microsystems to write a DOS and deliver it within days Apple provided detailed specifications and early Apple employee Randy Wigginton worked closely with Shepardson s Paul Laughton as the latter wrote the operating system with punched cards and a minicomputer br There was no Apple DOS or Versions through were serially enumerated revisions during development which might as well have been called builds through Apple DOS a renamed issue of version was never publicly released due to bugs Apple published no official documentation until release br Apple DOS was publicly released in June slightly more than one year after the Apple II was introduced becoming the first disk based operating system for any Apple computer A bug fix release came later addressing a problem by means of its MASTER CREATE utility which was used to create Apple DOS master bootable disks The built in INIT command created disks that could be booted only on machines with at least the same amount of memory as the one that had created them MASTER CREATE includes a self relocating version of DOS that boots on Apples with any memory configuration br Apple DOS was released in to reflect changes in computer booting methods that were built into the successor of the Apple II the Apple II Plus New firmware included an auto start feature which automatically found a disk controller and booted from it when the system was powered up earning it the name Autostart ROM DOS was then released in July with some minor bug fixes br Apple DOS was released in It improves various functions of release while allowing for large gains in available floppy disk storage The newer P A P A PROMs in the disk controller enable the reading and writing of data at a higher density so sectors KiB can be stored per track instead of sectors KiB increasing capacity from KB to KB per side KB of which is used by filesystem overhead and a copy of DOS leaving KB for user programs and data DOS is however not backward compatible it cannot read or write DOS disks To address this problem Apple Computer released MUFFIN a utility to migrate Apple DOS files and programs to version disks Apple never offered a utility to copy in the other direction To migrate Apple DOS files back to version disks someone wrote a NIFFUM utility There are also commercial utilities such as Copy II Plus that can copy files between either format and eventually ProDOS as well Release also improves the ability to switch between Integer BASIC and Applesoft BASIC if the computer has a language card RAM expansion or firmware card br br br Technical details br Apple DOS disks use sectors of data per track each sector being bytes It uses tracks per disk side and can access only one side of the floppy disk unless the user flipped the disk over This gives the user a total storage capacity of KB per side of which about KB are used to store DOS itself and the disk directory leaving about KB for user programs br The first layer of the operating system is called RWTS which stands for read write track sector This layer consists of subroutines for track seeking sector reading and writing and disk formatting An API called the File Manager was built on top of this and implements functions to open close read write delete lock i e write protect unlock i e write enable and rename files and to verify a file s structural integrity There is also a CATALOG function for listing files on the diskette and an INIT function which formats a disk for use with DOS storing a copy of DOS on the first three tracks and storing a startup program usually called HELLO that is auto started when this disk is booted from On top of the File Manager API the main DOS routines are implemented which hook into the machine s BASIC interpreter and intercept all disk commands It provides BLOAD BSAVE and BRUN for storing loading and running binary executables LOAD RUN and SAVE are provided for BASIC programs and an EXEC was provided for running text based batch files consisting of BASIC and DOS commands Finally four types of files exist identified by letters in a catalog listing br br I Integer BASIC programs stored in a compact format not plain text br A Applesoft BASIC programs also stored in a packed space saving format br B Binary files either executable machine language programs or data files br T ASCII text files or plain text unpacked batch files br There are four additional file types R S and an additional A and B none of which are fully supported DOS recognizes these types for catalog listings only and there are no direct ways to manipulate these types of files The R type found some use for relocatable binary executable files A few programs support the S type as data files br A call vector table in the region of D FF allows programs to find DOS wherever it is loaded in the system memory For example if the DOS hooked into the BASIC CLI stops functioning it can be reinitialized by calling location D hence the traditional D G D go command to return to BASIC from the System Monitor br br br Boot loader br The process of loading Apple DOS involves a series of very tiny programs each of which carries the loading process forward a few steps before passing control to the next program in the chain br br Originally the Apple II ROM did not support disk booting at all At power up it would display the System Monitor prompt Both the Monitor and Integer BASIC have commands to redirect printing to a printer driver in a designated slot so the conventional way to boot from disk then was to command the computer to start printing to the disk interface card typically installed in slot using the command Control P from the ML monitor or PR from BASIC When the monitor or BASIC issued the next prompt character the computer would call the ROM routines on the disk card to print to it which would then proceed with the boot sequence One could use input redirection to similar ends Alternatively from the ML monitor the user could invoke the controller s boot code directly with a command like C G br When the Apple II Plus was introduced it included the ability to scan each expansion slot working downward from slot to slot for a bootable expansion card ROM and automatically call it br The expansion card ROM boot code attempts to boot from drive of the controller by moving the read write arm to track zero and attempting to read bytes from sector zero of that track If no readable disk is available the drive spins indefinitely until one is provided and the drive door is closed br Sector zero contains a small program which instructs the computer to read sectors through of track zero into memory using part of the ROM boot code rereading sector in the process br The program in sectors of track including the complete RWTS code then proceeds to load tracks and which contain the rest of DOS On a system master disk code is also included to determine the computer s RAM configuration and relocate DOS as high into system memory as possible up to the KB limit of the Apple II s main memory BFFF br Once DOS is loaded into memory it attempts to load and execute a startup program as indicated in the DOS program code This is commonly a BASIC language program named HELLO or some other name but DOS can be modified to run other types of programs at startup such as an executable binary file The appearance of the right hand bracket on the screen is an indication to the user that an Applesoft BASIC startup program is loading while a greater than symbol indicates that an Integer BASIC program is loading These are the prompts for the respective versions of BASIC which are being initialized at this point br The startup program then begins executing br br br Integer BASIC and Applesoft BASIC support br The original Apple II included BASIC interpreter in ROM known originally as Apple BASIC and later as Integer BASIC Variables in this language can only handle integer numbers ranging from to bit binary values floating point numbers are not supported Apple commissioned Microsoft to develop Applesoft BASIC capable of handling floating point numbers Applesoft BASIC cannot run Integer BASIC programs causing some users to resist upgrading to it br DOS was released when Applesoft BASIC was standard in ROM on the Apple II Plus so Apple designed it to support switching back and forth between the two BASIC interpreters Integer BASIC is loaded into RAM on the language card of Apple IIs if present and by typing FP or INT from BASIC the user can switch between either version br br br Decline br After Apple DOS entered into a state of stagnation as Apple concentrated its efforts on the ill fated Apple III computer and its SOS operating system Two more versions of Apple DOS both still called DOS but with some bug fixes and better support for the new Apple IIe model were released in early and mid br Without third party patches Apple DOS can only read floppy disks running in a inch Disk II drive and cannot access any other media such as hard disk drives virtual RAM drives or inch floppy disk drives The structure of Apple DOS disks particularly the free sector map which was restricted to part of a single sector is such that it is not possible to have more than KB available at a time per drive without a major rewrite of almost all sections of the code this is the main reason Apple abandoned this iteration of DOS in when Apple DOS was entirely replaced by ProDOS br ProDOS retains the sector low level format of DOS for inch disks but introduces a new high level format that is suitable for devices of up to MB this makes it suitable for hard disks from that era and inch floppies All the Apple computers from the II Plus onward can run both DOS and ProDOS the Plus requiring a Language Card memory expansion to use ProDOS the e and later models have built in Language Card hardware and so can run ProDOS straight ProDOS includes software to copy files from Apple DOS disks However many people who had no need for the improvements of ProDOS and who did not like its much higher memory footprint continued using Apple DOS or one of its clones long after The Apple convention of storing a bootable OS on every single floppy disk means that commercial software can be used no matter what OS the user owns A program called DOS MASTER enables users to have multiple virtual DOS partitions on a larger ProDOS volume which allows the use of many floppy based DOS programs with a hard disk br Shortly after ProDOS came out Apple withdrew permission from third parties to redistribute DOS but granted one company Syndicomm an exclusive license to resell DOS br Commercial games usually did not use Apple DOS instead having their own custom disk routines for copy protection purposes as well as for performance br br br Performance improvements br DOS s RWTS routine can read or write a track in two revolutions with proper interleaving A sector of the spinning disk passes under the read write head while the RWTS routine is decoding the just read sector or encoding the next one to be written and if this missed sector is the next one needed DOS needs to wait nearly an entire revolution of the disk for the sector to come around again This is called blowing a rev and is a well understood performance bottleneck in disk systems To avoid this the sectors on a DOS disk are arranged in an interleaved order br br e d c b a f br br Later ProDOS arranged the sectors in this order br br a b c d e f br br When reading and decoding sector then sector passes by so that sector the next sector likely to be needed will be available without waiting When reading sector two unneeded sectors f and pass by before sector is available and when reading sector the drive will always have to wait an extra revolution for sector on the same track However the sector actually needed in most cases will be on the next higher track and that track can be arranged relative to the last one to allow the needed time to decode the just read sector and move the head before sector comes around On average a full track can be read in two revolutions of the disk br The early DOS File Manager subverted this efficiency by copying bytes read from or written to a file one at a time between a disk buffer and main memory requiring more time and resulting in DOS constantly blowing revs when reading or writing files Programs became available early on to format disks with modified sector interleaves these disks give DOS more time between sectors to copy the data ameliorating the problem br Later programmers outside Apple rewrote the File Manager routines to avoid making the extra copy for most sectors of a file RWTS was instructed to read or write sectors directly to or from main memory rather than from a disk buffer whenever a full sector was to be transferred An early patch to provide this functionality was published in Call A P P L E Speedups in the LOAD command of three to five times were typical br This functionality soon appeared in commercial products such as Pronto DOS Diversi DOS Hyper DOS and David DOS along with additional features but it was never used in an official Apple DOS release Similar functionality was however employed by Apple s successor operating system ProDOS The Apple IIGS specific operating system GS OS would eventually employ an even more efficient scatter read technique that would read any sector that happened to be passing under the read head if it was needed for the file being read br br br Source code release br In more than years after the Apple II debuted the original Apple DOS source code was released by the Computer History Museum on its website It was donated by the original author Paul Laughton br br br See also br Apple GS OS br Apple ProDOS br GEOS bit operating system br br br br br br Further reading br Worth Don Lechner Pieter Beneath Apple DOS Quality Software ISBN br br br External links br Paul Laughton s account of writing DOS br Apple II History DOS br A Central com Archived at the Wayback Machine Apple II news and downloads br Everything com s DOS Article br Apple II DOS version source code released in with the permission of Apple Inc 