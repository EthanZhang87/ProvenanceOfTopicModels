title: Binary Runtime Environment for Wireless
id: 639649
Binary Runtime Environment for Wireless Brew MP Brew Qualcomm BREW or BREW was an application development platform created by Qualcomm originally for code division multiple access CDMA mobile phones featuring third party applications such as mobile games It was offered in some feature phones mostly with specifications similar to those of mid to high end mobile phones but not in smartphones First developed in as a platform for wireless applications on CDMA based mobile phones it debuted in September br As a software platform that can download and run small programs for playing games sending messages and sharing photos the main advantage of Brew MP was that the application developers can easily port their applications among all Brew MP devices by providing a standardized set of application programming interfaces Software for Brew MP enabled handsets can be developed in C or C using the freely downloadable Brew MP software development kit SDK The BREW runtime library is part of the wireless device on chip firmware or operating system to allow programmers to develop applications without needing to code for system interface or understand wireless applications BREW is described as a pseudo operating system but not a true mobile operating system BREW was not a virtual machine such as Java ME as it runs code natively br br br Software br For software developers Brew MP was a full set of application programming interfaces API that enables making software and applications in C C Java and was supported platform by an application specific integrated circuit ASIC It has a memory footprint of about KB MB From versions x to x before it had a smaller memory footprint of around KB BREW also features direct hardware access Versions before Brew MP ran relied on REX OS Qualcomm s own RTOS while Brew MP used Brew RTOS another RTOS for advanced feature phones Rather than using an interpreter based code BREW also relied on its own mobile hardware br br br Version history br br br BREW br Debuted in it was the first actual version of BREW Originally made for the Kyocera QCP which was the earliest BREW enabled phone commercially available and Sharp Z It made use of personal digital assistant level features usually for some applications and the ability to run BREW applications However it lacks advanced multimedia features and support for Java ME that were available in subsequent versions It was the only version of BREW to support monochrome screens as support for monochrome screens was removed in BREW BREW was the first version of Brew to run Java ME applications It was available in some BREW enabled phones in and early br br br BREW br Released in the mid it was installed for most of the BREW enabled phones in late until late It includes support for advanced multimedia playbacks the ability to play video and audio files as well as support for GPP multimedia formats connectivity for EV DO and Bluetooth support as well as screen savers and other improvements It also supports MIDP on BREW and it is backward compatible with BREW x applications br It was installed on most feature phones in Indonesia China and other countries since and was supported by a few carriers until br br br BREW br Released in mid it was installed for most of the BREW enabled phones in late until early It was the first version of BREW to have major changes and it has a vast majority of features for mobile phones such as WiFi connectivity OpenGL ES support for G GPS QWERTY based keypads and support for mobile screens that are higher than x It is backward compatible with BREW x applications but not with BREW x applications br It is also the first version of BREW to support D graphics rendering although it only uses software rendering which also supports JSR for Java ME games Hardware acceleration is also natively supported via OpenGL ES if a D acceleration chip is available br It was installed on most feature phones in the United States and in other countries since and it is still supported by a few carriers br br br BREW br Released in until it was only integrated on very few mobile phones such as the LG enV Touch and the LG Versa It has only a few improvements and it was later succeeded by Brew MP It has additional features that are also available in Brew MP such as accelerometer support and other changes br It is also used for the Zeebo console in Mexico and Brazil br br br Brew MP br Brew was released in with several new features including SVG images and was backward compatible with BREW x and x Some legacy APIs were deprecated in this version This release also marked the move to BREW s own real time kernel instead of utilizing Qualcomm s REX OS br The Brew MP developer page was shut down on July after eight years of inactivity br br br BREW application development br For testing applications during the development process the SDK includes a BREW emulator or starting with BREW version and above the BREW Simulator The BREW environment provides for multiple levels of application signatures One signature authenticates the developer Another signature verifies that an application has passed True BREW testing and is bestowed through Intertek The individual telecommunications operators configure the handsets to either enforce or ignore the presence and verification of this second signature BREW enabled handsets have a test mode that allows applications to bypass verification of the signature Qualcomm makes applications that have passed testing available to BREW enabled wireless network operators The operators are then able to choose which of these applications to make available to end users on their catalog br BREW s own signatures are protected by an Electronic Serial Number ESN and a Mobile Equipment Identifier MEID this means it prevents the unauthorized distribution sideloading of BREW applications to rd parties rather than carriers Once the application is downloaded OTA via a BREW based carrier the sig file will automatically generate an electronic serial number to its installed handset br The BREW emulator named BREW Simulator does not emulate handset hardware Instead the BREW application is compiled to native code and linked with a compatible BREW runtime library Because of this applications cannot be tested for platform bugs related to memory alignment and various firmware related glitches without a BREW handset operating in test mode br For testing purposes BREW applications can be transferred using a Universal Serial Bus USB or serial cable to any BREW compatible handset using BREW App Loader from Qualcomm A BREW application contains several components which if not present and valid cause the application to be automatically deleted on reboot This includes the compiled binary file a file that describes the application the features it uses and permissions requested a file that contains string and image resources if required and a file containing the application s digital signature br BREW applications may be unloaded from a consumer handset to save handset memory space This is referred to as Disable Restore and is a requirement of the True BREW Test Process Saved files are kept intact using Disable Restore and it is possible to reload the application without paying for it again In a Disable situation all bar mod and sig files are deleted from the handset while any other files remain in their original place During the Restore operation the bar mod and sig files are downloaded from the carrier s mobile store and the previously disabled application will have full functionality remaining The Disable Restore process is only available to consumer users once the handset s memory is full br On May Qualcomm and Adobe announced a partnership to integrate Adobe Flash Lite as a supported user interface on BREW br Since March the least expensive digital signature package for developers costs US for application submissions br br br Business model implications availability br Strictly speaking time to market can take longer with BREW than with Java ME because of Qualcomm BREW s rigorous certification requirements This certification process may be perceived as an advantage by established software developers because the difficulties associated with testing and development costs create a high cost of entry to developers with low budgets and little time resulting in less market dilution Specifically developers of casual games run less risk of having to compete with freeware workalikes developed and self published by hobbyists However this comes at a cost to the end user as there is less competition to develop the best solution at the lowest price to the end user br br After an application is written it takes two weeks per iteration of True BREW testing each time the application fails the test br Next negotiations with carrier s commence br Then if successful the carrier will spend time retesting the application with their own tests on their network br Finally rolling out a new version means starting the process over again br br br Differences between Java ME and BREW br br Currently most developers choose to support both Java ME and BREW or only Java ME Java ME may offer a lower cost to the market because most carriers allow non certified Java ME applications to run on their phones Java ME phones have a larger market share than BREW enabled handsets Java ME is widely used in Europe while BREW is primarily used in the U S and Japan One of the initial advantages of BREW was that Verizon made it easy to purchase applications from the phone while most Java ME carriers did not However most carriers of Java ME phones now offer easy to access purchasing portals br Owing to its different APIs Java ME relies on Java s virtual machine interpreter based code which is technically slower than BREW which uses native C C plus and direct hardware access especially for games Java ME has limited subset of APIs both for applications and games However rd party APIs and implementations such as MascotCapsule by HI CORPORATION D rendering API and DoJa Star by NTT Docomo are available but not popular and successful outside Japan particularly device adoption BREW on the other hand relies on its own APIs and direct hardware access br Performance for Java ME applications and games are slower than BREW For D games Java ME uses JSR M G which D games that are developed on Java ME are slower which results in frames per second on some most handsets and have limited graphics while BREW uses either software rendering if the BREW handset does not have a D acceleration chip or OpenGL ES which it can take advantage of its performance br Unlike the Java ME when the BREW application crashes the phone will cause a reboot due to BREW can t handle and recover while the application crashes it creates SYS EXCEPT Digit Number into the except folder on the root of directory then the phone will automatically reboot by itself when the Java ME application crashes under BREW Java ME will handle correctly and recover them from phone rebooting by itself br Some few handset manufacturers do not allow to integrate Java ME s virtual machine on a few of their phones br There are now commercial technologies to fully automate porting from Java ME to BREW This reduces the entry barrier to produce BREW applications by eliminating the need to develop two versions of the same application in both Java and C C br br br System failure br System failure in BREW is caused by the components are stopped working properly a file required for a BREW application is missing application crash or some other errors It creates the SYS EXCEPT XXXX file inside the except folder on the root of directory BREW s system failure has variants the component error and the reboot of death br br br Component error example c XXXXX br br Component error is an error that will display a black white or blue screen with an error text for about seconds if a component stopped working properly then the phone will reboot by itself This error may vary depending on your activity for example br br fs dir c file system error br mdsptask c task error br oemheap x c heap violation br memory c memory corruption br nvm c NVM check violation br srch mdsp c index error br callheap c call error br The probability of this variant to occur is very rare as a reboot of death is more common Here s an example of these activities to trigger this variant br br Undervolting the phone while it s running it will cause memory corruption usually if the battery is near flat on modern devices undervoltage protection was added e g LG VX LG VX and LG PM br The phone is at a defective condition Usually if this happened the phone will trigger the reboot of death instead of displaying a component error br brew nvm or efs private folder is removed fs dir c or nvm c br br br Reboot of death br br A reboot of death is an error that will reboot the phone by itself instead of displaying a black white or blue screen with text The rarity of this variant to occur is much more common Here s an example of these activities to trigger this variant br br Crashing an application br Removing the R UIM card br The phone is at defective condition br Incorrectly entering an SP code br Application that requires files are missing br Running the exception test on engineering mode br br br Device usage and carrier availability br br br br Qualcomm BREW is used by some mobile phone manufacturers and mobile networks however most often the end user does not know this since mobile phones running BREW most often lack any Qualcomm BREW branding and BREW runs in the background with the custom skins of the mobile phone manufacturer or operator on top Qualcomm BREW is used by Sprint Nextel metroPCS U S Cellular Verizon Syringa Wireless Cricket Wireless and AT T in the HTC Freestyle in the US KDDI in Japan KT and SK Telecom in South Korea China Telecom in China MOVILNET and BellSouth Chile in Latin America Sistema Shyam now MTS in India and by the network in much of Europe the UK and Australia on many mobile phones produced especially for their network br Because BREW is only offered to mobile networks that operates in CDMA other countries with the exception of parts of Europe the UK and Australia via the network India Japan and China do not have BREW because they do not have CDMA networks br Manufacturers such as Huawei INQ Mobile Amoi LG Samsung Mobile ZTE and HTC amongst others use Qualcomm BREW in some of their mobile phones and it is featured in UK phones such as the Skypephone INQ ZTE Z and Huawei u Touch Tectoy s Zeebo is the only game console to use BREW Motorola s own T as well as the RAZR V m also use Qualcomm BREW br br br See also br Java ME BREW s competitor br Mobile application development How BREW stacks up against the alternatives on mobile platforms br Platform computing br Remo Sync br Smartphone br br br br br br External links br Official website br In depth discussion of BREW and other mobile platforms from European market perspective br Adobe Flash Lite for BREW Datasheet pdf br cxBrewUnit BREW Unit Test Framework Harness for C C Unit Test 