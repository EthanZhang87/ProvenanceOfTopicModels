title: Advanced Encryption Standard
id: 1260
The Advanced Encryption Standard AES also known by its original name Rijndael Dutch pronunciation r inda l is a specification for the encryption of electronic data established by the U S National Institute of Standards and Technology NIST in br AES is a variant of the Rijndael block cipher developed by two Belgian cryptographers Joan Daemen and Vincent Rijmen who submitted a proposal to NIST during the AES selection process Rijndael is a family of ciphers with different key and block sizes For AES NIST selected three members of the Rijndael family each with a block size of bits but three different key lengths and bits br AES has been adopted by the U S government It supersedes the Data Encryption Standard DES which was published in The algorithm described by AES is a symmetric key algorithm meaning the same key is used for both encrypting and decrypting the data br In the United States AES was announced by the NIST as U S FIPS PUB FIPS on November This announcement followed a five year standardization process in which fifteen competing designs were presented and evaluated before the Rijndael cipher was selected as the most suitable br AES is included in the ISO IEC standard AES became effective as a U S federal government standard on May after approval by U S Secretary of Commerce Donald Evans AES is available in many different encryption packages and is the first and only publicly accessible cipher approved by the U S National Security Agency NSA for top secret information when used in an NSA approved cryptographic module br br br Definitive standards br The Advanced Encryption Standard AES is defined in each of br br FIPS PUB Advanced Encryption Standard AES br ISO IEC Block ciphers br br br Description of the ciphers br AES is based on a design principle known as a substitution permutation network and is efficient in both software and hardware Unlike its predecessor DES AES does not use a Feistel network AES is a variant of Rijndael with a fixed block size of bits and a key size of or bits By contrast Rijndael per se is specified with block and key sizes that may be any multiple of bits with a minimum of and a maximum of bits Most AES calculations are done in a particular finite field br AES operates on a column major order array of bytes b b b termed the state br br br br br br br br br br br br b br br br br br br br br b br br br br br br br br b br br br br br br br br b br br br br br br br br br br b br br br br br br br br b br br br br br br br br b br br br br br br br br b br br br br br br br br br br b br br br br br br br br b br br br br br br br br b br br br br br br br br b br br br br br br br br br br b br br br br br br br br b br br br br br br br br b br br br br br br br br b br br br br br br br br br br br br br displaystyle begin bmatrix b b b b b b b b b b b b b b b b end bmatrix br br br The key size used for an AES cipher specifies the number of transformation rounds that convert the input called the plaintext into the final output called the ciphertext The number of rounds are as follows br br rounds for bit keys br rounds for bit keys br rounds for bit keys br Each round consists of several processing steps including one that depends on the encryption key itself A set of reverse rounds are applied to transform ciphertext back into the original plaintext using the same encryption key br br br High level description of the algorithm br KeyExpansion round keys are derived from the cipher key using the AES key schedule AES requires a separate bit round key block for each round plus one more br Initial round key addition br AddRoundKey each byte of the state is combined with a byte of the round key using bitwise xor br or rounds br SubBytes a non linear substitution step where each byte is replaced with another according to a lookup table br ShiftRows a transposition step where the last three rows of the state are shifted cyclically a certain number of steps br MixColumns a linear mixing operation which operates on the columns of the state combining the four bytes in each column br AddRoundKey br Final round making or rounds in total br SubBytes br ShiftRows br AddRoundKey br br br The SubBytes step br br In the SubBytes step each byte br br br br br a br br i br br j br br br br br displaystyle a i j br br in the state array is replaced with a SubByte br br br br S br br br a br br i br br j br br br br br br displaystyle S a i j br br using an bit substitution box Before round the state array is simply the plaintext input This operation provides the non linearity in the cipher The S box used is derived from the multiplicative inverse over GF known to have good non linearity properties To avoid attacks based on simple algebraic properties the S box is constructed by combining the inverse function with an invertible affine transformation The S box is also chosen to avoid any fixed points and so is a derangement i e br br br br S br br br a br br i br br j br br br br br br a br br i br br j br br br br br displaystyle S a i j neq a i j br br and also any opposite fixed points i e br br br br S br br br a br br i br br j br br br br br br a br br i br br j br br br br br br FF br br br br br br br br displaystyle S a i j oplus a i j neq text FF br br br While performing the decryption the InvSubBytes step the inverse of SubBytes is used which requires first taking the inverse of the affine transformation and then finding the multiplicative inverse br br br The ShiftRows step br br The ShiftRows step operates on the rows of the state it cyclically shifts the bytes in each row by a certain offset For AES the first row is left unchanged Each byte of the second row is shifted one to the left Similarly the third and fourth rows are shifted by offsets of two and three respectively In this way each column of the output state of the ShiftRows step is composed of bytes from each column of the input state The importance of this step is to avoid the columns being encrypted independently in which case AES would degenerate into four independent block ciphers br br br The MixColumns step br br In the MixColumns step the four bytes of each column of the state are combined using an invertible linear transformation The MixColumns function takes four bytes as input and outputs four bytes where each input byte affects all four output bytes Together with ShiftRows MixColumns provides diffusion in the cipher br During this operation each column is transformed using a fixed matrix matrix left multiplied by column gives new value of column in the state br br br br br br br br br br br br b br br br br j br br br br br br br br b br br br br j br br br br br br br br b br br br br j br br br br br br br br b br br br br j br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br br a br br br br j br br br br br br br br a br br br br j br br br br br br br br a br br br br j br br br br br br br br a br br br br j br br br br br br br br br br br br j br br br br br displaystyle begin bmatrix b j b j b j b j end bmatrix begin bmatrix end bmatrix begin bmatrix a j a j a j a j end bmatrix qquad leq j leq br br br Matrix multiplication is composed of multiplication and addition of the entries Entries are bytes treated as coefficients of polynomial of order br br br br br x br br br br br br br displaystyle x br br Addition is simply XOR Multiplication is modulo irreducible polynomial br br br br br x br br br br br br br x br br br br br br br x br br br br br br x br br br br br displaystyle x x x x br br If processed bit by bit then after shifting a conditional XOR with B should be performed if the shifted value is larger than FF overflow must be corrected by subtraction of generating polynomial These are special cases of the usual multiplication in br br br br GF br br br br br br br br br br br br displaystyle operatorname GF br br br In more general sense each column is treated as a polynomial over br br br br GF br br br br br br br br br br br br displaystyle operatorname GF br br and is then multiplied modulo br br br br br br br br br br br br br br z br br br br br br br br br br br br br br br br displaystyle cdot z br br with a fixed polynomial br br br br c br br z br br br br br br br br br br br br br z br br br br br br br br br br br br br br br br z br br br br br br br br br br br br br br br z br br br br br br br br br br br br displaystyle c z cdot z cdot z cdot z br br The coefficients are displayed in their hexadecimal equivalent of the binary representation of bit polynomials from br br br br GF br br br br br br x br br br br displaystyle operatorname GF x br br The MixColumns step can also be viewed as a multiplication by the shown particular MDS matrix in the finite field br br br br GF br br br br br br br br br br br br displaystyle operatorname GF br br This process is described further in the article Rijndael MixColumns br br br The AddRoundKey br br In the AddRoundKey step the subkey is combined with the state For each round a subkey is derived from the main key using Rijndael s key schedule each subkey is the same size as the state The subkey is added by combining of the state with the corresponding byte of the subkey using bitwise XOR br br br Optimization of the cipher br On systems with bit or larger words it is possible to speed up execution of this cipher by combining the SubBytes and ShiftRows steps with the MixColumns step by transforming them into a sequence of table lookups This requires four entry bit tables together occupying bytes A round can then be performed with table lookup operations and bit exclusive or operations followed by four bit exclusive or operations in the AddRoundKey step Alternatively the table lookup operation can be performed with a single entry bit table occupying bytes followed by circular rotation operations br Using a byte oriented approach it is possible to combine the SubBytes ShiftRows and MixColumns steps into a single round operation br br br Security br The National Security Agency NSA reviewed all the AES finalists including Rijndael and stated that all of them were secure enough for U S Government non classified data In June the U S Government announced that AES could be used to protect classified information br br The design and strength of all key lengths of the AES algorithm i e and are sufficient to protect classified information up to the SECRET level TOP SECRET information will require use of either the or key lengths The implementation of AES in products intended to protect national security systems and or information must be reviewed and certified by NSA prior to their acquisition and use br AES has rounds for bit keys rounds for bit keys and rounds for bit keys br By the best known attacks were on rounds for bit keys rounds for bit keys and rounds for bit keys br br br Known attacks br For cryptographers a cryptographic break is anything faster than a brute force attack i e performing one trial decryption for each possible key in sequence see Cryptanalysis Computational resources required A break can thus include results that are infeasible with current technology Despite being impractical theoretical breaks can sometimes provide insight into vulnerability patterns The largest successful publicly known brute force attack against a widely implemented block cipher encryption algorithm was against a bit RC key by distributed net in br The key space increases by a factor of for each additional bit of key length and if every possible value of the key is equiprobable this translates into a doubling of the average brute force key search time with every additional bit of key length This implies that the effort of a brute force search increases exponentially with key length Key length in itself does not imply security against attacks since there are ciphers with very long keys that have been found to be vulnerable br AES has a fairly simple algebraic framework In a theoretical attack named the XSL attack was announced by Nicolas Courtois and Josef Pieprzyk purporting to show a weakness in the AES algorithm partially due to the low complexity of its nonlinear components Since then other papers have shown that the attack as originally presented is unworkable see XSL attack on block ciphers br During the AES selection process developers of competing algorithms wrote of Rijndael s algorithm we are concerned about its use in security critical applications In October however at the end of the AES selection process Bruce Schneier a developer of the competing algorithm Twofish wrote that while he thought successful academic attacks on Rijndael would be developed someday he did not believe that anyone will ever discover an attack that will allow someone to read Rijndael traffic br Until May the only successful published attacks against the full AES were side channel attacks on some specific implementations In a new related key attack was discovered that exploits the simplicity of AES s key schedule and has a complexity of In December it was improved to This is a follow up to an attack discovered earlier in by Alex Biryukov Dmitry Khovratovich and Ivica Nikoli with a complexity of for one out of every keys However related key attacks are not of concern in any properly designed cryptographic protocol as a properly designed protocol i e implementational software will take care not to allow related keys essentially by constraining an attacker s means of selecting keys for relatedness br Another attack was blogged by Bruce Schneier br on July and released as a preprint br on August This new attack by Alex Biryukov Orr Dunkelman Nathan Keller Dmitry Khovratovich and Adi Shamir is against AES that uses only two related keys and time to recover the complete bit key of a round version or time for a round version with a stronger type of related subkey attack or time for an round version bit AES uses rounds so these attacks are not effective against full AES br The practicality of these attacks with stronger related keys has been criticized for instance by the paper on chosen key relations in the middle attacks on AES authored by Vincent Rijmen in br In November the first known key distinguishing attack against a reduced round version of AES was released as a preprint br This known key distinguishing attack is an improvement of the rebound or the start from the middle attack against AES like permutations which view two consecutive rounds of permutation as the application of a so called Super S box It works on the round version of AES with a time complexity of and a memory complexity of bit AES uses rounds so this attack is not effective against full AES br The first key recovery attacks on full AES were by Andrey Bogdanov Dmitry Khovratovich and Christian Rechberger and were published in The attack is a biclique attack and is faster than brute force by a factor of about four It requires operations to recover an AES key For AES and AES and operations are needed respectively This result has been further improved to for AES for AES and for AES which are the current best results in key recovery attack against AES br This is a very small gain as a bit key instead of bits would still take billions of years to brute force on current and foreseeable hardware Also the authors calculate the best attack using their technique on AES with a bit key requires storing bits of data That works out to about trillion terabytes of data which was more than all the data stored on all the computers on the planet in A paper in later improved the space complexity to bits which is terabytes while still keeping a time complexity of br According to the Snowden documents the NSA is doing research on whether a cryptographic attack based on tau statistic may help to break AES br At present there is no known practical attack that would allow someone without knowledge of the key to read data encrypted by AES when correctly implemented br br br Side channel attacks br Side channel attacks do not attack the cipher as a black box and thus are not related to cipher security as defined in the classical context but are important in practice They attack implementations of the cipher on hardware or software systems that inadvertently leak data There are several such known attacks on various implementations of AES br In April D J Bernstein announced a cache timing attack that he used to break a custom server that used OpenSSL s AES encryption The attack required over million chosen plaintexts The custom server was designed to give out as much timing information as possible the server reports back the number of machine cycles taken by the encryption operation However as Bernstein pointed out reducing the precision of the server s timestamps or eliminating them from the server s responses does not stop the attack the client simply uses round trip timings based on its local clock and compensates for the increased noise by averaging over a larger number of samples br In October Dag Arne Osvik Adi Shamir and Eran Tromer presented a paper demonstrating several cache timing attacks against the implementations in AES found in OpenSSL and Linux s dm crypt partition encryption function One attack was able to obtain an entire AES key after only operations triggering encryptions in a total of milliseconds This attack requires the attacker to be able to run programs on the same system or platform that is performing AES br In December an attack on some hardware implementations was published that used differential fault analysis and allows recovery of a key with a complexity of br In November Endre Bangerter David Gullasch and Stephan Krenn published a paper which described a practical approach to a near real time recovery of secret keys from AES without the need for either cipher text or plaintext The approach also works on AES implementations that use compression tables such as OpenSSL Like some earlier attacks this one requires the ability to run unprivileged code on the system performing the AES encryption which may be achieved by malware infection far more easily than commandeering the root account br In March Ashokkumar C Ravi Prakash Giri and Bernard Menezes presented a side channel attack on AES implementations that can recover the complete bit AES key in just blocks of plaintext ciphertext which is a substantial improvement over previous works that require between and a million encryptions The proposed attack requires standard user privilege and key retrieval algorithms run under a minute br Many modern CPUs have built in hardware instructions for AES which protect against timing related side channel attacks br br br Quantum attacks br AES is considered to be quantum resistant as it has similar quantum resistance to AES s resistance against traditional non quantum attacks at bits of security AES and AES are not considered quantum resistant due to their smaller key sizes AES has a strength of bits against quantum attacks and AES has bits of strength against quantum attacks making them both insecure br br br NIST CSEC validation br The Cryptographic Module Validation Program CMVP is operated jointly by the United States Government s National Institute of Standards and Technology NIST Computer Security Division and the Communications Security Establishment CSE of the Government of Canada The use of cryptographic modules validated to NIST FIPS is required by the United States Government for encryption of all data that has a classification of Sensitive but Unclassified SBU or above From NSTISSP National Policy Governing the Acquisition of Information Assurance Encryption products for protecting classified information will be certified by NSA and encryption products intended for protecting sensitive information will be certified in accordance with NIST FIPS br The Government of Canada also recommends the use of FIPS validated cryptographic modules in unclassified applications of its departments br Although NIST publication FIPS is the unique document that covers the AES algorithm vendors typically approach the CMVP under FIPS and ask to have several algorithms such as Triple DES or SHA validated at the same time Therefore it is rare to find cryptographic modules that are uniquely FIPS validated and NIST itself does not generally take the time to list FIPS validated modules separately on its public web site Instead FIPS validation is typically just listed as an FIPS approved AES notation with a specific FIPS certificate number in the current list of FIPS validated cryptographic modules br The Cryptographic Algorithm Validation Program CAVP allows for independent validation of the correct implementation of the AES algorithm Successful validation results in being listed on the NIST validations page This testing is a pre requisite for the FIPS module validation However successful CAVP validation in no way implies that the cryptographic module implementing the algorithm is secure A cryptographic module lacking FIPS validation or specific approval by the NSA is not deemed secure by the US Government and cannot be used to protect government data br FIPS validation is challenging to achieve both technically and fiscally There is a standardized battery of tests as well as an element of source code review that must be passed over a period of a few weeks The cost to perform these tests through an approved laboratory can be significant e g well over US and does not include the time it takes to write test document and prepare a module for validation After validation modules must be re submitted and re evaluated if they are changed in any way This can vary from simple paperwork updates if the security functionality did not change to a more substantial set of re testing if the security functionality was impacted by the change br br br Test vectors br Test vectors are a set of known ciphers for a given input and key NIST distributes the reference of AES test vectors as AES Known Answer Test KAT Vectors br br br Performance br High speed and low RAM requirements were some of the criteria of the AES selection process As the chosen algorithm AES performed well on a wide variety of hardware from bit smart cards to high performance computers br On a Pentium Pro AES encryption requires clock cycles per byte cpb equivalent to a throughput of about MiB s for a MHz processor br On Intel Core and AMD Ryzen CPUs supporting AES NI instruction set extensions throughput can be multiple GiB s On a Intel Westmere CPU AES encryption using AES NI takes about cpb for AES and cpb for AES br br br Implementations br br br See also br AES modes of operation br Disk encryption br Whirlpool hash function created by Vincent Rijmen and Paulo S L M Barreto br List of free and open source software packages br br br Notes br br br br br br External links br bit key bit block AES Cryptography bit Ciphers Reference source code and submissions to international cryptographic designs contests EmbeddedSW br Advanced Encryption Standard AES PDF Federal Information Processing Standards November doi NIST FIPS br AES algorithm archive information old unmaintained br Part Block ciphers PDF Information technology Security techniques Encryption algorithms nd ed ISO ISO IEC E Archived PDF from the original on br Animation of Rijndael AES deeply explained and animated using Flash by Enrique Zabala University ORT Montevideo Uruguay This animation in English Spanish and German is also part of CrypTool menu Indiv Procedures Visualization of Algorithms AES br HTML Animation of Rijndael Same Animation as above made in HTML 