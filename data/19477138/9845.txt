title: JavaScript
id: 9845
JavaScript often abbreviated as JS is a programming language and core technology of the Web alongside HTML and CSS of websites use JavaScript on the client side for webpage behavior br Web browsers have a dedicated JavaScript engine that executes the client code These engines are also utilized in some servers and a variety of apps The most popular runtime system for non browser usage is Node js br JavaScript is a high level often just in time compiled language that conforms to the ECMAScript standard It has dynamic typing prototype based object orientation and first class functions It is multi paradigm supporting event driven functional and imperative programming styles It has application programming interfaces APIs for working with text dates regular expressions standard data structures and the Document Object Model DOM br The ECMAScript standard does not include any input output I O such as networking storage or graphics facilities In practice the web browser or other runtime system provides JavaScript APIs for I O br Although Java and JavaScript are similar in name syntax and respective standard libraries the two languages are distinct and differ greatly in design br br br History br br br Creation at Netscape br The first popular web browser with a graphical user interface Mosaic was released in Accessible to non technical people it played a prominent role in the rapid growth of the early World Wide Web The lead developers of Mosaic then founded the Netscape corporation which released a more polished browser Netscape Navigator in This quickly became the most used br During these formative years of the Web web pages could only be static lacking the capability for dynamic behavior after the page was loaded in the browser There was a desire in the flourishing web development scene to remove this limitation so in Netscape decided to add a programming language to Navigator They pursued two routes to achieve this collaborating with Sun Microsystems to embed the Java language while also hiring Brendan Eich to embed the Scheme language br The goal was a language for the masses to help nonprogrammers create dynamic interactive Web sites Netscape management soon decided that the best option was for Eich to devise a new language with syntax similar to Java and less like Scheme or other extant scripting languages Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September the name was changed to JavaScript for the official release in December br The choice of the JavaScript name has caused confusion implying that it is directly related to Java At the time the dot com boom had begun and Java was a popular new language so Eich considered the JavaScript name a marketing ploy by Netscape br br br Adoption by Microsoft br Microsoft debuted Internet Explorer in leading to a browser war with Netscape On the JavaScript front Microsoft created its own interpreter called JScript br Microsoft first released JScript in alongside initial support for CSS and extensions to HTML Each of these implementations was noticeably different from their counterparts in Netscape Navigator These differences made it difficult for developers to make their websites work well in both browsers leading to widespread use of best viewed in Netscape and best viewed in Internet Explorer logos for several years br br br The rise of JScript br br In November Netscape submitted JavaScript to Ecma International as the starting point for a standard specification that all browser vendors could conform to This led to the official release of the first ECMAScript language specification in June br The standards process continued for a few years with the release of ECMAScript in June and ECMAScript in December Work on ECMAScript began in br However the effort to fully standardize the language was undermined by Microsoft gaining an increasingly dominant position in the browser market By the early s Internet Explorer s market share reached This meant that JScript became the de facto standard for client side scripting on the Web br Microsoft initially participated in the standards process and implemented some proposals in its JScript language but eventually it stopped collaborating on ECMA work Thus ECMAScript was mothballed br br br Growth and standardization br During the period of Internet Explorer dominance in the early s client side scripting was stagnant This started to change in when the successor of Netscape Mozilla released the Firefox browser Firefox was well received by many taking significant market share from Internet Explorer br In Mozilla joined ECMA International and work started on the ECMAScript for XML E X standard This led to Mozilla working jointly with Macromedia later acquired by Adobe Systems who were implementing E X in their ActionScript language which was based on an ECMAScript draft The goal became standardizing ActionScript as the new ECMAScript To this end Adobe Systems released the Tamarin implementation as an open source project However Tamarin and ActionScript were too different from established client side scripting and without cooperation from Microsoft ECMAScript never reached fruition br Meanwhile very important developments were occurring in open source communities not affiliated with ECMA work In Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies of which JavaScript was the backbone to create web applications where data can be loaded in the background avoiding the need for full page reloads This sparked a renaissance period of JavaScript spearheaded by open source libraries and the communities that formed around them Many new libraries were created including jQuery Prototype Dojo Toolkit and MooTools br Google debuted its Chrome browser in with the V JavaScript engine that was faster than its competition The key innovation was just in time compilation JIT so other browser vendors needed to overhaul their engines for JIT br In July these disparate parties came together for a conference in Oslo This led to the eventual agreement in early to combine all relevant work and drive the language forward The result was the ECMAScript standard released in December br br br Reaching maturity br Ambitious work on the language continued for several years culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript in br The creation of Node js in by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers Node combines the V engine an event loop and I O APIs thereby providing a stand alone JavaScript runtime system As of Node had been used by millions of developers and npm had the most modules of any package manager in the world br The ECMAScript draft specification is currently maintained openly on GitHub and editions are produced via regular annual snapshots Potential revisions to the language are vetted through a comprehensive proposal process Now instead of edition numbers developers check the status of upcoming features individually br The current JavaScript ecosystem has many libraries and frameworks established programming practices and substantial usage of JavaScript outside of web browsers Plus with the rise of single page applications and other JavaScript heavy websites several transpilers have been created to aid the development process br br br Trademark br JavaScript is a trademark of Oracle Corporation in the United States The trademark was originally issued to Sun Microsystems on May and was transferred to Oracle when they acquired Sun in br br br Website client side usage br JavaScript is the dominant client side scripting language of the Web with of all websites using it for this purpose Scripts are embedded in or included from HTML documents and interact with the DOM br All major web browsers have a built in JavaScript engine that executes the code on the user s device br br br Examples of scripted behavior br Loading new web page content without reloading the page via Ajax or a WebSocket For example users of social media can send and receive messages without leaving the current page br Web page animations such as fading objects in and out resizing and moving them br Playing browser games br Controlling the playback of streaming media br Generating pop up ads or alert boxes br Validating input values of a web form before the data is sent to a web server br Logging data about the user s behavior then sending it to a server The website owner can use this data for analytics ad tracking and personalization br Redirecting a user to another page br Storing and retrieving data on the user s device via the storage or IndexedDB standards br br br Libraries and frameworks br Over of websites use a third party JavaScript library or web framework as part of their client side scripting br jQuery is by far the most used Other notable ones include Angular Bootstrap Lodash Modernizr React Underscore and Vue Multiple options can be used in conjunction such as jQuery and Bootstrap br However the term Vanilla JS was coined for websites not using any libraries or frameworks at all instead relying entirely on standard JavaScript functionality br br br Other usage br The use of JavaScript has expanded beyond its web browser roots JavaScript engines are now embedded in a variety of other software systems both for server side website deployments and non browser applications br Initial attempts at promoting server side JavaScript usage were Netscape Enterprise Server and Microsoft s Internet Information Services but they were small niches Server side usage eventually started to grow in the late s with the creation of Node js and other approaches br Electron Cordova React Native and other application frameworks have been used to create many applications with behavior implemented in JavaScript Other non browser applications include Adobe Acrobat support for scripting PDF documents and GNOME Shell extensions written in JavaScript br JavaScript has recently begun to appear in some embedded systems usually by leveraging Node js br br br Execution br br br JavaScript engine br br br Runtime system br A JavaScript engine must be embedded within a runtime system such as a web browser or a standalone system to enable scripts to interact with the broader environment The runtime system includes the necessary APIs for input output operations such as networking storage and graphics and provides the ability to import scripts br JavaScript is a single threaded language The runtime processes messages from a queue one at a time and it calls a function associated with each new message creating a call stack frame with the function s arguments and local variables The call stack shrinks and grows based on the function s needs When the call stack is empty upon function completion JavaScript proceeds to the next message in the queue This is called the event loop described as run to completion because each message is fully processed before the next message is considered However the language s concurrency model describes the event loop as non blocking program I O is performed using events and callback functions This means for example that JavaScript can process a mouse click while waiting for a database query to return information br The notable standalone runtimes are Node js Deno and Bun br br br Features br The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise br br br Imperative and structured br br JavaScript supports much of the structured programming syntax from C e g if statements while loops switch statements do while loops etc One partial exception is scoping originally JavaScript only had function scoping with var block scoping was added in ECMAScript with the keywords let and const Like C JavaScript makes a distinction between expressions and statements One syntactic difference from C is automatic semicolon insertion which allow semicolons which terminate statements to be omitted br br br Weakly typed br br JavaScript is weakly typed which means certain types are implicitly cast depending on the operation used br br The binary operator casts both operands to a string unless both operands are numbers This is because the addition operator doubles as a concatenation operator br The binary operator always casts both operands to a number br Both unary operators always cast the operand to a number br Values are cast to strings like the following br br Strings are left as is br Numbers are converted to their string representation br Arrays have their elements cast to strings after which they are joined by commas br Other objects are converted to the string object Object where Object is the name of the constructor of the object br Values are cast to numbers by casting to strings and then casting the strings to numbers These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively br JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency For example when adding a number to a string the number will be cast to a string before performing concatenation but when subtracting a number from a string the string is cast to a number before performing subtraction br br Often also mentioned is resulting in number This is misleading the is interpreted as an empty code block instead of an empty object and the empty array is cast to a number by the remaining unary operator If the expression is wrapped in parentheses the curly brackets are interpreted as an empty object and the result of the expression is object Object as expected br br br Dynamic br br br Typing br br JavaScript is dynamically typed like most other scripting languages A type is associated with a value rather than an expression For example a variable initially bound to a number may be reassigned to a string JavaScript supports various ways to test the type of objects including duck typing br br br Run time evaluation br br JavaScript includes an eval function that can execute statements provided as strings at run time br br br Object orientation prototype based br Prototypal inheritance in JavaScript is described by Douglas Crockford as br br You make prototype objects and then make new instances Objects are mutable in JavaScript so we can augment the new instances giving them new fields and methods These can then act as prototypes for even newer objects We don t need classes to make lots of similar objects Objects inherit from objects What could be more object oriented than that br br In JavaScript an object is an associative array augmented with a prototype see below each key provides the name for an object property and there are two syntactical ways to specify such a name dot notation obj x and bracket notation obj x A property may be added rebound or deleted at run time Most properties of an object and any property that belongs to an object s prototype inheritance chain can be enumerated using a for in loop br br br Prototypes br br JavaScript uses prototypes where many other object oriented languages use classes for inheritance It is possible to simulate many class based features with prototypes in JavaScript br br br Functions as object constructors br Functions double as object constructors along with their typical role Prefixing a function call with new will create an instance of a prototype inheriting properties and methods from the constructor including properties from the Object prototype ECMAScript offers the Object create method allowing explicit creation of an instance without automatically inheriting from the Object prototype older environments can assign the prototype to null The constructor s prototype property determines the object used for the new object s internal prototype New methods can be added by modifying the prototype of the function used as a constructor JavaScript s built in constructors such as Array or Object also have prototypes that can be modified While it is possible to modify the Object prototype it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype and they may not expect the prototype to be modified br br br Functions as methods br br Unlike in many object oriented languages in JavaScript there is no distinction between a function definition and a method definition Rather the distinction occurs during function calling When a function is called as a method of an object the function s local this keyword is bound to that object for that invocation br br br Functional br br JavaScript functions are first class a function is considered to be an object As such a function may have properties and methods such as call and bind br br br Lexical closure br br A nested function is a function defined within another function It is created each time the outer function is invoked br In addition each nested function forms a lexical closure the lexical scope of the outer function including any constant local variable or argument value becomes part of the internal state of each inner function object even after execution of the outer function concludes br br br Anonymous function br br JavaScript also supports anonymous functions br br br Delegative br br JavaScript supports implicit and explicit delegation br br br Functions as roles Traits and Mixins br br JavaScript natively supports various function based implementations of Role patterns like Traits and Mixins Such a function defines additional behavior by at least one method bound to the this keyword within its function body A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain br br br Object composition and inheritance br Whereas explicit function based delegation does cover composition in JavaScript implicit delegation already happens every time the prototype chain is walked in order to e g find a method that might be related to but is not directly owned by an object Once the method is found it gets called within this object s context Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions br br br Miscellaneous br br br Zero based numbering br JavaScript is a zero index language br br br Variadic functions br br An indefinite number of parameters can be passed to a function The function can access them through formal parameters and also through the local arguments object Variadic functions can also be created by using the bind method br br br Array and object literals br br Like in many scripting languages arrays and objects associative arrays in other languages can each be created with a succinct shortcut syntax In fact these literals form the basis of the JSON data format br br br Regular expressions br br In a manner similar to Perl JavaScript also supports regular expressions which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built in string functions br br br Promises and Async await br JavaScript supports promises and Async await for handling asynchronous operations br br br Promises br br A built in Promise object provides functionality for handling promises and associating handlers with an asynchronous action s eventual result Recently the JavaScript specification introduced combinator methods which allow developers to combine multiple JavaScript promises and do operations based on different scenarios The methods introduced are Promise race Promise all Promise allSettled and Promise any br br br Async await br br Async await allows an asynchronous non blocking function to be structured in a way similar to an ordinary synchronous function Asynchronous non blocking code can be written with minimal overhead structured similarly to traditional synchronous blocking code br br br Vendor specific extensions br Historically some JavaScript engines supported these non standard features br br conditional catch clauses like Java br array comprehensions and generator expressions like Python br concise function expressions function args expr this experimental syntax predated arrow functions br ECMAScript for XML E X an extension that adds native XML support to ECMAScript unsupported in Firefox since version br br br Syntax br br br Simple examples br Variables in JavaScript can be defined using either the var let or const keywords Variables defined without keywords will be defined at the global scope br br Note the comments in the examples above all of which were preceded with two forward slashes br There is no built in Input output functionality in JavaScript instead it is provided by the run time environment The ECMAScript specification in edition mentions that there are no provisions in this specification for input of external data or output of computed results br However most runtime environments have a console object that can be used to print output Here is a minimalist Hello World program in JavaScript in a runtime environment with a console object br br In HTML documents a program like this is required for an output br br A simple recursive function to calculate the factorial of a natural number br br An anonymous function or lambda br br This example shows that in JavaScript function closures capture their non local variables by reference br Arrow functions were first introduced in th Edition ECMAScript They shorten the syntax for writing functions in JavaScript Arrow functions are anonymous so a variable is needed to refer to them in order to invoke them after their creation unless surrounded by parenthesis and executed immediately br Example of arrow function br br In JavaScript objects can be created as instances of a class br Object class example br br In JavaScript objects can be instantiated directly from a function br Object functional example br br Variadic function demonstration arguments is a special variable br br Immediately invoked function expressions are often used to create closures Closures allow gathering properties and methods in a namespace and making some of them private br br Generator objects in the form of generator functions provide a function which can be called exited and re entered while maintaining internal context statefulness br JavaScript can export and import from modules br Export example br br Import example br br br More advanced example br This sample code displays various JavaScript features br br The following output should be displayed in the browser window br br br Security br br JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web Browser authors minimize this risk using two restrictions First scripts run in a sandbox in which they can only perform Web related actions not general purpose programming tasks like creating files Second scripts are constrained by the same origin policy scripts from one website do not have access to information such as usernames passwords or cookies sent to another site Most JavaScript related security bugs are breaches of either the same origin policy or the sandbox br There are subsets of general JavaScript ADsafe Secure ECMAScript SES that provide greater levels of security especially on code created by third parties such as advertisements Closure Toolkit is another project for safe embedding and isolation of third party JavaScript and HTML br Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page br br br Cross site scripting br br A common JavaScript related security problem is cross site scripting XSS a violation of the same origin policy XSS vulnerabilities occur when an attacker can cause a target Website such as an online banking website to include a malicious script in the webpage presented to a victim The script in this example can then access the banking application with the privileges of the victim potentially disclosing secret information or transferring money without the victim s authorization One important solution to XSS vulnerabilities is HTML sanitization br Some browsers include partial protection against reflected XSS attacks in which the attacker provides a URL including malicious script However even users of those browsers are vulnerable to other XSS attacks such as those where the malicious code is stored in a database Only correct design of Web applications on the server side can fully prevent XSS br XSS vulnerabilities can also occur because of implementation mistakes by browser authors br br br Cross site request forgery br br Another cross site vulnerability is cross site request forgery CSRF In CSRF code on an attacker s site tricks the victim s browser into taking actions the user did not intend at a target site like transferring money at a bank When target sites rely solely on cookies for request authentication requests originating from code on the attacker s site can carry the same valid login credentials of the initiating user In general the solution to CSRF is to require an authentication value in a hidden form field and not only in the cookies to authenticate any request that might have lasting effects Checking the HTTP Referrer header can also help br JavaScript hijacking is a type of CSRF attack in which a script tag on an attacker s site exploits a page on the victim s site that returns private information such as JSON or JavaScript Possible solutions include br br requiring an authentication token in the POST and GET parameters for any response that returns private information br br br Misplaced trust in the client br Developers of client server applications must recognize that untrusted clients may be under the control of attackers The application author cannot assume that their JavaScript code will run as intended or at all because any secret embedded in the code could be extracted by a determined adversary Some implications are br br Website authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client The code can be obfuscated but obfuscation can be reverse engineered br JavaScript form validation only provides convenience for users not security If a site verifies that the user agreed to its terms of service or filters invalid characters out of fields that should only contain numbers it must do so on the server not only the client br Scripts can be selectively disabled so JavaScript cannot be relied on to prevent operations such as right clicking on an image to save it br It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker br Prototype pollution is a runtime vulnerability in which attackers can overwrite arbitrary properties in an object s prototype br br br Misplaced trust in developers br Package management systems such as npm and Bower are popular with JavaScript developers Such systems allow a developer to easily manage their program s dependencies upon other developers program libraries Developers trust that the maintainers of the libraries will keep them secure and up to date but that is not always the case A vulnerability has emerged because of this blind trust Relied upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries Inversely a library can go unpatched with known vulnerabilities out in the wild In a study done looking over a sample of websites researchers found of the websites included a library with at least one known vulnerability The median lag between the oldest library version used on each website and the newest available version of that library is days in ALEXA and development of some libraries still in active use ceased years ago Another possibility is that the maintainer of a library may remove the library entirely This occurred in March when Azer Ko ulu removed his repository from npm This caused tens of thousands of programs and websites depending upon his libraries to break br br br Browser and plugin coding errors br br JavaScript provides an interface to a wide range of browser capabilities some of which may have flaws such as buffer overflows These flaws can allow attackers to write scripts that would run any code they wish on the user s system This code is not by any means limited to another JavaScript application For example a buffer overrun exploit can allow an attacker to gain access to the operating system s API with superuser privileges br These flaws have affected major browsers including Firefox Internet Explorer and Safari br Plugins such as video players Adobe Flash and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer may also have flaws exploitable via JavaScript such flaws have been exploited in the past br In Windows Vista Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges Google Chrome similarly confines its page renderers to their own sandbox br br br Sandbox implementation errors br Web browsers are capable of running JavaScript outside the sandbox with the privileges necessary to for example create or delete files Such privileges are not intended to be granted to code from the Web br Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer and Firefox In Windows XP Service Pack Microsoft demoted JScript s privileges in Internet Explorer br Microsoft Windows allows JavaScript source files on a computer s hard drive to be launched as general purpose non sandboxed programs see Windows Script Host This makes JavaScript like VBScript a theoretically viable vector for a Trojan horse although JavaScript Trojan horses are uncommon in practice br br br Hardware vulnerabilities br In a JavaScript based proof of concept implementation of a rowhammer attack was described in a paper by security researchers br In a JavaScript based attack via browser was demonstrated that could bypass ASLR It is called ASLR Cache or AnC br In the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation br br br Development tools br Important tools have evolved with the language br br Every major web browser has built in web development tools including a JavaScript debugger br Static program analysis tools such as ESLint and JSLint scan JavaScript code for conformance to a set of standards and guidelines br Some browsers have built in profilers Stand alone profiling libraries have also been created such as benchmark js and jsbench br Many text editors have syntax highlighting support for JavaScript code br br br Related technologies br br br Java br A common misconception is that JavaScript is directly related to Java Both indeed have a C like syntax the C language being their most immediate common ancestor language They are also typically sandboxed and JavaScript was designed with Java s syntax and standard library in mind In particular all Java keywords were reserved in original JavaScript JavaScript s standard library follows Java s naming conventions and JavaScript s Math and Date objects are based on classes from Java br Both languages first appeared in but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications br The differences between the two languages are more prominent than their similarities Java has static typing while JavaScript s typing is dynamic Java is loaded from compiled bytecode while JavaScript is loaded as human readable source code Java s objects are class based while JavaScript s are prototype based Finally Java did not support functional programming until Java while JavaScript has done so from the beginning being influenced by Scheme br br br JSON br JSON is a data format derived from JavaScript hence the name JavaScript Object Notation It is a widely used format supported by many other programming languages br br br Transpilers br Many websites are JavaScript heavy so transpilers have been created to convert code written in other languages which can aid the development process br TypeScript and CoffeeScript are two notable languages that transpile to JavaScript br br br WebAssembly br WebAssembly is a newer language with a bytecode format designed to complement JavaScript especially the performance critical portions of web page scripts All of the major JavaScript engines support WebAssembly which runs in the same sandbox as regular JavaScript code br asm js is a subset of JavaScript that served as the forerunner of WebAssembly br br br br br br Sources br Dere Mohan December How to integrate create react app with all the libraries you need to make a great app freeCodeCamp Retrieved June br Panchal Krunal April Angular vs React Detailed Comparison Groovy Web Retrieved June br br br Further reading br br Flanagan David JavaScript The Definitive Guide th edition Sebastopol California O Reilly ISBN br Haverbeke Marijn Eloquent JavaScript rd edition No Starch Press pages ISBN download br Zakas Nicholas Principles of Object Oriented JavaScript st edition No Starch Press pages ISBN br br br External links br br The Modern JavaScript Tutorial A community maintained continuously updated collection of tutorials on the entirety of the language br JavaScript at Curlie br JavaScript The First Years Retrieved February 