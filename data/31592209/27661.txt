title: Source code
id: 27661
In computing source code or simply code or source is text usually plain text that conforms to a human readable programming language and specifies the behavior of a computer A programmer writes code to produce a program that runs on a computer br Since a computer at base only understands machine code source must be translated in order to be used by the computer and this can be implemented in a variety of ways depending on available technology Source code can be converted by a compiler or an assembler into machine code that can be directly executed Alternatively source code can be processed without conversion to machine code via an interpreter that performs the actions prescribed by the source code via the interpreter s machine code Other technology i e bytecode incorporates both mechanisms by converting the source code to an intermediate form that is often not human readable but also not machine code and an interpreter executes the intermediate form br Most languages allow for comments The programmer can add comments to document the source code for themself and for other programmers reading the code Comments cannot be represented in machine code and therefore are ignored by compilers interpreters and the like br Often the source code of application software is not distributed or publicly available since the producer wants to protect their Intellectual property IP But if the source code is available open source it can be useful to a user programmer or a system administrator any of whom might wish to study or modify the program br br br Background br The first programmable computers which appeared at the end of the s were programmed in machine language simple instructions that could be directly executed by the processor Machine language was difficult to debug and was not portable between different computer systems Initially hardware resources were scarce and expensive while human resources were cheaper As programs grew more complex programmer productivity became a bottleneck This led to the introduction of high level programming languages such as Fortran in the mid s These languages abstracted away the details of the hardware instead being designed to express algorithms that could be understood more easily by humans As instructions distinct from the underlying computer hardware software is therefore relatively recent dating to these early high level programming languages such as Fortran Lisp and Cobol The invention of high level programming languages was simultaneous with the compilers needed to translate the source code automatically into machine code that can be directly executed on the computer hardware br Source code is the form of code that is modified directly by humans typically in a high level programming language Object code can be directly executed by the machine and is generated automatically from the source code often via an intermediate step assembly language While object code will only work on a specific platform source code can be ported to a different machine and recompiled there For the same source code object code can vary significantly not only based on the machine for which it is compiled but also based on performance optimization from the compiler br br br Organization br br Most programs do not contain all the resources needed to run them and rely on external libraries Part of the compiler s function is to link these files in such a way that the program can be executed by the hardware br br Software developers often use configuration management to track changes to source code files version control The configuration management system also keeps track of which object code file corresponds to which version of the source code file br br br Purposes br br br Estimation br The number of lines of source code is often used as a metric when evaluating the productivity of computer programmers the economic value of a code base effort estimation for projects in development and the ongoing cost of software maintenance after release br br br Communication br Source code is also used to communicate algorithms between people e g code snippets online or in books br Computer programmers may find it helpful to review existing source code to learn about programming techniques The sharing of source code between developers is frequently cited as a contributing factor to the maturation of their programming skills Some people consider source code an expressive artistic medium br Source code often contains comments blocks of text marked for the compiler to ignore This content is not part of the program logic but is instead intended to help readers understand the program br Companies often keep the source code confidential in order to hide algorithms considered a trade secret Proprietary secret source code and algorithms are widely used for sensitive government applications such as criminal justice which results in black box behavior with a lack of transparency into the algorithm s methodology The result is avoidance of public scrutiny of issues such as bias br br br Modification br br Access to the source code not just the object code is essential to modifying it Understanding existing code is necessary to understand how it works and before modifying it The rate of understanding depends both on the code base as well as the skill of the programmer Experienced programmers have an easier time understanding what the code does at a high level Software visualization is sometimes used to speed up this process br Many software programmers use an integrated development environment IDE to improve their productivity IDEs typically have several features built in including a source code editor that can alert the programmer to common errors Modification often includes code refactoring improving the structure without changing functionality and restructuring improving structure and functionality at the same time Nearly every change to code will introduce new bugs or unexpected ripple effects which require another round of fixes br Code reviews by other developers are often used to scrutinize new code added to a project The purpose of this phase is often to verify that the code meets style and maintainability standards and that it is a correct implementation of the software design According to some estimates code review dramatically reduce the number of bugs persisting after software testing is complete Along with software testing that works by executing the code static program analysis uses automated tools to detect problems with the source code Many IDEs support code analysis tools which might provide metrics on the clarity and maintainability of the code Debuggers are tools that often enable programmers to step through execution while keeping track of which source code corresponds to each change of state br br br Compilation and execution br Source code files in a high level programming language must go through a stage of preprocessing into machine code before the instructions can be carried out After being compiled the program can be saved as an object file and the loader part of the operating system can take this saved file and execute it as a process on the computer hardware Some programming languages use an interpreter instead of a compiler An interpreter converts the program into machine code at run time which makes them to times slower than compiled programming languages br br br Quality br br Software quality is an overarching term that can refer to a code s correct and efficient behavior its reusability and portability or the ease of modification It is usually more cost effective to build quality into the product from the beginning rather than try to add it later in the development process Higher quality code will reduce lifetime cost to both suppliers and customers as it is more reliable and easier to maintain br Maintainability is the quality of software enabling it to be easily modified without breaking existing functionality Following coding conventions such as using clear function and variable names that correspond to their purpose makes maintenance easier Use of conditional loop statements only if the code could execute more than once and eliminating code that will never execute can also increase understandability Many software development organizations neglect maintainability during the development phase even though it will increase long term costs Technical debt is incurred when programmers often out of laziness or urgency to meet a deadline choose quick and dirty solutions rather than build maintainability into their code A common cause is underestimates in software development effort estimation leading to insufficient resources allocated to development A challenge with maintainability is that many software engineering courses do not emphasize it Development engineers who know that they will not be responsible for maintaining the software do not have an incentive to build in maintainability br br br Copyright and licensing br br The situation varies worldwide but in the United States before software and its source code was not copyrightable and therefore always public domain software In the US Commission on New Technological Uses of Copyrighted Works CONTU decided that computer programs to the extent that they embody an author s original creation are proper subject matter of copyright br Proprietary software is rarely distributed as source code Although the term open source software literally refers to public access to the source code open source software has additional requirements free redistribution permission to modify the source code and release derivative works under the same license and nondiscrimination between different uses including commercial use The free reusability of open source software can speed up development br br br See also br Bytecode br Code as data br Coding conventions br Free software br Legacy code br Machine code br Markup language br Obfuscated code br Object code br Open source software br Package package management system br Programming language br Source code repository br Syntax highlighting br Visual programming language br br br br br br Sources br br br External links 