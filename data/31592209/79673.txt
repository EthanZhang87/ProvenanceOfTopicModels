title: Diff
id: 79673
In computing the utility diff is a data comparison tool that computes and displays the differences between the contents of files Unlike edit distance notions used for other purposes diff is line oriented rather than character oriented but it is like Levenshtein distance in that it tries to determine the smallest set of deletions and insertions to create one file from the other The utility displays the changes in one of several standard formats such that both humans or computers can parse the changes and use them for patching br Typically diff is used to show the changes between two versions of the same file Modern implementations also support binary files The output is called a diff or a patch since the output can be applied with the Unix program patch The output of similar file comparison utilities is also called a diff like the use of the word grep for describing the act of searching the word diff became a generic term for calculating data difference and the results thereof The POSIX standard specifies the behavior of the diff and patch utilities and their file formats br br br History br diff was developed in the early s on the Unix operating system which was emerging from Bell Labs in Murray Hill New Jersey It was part of the th Edition of Unix released in and was written by Douglas McIlroy and James Hunt This research was published in a paper co written with James W Hunt who developed an initial prototype of diff The algorithm this paper described became known as the Hunt Szymanski algorithm br McIlroy s work was preceded and influenced by Steve Johnson s comparison program on GECOS and Mike Lesk s proof program Proof also originated on Unix and like diff produced line by line changes and even used angle brackets and for presenting line insertions and deletions in the program s output The heuristics used in these early applications were however deemed unreliable The potential usefulness of a diff tool provoked McIlroy into researching and designing a more robust tool that could be used in a variety of tasks but perform well in the processing and size limitations of the PDP s hardware His approach to the problem resulted from collaboration with individuals at Bell Labs including Alfred Aho Elliot Pinson Jeffrey Ullman and Harold S Stone br In the context of Unix the use of the ed line editor provided diff with the natural ability to create machine usable edit scripts These edit scripts when saved to a file can along with the original file be reconstituted by ed into the modified file in its entirety This greatly reduced the secondary storage necessary to maintain multiple versions of a file McIlroy considered writing a post processor for diff where a variety of output formats could be designed and implemented but he found it more frugal and simpler to have diff be responsible for generating the syntax and reverse order input accepted by the ed command br In Larry Wall created a separate utility patch br releasing its source code on the mod sources and net sources newsgroups This program modifies files using output from diff and has the ability to match context br X Open Portability Guide issue of includes diff Context mode was added in POSIX issue Unified mode was added in POSIX issue br In diff s early years common uses included comparing changes in the source of software code and markup for technical documents verifying program debugging output comparing filesystem listings and analyzing computer assembly code The output targeted for ed was motivated to provide compression for a sequence of modifications made to a file The Source Code Control System SCCS and its ability to archive revisions emerged in the late s as a consequence of storing edit scripts from diff br br br Algorithm br The operation of diff is based on solving the longest common subsequence problem br In this problem given two sequences of items br br a b c d f g h j q z br br a b c d e f g i j k r x y z br br and we want to find a longest sequence of items that is present in both original sequences in the same order That is we want to find a new sequence which can be obtained from the first original sequence by deleting some items and from the second original sequence by deleting other items We also want this sequence to be as long as possible In this case it is br br a b c d f g j z br br From a longest common subsequence it is only a small step to get diff like output if an item is absent in the subsequence but present in the first original sequence it must have been deleted as indicated by the marks below If it is absent in the subsequence but present in the second original sequence it must have been inserted as indicated by the marks br br e h i q k r x y br br br br Usage br The diff command is invoked from the command line passing it the names of two files diff original new The output of the command represents the changes required to transform the original file into the new file br If original and new are directories then diff will be run on each file that exists in both directories An option r will recursively descend any matching subdirectories to compare files between directories br Any of the examples in the article use the following two files original and new br br In this traditional output format a stands for added d for deleted and c for changed Line numbers of the original file appear before a d c and those of the new file appear after The less than and greater than signs at the beginning of lines that are added deleted or changed indicate which file the lines appear in Addition lines are added to the original file to appear in the new file Deletion lines are deleted from the original file to be missing in the new file br By default lines common to both files are not shown Lines that have moved are shown as added at their new location and as deleted from their old location However some diff tools highlight moved lines br br br Output variations br br br Edit script br An ed script can still be generated by modern versions of diff with the e option The resulting edit script for this example is as follows br br a br br This paragraph contains br important new additions br to this document br br c br check this document On br br d br a br This is an important br notice It should br therefore be located at br the beginning of this br document br br br br In order to transform the content of file original into the content of file new using ed we should append two lines to this diff file one line containing a w write command and one containing a q quit command e g by printf w nq n mydiff Here we gave the diff file the name mydiff and the transformation will then happen when we run ed s original mydiff br br br Context format br The Berkeley distribution of Unix made a point of adding the context format c and the ability to recurse on filesystem directory structures r adding those features in BSD released in July The context format of diff introduced at Berkeley helped with distributing patches for source code that may have been changed minimally br In the context format any changed lines are shown alongside unchanged lines before and after The inclusion of any number of unchanged lines provides a context to the patch The context consists of lines that have not changed between the two files and serve as a reference to locate the lines place in a modified file and find the intended location for a change to be applied regardless of whether the line numbers still correspond The context format introduces greater readability for humans and reliability when applying the patch and an output which is accepted as input to the patch program This intelligent behavior is not possible with the traditional diff output br The number of unchanged lines shown above and below a change hunk can be defined by the user even zero but three lines is typically the default If the context of unchanged lines in a hunk overlap with an adjacent hunk then diff will avoid duplicating the unchanged lines and merge the hunks into a single hunk br A represents a change between lines that correspond in the two files whereas a represents the addition of a line and a the removal of a line A blank space represents an unchanged line At the beginning of the patch is the file information including the full path and a time stamp delimited by a tab character At the beginning of each hunk are the line numbers that apply for the corresponding change in the files A number range appearing between sets of three asterisks applies to the original file while sets of three dashes apply to the new file The hunk ranges specify the starting and ending line numbers in the respective file br The command diff c original new produces the following output br br Note Here the diff output is shown with colors to make it easier to read The diff utility does not produce colored output its output is plain text However many tools can show the output with colors by using syntax highlighting br br br Unified format br The unified format or unidiff inherits the technical improvements made by the context format but produces a smaller diff with old and new text presented immediately adjacent Unified format is usually invoked using the u command line option This output is often used as input to the patch program Many projects specifically request that diffs be submitted in the unified format making unified diff format the most common format for exchange between software developers br Unified context diffs were originally developed by Wayne Davison in August in unidiff which appeared in Volume of comp sources misc Richard Stallman added unified diff support to the GNU Project s diff utility one month later and the feature debuted in GNU diff released in January GNU diff has since generalized the context format to allow arbitrary formatting of diffs br The format starts with the same two line header as the context format except that the original file is preceded by and the new file is preceded by Following this are one or more change hunks that contain the line differences in the file The unchanged contextual lines are preceded by a space character addition lines are preceded by a plus sign and deletion lines are preceded by a minus sign br A hunk begins with range information and is immediately followed with the line additions line deletions and any number of the contextual lines The range information is surrounded by double at signs and combines onto a single line what appears on two lines in the context format above The format of the range information line is as follows br br l s l s optional section heading br br The hunk range information contains two hunk ranges The range for the hunk of the original file is preceded by a minus symbol and the range for the new file is preceded by a plus symbol Each hunk range is of the format l s where l is the starting line number and s is the number of lines the change hunk applies to for each respective file In many versions of GNU diff each range can omit the comma and trailing value s in which case s defaults to Note that the only really interesting value is the l line number of the first range all the other values can be computed from the diff br The hunk range for the original should be the sum of all contextual and deletion including changed hunk lines The hunk range for the new file should be a sum of all contextual and addition including changed hunk lines If hunk size information does not correspond with the number of lines in the hunk then the diff could be considered invalid and be rejected br Optionally the hunk range can be followed by the heading of the section or function that the hunk is part of This is mainly useful to make the diff easier to read When creating a diff with GNU diff the heading is identified by regular expression matching br If a line is modified it is represented as a deletion and addition Since the hunks of the original and new file appear in the same hunk such changes would appear adjacent to one another br An occurrence of this in the example below is br br check this dokument On br check this document On br br The command diff u original new produces the following output br br Note Here the diff output is shown with colors to make it easier to read The diff utility does not produce colored output its output is plain text However many tools can show the output with colors by using syntax highlighting br Note that to successfully separate the file names from the timestamps the delimiter between them is a tab character This is invisible on screen and can be lost when diffs are copy pasted from console terminal screens br br br Extensions br There are some modifications and extensions to the diff formats that are used and understood by certain programs and in certain contexts For example some revision control systems such as Subversion specify a version number working copy or any other comment instead of or in addition to a timestamp in the diff s header section br Some tools allow diffs for several different files to be merged into one using a header for each modified file that may look something like this br br Index path to file cpp br br The special case of files that do not end in a newline is not handled Neither the unidiff utility nor the POSIX diff standard define a way to handle this type of files Indeed such files are not text files by strict POSIX definitions GNU diff and git produce No newline at end of file or a translated version as a diagnostic but this behavior is not portable GNU patch does not seem to handle this case while git apply does br The patch program does not necessarily recognize implementation specific diff output GNU patch is however known to recognize git patches and act a little differently br br br Implementations and related programs br Changes since include improvements to the core algorithm the addition of useful features to the command and the design of new output formats The basic algorithm is described in the papers An O ND Difference Algorithm and its Variations by Eugene W Myers br and in A File Comparison Program by Webb Miller and Myers br The algorithm was independently discovered and described in Algorithms for Approximate String Matching by Esko Ukkonen br The first editions of the diff program were designed for line comparisons of text files expecting the newline character to delimit lines By the s support for binary files resulted in a shift in the application s design and implementation br GNU diff and diff are included in the diffutils package with other diff and patch related utilities br br br Formatters and front ends br Postprocessors sdiff and diffmk render side by side diff listings and applied change marks to printed documents respectively Both were developed elsewhere in Bell Labs in or before br Diff compares one file against two other files by reconciling two diffs It was originally conceived by Paul Jensen to reconcile changes made by two people editing a common source It is also used by revision control systems e g RCS for merging br Emacs has Ediff for showing the changes a patch would provide in a user interface that combines interactive editing and merging capabilities for patch files br Vim provides vimdiff to compare from two to eight files with differences highlighted in color While historically invoking the diff program modern vim uses git s fork of xdiff library LibXDiff code providing improved speed and functionality br GNU Wdiff is a front end to diff that shows the words or phrases that changed in a text document of written language even in the presence of word wrapping or different column widths br colordiff is a Perl wrapper for diff and produces the same output but with colorization for added and deleted bits diff so fancy and diff highlight are newer analogues delta is a Rust rewrite that highlights changes and the underlying code at the same time br Patchutils contains tools that combine rearrange compare and fix context diffs and unified diffs br br br Algorithmic derivatives br Utilities that compare source files by their syntactic structure have been built mostly as research tools for some programming languages some are available as commercial tools In addition free tools that perform syntax aware diff include br br C zograscope AST based br HTML Daisydiff html differ br XML xmldiffpatch by Microsoft and xmldiffmerge for IBM br JavaScript astii AST based br Multi language Pretty Diff format code and then diff br spiff is a variant of diff that ignores differences in floating point calculations with roundoff errors and whitespace both of which are generally irrelevant to source code comparison Bellcore wrote the original version An HPUX port is the most current public release spiff does not support binary files spiff outputs to the standard output in standard diff format and accepts inputs in the C Bourne shell Fortran Modula and Lisp programming languages br LibXDiff is an LGPL library that provides an interface to many algorithms from An improved Myers algorithm with Rabin fingerprint was originally implemented as of the final release of but git and libgit s fork has since expanded the repository with many of its own One algorithm called histogram is generally regarded as much better than the original Myers algorithm both in speed and quality This is the modern version of LibXDiff used by Vim br br br See also br br br Other free file comparison tools br br br br br br Further reading br Paul Heckel April A technique for isolating differences between files Communications of the ACM doi S CID A technique for isolating differences between files br A generic implementation of the Myers SES LCS algorithm with the Hirschberg linear space refinement C source code br br br External links br br diff compare two files Shell and Utilities Reference The Single UNIX Specification Version from The Open Group br diff Plan Programmer s Manual Volume br diff Inferno General commands Manual br File comparison at Curlie br JavaScript Implementation